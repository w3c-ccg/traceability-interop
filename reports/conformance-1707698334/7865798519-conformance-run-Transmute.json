{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2ea4fcb6-9b9d-4133-897f-68056b7d08ec",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4c419764-a001-4c28-9f49-ee65ec57be42",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d649599d-266d-40c0-a59c-c609869dd12e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c388180-e61c-4304-8f49-0a04977454d6"
                }
              }
            ]
          },
          {
            "id": "08b997f4-e33c-4152-926c-b7f79535ce50",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69b77d12-c2b8-4113-8295-76471446d947",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ee03cdb-6084-4edc-b2cf-ee77b53134e8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "caee9df6-aa57-4b74-87d9-655fa6fe4471",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1b544bfa-7768-4c06-b649-42e5eb9cfa71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e54812bb-d8e6-4f62-af73-7116eeef4b37",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "736c64f3-9251-4d85-a415-4c07ef632030",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "489813ca-e4b3-4ae2-b60a-6df715f4460e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5dc54c0f-1fc1-43ed-aebe-8bca9c9a1123",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e43c1be-91c6-4720-8622-e234c57015dc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7779f92-830a-4802-923a-4c1be16e45b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed241086-f1c0-4580-8e13-e3d7fc749c56"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02100c66-1579-4618-a8c9-587c0a3a0ea4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fe4c1aef-e6e6-460d-887c-03526bf5c856"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7982370-2c07-412e-a351-ce5d2d377213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a9d3aad3-7947-4578-8d67-ef2490fabc47"
            }
          }
        ]
      },
      {
        "id": "7081fd13-b850-4498-827e-82d6032f96ec",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "216b4aef-8e56-416e-8ea2-5772090271d6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f638fe5-2acb-4a40-b806-554735acdb34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c8b17676-1177-43c1-8a74-f3c27226d5f2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe2688c-6b3b-4fae-b974-d3327ba01629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bfacdb2-94cd-4b5e-bbbc-982c154e2e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d569e6c-0131-4f6a-92d2-a679cb549bd2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75fa6c9-da47-4c58-af61-e5ce7a25ffb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "397106e4-9d98-4ade-a63f-92262e820f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7aa9f0-ca59-467d-973a-ca0c9a85ecee",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7082f5d1-f33c-459b-a31c-815d4b9df5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f1600da-949b-4210-87ec-df6d25ae949c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a51218f0-a91a-42ab-9cd9-4eeed34ee5e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdc4e267-bb55-4e1e-ab00-354a4b10b289",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f938ea12-7678-49d4-856d-00d041e49353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce33c15d-8a8d-4507-98dc-86509b322152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31a5e30-4742-463d-982c-f0ccf2599a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcab9e8-d441-4651-af0f-77eaf2b98462"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d6740d97-36cb-4a24-9c2b-fa01a9c084a4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a921bf3a-9e75-4141-89de-961f764d302e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2df1f831-4908-474e-b40f-d417e4616455",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "12b62fce-27eb-4aea-8fda-c28aaee5db85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd11950a-b824-46cf-8c40-49e270e1af8e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f171343f-ba4d-49ea-9b20-87902bf7a79e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e7494c7-a48e-4b26-96bb-b353bdd22b1f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e494b7c-b8db-4106-b7fd-2ff27d5d1d8a"
            }
          }
        ]
      },
      {
        "id": "3893fb6e-8cb5-4ffa-b8fc-d091cd933956",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "cb4ec847-9c61-4269-a6e1-54ed558070f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1374287-31d0-4ccf-95bd-7424ff4c964a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "91cb141d-9260-4b89-a91c-015040d6b9f3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d661c7-680b-42a2-9a40-784150f83acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1bab493-26e4-41c2-afa3-47b0fe061ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fa3402-300c-4cb7-8a46-2f4ea8601aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7011e43e-b038-497c-8214-594a86e33058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9efbb4-cc13-4aa0-8254-0edebcc53a80",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e48d83-bc00-4aa2-a1b9-8c9cd11319ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b65a97-64f4-48ae-9915-2be7998bad70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fdf124-86b5-4d9d-ab0b-9248ee878726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a03805c7-528d-4f97-8d9f-80f405871d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed8f1ec-8985-4594-a760-4a0572dda395",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c54eae-2761-4bba-a4aa-348cd0d69cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e660e3-0ed7-4d92-af98-726e4bd46cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ec2699-5323-457a-a3dd-d880286fec27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "086c0ec2-29ce-43e4-8caa-e888c3e0d00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55babf98-34f7-47e9-8b2e-f01c32104844",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fca419-921c-41d4-8337-599cb36a0f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5111c4-041f-4751-8461-a868ef6c69e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32492156-66aa-4feb-905f-3d4115ffc90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "758dd7b9-c261-46a0-9ebc-c9817aae6d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc58996a-aff4-440d-8c2c-cfb8a72a0dab",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffbd481-5884-4470-beb5-14299dca93e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7488caa4-148d-44c0-aad1-28a0e20b8678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d29ba3-98df-47ea-b129-6f41d026900c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "966fdd9a-591e-4609-992e-bcd92443f09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d664cd-85a9-4f0b-9300-e147f0511935",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71e4593-9942-463d-a497-ef08779cf8d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6fab316-9fe4-4931-9533-3037d92fb984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e26831-0307-4ba1-b5b1-b4aa6426fe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e55e1293-f8d1-4d71-8ddb-ca052910444c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1db62f7-25ef-4744-8480-4963528844c1",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee31b00-a7b9-4d59-8588-5ca2601e8ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef9acce-416b-41a3-bd43-af97d2c314bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0ec2de-94bd-4ba1-a843-bb719ebc6645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6776574-5ee0-411f-a2fb-417b4b3dfa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624137a7-b164-423a-8e3d-7cd538218ad9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb52ceec-f4a6-4c21-b80b-dd62f63aa134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724efbe9-9230-4e3c-b3b6-0069f407b662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883461bd-cfa3-4e4b-8080-582d6b9e1f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9eee0121-55f9-43f5-9448-4a6058da783f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee51403-2779-4511-93a0-978824b5d2aa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262af366-d144-4fe1-89e1-8137e6d26099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ecd33f-845e-42be-81e4-f4d13ac7a76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90e0d6c-915c-439d-9e3a-f3c0368aa74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "551af964-de26-4314-a2e9-cb7607f20d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff83816f-b0d1-44a2-9702-549e3c04d70b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7daf1b-d11b-46dc-9677-9e76e68fb83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b8c78c5-6127-45ed-875b-f3137121e829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c871688-e4ec-4d0e-9f3b-134c48093d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56a97342-5f6e-4421-8bf8-8a398fbfef42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4127f77-fd09-4225-8fb4-b4c9f9b3aec2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1e67d4-89ac-4252-b534-38d265925a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68445921-00ae-4850-9ec3-18b3678bb817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de04d3fc-ab09-462b-953a-350e0e32b289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9d160b4-bdff-4fee-8324-32a12bcf9260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ef46a59-de52-477b-827a-9c5b58a9cdb9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9643f01b-a351-40e3-8764-e6f17cfd448c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76874c2e-8001-4cd9-8d13-2faca18f9511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7395cfcc-42b6-4747-b48c-eef4bcf33d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "873343e4-724c-48b5-b679-75fe3dcb0186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010a1478-8e6c-4e4c-b5a0-33b2f1a2028a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a87afa-bd71-493a-81f3-64d2b0b4efcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d77062c-7e74-4d30-8414-e329f0e511e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170e21e5-ec8c-44f8-8a87-9efa7a7e611c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "041cf004-56d8-4270-8a69-4ac0dc30f1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98381552-ae3d-4f83-a095-0d4ad6ac7658",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea800f5-299a-415e-91ca-2a1a065847e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc97018c-adb4-44e3-a8c4-45ea06ace9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a6a993-ef9b-4bf7-8983-1201e277f449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc6aeb7a-0a2d-4b43-a559-a5aa1c3c0143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8e3015-70c4-440c-afe0-f9dd6b4fa8d2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ac3847-8257-406f-b997-a7da358b5ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e81f3ec-be68-4f5b-b98f-83d3b2db98cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0aa50b-ceae-4434-9e49-aeebb755ed12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b278201-274c-4836-85de-fb951c7a307b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba2335c4-ad37-4d6f-9bde-69b523022bfd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca6aacb-fe4e-4562-9ace-b31f4471aeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22219792-c8c5-4f2d-b94d-a8b859cb7ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dff905-4f79-49f4-bab8-370a0457fbc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b9e631e-b416-4cc5-8fc8-86b070559400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fcecfd7-e119-4b1a-a50b-0723b0676dcf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fce100-8204-40e9-98f2-02ac7016552e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83c6ed8-b3c6-46fc-af36-acd5724b3906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d926602-9e81-4091-9d6f-0c223357e09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31d2c80f-44d2-43b3-925f-d0d2e52d80c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74396b12-0969-40de-bf6e-67aea57c4b8a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78e2384-51c7-4896-a684-47e00e584a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c9b4f3-fbc4-45df-ad1a-16abb12e3bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ca0bf6-93d5-4255-985c-8559249d50c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76421cc-1c71-4eea-8d4a-370a02117ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9adfcc8-0d39-42e1-8d6c-b7abc3e1a1f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1005a528-bb80-4ceb-b166-f164dc8175ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f0d6dd-33e7-471e-94f5-cbd56a393897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dea898-b803-411f-a5bc-fd511cdb4a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92db2646-eadf-4bca-ba51-5c8610613e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeb9d5b-c9a7-45ed-9db2-5e8802e5194e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3846c140-c830-41f3-b56f-ef6817302d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f6c6ce-dae8-447f-b284-877413194f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887a2fdb-7f9f-484f-a9c8-29f202fa8365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca563392-5999-42dc-ba62-15368b17dc0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cc0826-0c88-4ed8-af8a-f7092a06e48d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56d6fb3-5e55-4b9f-a1af-96e431cd12cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18291d50-a22e-4cec-8249-664e593bb55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e50038-8feb-42f8-8c4d-af9817052ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79fd7635-238d-402e-8086-7c2124f055d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f688e29-ba53-43cc-b6e2-bb9e371169d9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a43dad9-89c5-43a7-bf7a-5e0fa0d281bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b77175-f9b3-4786-909e-41fa77957a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8451ab8c-c3a6-4dc9-bfe6-dbdf18012058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f89c4b1-331c-4e5c-86b8-940210dd7c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ed632b-cf2a-4325-a03a-dc77e34848c5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9f4825-d7c2-4181-801d-e0432acec300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9771da55-9785-450e-8ac1-42777f3dcd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4528351f-d72a-428d-9b1d-893f4abca3da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d16b38da-02a0-42ec-822b-88c7d1ec2ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6411f799-d3d0-4e1a-8c42-252b424e59ad",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ed9411-b536-4d85-ae97-ce0ba4209845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca044510-d80b-4718-a066-e188435f5890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d165c8-43c1-46ab-996f-6c4c458d5e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4593848-5b5a-4611-9dfc-aaf88792c660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708dad35-1c8c-41bb-a323-77ccb075f1f6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "263ae5c5-74f5-458c-9e1e-3c6d64365828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326eaac8-18a0-4c91-9820-207873f44b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a8ad2a-605c-4b2f-9cd4-0f38bf4b983b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecbaa02-bf04-4b3d-b965-7ad29cea3779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e1aa09-077c-4d6d-b2c1-fc99520be5a8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8609445d-aad6-4aed-83d4-f615a518b737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2dcddb5-f786-4ee6-b90b-70a2f99674ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a2f229-fbd0-4e33-91ec-6b259815987f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b90583-db40-41e4-8bdc-9464ec12de21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711f0dda-90d2-44bf-ae44-440ad3490eaf",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f062fd73-ef60-407f-bc4a-bac2ccbcccb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236d5cb4-5a03-4aa9-9cf7-09bb2a246869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9065ce2f-0488-4489-a5d8-7d5decd052b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbad1d11-e996-45ca-84d6-ccb8f41cb829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2dcdcfb-eca7-4df3-810c-e2856b186f9d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a60a48a-7ffd-4d51-8839-42963514ff3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdd278a-33cb-4738-9fa1-45fdeb13c403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d787d2-7798-4b3e-a026-da666bf26fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9af9d34-f604-42d1-9c06-b2e1b33b71b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5570dbc-acac-4e1c-ba3a-b5b54fe5ee38",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331b7a82-e0b4-4f91-9302-17a331f1f0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28acbf40-bccd-4ef0-bb81-86fdb7747627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6e27b5-4d5f-40e2-ae9c-3c9bd2fe3d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc630bc3-2ae4-45a8-866e-f0db08802161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d778565-58f1-4ea9-a046-c7d5b5508e6f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697617ea-f98c-4125-9bfd-679746844f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8eaf22-76fe-40c9-a405-15cbd6a5880e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8316b28f-20fd-4afc-bd42-f594e443463b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc69dd4-2cf4-4ffe-93f0-bfd6afe8ad26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b72f8f-cf50-41c3-b818-10562cd75184",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f17085f-c8fe-479b-b98b-91590fe78a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bab89a8-3cad-4b60-83ef-939b1cbf35c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028bbd01-490b-4085-a992-7037113ca6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2559dbd1-e89b-4f07-bf46-38cdfe6bf3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf3541e-7882-4258-abdb-5edb4064df99",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c30862-a543-4074-8313-a6360741355e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a36dc0-9241-44d6-b4fe-8d739562c12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a5f6df-c80f-4706-a7f4-c622ff79972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adab0324-9106-4046-a5db-c4b94a5db00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9aacf27-2ff0-4705-b823-a1194ca5ccc8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f437d1d0-3e16-4ebf-afc8-00071fdc8f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecb608e-4023-41aa-8b18-43788dbd6ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9502b7d1-be53-4cd9-9e36-3c03f8dbeac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a139e9-a350-453f-9154-5e8e52344e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c18fc13-1cf0-48a1-a280-de4cde14fe49",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1027cffb-9baa-4b24-a5e8-2546ef99c062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f400fd-5a1a-4f28-9cbb-7690dfd323bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73998a1-f73f-4dd5-afca-eab5eb2fd175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "70d64910-dbd0-4b99-868d-69fd856f9e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f71494d-855c-4b6d-8fe6-85db1c1ea127",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12488b9b-3d7b-413f-bf7d-1916a710e9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95aa0ca-7eac-4693-8f17-737082437acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc994fb7-e999-49b6-b2c8-e59a4412fd7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "571e40a7-e204-4b98-9569-cd49645e2a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25de9ae4-c831-44dd-890a-856086ab3b01",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1982965e-308e-4db1-9232-41d012612f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5059ef4-f60a-4ea9-a6c1-d6966e50b20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba04f43f-3eec-4fb1-b20c-84c4f0abb8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd52318-eba8-41d7-8277-655f835cbb43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba83a37-61b9-49a3-b15d-d93784c0c4dc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc7678e-6c18-49e3-be2f-c6b61995d1ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d93463e-07a8-48ec-b153-55c6b561630d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18109797-b759-47a2-a511-34c695ff8205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "54c71b4e-6ad8-450a-8724-6e7b4cb956bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7f063b-6755-4500-be4b-73aafefab183",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b9f3cb-0764-43cf-b1e7-814bb779bff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af67f3ab-5f81-4684-807f-242d1f00d556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6118fa3-5508-4f6a-9b73-e0b2da950d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "411057e6-7562-438f-ad6e-e3147ee0c038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a65ed95-4b45-49c7-815c-9db637fda56f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59afdf6a-ae00-41af-a9a2-8fc68d2b2112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32aab3ea-4a71-4726-ba01-7949f796b9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c156ce4-a0b6-4407-91f2-602e37bd0b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccc6346-091c-4187-ac8b-0b41a9124d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3132b451-deb2-41a6-8b66-7bba6378aaf7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22ef215-9bd6-4982-b08e-f63a605dc422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c40a117-8730-4b46-becc-d7dd18bf6e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b842400-821d-460b-9692-3136636808a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "66b5a1a2-03db-44cc-85a3-46e39d8698dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e9cf54-804c-4a9d-96f7-383c37f94ebc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8020f8b7-c6fe-466b-b0fb-c201fcecdc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853085d8-090a-45c3-998c-e103b521cd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e97ac0-57d3-4646-b841-51cfcd2db804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "62dadcbf-80da-4f03-8329-0c63b9cba508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ff6cfc-48c9-44c1-ae05-29b951166ef0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae31a11-f0ef-468b-b559-5c7ba4907667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17851420-b2a3-4ce4-a8e7-18882eb3c15b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91714e2d-057f-4bf9-8eee-8f6e5deaecde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "65aea534-c7c3-4500-b47c-da4a043d5fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828ac853-9155-46fb-ac69-63692bfc982b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53e79c2-044d-4785-80a8-a3409d23872a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9672fe-cfa5-4ec2-8c90-358bce9a84a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9befd3b5-cd34-4b8a-9951-7311340910fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "50d6c114-38ed-48d4-97c4-1e2601fa4832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d801505a-4e79-4840-929b-9a2b21d75ba2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bde21e-fd4b-40e8-ad3f-6ca55c9bf260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bb24e0-3698-4d72-b6f2-14590b2c2b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c6aec2-ddf1-4f0b-b57a-1d8a049315a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e823b8d6-980a-41c8-9595-508803a56ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9733d0e2-c57e-46fa-836f-9415f21990b8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f322e7f-f976-45da-b534-7ce69af67374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ac57be-9b0d-4eb5-bc13-e2c54c728b12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8923d3f7-faf8-48ed-8123-435c54c6b341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "656de20d-7896-4b13-bad5-ac6a6632dddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0966cc46-2e4d-4874-ab65-c4d09f716272",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ceca260-f186-4320-9b55-a44fa7d2601d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1158164-0c8f-4aef-8a58-6be0b0a09556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5795f6-f1e8-45a0-9257-35c77b27d9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01eae0d2-d1dd-41d3-83a5-4f93cd6652e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce470fb7-8b62-48ef-8420-9057f2c23ab0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f07b280-ca49-4c32-80f3-dd31e3c3a2ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8988228-bf26-46f4-9eb3-fe4e54f8019b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a41bc9-96bf-4e30-a7dc-3193c042698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4e8c35-ef84-4ed3-b97e-b6fac1b88cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1471ff-65b3-405e-8be2-4c82ca9b3fe6",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe162ee2-7314-413c-b6ca-fdd7feb9cf37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab33ede-518f-4203-93b7-a6eadf3030f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96466e4-555c-43fb-9861-34184d86d05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d4f6d96-1cc9-44cb-a035-b932ee3d4980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09add42-88f1-4e66-9785-2ac98cb0a23a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f38b7c3-fb32-4729-b073-48c7dd29e442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc4e95f-980e-4118-b390-f6a70b5a33f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11926182-5338-433d-8bb0-cbda4cb28397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb58787-90e4-420a-83fe-78c948a7f59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f21f547-9a0f-4655-9ac8-826cdc3c2b2f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8584ea9-5102-4d71-bc21-02bf6000be7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9981167a-3d0b-45fd-9797-3c7cf9396b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9190d7d0-3286-41ce-a038-5e5c2a59f2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a56495-88ea-4c60-8383-9a01716814b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf7d623-5894-423e-8a99-7e10e133da8f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfd9ebe-a8b9-4599-86cb-1b00ed219ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "899d808f-5fe2-4876-b8ac-36f9560fd9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd473f81-cb28-4c46-916c-35e33104335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b034df5e-ac12-409b-9f59-0776ccb87711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a469c9-fccc-4b3c-b427-54a10b23dfc6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83a6440-b3cb-4500-aeb7-b8b002828f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be796631-7642-4472-92e4-8d6039c6a4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f099c5ab-f065-4279-9f9a-1299b1b061f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c229451-1694-4c23-98be-604c3832d785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de59d75-6d6f-4309-b4b5-8123d43274ab",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcaea3fa-bc98-4c38-b509-886b6e2f9c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b65bfd-4283-4abd-91ae-0950252972f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01faae1a-ad34-4f89-90c8-68025f5fb8bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf3506b-521d-42df-afff-eb5912364c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b28c40-c2b9-4910-897c-5a3bf67925a7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd920b1-57fe-4557-bb7d-f13c0746de2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96a2678-186e-4528-b903-a6118636db22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa081e6a-d559-49a2-b233-bde416f8c0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b87cd40-684d-43a2-9c55-7ae048106299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724a152a-2280-40e0-b27a-df03fcdcffca",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2413da1-1bdb-4812-a8c9-45449aa66678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016a1d94-cdf3-4ae0-b0ce-4b9f79408cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0dafe4-83bb-4339-bf29-fd43cf5d09c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "433fdc56-43a8-45d4-a469-903d781431aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c026bac9-a465-479c-8923-2c68efbf7ba4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ff42fc-e4a5-41e2-9908-03e3e8edba80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992712f7-35a1-4139-86e5-90116befdeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbcee29-a1f6-4b6b-87e3-c89e703ac6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f80215da-889d-4356-9b2f-48ddc4cc4816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e9811c-0ed2-416e-8843-9073c80714fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0148f076-9723-4e98-bb93-c4f8cf2c765c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3881ee6-2241-4219-b430-a61d9c816b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf72017-f1e4-412b-9541-d9d428704c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7d956f-2c39-4140-8a9f-f90fd988f553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87d8822-59e4-4b7c-ab9c-4c52046a0dac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b1edee-030c-4c05-98c9-66601cd3e0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b6df8c5-ca63-4464-ad8d-4ac7292a09f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aad62c7-5a08-43a2-a3e9-4b8f782bb18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee16ff2d-d658-49d4-bcef-95d8a005530c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e26ec6-9792-483f-9006-6e776649b29f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efbe27f2-996d-44f7-8923-88ca7364ea68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2be8cb-887d-4de7-adf2-a0b606befd12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a4f6a9-d62f-464b-9399-1f5cf06bdb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6ebfb5-ce69-4a11-a5e6-3b2f68d77cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5dd681-27bd-4f2f-9a5e-1ae84cb3b69c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa459cae-be88-4f87-b751-ba392474cea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d02beee-638c-420b-8359-16afa692d372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb375502-7c76-4feb-9e1d-bf3efedc4e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "442c5edb-fad8-4c3d-8e18-7bb78a9e3380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cafb2bc-5746-4daa-a926-0d76a412a84a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634b2b04-cb2e-40b0-a93a-3ebc93531ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbe1465-3b7b-4a3d-b304-d6e8b0df597b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d09a11-a30e-41ff-b1dc-7a3da5da6d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "69edae1e-dc7b-4ed2-962e-9f0da0ad4c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c2b1ea-0840-4720-829c-5c6b704aa2b8",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de67c74-c185-4fb2-b862-740d2f1ed4ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b903358-0698-4185-b1ea-e8ec724a445c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f103fff-11a7-4c20-97b8-83a6ea89e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eadd7dd6-e79a-4a7f-b99d-1fa7724b45b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36132cbc-1cfd-49d6-9934-12084dc7b1ba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92223b8f-e298-4ed5-9b36-7da9e4d573bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ee56bf-6ed3-4d63-b8fe-ec0e982bc1f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87bf46ad-7604-4388-9d56-54d635611304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2dc64a4-56d7-4a74-9e69-d86b8405961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2f7a4f-9c83-413f-a25d-cfd943956710",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c95df1-8458-416b-a0c8-76bb13754fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d61d781-d0cb-4476-b96b-2ae0edc24599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2414f32-ec80-44cf-b417-10a6734c2c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af5b7573-62d8-4997-bae2-dc4727af7e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c88f97-7ae4-4db4-8cf2-82bb97913a04",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3d4ea3-d9fc-4ff7-bc4f-94a68a3d4762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "774faaf6-ff35-4e31-9939-7bdc018da93e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7e1d31-9da7-4ad5-9747-4cbde16b5d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3465b2a3-3b47-484a-8dfa-84b6a9209ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc75d473-2949-41dd-bae0-3ae220025a47",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add51108-6ae6-4002-b7af-3dd6dc8af076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d5377ac-0259-4fb7-ae8f-3ac5c7d85fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c44c189-cd13-4b73-9b02-f4a876ae1756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1518b6e5-7b50-4b45-af4a-32c2073dd034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7a2e0a-201f-4b78-8f8e-189eca1addf4",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2e45e6-28e6-4564-9f59-5ebabeba2c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d44606-e7dd-4c89-bcf9-affb2244f135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca42efcd-dddb-4dd0-93fa-dcc81b8cc91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "889c3e44-4f09-4715-98af-9f37de03366b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49288008-dc96-4de2-8138-04c2f8697f46",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fdeb6d4-a19e-4cea-a9aa-73241191369a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d900b4-c85d-4160-872a-433ce0db27e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32188f5-252a-41ed-83fa-873c986be55a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a320f177-2630-4e67-a46e-4a7d8a7af370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07b4b061-03f2-4e1b-b405-9a571684898e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b3f913-1c40-4ef1-b53c-d0860e71a53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f70bd68-58d5-4396-aa68-876a8eb44ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692d6190-9dc0-46e7-98f8-a289f1bcb9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12bc3dfd-223c-444a-81af-e8867193d68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b8d876-6386-4311-8e9f-ffed3b55d076",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "348473e0-173c-433c-b086-da222af28dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e65bd1-b9bf-4a60-8ca9-fad81fda4f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0ecbfb-0a0e-420f-80c9-9cab9e4b2707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f902c2fa-697a-47c6-96a8-b09bd6929841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff050352-3e14-46b4-a276-8c0861ff01fc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e821a686-da03-4d54-89c3-b027b20e1c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e965fbe-c738-4fce-b30d-4f748b783fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9897f3fe-8ff7-411b-86f3-5e296b6842f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d31331d3-bb47-43f5-ab5f-cf3fb46f194c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f133ec-413f-4997-91f1-707882c1fc7b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce21f09-8fc6-46b6-83c8-49855d0322bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ee5bc7-3ce7-4f5c-b5c2-8c3a5b9e061b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88560418-c9ea-4c06-8afb-31a2f92fcec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5795938-6432-46e5-a5ad-c11397b04613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f50ca25-bc76-4e91-9d51-163351805151",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bde6c94-d8d7-4511-95df-def4eec1499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a0f3e6-fe62-453f-b5aa-09b934e07e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9096bed1-f600-4b1c-af1e-ad60ecd53b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35eda913-612c-4d93-bc48-a78e6fe7d5fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd1302a-6113-491c-996e-a563c6553770",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5b3386-6369-40f7-bebc-4dfb0d08775d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de40604-e279-498f-bbcb-0b51607dbb30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e73978-93ee-4b3f-892b-7757665e6006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0eacb585-a7b3-4c33-9551-f9e98f0ad8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7056ee0d-30cb-4a31-9b3c-61a9b99f5d65",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326e8396-5ebe-4498-b65c-cdb9da34ad5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a63bfae-bdf3-4d5f-aa89-eaa85686027b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdbf025-0376-499d-9515-b2b575059f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48badbdd-492e-4e4a-89cc-6ecd7f2efdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e5a213-9f67-4555-ba47-c466e2d07fd5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24893fa0-282f-4a5c-ac08-8a4a5fe4200c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4575558e-ac7b-4d47-92be-fbf4ccd91325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5802c58-64c4-47e8-b6e6-2c61ca8ba078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4725c0-3184-4d77-86c5-d5b65fd0fc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8afe0e89-81c9-4d83-b4d9-5c32d4ac8dbd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e72e832-e86a-4b80-a8f3-76dbb7501f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a898243-d656-40d5-9b05-1d461a96e3ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa653ec0-d660-400b-9564-47d32bd49d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1e9035-8fc7-4af9-83bc-785433307546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d044df9d-101c-4178-8a53-6121f1197291",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfaf8f7-a8af-44d2-9ae4-13329b86ded0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26c14e6-06a2-49b0-a0cb-dceea0cd2ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7afd14f5-660d-4e7a-a221-732e01e38805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcce22c4-1836-43c8-97f4-7460bb84cb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c955d8-d2ab-4cf9-9e4b-9886047890e6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b584f29-cc5f-47c6-b48a-5fbe3089ce65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e57c61b-75a0-437d-ad90-89a8905dccaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c73b6c0-cf41-4b2b-8fad-249ca010fe3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3363ec-dde0-40c6-8cac-a7f7297baf1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eaa2e12-5580-4d84-a394-a1ba28f66c88",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ecacef-051c-4d27-8da3-5f01f96cabf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f45eefe-103f-42eb-81bb-a5a15036bb68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ceacd8-a3f6-4d17-acfb-d14247909b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c5668c3-51a7-424a-b1f7-c9a7108b2e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef3ed7c-21fc-4892-a1a5-720ddf66428d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fbc762-f97b-4e8c-8b67-e105393d44b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f08bbbd-9036-4d39-b2b7-77801e0b5848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a79abd-4e47-406e-83a8-d285a81f9c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b937661e-0452-45d0-a035-e4e715e493b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860be3d7-7211-4d0c-b383-3793fa674d90",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5027170a-2513-4e6e-9bfb-d75a1ad2e3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3daf1e85-a2bc-4160-b61c-fd5f1424ee2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9642b30-0f18-4bb4-8652-2e5357f28e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3884396-c6ec-488c-8553-c0213edb9087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ef50b1-ccec-402b-8a3e-d94c3680caf7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9559b07-bc3b-4476-a533-08beaffcd698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3ebd4e-0cdb-404e-b05b-e7a03af2da50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fdcca6-7727-4c7a-8dd4-5f88e7b40c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7833ac61-3d01-4b14-ad08-5f165447bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fde110-737d-4ff8-a2bc-e6ca14179fcc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31a7ed4-6a8d-4afc-844b-907c50de0b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2665ea7c-ed33-4d63-a1b9-5ed8796efcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "938970a5-d8f4-40ff-9640-1dad1465e6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eae558c3-bade-4b8c-8de1-252bc45c8334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fe7aa4-d76c-4670-aba5-abca8a2f7db2",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf4f49c-6388-44a3-8df0-16e368679118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a1f379-fa5b-4fca-a58e-aa3ae08c3e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0977ac1-5cac-4379-be63-e5710bca2c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50c9ec40-7b57-491b-bcc0-abab73987b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2277cc00-f468-42a9-baed-7124803d2f43",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35973c9-7b51-4cff-b7dd-2377740d1adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c22738f-aeeb-45d3-bdd5-2e46708f59b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecc82dd-cec8-4a0c-a925-290e2c20f919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb750db-fd35-47fa-8b3e-3c6db2b9deb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888d82c5-f46f-459d-9d8b-02d5b8d0d8b4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89ee593-b635-4c76-903b-f77f5af7922c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeb77ca-34f4-4f6c-b2ef-0fa78b65480e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850c2fd8-cb1d-468f-b562-ed884e2790d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "48e0a305-d150-46fa-b132-4dd75b62eeac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2180d7b4-729a-488e-a547-fc2df46a94c5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507166cb-1def-4d7d-959a-e0b9ca5a3fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc0d7111-80ca-4964-8c93-59d167cdb4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7980fd-774c-409d-8882-744bf2e11212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f76a4406-5283-4130-9424-709b7e44d154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23340e72-be61-49aa-a917-46952d1f2e35",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d43e759-dacf-4a0b-86b4-14bdbb2113d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da10b5f-072f-4186-ae74-ae53101f9012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efe7e687-1222-441d-9fca-d8b86ec96619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d10a2ef-3cd3-4420-a263-cdc92c61e6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e22717-6e68-4c9a-b7e7-e035e176e7f7",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c8fbee-7240-4fb6-a0ab-54c2019d3fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60453006-3eb7-4dc4-9822-ee392b1741bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c64792-b4e8-47ee-8912-1496423ca6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4078b297-7d5f-4863-93c4-b09e34fe301e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c75d78e-3b14-499e-ae23-2f0821d775cb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111090d2-7ff5-493f-afff-d92b3d774692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "268100df-dd81-417c-9a46-d5d53660aed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88b4320-ac91-4755-a133-c0d24027cc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aedcf314-964d-4fc2-8f3c-019e4211ddb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b4edfa-fd32-4690-bee8-5b9c3763a7c2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b57993-cf8c-4785-82b1-83017b36abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3c7fefe3-3833-4418-82a4-f7357d68eeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4524bae-6dfa-4d36-b950-676736d8a8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd8af0b-4a85-45cf-a64c-0efdd7ae2ee7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33674c1e-cf0a-4ba6-b1ba-66d075a8ff77",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b32bb1b7-b69a-4462-90d8-c1428f3cc3c6",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb7319d-199b-4c12-860d-3c8a1dbfce8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86d9e3d6-763e-46df-8510-dc54ee6903d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a4dec-d325-462c-bd1c-d1f65d71e616",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93cc896c-2fa2-4238-bcad-6a7be16f76c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7507aa3-5fcc-4433-8940-9a60d3fb6e0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6b17940d-bef7-4745-9565-47a3914d9f63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b345b25-7bc0-46f0-8b70-4c59cb131b8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c924660a-333f-45ab-9ce3-6a0c24900fdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc5751af-7234-4158-a779-f4a76f4310cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7371ea25-4a8b-4426-bf4f-068a83d1ef35"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "012e5397-6925-41fa-9e24-19009a2f820f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6899942a-0707-4086-b138-10accdb9e6d0"
                }
              }
            ]
          },
          {
            "id": "df0512ac-fe71-418f-bc85-16a0bd4f7547",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c633331c-7d85-4a7e-8ac6-10c10171f703",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4b32da7f-8248-48b2-83c1-62e9ae5e98ae",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2efd1ce-82d2-46e8-98c7-55f4b2ddad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "abd3d9a7-c1fc-4681-ae5b-8d4aa3cda789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85c34c4-e612-447b-893a-086b27552f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced61bbc-cd58-4d5d-85ae-96ea20cb30a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "189a9942-58a1-4135-ac5d-c7e63b594e95",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53aa7d6f-6d7a-4ea5-a5fd-9f03d394c4c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37e480f8-02d2-4648-bec3-4c6b84f1b0f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bee9276-da0a-4ccd-9303-b9ab39b83368",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b606d2d1-a8db-4630-a6ec-7f5eaa7125ec"
                    }
                  }
                ]
              },
              {
                "id": "c4fa248e-ad3a-42bb-a7f0-6b3a542d728a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5818fe82-f240-4516-9497-d32d02e65022",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8279bef-a8c1-4385-b454-de05e45c88f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3028d6fa-0c5e-4c0a-a843-54c480add7a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6a69c21-4d35-4083-b42c-00e0afd85e37"
                    }
                  }
                ]
              },
              {
                "id": "a5c936fb-6bab-46ef-a4ea-f8f9ba5cc8a0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9db83614-c729-401a-9870-3d4439d19610",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d65379e9-ae44-4de8-b932-407d2b5bd0ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73b36ba4-baf5-4ed4-89b4-cbf6955071d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "85d9f0a7-0562-46ac-ae74-bf68b5264b1e"
                    }
                  }
                ]
              },
              {
                "id": "6e06ebb8-b488-4ca9-8980-b4523a4b0c17",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0d308a63-df66-4a79-9e2a-75ffaa7fae41",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3045dd1e-3281-4e82-b23a-a6df5928c6a3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "236150bf-3c25-477d-a8f7-b2e8ef2e6c1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e80af708-a135-4afa-b5f3-b859ef4a41f3"
                    }
                  }
                ]
              },
              {
                "id": "edc8b78b-86ef-4924-aa33-9c69f67d06f7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ae5a4e0-a16f-4859-a45f-58b5bcc8b6b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe8fdac7-cd8a-4297-99dd-c676806444db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d3b1398-6748-4540-ab23-4e9a41a76a80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "9de57e84-be3c-4d8c-920b-71f41c855f6b"
                    }
                  }
                ]
              },
              {
                "id": "bf16634d-3e23-4a8b-9e50-943214e6b8db",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd27351f-b190-4117-bff0-a63d88033850",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2497fd2a-d9d1-4f32-9f82-5d4c5e35f280"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d4830ca-72a8-4bb8-8b05-c42503477fc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d0e96d6c-fc40-45b9-9eb5-bff37702e40e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "447a8733-5f23-46a5-b031-2df4d8477d60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01f05038-eaca-4886-bd72-71277afa1431"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68acbfd6-1306-40e2-b529-caf6dd9f94de",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9bf91d8d-ef3c-4931-8724-191f642a0a52"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8630d9c7-7b45-423e-9839-b3e46edbe2a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f1b9ffdf-2e32-4e9a-9fc7-bd5a9075f2b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1046fc7d-f438-472f-abac-ba34316186ac",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "607691aa-0969-4bd3-b992-061d566942ad"
            }
          }
        ]
      },
      {
        "id": "1ecd7ce8-7174-4538-9522-97b605c7df6b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "51ee2d3e-9a47-4728-893e-145cfb9ecc20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cdfd9c7-0159-4715-a9c8-02f9af0c1d0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b05bc982-124a-4e7a-96e0-b6278fd3eb2b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80831971-a9a1-4c85-a816-0c7b0c092582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690ce859-bc1e-454e-b40f-288b4907c7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0e00bf-b67e-48ac-b12a-59befcd64b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c855e671-01a5-4c9c-9edb-dfb335d0f493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659e8b8f-50e4-43cd-a369-fed75ebc7cdc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dcf8662-e86f-4cd3-bde4-09aa3b0adc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0561a059-71fa-4464-8a5e-52394b80119b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676bcc4b-6951-4c8c-a410-6f18911a8482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "65facb36-6025-4417-be59-d799e0c837ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1651573d-21b2-428b-9d7c-056aefc8af5a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84aaf711-453a-4a0c-a9f4-ce2cd413dba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c482e5e-0cf3-4fd2-8432-7ef03fddb0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd66993-a7fc-484c-9a7c-7d996c6767aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6790b507-abd5-4d02-92c5-48d9d736e89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5734af-8b14-45d9-8ff4-6735840a434d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "057a688a-0491-4e74-88fa-5efcdaadaf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33b89204-fde8-4029-8471-fb6d9f2dc2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22862cc0-7f4f-4c77-aa70-2ab57d14aea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0b5b5b-106c-4537-bcad-7bbfa279e80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c14b38-53c7-43ed-b3e6-a6107d9118b3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adfc7ccd-e7ce-4cf0-821a-7d47adae8385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e69d145-c938-4876-989d-da9fa61a005c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0629deb9-6a00-4d01-adeb-54e0fd0d55f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "725209e7-4ebc-4d23-873e-38e334f190ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a558f32-1a84-47b5-bf27-7f3451ad026a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3376322e-9c7c-4bca-b019-1c7a4694aa69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04c9029-097f-454c-99f1-ca39df6b37c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91645375-de60-4871-81fa-a4a0f5b685ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e01bb17-0a4c-4490-a831-258e1d7df720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e4ccb4-ef52-4465-92cc-b5be4f1c61d1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9def453f-7845-4b8f-b3d4-7b5eda2a1a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6a5613-0a49-447a-9324-a680f43e39fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a91a0a-59f9-435a-863a-06d951333e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3cf360-a1c0-4843-a29d-f7220c909ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6556252b-bdc2-4d8e-9701-166992dd6541",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "435d3569-7562-49e5-918c-b63586d1234e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c9a252-ba15-46d0-8c4f-1e85cb05c02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ca5638-c273-43fe-b83b-8dcabdadfc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53e8ae9e-6c09-4b03-be6c-f1a921e1338c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c8a058-a4b0-4089-8cf1-b88497cd9ec3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5743ca-b4b1-4255-a7a8-6328a22a04b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3368ef94-518c-4d7d-8bff-d482a47abcdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2296ea63-57de-4d07-8526-6a6c7d98a31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "286c6ad8-95ed-4535-a8cd-0a54621006b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1595c226-4c38-49df-b7ac-2a1f57f9c92a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6676bbac-622e-43ad-853f-e499959b54df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f32e98f-c366-4c80-8743-2214d4509817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53055cc3-39ea-40d7-8597-5e87deb9441c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8b39a0-39f9-4ce0-a93c-1e57696330b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee9a8b1-90dd-445f-a636-625627b18090",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6f8e45-4cdc-4680-a683-b252d4dc4d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0ef96b-a66f-4f2a-9064-6ed447516327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66f6a5d-a768-4310-9fa4-70a474bb3603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f76d4539-cd58-41f8-8dee-287b5566a0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf64f09-fb10-42be-8c9e-9966f3c4495c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4021f3-8011-48ce-99f3-17dc87efae3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e111341-d714-421d-9251-9a0241d4b6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159e16f2-7919-44bb-a0aa-ece9f4c8ce6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4dd7285-8c22-462b-ad73-98d6f3dc03fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5579f561-c564-438c-a1f9-5120a5395aa0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775a109c-cf7e-4300-901e-7a9f2720ee53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b689a97f-ad30-4b7c-8bb6-02f68c2ab3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aeb635e-8d97-4fed-b427-acd3bc9c4ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6615456d-bae3-4ae3-9620-8185f2c217c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83de8557-cabe-4abb-8fa2-4bb0e113f006",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702477b3-e436-4901-b44b-f9cec667bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce902d56-4e15-4a06-adf8-c2ca6d5cd6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c10f439-6730-425c-abda-a56046d6029b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f45c7b77-7fe6-4b81-817f-f46f1ac06271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c049188-8224-487d-a48b-267f07abf5b1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "952e0237-125a-4db7-a8f7-3610ce7d0fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd164ab-6160-4d7b-9f67-bd4363c216d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad085d6-7a2f-474a-aae4-fef1a33c3f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7db910-558a-44b8-9363-ccf3f6dda514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b1fb9a-1414-4f55-8643-a807f178357c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc47740-97f3-4c4d-b302-5a1554c5a610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "942c48fc-9d59-4b3d-9f3b-aef4a815a0e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a714c2d-4cad-445f-afa5-1f062b13c62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bca23f-4d2d-4ee0-aa8c-cb9547e5019a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71ccd2b-5144-4333-b44c-1b7386661f56",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7eee5f-ea2d-4083-af12-4c51edba379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c75082e4-4dcc-4b94-84e3-05ecc187bb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85bc7c4-8b28-4e2e-9d1f-b70b493233e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5449f2-88a2-4370-93c7-86585bdfc185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de984a79-fc80-4929-94cc-a587c7441d2b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918efca5-2704-4c6e-b816-9093cafb311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b606da-1d53-4092-9b78-50ae650f4763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3430c492-52d6-476d-9a0d-15966815b268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4092c77c-9f94-4906-a5b1-8b04d408cc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07ba1cf-11a4-452c-86aa-4aba6fb61433",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b1541f-63ee-4e4e-8802-9e9df845f1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655b589a-0230-45a1-9ed8-acae4545f595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56e4b4f-543d-46f3-857f-0bcea7696787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9354766-454c-4b64-88b5-f9f9281a8c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592e96ec-9f32-4f93-814d-29f2442d72a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da7a1a9-bed2-4c5f-9869-24907ed5007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d41f38f-db0d-4a2a-b06f-66ba60cb201b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1be38f-6143-4f5b-a2e5-0baab0c93c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcba49a9-ce09-482a-baae-43776825ac81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2299cb65-8b6f-4fd6-b99e-967a6ae75acc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edb1adf-2a3a-4bae-93b5-8114af05891f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1074a0fb-54a2-4ced-a3b3-9d4185bec6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a4dd9c-6a38-434d-aef2-0b99bfd55c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ccb36a-fe64-4155-8178-b7d9c44310bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1cf4fa-88a6-4564-b572-17d7a8c53d21",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcd1c56-9b71-47d9-ba3a-fec311d2d48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe36b7c2-d451-4e5d-8dbc-31c857dac2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c844b85-8141-4cd2-b2ad-b90d8d62dd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "270d9033-19e1-4926-b78b-3045d5167e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72468f42-150a-440d-90b0-432e7f7b3e6f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930e0236-d182-4e18-9a6d-44a8ab46e295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a502de-c967-43ce-91ff-6beaac4d3749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a39bba3-858e-46b2-a5f3-8ba7740cbfe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "261744a6-e0c6-42fa-8b4e-d389290c64fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f36931-f802-4a01-9659-0cb1d4574f9a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4dab9f-6a8b-486d-a91a-14fc0202e5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4b82f9-6a96-4b72-9c3a-d51f7d94bb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f66e0c96-fb91-42b5-b1d0-eee6a7ecfa80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc7bb98-1f8a-4593-8ff3-ed5596d0aaf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988cdc3a-8680-451b-8689-4d3f047d17dc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c12ddb-0b31-4886-9d6c-97ff2af1eb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b75b8d8-1c27-42f1-abd2-c52017f5620a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9028b6c-ae93-493d-b4e2-ab61e29f1faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fde6455-0f9d-4607-9ba0-550bd29b4089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd53bf0e-204e-4a3e-9739-654091533d68",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3264ce-2c09-46c8-9fef-a2b12f510371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0654268-4ffc-4141-bbaf-3dd0ae73eaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30827c3e-434a-4d3f-9420-594e508fc111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66436904-5b22-46d6-b454-9279f10a0f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7248ebd3-d531-4815-803e-1ac88e29305b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7dea17e-29d1-41cc-8602-2c3233d18d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e55528a-2733-4faa-b32b-1fba316b4677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec6d6e1-14fb-4217-9cfc-65827fd6f9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05d981b-4c8e-4008-b15d-8e612a4feb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51566d62-2028-46fb-bc0a-f2f07d941ae0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a678a48-e298-48f2-aecc-b01002b821f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152c2c65-bbe4-4bac-a289-3ad2a985d488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ea06b6-37d7-41ee-9c89-5a7b3ab0954f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab601bf-bdaa-4f89-8186-17b477ad980c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2a2d35-2eef-43e6-bfb6-cfaf34ad89e7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474764c3-cb32-4241-8bcc-4f44b7ecdfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2725ff-a2c8-4815-be08-db0b3ca00b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bbbd09-e002-4e13-938b-c5e39a1d8bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07c35aa6-3292-4384-8025-558f51564c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e8b472-bb70-4d45-9ca2-0b4df031ee42",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5056a7a4-38cb-4606-9474-cdb8aa0a3809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241b3e41-a9d4-43a8-9ff1-bebb504c0e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f710c85f-c26b-4a42-814d-035af84aa8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93749e6e-45f7-4aba-8492-6ddc79d06dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2456bf5-6016-4ec7-a1f9-711f7e0df75b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2e44e5-e54d-4773-bd7b-beb72210c289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fbb27a-d591-4251-be1b-2b7cd27f2aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9908d6f-db86-446a-ba4a-761d7e2816e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac825ce1-9210-490f-b698-c8959879479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f21f6a-fe14-43a6-8198-fbd6b5cc6230",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e082d-ee4e-4061-b31d-75d6bf824165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "299889a2-3c4f-49f9-9083-a86be529869b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d94176-8445-4d31-8c56-64c1c06498b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "611940a3-99b2-4e1a-9140-7dab57835d75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb9b61a8-5a89-43b0-a674-846129d04d3d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8043a178-a61e-4afb-9701-981c891b9af1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26b4f40-748e-4a4a-a9b8-597965a26d83",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bb77cc78-8ed3-48b4-a990-91bd697369f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3facdbe9-4465-4d9d-b7de-35c915b47d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "661e0b70-0b56-4fa4-ae3f-ae17de985eaa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c96ac7d5-f2be-44aa-8af3-b26932bad990",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d7143c2-af76-49e7-9756-ca975d7f8fd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dfec5d21-cc74-4b99-9dbc-197c63e7707e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffe34fa1-cedb-4b73-9113-bc88f244df4b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c618db5-0130-4d93-a967-c14e08566155",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05633d0a-3c01-4e70-97a6-bf6c18a76bac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c97f1130-c6ac-41f5-9a8f-528eedacd0f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dca5c794-7050-42d9-a667-7117ff84cb58"
            }
          }
        ]
      },
      {
        "id": "535c888a-3841-43b4-861e-f2b1750ed988",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "6bd4712a-868e-486e-80d2-106a9fb60be3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5280a0d6-aee0-408d-a40d-8a06263db6f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27223dc6-54fe-433f-b460-5648e9018e66",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04a835b-5bba-466f-9d07-887c8565ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e779c042-dfb9-4d3b-932b-9e9866f631d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ec3e18-5802-4cd0-b66f-5d0c2f68dabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc76d812-3315-4a03-97fb-377dad30f2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782e1df1-94c1-4c7d-ad1f-5acfddb960b1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5cc916-8bb0-4e92-8848-c28826cc961a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c35b318-888a-4744-a82a-9c927bd1f31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcedfa7e-36e4-4622-8b3b-e07d84105449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "75ff216c-0d5c-4fa2-abca-6079df56833b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf8662c-02e0-491f-a77d-0a95acd91d53",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c048644-8a4f-40a7-ba4a-54396085a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb17189-a016-41e2-a98e-80d667c0705d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f46e049-7756-4f40-9df7-6a7e0e9aa5ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96c875fb-bdc4-4fb1-83b4-f406ebdbfddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4532adda-da82-452d-a6ed-991ecb6b7640",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59685ada-8172-4531-b50a-08d0dc128982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62d327c-38b3-4ea8-8a94-7a082ebf5be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6bcff0-e083-4dfe-b18c-af293ae85135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "035f6f62-7c6f-4869-84e3-fd04fa59e3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea31501-6793-4438-b6a6-35e7e03b935c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed30c86-f6d5-4c37-a00d-f080c723861d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31bc06f9-4ef2-4ccb-91dd-0d10ee12165e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0421099-5033-4394-9377-772f5e30536e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54215663-853a-4a18-8a55-10ae6cb7eada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c9da39-61a0-40a1-9e0a-7414fead0888",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d46ca46-77fc-4415-9fed-a0c6d1b423bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04eb2690-919b-4b59-ac0b-aaa6fc8eaf04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01de8d4-7061-48e6-8528-2909468f2e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93fff9f9-e7d3-4da8-85a7-d6f21cff2434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fcdc28a-4f31-42ec-b511-efa15e92dcb0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3307af9e-7689-4342-bec9-e8cc721cd470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c53449a-fe8e-47e7-ac25-e898e2a87e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ed7aca-3017-4c2e-a8e4-4dac46b9950a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9379df34-1a21-440b-8d25-302ece1da91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1ab9d2-8bb1-4a78-93a9-3279bdd23857",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49c7bf7-6508-4c39-be33-3f086c20283f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af76e64-484d-4419-b7cf-3bc0be0aa701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6f7eea-27f6-4ada-b16a-fbd74c46f5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "767cf4f6-e0d7-4bef-9fdb-42163d6874f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf3f7a0-6d0e-45f9-ac38-9d0cd9bd1040",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544299c5-acb1-4fde-b063-acb26a52c133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "849cf3e4-3a82-47f0-ac54-54c8d2b0efde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc256688-350d-495f-b08f-1ad3503b639f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ec849d-5587-48cb-96c7-e4248b574ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e041ee27-5678-4129-8462-43ad09846759",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb8ccb6-247c-4a94-bc7e-3a9b8e5ce813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb129a79-76b1-4a03-82ab-955fea803c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27efb53e-ac9a-429e-bf21-458fad2069cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "493eacb2-4157-44f6-935f-35a22861f439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124df446-2244-48d0-a2ae-4f7d2ad2ff21",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a95be4e-1c45-49e8-b6b8-4a549fc64ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b71bdd6-8a78-431b-9281-b46a8c012420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c5a969-1db0-436f-b053-d2bc60b14bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ade4b999-ee4a-43df-b296-317236163d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f38982cc-c36b-4d12-8073-f9aff8e0a72a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc393d7-ca30-4bdc-a7ea-f09817a35446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e800452f-877a-4619-ae81-00749fe95036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d60e79-ab7b-4929-a631-a23e68511535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93528006-4ab8-4e70-8bcd-0169f6850134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a23f7b-82d5-4ce8-81e6-1b73261b8e62",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38289cc-003b-4a22-9be4-31e752baff64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b7bc81-1b4f-4e9c-bcc2-1440a968e6b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6562a4f2-7b71-479b-b239-4d52f8d936aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8f5e201-003e-49a4-ab47-e12c5180a30a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b446b53b-a040-4326-8ed2-1123ab3af0a2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44553944-7e7c-4734-9e8e-c05e077ac985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f631846d-7f35-4bce-a432-d4f6ec102e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed48920c-59c2-48df-a13f-5c9661a9146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff7c4139-ac9f-4e2e-b476-ac0da03e4cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c1f337-fd11-4c9c-8ba3-97f855f8ac59",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6ec561-1a7f-4a2c-8ab3-af28ee51406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edb56aad-7181-43c3-8d60-bd3da0102107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6cea2e-8e23-462d-8fe3-3f8c7fda47ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "83daafbb-25eb-4536-994b-a0c977cb2f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df854d24-0d47-48ff-80f0-c493a4dfefdd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6deeebfd-168f-4a6f-b7e0-ef5acb888a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce037f3b-7796-4702-888b-2c6a030241d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e419e1d7-95af-4f58-8c22-e89b5f6f908c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3f5294-3fb5-49ff-831c-b02095160434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbc72c4-2704-4e55-b643-d65bac762320",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83712133-0ead-48e4-8c03-b964fa5f8f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a81c63e-5933-4e77-a1f2-cc502d9bdd6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f667d07d-9273-4844-b04a-aad3413dfc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc7f768-c719-49da-a5b5-eef70279a300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75211429-233d-44c4-9e00-ce3c642d1067",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea0246f-0478-4188-b73c-07ca5eaefa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc593cf-fa13-47d8-8421-f6f43f429275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f339dfe-c69e-402d-81dc-b25050d75e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5c139b-0b29-414a-8db4-7dd706b4deaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab40eb9-8e21-40a0-8018-0637aa64ea46",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc63a0bb-f610-4968-a78b-371c4cdea161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df31a74-f9e4-4c9d-ab7e-dd62f07274ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba89878-2f42-4673-886d-798a9994a140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6069f10-d82a-496a-81db-3c064b634c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df19a0b-6c30-4e09-8cb9-e87112be33b2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229808d6-e0ac-4d66-919f-f58fd2991b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a02b389-ae85-4885-9186-d6caa7accf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19499103-e824-4f29-bc82-aa2cb8120925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72ac8602-3cb4-4bbd-bc8f-2cf98726c36d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c840e7-cf97-46c3-9c98-b1a67ab375e2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef11eb1-5079-496a-bc2d-86560e443a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c08339-c767-4181-a133-c687a1e3c571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9cad51-6850-46e0-afac-bbd074511f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b883e167-c39e-44fa-8ef0-f543811df665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c914ec-15f3-4102-9e1e-68a3f7c8db55",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b8cc70-6f35-4f4e-a918-e2f9110cf9c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92247327-00da-465f-8c29-52f39bad1dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3712bae-158f-41b0-8032-6b18539abd50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8bd331f-b333-47c7-9c5a-09c65adbbeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa4ab5f-e990-471d-abfa-e5a509be5930",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd4b992-e73a-47dc-bc96-56c3b7adc10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3de77ff-b509-46e7-a122-aa1ba7db8fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a192392b-aae0-455b-81c5-9f23762afd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf286fd6-f0a2-4c18-95af-06ff947c769c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bcfd550-2609-454d-9e97-3d6d631085db",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32676717-2592-44ad-83ac-973269d0a015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c136688-32b7-4004-a0a7-8353de7d7b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce9fd8e-ebf5-40fb-9175-a8e58d4db54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4a2bcb-e8a0-45a0-a81f-1b6606d54399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f3fc85-916e-46ac-a3e3-0f40914eff07",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2959d62-44a8-4776-bdea-9aeffc7551ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a31471a-066b-40bd-b84f-08f48c8f273e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45563ba-5c7e-421a-b3a8-dcb38bc5b734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14bf9264-e361-4551-b083-4a5ad6191a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ea592-fbbf-4ded-a6af-cf9fc314445d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0007c9a-43dc-45bb-8a04-72d1bff166ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d05c901-4816-4998-af0f-dd49292db487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a299ef7-79a6-41b9-87e3-f4d88efe4e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f3a220-8657-48e8-a9e0-fb3d3c0e1517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3996dea9-aac8-458a-8099-d174f7c0c17e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea57438-4637-420b-87a6-9a2691193b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7efe9f5-eaec-4ac3-bac5-9ba50854ac01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8500956-7f7d-4dfa-b135-5d4340404361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "491da3bf-e22c-4334-91db-1869cba479cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba976845-a367-48a8-bf0b-a243193cc180",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9aadbbe-e1c6-405a-9519-5a4a11137020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a106068-1e35-48f7-a0c6-bef587c2bf5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732a8028-3907-4980-b0ef-2879defde702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "191c12d7-8dc4-4c85-8be1-33b6680c8f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f195c4-1908-4d2f-95fb-36a733c46410",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b2e89d6-8522-4654-ad74-79deae5137e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8174b1d-a3d5-4390-a30f-29d9a993c22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a784842f-ce8d-4224-8ca9-0695a97d754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a24d9b15-cf0f-4888-b7bf-fcd0b4efddc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bab1a5-ca9a-45ac-a434-057e0f4ba834",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3078c025-c43f-4482-b4ff-886f2274395b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91995bb4-4055-4341-a254-eaa409426e29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda8d407-0cde-42f7-a3f4-ff61707fe9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e1f94c-9898-43e7-bfdd-f62494fb725f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca9fb01-81af-48c6-98f9-5af0d4f732a6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529ba4d4-c20f-498b-9c7d-fea9e43e58ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995a94b8-954a-4843-928e-258efbe00adb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cddbbff-13c5-481b-a901-b5a4a205f9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "083288c3-ffff-49e6-bdb0-e1ddf4a68a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e34ac1ae-ca3b-45c3-bc69-ec8234074df1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74450a1-625e-44d8-b39d-4375b0767196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b4b896-25e4-44fc-b934-c57e0dceeee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bebd68-8dea-49ca-baad-ef5ea16e0a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2fdadf-a788-4c31-aa7a-1fa45a35b886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a902d6b-5eb7-435d-9338-913b9914b64f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08004a6b-be77-479f-9234-2334f71ab1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81f4e205-543e-4660-80c4-546e408a7c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e3ae88-6882-46e6-832f-e2c63d8b9b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd80b87d-7c1f-492e-945f-dd32a49f81bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371ad732-adcf-401d-bb45-76115a7a6e6a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60277365-acf1-468e-a644-773f3a64c88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b8e4ff-3c48-42e0-a046-a9770d72f5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45b7f18-2645-488c-a558-fe2065b1db34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f7747f-37f2-457b-898e-31ede61ac22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2274a00d-f1f3-450d-963f-ddc0879f61e6",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c53674e-3924-4d2c-ac86-3cf47082c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6223d86-b97a-4bd3-bd27-3670ee8044bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a294ec-6cd3-4258-aea8-fb5c65564ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abda5e46-7b76-442b-8fd6-19f53323f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c8686b-9eaf-4387-95ec-15c4e8c346af",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb75b8a-6710-4efb-a994-9e91d3aee2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de710917-c887-4421-9d03-67e756af7341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "972f8526-18a9-49f3-9834-767024e63f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b425072-2aa9-466c-82ce-670ec6bd75eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818f6913-cdae-4fd2-8d87-d1def38a79a9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2821d6e9-7a56-4d31-89ed-1fb1dfa4a40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c4db45-a41f-418e-875f-d572adf63d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df752672-0caf-49fe-b349-99bf0b3b6c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dff5e985-0493-4cc8-89f6-9187b9661c6f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f23322a0-3041-4e93-9d8d-42940158b248",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59f44962-222b-46fd-9b10-93e2c2398889",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54f0e4b-4288-4825-bf76-3b0af3e6cf11",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d6f532-1f88-4888-ab9f-abd8eff15724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3e8827-aba4-415f-9273-2d902f8fe95f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe5e8d15-5d86-4294-b002-51b965298eb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbc9144c-03a2-4ebf-9fcf-6ff6fcd147db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f166412c-2f26-4c0c-8ac5-c70f10c0baee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c57d1acc-2f0d-40c4-8f92-54297d9b2f10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "883f9708-ca30-4a11-be1e-38eb8ee708af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ef74b88-4638-4f07-b313-6da24712b37f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3097cf07-2ef9-4140-a1bc-a2e765eeda29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae49f344-5d0b-4d80-b213-8520bd70ec2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d725d557-d625-4ead-8d58-c8f5bbd18724"
            }
          }
        ]
      },
      {
        "id": "c6c95ed4-ee62-40f6-8f34-d6c811566de2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "774a937b-b287-482c-9d35-c13dbe00c1fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1f069596-b630-4f83-a250-e269eb78fd41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f073f788-4dcc-4cee-95dc-ff795fa522b9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9832664-988d-4a02-8de5-3f87039e4d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "414ce50b-51da-4251-a0b7-e3478d9f153f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a05a9ec-6d2a-4022-a0c1-c2b8f8aedb75",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa30b9e-9131-4bc2-894b-e94c28072782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f2a6d6a-51e6-4e45-ac6f-418ff228acb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2055f309-ae66-4a21-a0dd-dd1a29f979ac",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c72f70-6cb4-424d-a5d2-4b8910dec11c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d5e76fb-c733-45e7-a51c-57601c020a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7508635d-d359-4f59-bb58-cfaddfbb14eb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a65ef0-49ef-44f1-90c8-dc2650888142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5451a28-e13c-4cbc-a3c2-0c84b1b8b58b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6b1bb4-3bc2-4c36-bcc4-b7aba1584709",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ffa22f-644e-41ec-b879-af85e76aafab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73736802-48d7-4c76-a032-e58658db9144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b01a5cb-3ef3-4a76-afda-0fc961cc2a92",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97dd084-e2c5-4dff-9591-a1a1d419e763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a22e35-2f65-403d-8ad1-5ad21b239080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1556e4-c5a0-48d5-b126-3830cb8d2ebf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893741aa-75ec-4bd4-b45a-936b4ff8757f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c785650-92ed-4e39-92c4-5ca83a78b9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7896e837-69fb-4597-98dc-ce9cf434a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ea1a4f-a1bd-40c8-9e83-ade5184e5c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52609f1-82a0-4fca-9e60-4ac1789d982e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0367cf69-1f15-4bce-82d3-18ac3f847492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80176913-73d8-44e8-9384-e4f57f1dd9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4caaf36-203a-40c9-8d15-bfd303c913a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b08f16-43d9-41b6-8ace-839a85e72cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7668fa-1067-4835-b8ab-6332eba09811",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6610bd29-b679-49fc-afd4-40f800a7b657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcea2a4f-deae-4fab-81a9-d318df682034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc66864-7273-4a29-9a6d-db3a393ff48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e17f2577-25fc-4415-90b4-bada4e5cc6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e549f5-2462-4c4d-a855-76d6b25447fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc59a2b9-6662-418a-87d1-dfe9a8fcdd6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd12b2e1-8a57-4f73-81c5-2065b94f8300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b75b0c0-97f9-4fe9-b320-3b7068bed0b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1149e4-4585-4212-83b3-47c8cb7756cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f4e5d7c-c557-4d6c-b5cf-4b41c54465ea",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa9b7bf-cc34-49b5-b338-507397963453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f146eaa0-5398-400a-a1c4-c1c5fd082792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4c7e09-94ae-4ee5-b3cd-101a76dd2688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160798f7-fe60-4465-9414-91596ead559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2501ae28-9d9a-468c-a05d-e2e285d57475",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d675a9f8-1aa4-4a84-a222-2082a14c672c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd494c6-331b-42df-8f92-b57eb5e3c701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38579f0-cc44-4336-b3f4-1af0525819e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2f1013-cce8-4b51-b29a-90e87324a35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6689430-477d-4c29-9cf1-3809fe6446db",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9253962-ab54-4ce8-9f41-2b962e45bb7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830323db-99bf-472b-b734-e04f0205cce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d1dc76-7bc5-4304-8f03-fe0bd57cdcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94802a21-afd3-4364-8a24-e62f7efc4ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcec5289-69c5-4c2c-b562-d0b567a7f722",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb6610f-ea05-4dda-bba6-b6e95381b0ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c351ba5-a1ec-4785-81dc-00a4924b5ea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea170eea-5a26-45ee-a060-a821a0d1384a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d45058-88ea-42fe-9497-f3f7c310c72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e7a7ce-2b8b-4665-9f6b-4c57d3d88a86",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6450178-2be2-4cc2-91ff-99f4158506c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "158e8ddb-fca6-41e4-89ef-d6d9e292e0cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfda961f-2941-4fe0-b37e-f5de667d29fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fdb58bf-b4f4-4dd0-89cf-0cfe87b69db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d9759d-7a38-4595-a573-6b594ccf454b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da10ed1c-91bd-41fd-83bb-e676bb1f1e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4711fe2e-438a-4287-835c-a779375edba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "302b3614-3fec-4220-b579-4fc022978d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded97d7e-968c-408a-a6fb-7813b9d3a473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc18380e-c660-46f6-af9e-0285ef6ce093",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a703dce9-8e47-4590-8008-6ad9cb374a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0988d809-f50f-495a-87db-c977d47d8f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8966880-caf4-455d-bce1-5f98fa288e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f858678-fb10-42d8-aea5-14b875f93876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed03a29-649e-4e73-b6df-928b2561ef07",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f618bad8-818e-49cc-94c5-18aedf6ec216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0777b4b-858a-472c-ad83-4685954a1539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41713972-5372-44e2-9779-81f9a920deef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ea1688-35c9-42b2-b875-d518f8482d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef6e590-3ed7-4118-be35-1a239d37d4ee",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4670c23d-858d-480a-963d-e371bb041205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e59827-fef2-4ab8-9cba-679ea2c81e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae211cf6-1a15-4b77-974a-713e2d2aa4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc097ab8-a424-493d-8131-456aaf63ab20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ce8bff-ff04-4fd7-a645-7be9c86b03fd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3460697-4d2d-4859-8a23-af62ff790fb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a73d749-8950-4375-993b-ae12dbf44780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d9e05a-3250-4cea-a7eb-e0aab8fdb7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cdd3aa2-de6f-4fa4-aa42-aed459cd8a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f1f703-569a-4a72-9940-6c969a6765e5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee30e85-fbe2-4b75-b8aa-6570945273b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0236d9f6-dbad-4c91-a374-2622fc99ef5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08f1391-86d0-43b5-b432-4684d5272b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c078f55a-3d18-4894-941d-b8170cb18f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb2dc73-2766-4a06-b94e-c179aac06669",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7890aa0a-ec40-4c5e-80eb-b4a16d82b3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dfc251b-c9c1-4c99-9b7d-f639c46fa719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16359697-718d-4a64-8206-419153c2b827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489f84bf-acda-4f60-b049-b3cd708f02f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fdacc0-a52d-44d1-8157-dcb94dbd8362",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0eecdc9-8650-4b9b-8f4a-58764c41e6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955d84e8-0393-480a-88e0-9d620fe9a7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b30a785-1ba1-4dd5-a8b8-053a1bd4e4ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb7342d-422a-4065-aaa5-93ac18538a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702f94df-f966-4176-a310-7573b12fe6b8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94758c1-f8b1-43a0-a81c-27e6c96f4be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34487cc-daef-45c8-a7b9-ad6d9769cbf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2065698-d49b-44b2-9409-695b1b89cbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf65659-8167-4469-a402-a763d8efa6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcadccc3-3df3-4922-a886-e796e0555376",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163fe13e-7206-447e-9e7d-4957e5e066c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e92382e-1585-43c5-a98f-70fcb854eb6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c54d1fb-fc4f-4a82-a67f-4885892d302d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393d70d2-b04e-4f68-9bf8-6eacf3a65501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d9d287-c311-4fc4-a87a-6a6de6b1d6c7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c95fbb1-1db4-4f6b-bdea-f4b29893ae52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a991a58-d734-48b9-8b68-8eee1e7cc727"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28914bb-332d-4a3c-98e5-5b1027f80b41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f22cf4-c9f4-4ced-8bac-74f25e58d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b72566-3815-45e5-bb76-9d31be14fe97",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657b7853-8f6e-4ba1-824c-2741de1d302a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b52e386-658e-48ee-a56a-7f72af49296d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a839d1a6-fd98-49d2-b265-0a52edd51eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ee5cc0-187e-445d-8c99-d3d815b8919b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1ffa8a-e631-4b54-9861-d891fc8a7fd4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e4b03e-b599-4e25-9443-ce7e0ccb70c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224bda23-45ba-4854-83a8-0e06f80b5232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b773c6-7a31-4a9c-b00d-4f2d191aab42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162cdf47-62b2-4a26-bfb7-6a0e8b3e7771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a45da6-c76c-43c4-b5b9-9fb3fc65ece4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0bb923-45f9-4394-bc56-efc0b4343314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f977b0d-fb62-4aa5-9fa8-d34c514c679a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfbd266-41f0-4b8d-880a-e0f7ab3f9783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ad3d8b-37de-4456-925a-40493140bf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7daa335e-5e09-4a3c-a012-28e73f419779",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffd89c9-7d55-4947-b455-c76e7aa2946d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3aafc46-ca55-4787-945d-0793b5488153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1808a4d8-b854-4e3f-a45a-db9560616a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c818896-5850-45db-8aa7-2c0034341072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386df8cd-4971-4c99-90a3-e92cfc4adf18",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b499e90-3551-4ef6-b6b0-f8f47578aebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eddf407-ce54-4223-8f80-c42910f86ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf576e91-798f-455a-adb8-3f315d45ce56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eac23ec2-6c04-451a-959e-71bc6cfe8399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9549c1da-d569-4468-92d3-8ba23e827553",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15b33dd-a84b-483b-8456-0adddd774e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d62011a7-f6e7-4466-af34-b4bfdf717f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69588570-96fa-4c4c-8312-33919ff8690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "272aa26e-7cab-4ac2-9296-5c4b18505ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9888d86-53a9-44c4-94ba-8a30ab62afda",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa486d2b-c138-4f93-8dc3-b46d2ccf456c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f1b891f-67bd-4fff-9de2-d9e38add6a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b45ebc-44c2-4a4c-ad3e-02bea1e63f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2969860-d2b1-4fd3-9f1c-24c6ca637681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88359fc-73b8-4875-9bbf-5eaec0308cff",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9a84e9-0b74-47bb-a7e8-a9d520189bb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fdb61fb-77d8-454b-af51-bffe1ca0e64a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227b2d8d-e29c-4a1f-9861-0584a2c28d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23fa9327-216d-4411-a179-b0952f4c0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804acd7f-0c8b-4d4a-8260-331299bae8db",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addb2856-dfae-49c3-bc70-c212beba718e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83f979ee-d0f8-4e78-9eb7-73bdaaa2cf02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca6f85a-0493-493b-af31-04eee34d148c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07226d3f-9c53-423e-b72a-10ba498f8d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e2308c-97e4-4120-a0fb-1d9b47b39db1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131e921e-20a4-44f8-90ca-581d568fc984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c640ec88-99b4-4d29-81be-e391785dc6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dab471c-95a8-43ee-86bd-777018623f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614af5df-2cd3-4071-8b77-bc0975116337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc649bc-45fd-44dc-b09a-9fba186a594f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2b7e49-b642-4710-b71c-f40405dda17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58cce52-13e9-486a-b74c-ff2524bc7fbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbd82a4-7bfd-400f-94c9-b20dc3f98b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caca75e0-d664-41bb-b3ae-27125a8bf2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c521161-e045-4b73-874c-0086843f61e3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7fa5d7-ed7f-4c8d-ae71-f1be840f1f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772109bd-e3d0-49c2-8672-87f7606231c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369142ee-0f08-4274-98d3-12f51595299e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7cbd0d-aea7-4172-aa67-5b8f11385cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6070665-a5c8-4664-bb91-dd54c159c7a5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca9d463-b968-4f19-a489-6d10020caa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70a9450-d435-4fa9-8486-b95f56b236e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2794c0da-3a98-4eda-aaa9-6f70f07c6f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba084853-23a2-4b35-a0c3-c3567fcabbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f0d15f-6414-4362-9171-a55411f19997",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e6df05-3f30-4c9b-a14f-6d45c27a94a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b1b8fb-a590-4f55-b0dc-c3fe94c4226b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ae3182-44ed-4213-a52f-f9dce3ec6c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f35339b-1e3e-4f9c-b2cb-c3cc739925fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b2c792-17f5-4f8e-adc5-a19241a1b7f6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd794ff-baea-4570-a5af-2cee24b01c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a01c5c-7e3a-4c09-ada6-76cc8ddf3399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c33698f-345f-41af-9901-58f0ee1ac0c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c8434e-1670-495a-b502-40c6dc629ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295a29d1-c501-43e8-991f-d63d46a7de95",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b84d5d9-4f98-4b45-80f9-ef0204433949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e022fcf3-bf0c-453e-961f-b603f9597cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc152688-bd52-46d0-9241-bd345b841ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0ca21a0-c444-4c12-9bb2-6a276d7a09c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2702fd5f-d511-4e6b-93bb-01bdfa1162a3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8580b235-7b68-44a3-b783-53fd7c36bcac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1054992-bf9c-45cd-b111-1264cab63b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566b303a-9df1-44e5-86da-fcae1d1d0e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ddd4292-ff4e-4a8c-aa31-f734de3d325a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c33077-4e50-4ea2-997b-4aa2097683b8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dfa9d0-c9e8-479e-ac14-3f2586dac4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d223b066-3f36-47fd-847d-79f13b26f2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a2ac4a-3caf-4e32-968b-bd023ce15f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fa440e-b2d1-4a81-8d71-63274b814845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4c36d7-fd29-4448-ac62-dfc13fbd024e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3769beac-7fa3-4f39-9b1d-4a32372073f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f4f656-8f8f-44ac-a19a-6e11f8b93259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75285fe3-48ad-4797-9b0a-ea6798653036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53a522f-3f3b-451b-91f8-4789494b89e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bf1438-65ba-4832-9f37-9c39d812af79",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700b16ce-4fba-49b2-8815-d5d8d35affad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12468a49-88ec-42a1-a393-9e140c7c968b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a1a173-9107-446b-a726-e8ef8e78c408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941da982-0f05-4733-8861-2722d74750d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b7f4a0-44b8-479d-857d-0e18c1e3afca",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03153d01-e51e-4bcb-8173-d5733bd49337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf825cf-2491-4763-b28a-7f9ad34a21de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab468b4-0211-4755-8d6e-ebf3305dbe10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfa2503-a286-4fdd-8b1d-31f365f5fb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d05ee1c-3316-4b09-804e-1cc506ead946",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a024754-2800-4c97-a153-d2e9eedaf977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2c5a66-f875-4c8e-b051-8011f0d43001"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0318109-9cce-40cf-a826-9d44557b51ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726de279-c635-4ee1-a8b5-364a4db72428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c51ab07-ea29-4365-b5ba-49a78b85a777",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b965cd64-a040-4944-9077-8fca3848dfbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cedc5e-27bf-4b35-87e0-333fcefaf193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41be1d03-4c81-4b31-b743-6f894dbdf344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcaa4e60-d909-4523-92e8-4426cd39b52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc73cee-b29d-4d01-9581-22b88d8ffb85",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7c0657-b84c-4235-8b2f-605bb5b873f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957f87e1-daac-4d59-883a-c20983d38e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571c3fb0-4dab-4e7e-8415-b96f0a7392d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3685b97-aa0f-4bda-a20c-2aa22e2bc0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14392b4f-48c6-4d40-bb4a-44b7b54e1715",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7177f578-6f6b-4791-8e16-c7a87351c0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af79cf16-da45-4c27-951c-8af96bd0973a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d53e4a1e-3ea7-4cdc-ac6a-5ac42647184f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bfc6a8-a982-4b91-bc41-14b727f68e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e36f0f9-615e-4dd7-98a0-50cf057905a0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba6c5b55-03cb-4430-a898-8b4e0f688842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504e3da3-5d36-4508-915f-0d48f809bdfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d0f9f9-8e41-43a9-90dc-3f2b92e922fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d92851-6072-44b0-b829-64d7e7b17e53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec1210f-98c4-4903-a8e2-897ff5bfcaa3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6caff2e1-5fbb-4076-9e64-cfcc67c4213b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10601397-2328-430b-a0c7-c9c73c387a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91d8186-eee0-478b-a4da-fc1f765c6903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfdc0d3-9364-4113-b409-a602c6c63552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7140fbe6-17a2-4bce-b78e-ad55f764f186",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c6f989-d186-4463-914e-a26708cc8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd3a81e-68d3-4f83-9d2a-8f33581afbfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d87e1b-5521-4025-954e-0dee6be176c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03464e9c-0aad-4053-bd73-daeac8a4da06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c5835c-8311-4d16-bbe7-df5006f21253",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd592b1-df23-498d-ae14-a680b47242ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29d3270-7870-4490-8c76-f60876691577"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12306740-4556-40f3-b0c0-fa40a4dcd0c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb24c11f-719c-4144-a2c6-89d32e164cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda5066d-c014-43f9-a198-83b69d1ec63a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d4cc27-937f-4ca5-8108-682204c908b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa09381-0ae8-4e34-af11-292f9a21c0b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2d53e4-b4ea-4ac0-94f6-4e125dd192cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8aa4f1-0c5c-4a23-9553-4b1d3faa9c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8093ef-d4ec-425f-9ae0-65f9fa2c862c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4b2dd1-ae12-420f-b04f-5eeb40586199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a73b5b-e448-40a3-9902-08d2a0f167c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1021999-3285-44c7-98b1-6329363bde39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844701a5-c4d4-4100-844a-3d072413d582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23f16ab-ff2f-4daa-94df-454f92d2b67f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263f57cd-e896-41a9-847b-00db368d9b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05c74f1d-5048-4f60-b1c5-7f3e311e8010"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a773231b-8661-4e3d-9ed5-035e3a2b3c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7bc24e1-1b19-4f09-bd31-1c0c2d3c0bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83000da5-0b8d-46a6-9c7b-2970a13f542e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78426ba3-a8d0-45fd-96ba-318733ab81b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4f07f8f-f24e-4b90-9f16-5ba97c744315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6505a9-86b0-4d68-9b09-9f7b03fc5bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f97793d-e606-483b-b538-9bbe0d644aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49d3ca1-5641-450b-88b5-e7e2b5c44535",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b8d402-de6c-4ac8-a48e-77840d00fedf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e685e9-88b2-4be9-983d-cd9488229874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee90109-2324-4925-84e1-29e6269f17ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34b154fd-6d2e-474d-8112-93c22306bbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b10f95-e9ec-40c4-9ee9-bc610d2c7d71",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4e05e2-4595-439c-a9d5-4596683b3214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84a3748-6b50-4c9b-bf64-f394ace5900f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ece211-08de-4587-8135-30607e1c3e67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2daee89f-1c39-4669-a767-f852d406d736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6631cdcb-2657-40ee-b414-3f59e7fd39c6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323321e1-ad0e-45b8-8e64-3ddc9322b2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b946bc31-9197-4884-a1c5-141c21f129df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c7dff2-c30b-4a67-a4e3-e2eb0332dce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ea99c3-ee22-41a9-9348-5abdc3eaae8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afdf284-6749-4a63-bef8-445f0c96b59b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bdfe385-7a02-4ed7-95fe-02f6f09c2b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b8ab34-d90c-44df-8301-7f469b180488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e63bc64-2bed-4d48-a602-608ff525ff3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c4358a6-661f-4bca-a397-2673c4f16046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35630894-bc08-45ec-b564-6bca8b8d3477",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfe53a4-b96e-4811-a6fa-d70ac7cf99e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aefea54-4ddd-44c3-a2d0-c5131f3a77e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8372e181-84e2-4095-aba7-7d79cdfe9c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94263c6d-42fa-4ea3-a17c-c727b06f0a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10aea8e-7f0f-4bd9-90ce-bf99110681aa",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d38406-8d2d-4f67-b0e9-3c5f0de0a3f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4867d3d5-9819-4438-a4ba-2c3e73dc1e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e462cfd2-094a-4fd8-89b2-31a2f3cf0ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e198cfa-7bc0-4613-acca-cf6ac95e0b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f5b299-36f6-4221-bcec-525f2074a0cb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28066e81-354b-4d2d-ba34-c5cc067ae6a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5731457e-cef1-4116-8180-105bc2357d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1b41a9-b12b-4718-9b7b-fec0cc352047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8ba09f3-2e3a-4c97-976b-20180a9167bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dc7926-932a-44bc-abfc-794d442c0783",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43cafb6-c668-4043-a1fb-ced3a0e4d6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b57fe537-2049-4695-a4ba-2cca988f00d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef1f546-4aad-4d59-9612-4681c34dd58a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24f1df5-f44a-487a-900f-3b85ea0aa436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0af763-ffc4-4bc4-abf3-94b6ca65abc1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193d2214-ce0f-4c76-8558-9d29958ceba5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d371b438-b719-4c50-b933-4dbe2f97a979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9184bd41-53f5-4538-ba85-fd16a477f972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "334af05b-5ae6-4fcf-afb1-b0a35810cee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a23029c-973f-4d2a-8aec-9e29f0298502",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18baa87e-c6c3-4831-9b83-35047f5130d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa2b997-5569-4fb0-8b2b-2a6cd5dc86a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ca3c5a-406b-4995-a95b-afc3d3018fec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d93c028-f0a4-47be-9e60-aad6462c1338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30030dd4-20a5-42ec-b4c6-f0df19165a73",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef260930-9e39-4e79-8ee9-db7da10ba572",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7b29366-c0c6-4b75-b652-55157b98db9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0f5ef6-2f58-4d32-aff5-5250b60cdcf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6bf6e80-0987-4c06-aa1a-7cdbc2a0ef59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dd0480-9a2b-4219-a525-762305b35317",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dd75c50-3235-4260-abbf-89af30e153d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "558f3566-69d8-495a-b305-55d8bef55185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fb128b-39ab-4398-bf85-5a1a6153985a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e141518-0efb-4873-b8f2-480f17be524e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9d7515-d9f0-4e06-98cf-bea9c2d5cf38",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0c6db1-d888-424a-a338-d68f4b447de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d02a374e-cfc2-452e-9092-581ffb1fe252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9c71af-4f59-4e23-8b77-dd9708d54d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af29ae6-71cc-4b9a-b7ae-179167c3553d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d891c63-dbdf-4e38-81b5-636aea904be6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590fae8e-654f-436e-b91b-5aa0bcca509f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7e4a996-5294-48e7-a28d-6c7594b03752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8575e704-b0fa-43d4-a176-7c3c4b9cc537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53c8c5d-a68c-4eeb-9b03-ddf13aad2019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9852114b-bb25-440e-8cec-ba8802412bbe",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fefc424-e3f5-4f05-9b02-999ee1f545d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af278966-3f29-4225-a4c5-fada1d707b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "804005f9-27a3-4671-bbd1-ca6e671c5489",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7341a04b-d303-4baa-8b61-cd0da7f62989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a20a13-3972-4a45-9abe-49745e3daf73",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497ec5d8-4c45-4ee1-88da-e4eb2064c700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd149cf1-b8c4-46ee-b065-12efe53870dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f0b1e3-df3e-4551-92ba-f5fe818ec220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a79c9ae9-c29f-4aa2-ba09-5fa130200c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109084db-9a84-4fd0-86be-ae052b383b5f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1748121-83c4-4f39-916d-76745c1c084a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ee4b06e-4e13-4a46-8efa-43340b71ef6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c4073d-6612-40e2-aee3-d77a68ab4c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0e7b70-8d06-401e-a622-c2823882cc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49eb2da4-553d-4cee-baa2-ee5f841b95db",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9028a18f-96cd-47b0-85f6-1f4989b07cdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525939da-4c5c-42a6-93e9-f56c632f15ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50adcea7-cd0b-492e-bb9d-a2a1fe4bd576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edd33c2-c404-4cd8-97e1-f75cdd1f2844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc630fbf-2099-48b1-be05-886abdeb2454",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ef4a0c-9787-4fdf-8237-e9ccde41b7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8668a666-12fa-4dca-a5a3-22f879a20863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8a3c3e-46e9-444b-bb5f-ff186533fb99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0601ed-87ea-4bd7-8c8b-79d71f71b5d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b75ad4-b1c2-4b2f-b1c0-9ca6f772bcfd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc74a83-0d8f-4e96-9b5d-a7d1fc592c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c328736b-94b6-46d2-b4d8-8f0116360355"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6a23de-9a1b-402e-9a4d-a991739a6d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99369497-2384-4bbf-b117-122415db6245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b14d1011-9da0-4298-a75d-e4b83e3c0338",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f88752-a0e8-4415-8ec0-6831024c4a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58494e1b-5e01-48ae-a984-dffac08d60ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4c8191-905f-4a73-84d1-ec476d6786a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f47044-ad04-4248-b2c5-5a9f6adbce75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2070d9-39fd-4622-91ca-047f3d6e8499",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8c4d4c1-8a48-474d-a95c-4e9c4df2ef16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26772d03-3341-49c5-a2d0-4b7ea6acd35d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3325a02-f809-4785-8bf2-cbfabc2b7b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00cb557-ecb7-4ad6-9505-da64a20f7237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06da8eb2-e23d-42f8-b445-390a3048b754",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e703242d-d22a-4d2d-85fb-a35bd1df3d4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8899f3d0-0a1d-44a3-a209-c6b341687ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82270d38-5c1a-40dd-8a53-59db6644d926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9a8d0a-5116-4b4d-bec8-65a38406d7fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea8280b-4a84-469c-b7e5-05b0413c8ea8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc7de09-76fd-40fe-90ca-ef010b6d5943",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cae4a4b3-ef48-4470-9415-ac17b4fb12cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfdba21-ca8a-47c0-ab8c-8f17c8a03b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51070ade-3330-40ca-8b83-6968979106e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2edc6f6-b955-439d-8057-2472e9d2e6e7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a617783a-fb99-4e7e-8dc7-c8ee85fe2118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72bbfa2a-5083-402b-94ec-cf63e4bdf2a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0910178-7537-4261-95f2-50cee0ec72ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8cb221a-e63d-4471-955b-a2a3269fbd5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c76d7f0-042c-430d-8e4a-ec6e4bbe617f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a1b6c6-cc4f-436d-957e-d95997ec9a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce13ea63-d39f-4fc4-9b4a-e6146be08d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b255fbd-fbf4-43ce-9aaf-71968e2cc5cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b43e75-8f9e-489b-8057-b14cc04f0b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96621f24-b870-4a37-a476-0a7363a203bb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5b76b6-a8b7-4377-bad2-8e72c9e4ba04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5965a803-3ade-44ba-a9c0-d242e012c217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a828c1e-d4fe-4545-a7f2-a2d29407f7cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50769d4-49b0-4656-9396-4d636941ff9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea80618a-2c3f-4c9c-b4bd-05cddfe468ff",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05f4d63-b8b5-486b-8bea-a8378236afe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83be9325-f75e-479e-8f26-b20a45330758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eada3a4f-8a98-4be0-80e6-6f2179c9bf9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8dbbf74-06c4-45c3-81da-63b24fe6ae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904ccd0c-82a4-41f2-97a9-a105adc7a5e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff13a24-40a8-4e37-b71b-066912bba06e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94270e26-bc1c-4bc9-b6e3-3e535696efd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fd81c7-8975-49b0-bdd3-4d0cab593750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1c92ba-bc75-4588-b1ac-b82f5805f31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425da9b1-216a-439a-a95c-aa7c6bae66b3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48e7448-c38d-405a-bb4f-6e95fa3ea170",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ae4bcd-3280-4d89-ae11-bca9f93e28c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd9a7a8-2ea4-49cb-939b-249e0fedc2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fea8e59-3c32-425c-afc2-4c7e47314812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63a3211-9f6a-44a3-84ba-4d25e0e455e1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c7e396-2a8d-4c8e-9413-63cafc3fd2c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1a563b-5edf-4699-ae46-509f13944fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf8eaea-7f06-4462-9497-fb9a11e18422",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76323e0f-d29e-4d70-b7bf-1012458450b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820f4b21-6ba0-4045-8635-c5e99f03dc25",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a1aeab4-f26e-4b7a-961f-bf39671a0c53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfcedb6a-41d0-4b77-b85c-94a11682f130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bf33da-152c-481d-8de0-c6d10f72f182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7628c8-48db-4e00-abc1-17c31f2e2ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fbdb1c-ca05-4aa4-8389-1fc8f62119ab",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186b6b18-e8c8-4bc3-89fd-354edf40042d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40a4817c-d23e-493c-b596-cd3fde7d52bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9830a6-072d-4376-a72c-924695a6c6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91a009a8-0969-4a41-8631-eb9c110fb05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291ef2af-9956-463a-be56-2664fb8df84f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72441982-e7a2-4663-bd34-2e6f83baa990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dd91c9f-8565-434b-8716-02c4325828c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f601576-6a23-43f3-9b5a-07cf30b48bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61df6ea5-6ad0-4be1-8fb5-4ddd937274f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d62628-5963-4536-84cb-3f1f8eb7689a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5da8413-1b7e-4be2-a330-a4a1bb803648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8107e02-a287-451d-8b37-7752f8c2e032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e4f2b68-35d6-48ef-8cfd-57e707acb9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5169dbdd-0e59-4799-a3fc-f4741be32fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a7a8fc-c837-4efd-a2ec-7bbb95dfc067",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76d5a0b-1111-46cc-aa36-b8e106e83b6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb7abc2-a907-4832-a654-e4f1435161a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d684867-98a0-40ae-a25b-beca59930895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1f6b50-048c-496e-bea2-2192f9f4eb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410cdc3d-83b6-4f6b-b8bd-27fab6e11cb0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbbddd18-4a25-48d6-b8e8-e950d1e9e75a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f109b203-2db4-4f34-a3d5-39b015063f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310d4081-10ac-4951-917b-e1847fe199b4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19618136-4b68-4e2a-99b4-e6ee07a50b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7b0472-2cfc-48a9-9af2-0b6ab32d5282",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090238a2-a5c5-4e58-9bd0-ea25334ca807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c3490e2-0de6-401c-afc1-f155a9cd8d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c139fef9-d689-47e4-b178-ee15feb26908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b0612a-2f6d-4ee4-a774-72e13ead363a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2af47eeb-d459-407a-97a7-51e37a736129",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c0d96e5-3c6a-46f5-8501-30413cad83db"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "218dce7f-56db-491c-b64a-fa5c9dfb6c31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6eab42f4-610f-4016-957f-c73a0d537a68"
                    }
                  }
                ]
              },
              {
                "id": "6846ab27-f19e-40d2-8667-7696669147fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a334472a-f08c-4ffc-8481-fe7e94fe63ad",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2b6b5e-b3df-43bb-be5f-c1a0ae70bb23",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "57307858-d494-4791-871d-778cfda7d8de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b12515a-ab0f-48e5-8ce4-209ca302da88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3ab17aa-0ee7-4864-a16d-61836965ee75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "722f0166-16d1-46b9-b59f-368432c51564",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23b83903-133a-452d-8620-d5c4b6c1f05a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35b750d0-98a6-4d00-909c-cbd1b2e4675e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cde1d4a-6274-42bd-a8f2-1315781dd624"
                    }
                  }
                ]
              },
              {
                "id": "e3986bd0-b90f-46ec-a753-02f3dfdbf1a2",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3c1eb208-20a1-4937-b1a4-6ad0d5c452c0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a065af7c-8ae3-40f6-aebb-6de2291789ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "2e5df11b-9cf0-49fb-9ec1-454b88fd4aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cee2dad-c140-448d-b946-51329e20e234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d61f8dd-fbaa-4793-96db-d337185fb621"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4de9269e-40dc-463c-a1ca-cbd5a14290fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d6e4b8f1-d46c-4984-9488-ab69338b4c44",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f072ec2f-e412-401f-8909-9654684d3b0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4f5df38c-a86f-4e1b-b4cd-735535ccaa3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa9fc8ef-d38e-4f5e-8585-97959ec6a50f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad0f1bce-06b9-4d2a-9f92-e9ce53b5fad5"
                    }
                  }
                ]
              },
              {
                "id": "3d6866df-da17-43a5-bdc4-333e74db7b98",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d781d249-b3d7-4ce2-8e33-494b66278b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ed6bde39-a15d-4e5d-8afc-675e405bafb3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4048c57b-99c8-40b9-919a-f8793ec355f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58cdf1e7-938a-48c0-8551-b27b893fc981"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4a8a3f2-4718-455f-84ca-a6d5e05a33bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "1978f875-cfed-4baa-b641-b14265584486"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03d99e5c-e044-4728-aac4-9c7552a39e33",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4d177e3-8307-416b-8572-92b24457b0b9"
            }
          }
        ]
      },
      {
        "id": "e7041e6f-8dc3-4ead-b830-25176604fa08",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b20c8177-c7bd-4e2d-a592-a5ce8d5373b8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e659389b-59a9-47df-8dc7-74ef11163ebb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb0a59c-4974-4fae-933d-4ed99b7c52cd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bd2d62d8-a027-4e5a-bcef-3b8aca9675d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b020911-2df6-4eb9-ab71-d07d65b9da15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b864164-0bc5-4f41-b58a-df97384800d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7701c2d6-bdab-4180-8ec9-34da1e25889e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb2f0373-d061-487d-946b-72bdb43100e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9b22ae8-74ef-49c9-a104-ec41a7a0d413",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f04f2626-3f4b-4cc1-985e-8e31e2ff9acb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f78e235-a884-4e38-8c0d-b45c519226d7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5a31b04d-5481-42ac-9660-dec6b5c95564"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "726a1ea6-a5d6-41df-9277-bf8229234fd0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f761f6d4-25f8-40c1-a661-b36f59be019b"
            }
          }
        ]
      },
      {
        "id": "ea24b8c2-42d1-41a7-952d-2bfbcbefc293",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "379a0b4c-b230-4248-8e66-54be2aeb5a52",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8608e0a-0393-4cc7-97f8-4ad764605c65",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "44b41539-a024-42f4-8a69-d5ea87c2e235",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6301997f-9a46-433b-beb6-893e79f98726",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e0e5234-5dbf-44e3-875d-8ee02ba1bb2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "529adfc1-e224-4d97-bc2d-c101fc28a58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "808d73db-6a4f-4e5a-964b-ed0e2bcbdb34"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "495f61eb-532f-45aa-bd39-2724b6f5a52e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cffb2afc-52b1-4224-b5dd-93d2fec9d64d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd308863-8c4f-4078-9e8c-13d684c1c073",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00f8ec0e-c6f1-4c77-85d1-5e897ef71deb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5174759d-ac12-4a79-8240-5cd80747732c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e50ebd1e-e6f8-4dff-ad45-bbd878d0fcb5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97cdb01f-5306-4cf6-9b0d-78943035413b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73f6471d-b399-497f-b405-56772e30ab9b"
            }
          }
        ]
      },
      {
        "id": "ca8c478b-d3fd-45a3-a2ed-e170af3a4110",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8e3dc78d-f4c7-42e5-b58d-9efb49b908e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b21d9862-65a3-47da-8d49-ebf49326856e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e21a12c4-de27-414f-9f8f-b30b47fc12df",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce98539d-9fcd-4cb0-b737-7f5f11f478a8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3e603fd-90c2-44a9-a496-5c47234f9ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e5f494-771f-4fb2-841a-033bce8e45d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f5e877d-9038-4722-b783-3d4fcfee71e1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bdf2bd3-4701-4554-9374-a532613dc37a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7720b71b-54c4-4057-a798-9bf4f0478d03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c29c1915-7440-4bbc-b43c-d48bd5260658",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a65946a-de52-4c35-acf4-02a5dea5dee1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40623165-a78f-45ad-93ba-a2c5662801fd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0df47865-929b-4a46-84bf-86f10ddcc906"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63511e55-8df6-4d98-8e1b-053dcfb4939f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69f0773c-75e4-4ba9-89d0-4541b2a26254"
            }
          }
        ]
      },
      {
        "id": "82581867-4cab-4998-8db5-778f3589a7af",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbff5ec9-ccb5-4e6c-870e-315a6685321c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1705ac29-0088-4407-8e7c-f537391657a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a31ca36c-2242-4b62-9edf-71f997a84610",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cba0ac7-5fc1-4300-b6fd-47b1b628a61e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3216b71a-330e-4665-a27d-9ff8e4867ba9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 86.05319148936168,
      "responseMin": 5,
      "responseMax": 625,
      "responseSd": 27.81251836417653,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707698088012,
      "completed": 1707698146653
    },
    "executions": [
      {
        "id": "4c419764-a001-4c28-9f49-ee65ec57be42",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8595af3f-158c-44ff-985d-90a3b5b4f1d8",
          "httpRequestId": "7ff1bb14-4a23-4d40-8dd6-32425dd40a13"
        },
        "item": {
          "id": "4c419764-a001-4c28-9f49-ee65ec57be42",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0a800f6d-5d19-4d03-88f3-4be937cd26e0",
          "status": "OK",
          "code": 200,
          "responseTime": 45,
          "responseSize": 0
        }
      },
      {
        "id": "08b997f4-e33c-4152-926c-b7f79535ce50",
        "cursor": {
          "ref": "258a2c5c-115f-48b7-92a7-4f5a4e309789",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7ac5db4a-9313-4931-8d6c-7c24e3041396"
        },
        "item": {
          "id": "08b997f4-e33c-4152-926c-b7f79535ce50",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3245dc5e-d0d9-48a7-b544-f3cde58a89c7",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "e54812bb-d8e6-4f62-af73-7116eeef4b37",
        "cursor": {
          "ref": "df02fff0-a59b-4f46-9056-48e8622e95be",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ef9d34db-e781-478f-a65f-3ebbaffff9f2"
        },
        "item": {
          "id": "e54812bb-d8e6-4f62-af73-7116eeef4b37",
          "name": "did_json"
        },
        "response": {
          "id": "9c73cc10-2a77-4a94-a116-e465e46dd95f",
          "status": "OK",
          "code": 200,
          "responseTime": 625,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b17676-1177-43c1-8a74-f3c27226d5f2",
        "cursor": {
          "ref": "12dd5013-0bae-4f09-b512-b8d56a51a2d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3148ee43-2f75-44e3-9001-78955ddd79ae"
        },
        "item": {
          "id": "c8b17676-1177-43c1-8a74-f3c27226d5f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "4b66a249-4271-4c43-8d88-1faa1c84324e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b17676-1177-43c1-8a74-f3c27226d5f2",
        "cursor": {
          "ref": "12dd5013-0bae-4f09-b512-b8d56a51a2d6",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3148ee43-2f75-44e3-9001-78955ddd79ae"
        },
        "item": {
          "id": "c8b17676-1177-43c1-8a74-f3c27226d5f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "4b66a249-4271-4c43-8d88-1faa1c84324e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d569e6c-0131-4f6a-92d2-a679cb549bd2",
        "cursor": {
          "ref": "08f4dd7c-458e-4cbd-ac4c-ebb7a3b63c36",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "03e14326-5eb4-4cd3-ab28-b7053377d7ab"
        },
        "item": {
          "id": "5d569e6c-0131-4f6a-92d2-a679cb549bd2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "360d470a-4561-4458-b8b1-4869c214a617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d569e6c-0131-4f6a-92d2-a679cb549bd2",
        "cursor": {
          "ref": "08f4dd7c-458e-4cbd-ac4c-ebb7a3b63c36",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "03e14326-5eb4-4cd3-ab28-b7053377d7ab"
        },
        "item": {
          "id": "5d569e6c-0131-4f6a-92d2-a679cb549bd2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "360d470a-4561-4458-b8b1-4869c214a617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7aa9f0-ca59-467d-973a-ca0c9a85ecee",
        "cursor": {
          "ref": "53df8f77-5b35-4377-ba66-648019d6308a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e2ea1190-976c-4c26-8f9e-9675e7e759cc"
        },
        "item": {
          "id": "eb7aa9f0-ca59-467d-973a-ca0c9a85ecee",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dfd637ba-a046-4a01-8708-b11ecf33d884",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 104,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7aa9f0-ca59-467d-973a-ca0c9a85ecee",
        "cursor": {
          "ref": "53df8f77-5b35-4377-ba66-648019d6308a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e2ea1190-976c-4c26-8f9e-9675e7e759cc"
        },
        "item": {
          "id": "eb7aa9f0-ca59-467d-973a-ca0c9a85ecee",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dfd637ba-a046-4a01-8708-b11ecf33d884",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 104,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc4e267-bb55-4e1e-ab00-354a4b10b289",
        "cursor": {
          "ref": "aebda6e8-558c-4194-8311-c485998c7c6d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1cb56eec-b72f-497e-8603-3ee707447d16"
        },
        "item": {
          "id": "bdc4e267-bb55-4e1e-ab00-354a4b10b289",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dceaf979-6296-462c-a7ce-5246eae0f22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc4e267-bb55-4e1e-ab00-354a4b10b289",
        "cursor": {
          "ref": "aebda6e8-558c-4194-8311-c485998c7c6d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1cb56eec-b72f-497e-8603-3ee707447d16"
        },
        "item": {
          "id": "bdc4e267-bb55-4e1e-ab00-354a4b10b289",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dceaf979-6296-462c-a7ce-5246eae0f22e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a921bf3a-9e75-4141-89de-961f764d302e",
        "cursor": {
          "ref": "223e4439-c0a5-46b2-96d3-d1438bf45c61",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5475a81-997e-4012-afc8-a1e6b10e8978"
        },
        "item": {
          "id": "a921bf3a-9e75-4141-89de-961f764d302e",
          "name": "identifiers"
        },
        "response": {
          "id": "d68f9587-7308-4930-8cc2-9d2a485d1d60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a921bf3a-9e75-4141-89de-961f764d302e",
        "cursor": {
          "ref": "223e4439-c0a5-46b2-96d3-d1438bf45c61",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f5475a81-997e-4012-afc8-a1e6b10e8978"
        },
        "item": {
          "id": "a921bf3a-9e75-4141-89de-961f764d302e",
          "name": "identifiers"
        },
        "response": {
          "id": "d68f9587-7308-4930-8cc2-9d2a485d1d60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "91cb141d-9260-4b89-a91c-015040d6b9f3",
        "cursor": {
          "ref": "e597c9db-d7d0-49e6-ab06-ee6cb96103e5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "28e7f960-7227-4f8b-8b8a-8ed95aaf2d39"
        },
        "item": {
          "id": "91cb141d-9260-4b89-a91c-015040d6b9f3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6576833b-c00c-480d-ac60-dddbc5143c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cb141d-9260-4b89-a91c-015040d6b9f3",
        "cursor": {
          "ref": "e597c9db-d7d0-49e6-ab06-ee6cb96103e5",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "28e7f960-7227-4f8b-8b8a-8ed95aaf2d39"
        },
        "item": {
          "id": "91cb141d-9260-4b89-a91c-015040d6b9f3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6576833b-c00c-480d-ac60-dddbc5143c70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9efbb4-cc13-4aa0-8254-0edebcc53a80",
        "cursor": {
          "ref": "f0f7c64a-c170-4234-85cd-17d68bee5ac6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9339578f-1d09-40cb-90e3-7af9f3aeca5e"
        },
        "item": {
          "id": "ca9efbb4-cc13-4aa0-8254-0edebcc53a80",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "32c05554-d0b5-471e-bdad-08d19275b783",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9efbb4-cc13-4aa0-8254-0edebcc53a80",
        "cursor": {
          "ref": "f0f7c64a-c170-4234-85cd-17d68bee5ac6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9339578f-1d09-40cb-90e3-7af9f3aeca5e"
        },
        "item": {
          "id": "ca9efbb4-cc13-4aa0-8254-0edebcc53a80",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "32c05554-d0b5-471e-bdad-08d19275b783",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed8f1ec-8985-4594-a760-4a0572dda395",
        "cursor": {
          "ref": "6b3e15e5-6576-4613-b076-ba26d429cf64",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0cacada4-de7a-482f-a681-82d42a2702e0"
        },
        "item": {
          "id": "9ed8f1ec-8985-4594-a760-4a0572dda395",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e539b583-3ec7-41c2-9318-a07af746a4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed8f1ec-8985-4594-a760-4a0572dda395",
        "cursor": {
          "ref": "6b3e15e5-6576-4613-b076-ba26d429cf64",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0cacada4-de7a-482f-a681-82d42a2702e0"
        },
        "item": {
          "id": "9ed8f1ec-8985-4594-a760-4a0572dda395",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e539b583-3ec7-41c2-9318-a07af746a4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55babf98-34f7-47e9-8b2e-f01c32104844",
        "cursor": {
          "ref": "6ed12493-dd5f-4c25-98f8-1d9ff95727f4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59e0ea38-67f1-4d2e-9c56-26e450943b46"
        },
        "item": {
          "id": "55babf98-34f7-47e9-8b2e-f01c32104844",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d44e174c-ac77-42d8-b45b-d23a6cc5bee0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55babf98-34f7-47e9-8b2e-f01c32104844",
        "cursor": {
          "ref": "6ed12493-dd5f-4c25-98f8-1d9ff95727f4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "59e0ea38-67f1-4d2e-9c56-26e450943b46"
        },
        "item": {
          "id": "55babf98-34f7-47e9-8b2e-f01c32104844",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d44e174c-ac77-42d8-b45b-d23a6cc5bee0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc58996a-aff4-440d-8c2c-cfb8a72a0dab",
        "cursor": {
          "ref": "3db6c4a2-4aa9-43bf-8416-626eeef97279",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7b095f73-05d3-46ac-99a2-c6fd60a0d5e2"
        },
        "item": {
          "id": "dc58996a-aff4-440d-8c2c-cfb8a72a0dab",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5df553f4-a0c9-4ea7-8ad9-3fbeabe1c8ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc58996a-aff4-440d-8c2c-cfb8a72a0dab",
        "cursor": {
          "ref": "3db6c4a2-4aa9-43bf-8416-626eeef97279",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7b095f73-05d3-46ac-99a2-c6fd60a0d5e2"
        },
        "item": {
          "id": "dc58996a-aff4-440d-8c2c-cfb8a72a0dab",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5df553f4-a0c9-4ea7-8ad9-3fbeabe1c8ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d664cd-85a9-4f0b-9300-e147f0511935",
        "cursor": {
          "ref": "6b1cbf99-641b-44f3-bcac-cd04a6eef5d5",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9706288a-cd96-475f-8dbe-0fdaebb6044d"
        },
        "item": {
          "id": "83d664cd-85a9-4f0b-9300-e147f0511935",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "938f1a78-c8be-4146-be3e-531213d2e6f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d664cd-85a9-4f0b-9300-e147f0511935",
        "cursor": {
          "ref": "6b1cbf99-641b-44f3-bcac-cd04a6eef5d5",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9706288a-cd96-475f-8dbe-0fdaebb6044d"
        },
        "item": {
          "id": "83d664cd-85a9-4f0b-9300-e147f0511935",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "938f1a78-c8be-4146-be3e-531213d2e6f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1db62f7-25ef-4744-8480-4963528844c1",
        "cursor": {
          "ref": "30872e14-79a2-4903-822b-45ab5d90392d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aebaae82-f246-4c37-801b-252f11d5a30c"
        },
        "item": {
          "id": "a1db62f7-25ef-4744-8480-4963528844c1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9cb4c2ce-895e-41f0-ad0f-2efb12340e58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1db62f7-25ef-4744-8480-4963528844c1",
        "cursor": {
          "ref": "30872e14-79a2-4903-822b-45ab5d90392d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "aebaae82-f246-4c37-801b-252f11d5a30c"
        },
        "item": {
          "id": "a1db62f7-25ef-4744-8480-4963528844c1",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9cb4c2ce-895e-41f0-ad0f-2efb12340e58",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624137a7-b164-423a-8e3d-7cd538218ad9",
        "cursor": {
          "ref": "4a051e38-469b-4f75-b6c9-148e1609b087",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8457ee3b-067c-478a-9a5f-61c879513954"
        },
        "item": {
          "id": "624137a7-b164-423a-8e3d-7cd538218ad9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fc93fd1e-2066-4530-ae08-1d8728905eb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624137a7-b164-423a-8e3d-7cd538218ad9",
        "cursor": {
          "ref": "4a051e38-469b-4f75-b6c9-148e1609b087",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8457ee3b-067c-478a-9a5f-61c879513954"
        },
        "item": {
          "id": "624137a7-b164-423a-8e3d-7cd538218ad9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fc93fd1e-2066-4530-ae08-1d8728905eb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee51403-2779-4511-93a0-978824b5d2aa",
        "cursor": {
          "ref": "03b429b8-e2dd-43ee-a10f-84c83a77cf6d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "90a9e496-7b4d-430a-ab54-05c03607e12b"
        },
        "item": {
          "id": "eee51403-2779-4511-93a0-978824b5d2aa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3f18ad1f-6983-41da-9721-bce1bde0761b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee51403-2779-4511-93a0-978824b5d2aa",
        "cursor": {
          "ref": "03b429b8-e2dd-43ee-a10f-84c83a77cf6d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "90a9e496-7b4d-430a-ab54-05c03607e12b"
        },
        "item": {
          "id": "eee51403-2779-4511-93a0-978824b5d2aa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3f18ad1f-6983-41da-9721-bce1bde0761b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff83816f-b0d1-44a2-9702-549e3c04d70b",
        "cursor": {
          "ref": "cd50f915-9389-408f-b0d2-4ecb31a2d109",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8d98e46c-8469-4a6a-a14a-f1797c6aa9eb"
        },
        "item": {
          "id": "ff83816f-b0d1-44a2-9702-549e3c04d70b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cb322565-c4da-44bb-be48-1b48a7ceb7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff83816f-b0d1-44a2-9702-549e3c04d70b",
        "cursor": {
          "ref": "cd50f915-9389-408f-b0d2-4ecb31a2d109",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8d98e46c-8469-4a6a-a14a-f1797c6aa9eb"
        },
        "item": {
          "id": "ff83816f-b0d1-44a2-9702-549e3c04d70b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cb322565-c4da-44bb-be48-1b48a7ceb7b0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4127f77-fd09-4225-8fb4-b4c9f9b3aec2",
        "cursor": {
          "ref": "4b49782b-78bf-48c8-b19c-d3a06a45197b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "41aa070c-138a-4591-a23a-f4a6189780ae"
        },
        "item": {
          "id": "c4127f77-fd09-4225-8fb4-b4c9f9b3aec2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ee06b8fe-c240-44b3-a040-3186508a0fde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4127f77-fd09-4225-8fb4-b4c9f9b3aec2",
        "cursor": {
          "ref": "4b49782b-78bf-48c8-b19c-d3a06a45197b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "41aa070c-138a-4591-a23a-f4a6189780ae"
        },
        "item": {
          "id": "c4127f77-fd09-4225-8fb4-b4c9f9b3aec2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ee06b8fe-c240-44b3-a040-3186508a0fde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef46a59-de52-477b-827a-9c5b58a9cdb9",
        "cursor": {
          "ref": "4654d921-13fc-447f-96c7-a70f769f534c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ffe33ce9-166d-4b08-ba80-0da523871eee"
        },
        "item": {
          "id": "4ef46a59-de52-477b-827a-9c5b58a9cdb9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0a8ebc42-6b8b-4f69-9566-ea109c0c68d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef46a59-de52-477b-827a-9c5b58a9cdb9",
        "cursor": {
          "ref": "4654d921-13fc-447f-96c7-a70f769f534c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ffe33ce9-166d-4b08-ba80-0da523871eee"
        },
        "item": {
          "id": "4ef46a59-de52-477b-827a-9c5b58a9cdb9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0a8ebc42-6b8b-4f69-9566-ea109c0c68d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010a1478-8e6c-4e4c-b5a0-33b2f1a2028a",
        "cursor": {
          "ref": "78cc0900-b5b8-4aa8-9565-5479d1c97ce9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a00328fb-413b-416d-823b-b86d3462c093"
        },
        "item": {
          "id": "010a1478-8e6c-4e4c-b5a0-33b2f1a2028a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "abc860be-28d1-46e0-acf0-d4490b956072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010a1478-8e6c-4e4c-b5a0-33b2f1a2028a",
        "cursor": {
          "ref": "78cc0900-b5b8-4aa8-9565-5479d1c97ce9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a00328fb-413b-416d-823b-b86d3462c093"
        },
        "item": {
          "id": "010a1478-8e6c-4e4c-b5a0-33b2f1a2028a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "abc860be-28d1-46e0-acf0-d4490b956072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98381552-ae3d-4f83-a095-0d4ad6ac7658",
        "cursor": {
          "ref": "95797a9c-b044-4bb7-ba84-e89839b4c5cf",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae5e3df8-f93d-4332-af89-d5958cb02a86"
        },
        "item": {
          "id": "98381552-ae3d-4f83-a095-0d4ad6ac7658",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4965a4b8-5fad-44f5-9ed4-3b0d4029d02e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98381552-ae3d-4f83-a095-0d4ad6ac7658",
        "cursor": {
          "ref": "95797a9c-b044-4bb7-ba84-e89839b4c5cf",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae5e3df8-f93d-4332-af89-d5958cb02a86"
        },
        "item": {
          "id": "98381552-ae3d-4f83-a095-0d4ad6ac7658",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4965a4b8-5fad-44f5-9ed4-3b0d4029d02e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8e3015-70c4-440c-afe0-f9dd6b4fa8d2",
        "cursor": {
          "ref": "731dcd5f-abf3-4951-b0ef-e61149db574b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9416181c-99a3-4a3b-96c6-7c9e7b9df9b6"
        },
        "item": {
          "id": "8b8e3015-70c4-440c-afe0-f9dd6b4fa8d2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "19edf782-abc2-4b9a-a691-1ab5a57f4ecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8e3015-70c4-440c-afe0-f9dd6b4fa8d2",
        "cursor": {
          "ref": "731dcd5f-abf3-4951-b0ef-e61149db574b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9416181c-99a3-4a3b-96c6-7c9e7b9df9b6"
        },
        "item": {
          "id": "8b8e3015-70c4-440c-afe0-f9dd6b4fa8d2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "19edf782-abc2-4b9a-a691-1ab5a57f4ecb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2335c4-ad37-4d6f-9bde-69b523022bfd",
        "cursor": {
          "ref": "88f25348-f2f9-4118-bf68-2708b36e9ea6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12f034ce-7ecf-4f2c-8518-d357018ef092"
        },
        "item": {
          "id": "ba2335c4-ad37-4d6f-9bde-69b523022bfd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "657b886e-72b7-48bd-b4b7-c10106d05b48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2335c4-ad37-4d6f-9bde-69b523022bfd",
        "cursor": {
          "ref": "88f25348-f2f9-4118-bf68-2708b36e9ea6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "12f034ce-7ecf-4f2c-8518-d357018ef092"
        },
        "item": {
          "id": "ba2335c4-ad37-4d6f-9bde-69b523022bfd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "657b886e-72b7-48bd-b4b7-c10106d05b48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcecfd7-e119-4b1a-a50b-0723b0676dcf",
        "cursor": {
          "ref": "08cd007c-5df9-45f9-b518-a7e68737f397",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b30d95c-9b9e-46f8-851d-46c60977baf8"
        },
        "item": {
          "id": "0fcecfd7-e119-4b1a-a50b-0723b0676dcf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b180aea2-3cfe-430b-aa29-de4f5939fe39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcecfd7-e119-4b1a-a50b-0723b0676dcf",
        "cursor": {
          "ref": "08cd007c-5df9-45f9-b518-a7e68737f397",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2b30d95c-9b9e-46f8-851d-46c60977baf8"
        },
        "item": {
          "id": "0fcecfd7-e119-4b1a-a50b-0723b0676dcf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b180aea2-3cfe-430b-aa29-de4f5939fe39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74396b12-0969-40de-bf6e-67aea57c4b8a",
        "cursor": {
          "ref": "61a4b563-f7a6-4a97-b771-11397827993e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2ada7173-cca1-4cb9-8210-a0104a58868f"
        },
        "item": {
          "id": "74396b12-0969-40de-bf6e-67aea57c4b8a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a178a3a1-2448-45a0-a204-46a0d3ee22bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74396b12-0969-40de-bf6e-67aea57c4b8a",
        "cursor": {
          "ref": "61a4b563-f7a6-4a97-b771-11397827993e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2ada7173-cca1-4cb9-8210-a0104a58868f"
        },
        "item": {
          "id": "74396b12-0969-40de-bf6e-67aea57c4b8a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a178a3a1-2448-45a0-a204-46a0d3ee22bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9adfcc8-0d39-42e1-8d6c-b7abc3e1a1f2",
        "cursor": {
          "ref": "45763168-f7e5-429b-a144-64abe86cc892",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4404f1b1-ad34-4a49-bd68-5473c5bf0c67"
        },
        "item": {
          "id": "a9adfcc8-0d39-42e1-8d6c-b7abc3e1a1f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e1490fb6-bd1b-48cd-bf53-267e94cedf95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9adfcc8-0d39-42e1-8d6c-b7abc3e1a1f2",
        "cursor": {
          "ref": "45763168-f7e5-429b-a144-64abe86cc892",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4404f1b1-ad34-4a49-bd68-5473c5bf0c67"
        },
        "item": {
          "id": "a9adfcc8-0d39-42e1-8d6c-b7abc3e1a1f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e1490fb6-bd1b-48cd-bf53-267e94cedf95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeb9d5b-c9a7-45ed-9db2-5e8802e5194e",
        "cursor": {
          "ref": "d24497ec-9654-424a-a1bf-0de7fab2ee35",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5b4cccd8-815e-4ba3-8c2d-56ee0d324d2b"
        },
        "item": {
          "id": "baeb9d5b-c9a7-45ed-9db2-5e8802e5194e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aefd0172-6304-4a71-9187-8743539e2f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeb9d5b-c9a7-45ed-9db2-5e8802e5194e",
        "cursor": {
          "ref": "d24497ec-9654-424a-a1bf-0de7fab2ee35",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5b4cccd8-815e-4ba3-8c2d-56ee0d324d2b"
        },
        "item": {
          "id": "baeb9d5b-c9a7-45ed-9db2-5e8802e5194e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "aefd0172-6304-4a71-9187-8743539e2f47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cc0826-0c88-4ed8-af8a-f7092a06e48d",
        "cursor": {
          "ref": "79b71c10-df0a-4212-a7fc-e00ff130b612",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4658c84-9508-4fd7-92a4-6c2e91416178"
        },
        "item": {
          "id": "07cc0826-0c88-4ed8-af8a-f7092a06e48d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "86821a1e-7031-47b0-85cc-45b215933554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cc0826-0c88-4ed8-af8a-f7092a06e48d",
        "cursor": {
          "ref": "79b71c10-df0a-4212-a7fc-e00ff130b612",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e4658c84-9508-4fd7-92a4-6c2e91416178"
        },
        "item": {
          "id": "07cc0826-0c88-4ed8-af8a-f7092a06e48d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "86821a1e-7031-47b0-85cc-45b215933554",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f688e29-ba53-43cc-b6e2-bb9e371169d9",
        "cursor": {
          "ref": "a506bbe8-e553-474c-b645-74066daebfec",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a49ad5bb-e79e-4871-9f6a-cbd523d40a69"
        },
        "item": {
          "id": "8f688e29-ba53-43cc-b6e2-bb9e371169d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d82d74fd-d4c0-4aee-b133-60a3f51bdcf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f688e29-ba53-43cc-b6e2-bb9e371169d9",
        "cursor": {
          "ref": "a506bbe8-e553-474c-b645-74066daebfec",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a49ad5bb-e79e-4871-9f6a-cbd523d40a69"
        },
        "item": {
          "id": "8f688e29-ba53-43cc-b6e2-bb9e371169d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d82d74fd-d4c0-4aee-b133-60a3f51bdcf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ed632b-cf2a-4325-a03a-dc77e34848c5",
        "cursor": {
          "ref": "12e7482f-841d-40d6-9fcb-de6567ed261c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db9ca25c-3076-45e8-90c6-70ef43c86c87"
        },
        "item": {
          "id": "55ed632b-cf2a-4325-a03a-dc77e34848c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d91322a8-0227-4a66-a7b2-98f1682ba8f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ed632b-cf2a-4325-a03a-dc77e34848c5",
        "cursor": {
          "ref": "12e7482f-841d-40d6-9fcb-de6567ed261c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "db9ca25c-3076-45e8-90c6-70ef43c86c87"
        },
        "item": {
          "id": "55ed632b-cf2a-4325-a03a-dc77e34848c5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d91322a8-0227-4a66-a7b2-98f1682ba8f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6411f799-d3d0-4e1a-8c42-252b424e59ad",
        "cursor": {
          "ref": "25872578-1031-445a-9a9b-98ff3dcd70bd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08356d29-8f6b-4d95-975a-f02dfb623165"
        },
        "item": {
          "id": "6411f799-d3d0-4e1a-8c42-252b424e59ad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9aa2e78-1796-420d-ac13-dff0383723e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6411f799-d3d0-4e1a-8c42-252b424e59ad",
        "cursor": {
          "ref": "25872578-1031-445a-9a9b-98ff3dcd70bd",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08356d29-8f6b-4d95-975a-f02dfb623165"
        },
        "item": {
          "id": "6411f799-d3d0-4e1a-8c42-252b424e59ad",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9aa2e78-1796-420d-ac13-dff0383723e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708dad35-1c8c-41bb-a323-77ccb075f1f6",
        "cursor": {
          "ref": "daa5e1f0-ffb9-4859-8b56-c830a080f308",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f07caca7-f203-4514-b455-928f16d3a2ed"
        },
        "item": {
          "id": "708dad35-1c8c-41bb-a323-77ccb075f1f6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5f63a1a9-4887-46d4-a974-ee9b3de08d94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708dad35-1c8c-41bb-a323-77ccb075f1f6",
        "cursor": {
          "ref": "daa5e1f0-ffb9-4859-8b56-c830a080f308",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f07caca7-f203-4514-b455-928f16d3a2ed"
        },
        "item": {
          "id": "708dad35-1c8c-41bb-a323-77ccb075f1f6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5f63a1a9-4887-46d4-a974-ee9b3de08d94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e1aa09-077c-4d6d-b2c1-fc99520be5a8",
        "cursor": {
          "ref": "6cb6c8e7-cf65-4fb6-9e13-4f7b29d12efa",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9a4376f2-56e9-4883-aac6-32dabe5ae574"
        },
        "item": {
          "id": "b2e1aa09-077c-4d6d-b2c1-fc99520be5a8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "070f3085-2212-4c59-9ef5-8b50d22b9d1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e1aa09-077c-4d6d-b2c1-fc99520be5a8",
        "cursor": {
          "ref": "6cb6c8e7-cf65-4fb6-9e13-4f7b29d12efa",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9a4376f2-56e9-4883-aac6-32dabe5ae574"
        },
        "item": {
          "id": "b2e1aa09-077c-4d6d-b2c1-fc99520be5a8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "070f3085-2212-4c59-9ef5-8b50d22b9d1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711f0dda-90d2-44bf-ae44-440ad3490eaf",
        "cursor": {
          "ref": "92b51897-8b56-46d3-9d23-8e0a0ac04054",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a4ba96d4-3b8d-41e5-b9a7-6e2a1bd02070"
        },
        "item": {
          "id": "711f0dda-90d2-44bf-ae44-440ad3490eaf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "35c43104-3e1e-4547-b89a-d8fb6ed002f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711f0dda-90d2-44bf-ae44-440ad3490eaf",
        "cursor": {
          "ref": "92b51897-8b56-46d3-9d23-8e0a0ac04054",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a4ba96d4-3b8d-41e5-b9a7-6e2a1bd02070"
        },
        "item": {
          "id": "711f0dda-90d2-44bf-ae44-440ad3490eaf",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "35c43104-3e1e-4547-b89a-d8fb6ed002f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2dcdcfb-eca7-4df3-810c-e2856b186f9d",
        "cursor": {
          "ref": "b5734934-12ea-4028-bfb5-d827462c7aff",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "26bf0a06-1d13-46df-8a12-8ade21950711"
        },
        "item": {
          "id": "d2dcdcfb-eca7-4df3-810c-e2856b186f9d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fcbdd867-8c1b-4111-bab0-cb192c124521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2dcdcfb-eca7-4df3-810c-e2856b186f9d",
        "cursor": {
          "ref": "b5734934-12ea-4028-bfb5-d827462c7aff",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "26bf0a06-1d13-46df-8a12-8ade21950711"
        },
        "item": {
          "id": "d2dcdcfb-eca7-4df3-810c-e2856b186f9d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fcbdd867-8c1b-4111-bab0-cb192c124521",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5570dbc-acac-4e1c-ba3a-b5b54fe5ee38",
        "cursor": {
          "ref": "70144f65-2d6b-4031-970c-69f4f4337a8b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3085d895-1e7c-4672-b18d-0a213b481973"
        },
        "item": {
          "id": "d5570dbc-acac-4e1c-ba3a-b5b54fe5ee38",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0802f6b8-37b4-47e6-aea5-28a8389c7c10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5570dbc-acac-4e1c-ba3a-b5b54fe5ee38",
        "cursor": {
          "ref": "70144f65-2d6b-4031-970c-69f4f4337a8b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3085d895-1e7c-4672-b18d-0a213b481973"
        },
        "item": {
          "id": "d5570dbc-acac-4e1c-ba3a-b5b54fe5ee38",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0802f6b8-37b4-47e6-aea5-28a8389c7c10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d778565-58f1-4ea9-a046-c7d5b5508e6f",
        "cursor": {
          "ref": "24572638-972c-4670-be54-648ad72aabaa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "07791dbe-bdbb-475c-9613-da6e75ce136a"
        },
        "item": {
          "id": "4d778565-58f1-4ea9-a046-c7d5b5508e6f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bfc6888a-307d-45ff-b1a8-b77735036641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d778565-58f1-4ea9-a046-c7d5b5508e6f",
        "cursor": {
          "ref": "24572638-972c-4670-be54-648ad72aabaa",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "07791dbe-bdbb-475c-9613-da6e75ce136a"
        },
        "item": {
          "id": "4d778565-58f1-4ea9-a046-c7d5b5508e6f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bfc6888a-307d-45ff-b1a8-b77735036641",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b72f8f-cf50-41c3-b818-10562cd75184",
        "cursor": {
          "ref": "cb0525fa-c89e-40e2-ae8c-4cdeaa31aed7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5f28c37d-2301-401e-bd41-a96e6e93edbe"
        },
        "item": {
          "id": "73b72f8f-cf50-41c3-b818-10562cd75184",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "81ea2e67-d7bc-4806-8393-e347e12969ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b72f8f-cf50-41c3-b818-10562cd75184",
        "cursor": {
          "ref": "cb0525fa-c89e-40e2-ae8c-4cdeaa31aed7",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5f28c37d-2301-401e-bd41-a96e6e93edbe"
        },
        "item": {
          "id": "73b72f8f-cf50-41c3-b818-10562cd75184",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "81ea2e67-d7bc-4806-8393-e347e12969ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf3541e-7882-4258-abdb-5edb4064df99",
        "cursor": {
          "ref": "09bdf05f-7ff9-4885-9c10-3abcc8522a8f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b7f00424-8eca-4a8f-bab6-57afd710607a"
        },
        "item": {
          "id": "cdf3541e-7882-4258-abdb-5edb4064df99",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "548e9ee4-5359-496f-9068-8c9d55acf66e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf3541e-7882-4258-abdb-5edb4064df99",
        "cursor": {
          "ref": "09bdf05f-7ff9-4885-9c10-3abcc8522a8f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b7f00424-8eca-4a8f-bab6-57afd710607a"
        },
        "item": {
          "id": "cdf3541e-7882-4258-abdb-5edb4064df99",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "548e9ee4-5359-496f-9068-8c9d55acf66e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9aacf27-2ff0-4705-b823-a1194ca5ccc8",
        "cursor": {
          "ref": "9c2cc13f-10da-444a-a9be-593332b1d3df",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b6d770d7-8ec2-4fe4-9c96-c2ac8a152a58"
        },
        "item": {
          "id": "f9aacf27-2ff0-4705-b823-a1194ca5ccc8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e06ab24-768d-4e30-8f21-be980b83f1e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9aacf27-2ff0-4705-b823-a1194ca5ccc8",
        "cursor": {
          "ref": "9c2cc13f-10da-444a-a9be-593332b1d3df",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b6d770d7-8ec2-4fe4-9c96-c2ac8a152a58"
        },
        "item": {
          "id": "f9aacf27-2ff0-4705-b823-a1194ca5ccc8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e06ab24-768d-4e30-8f21-be980b83f1e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c18fc13-1cf0-48a1-a280-de4cde14fe49",
        "cursor": {
          "ref": "68986b22-1c76-4daa-b975-dd791290218e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dfad8d68-e3cd-41ae-85c5-d8ee615e73c2"
        },
        "item": {
          "id": "0c18fc13-1cf0-48a1-a280-de4cde14fe49",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1e252d27-1a5a-41bf-bc9f-5ca8c56def05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c18fc13-1cf0-48a1-a280-de4cde14fe49",
        "cursor": {
          "ref": "68986b22-1c76-4daa-b975-dd791290218e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dfad8d68-e3cd-41ae-85c5-d8ee615e73c2"
        },
        "item": {
          "id": "0c18fc13-1cf0-48a1-a280-de4cde14fe49",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1e252d27-1a5a-41bf-bc9f-5ca8c56def05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f71494d-855c-4b6d-8fe6-85db1c1ea127",
        "cursor": {
          "ref": "101c66e9-6938-4f7e-8af6-8727eeac68ac",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a0d71b76-66fc-4e86-a30e-090bed12bcf0"
        },
        "item": {
          "id": "5f71494d-855c-4b6d-8fe6-85db1c1ea127",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1e048015-1da0-4906-b216-aee57bd6299e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f71494d-855c-4b6d-8fe6-85db1c1ea127",
        "cursor": {
          "ref": "101c66e9-6938-4f7e-8af6-8727eeac68ac",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a0d71b76-66fc-4e86-a30e-090bed12bcf0"
        },
        "item": {
          "id": "5f71494d-855c-4b6d-8fe6-85db1c1ea127",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1e048015-1da0-4906-b216-aee57bd6299e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25de9ae4-c831-44dd-890a-856086ab3b01",
        "cursor": {
          "ref": "b3799db6-157f-4a17-bc43-5b8e75c6be4e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cde05af4-b3f9-403d-8a06-a56b817ce410"
        },
        "item": {
          "id": "25de9ae4-c831-44dd-890a-856086ab3b01",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e99f630a-f383-4f66-b461-1b16c1847c4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25de9ae4-c831-44dd-890a-856086ab3b01",
        "cursor": {
          "ref": "b3799db6-157f-4a17-bc43-5b8e75c6be4e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cde05af4-b3f9-403d-8a06-a56b817ce410"
        },
        "item": {
          "id": "25de9ae4-c831-44dd-890a-856086ab3b01",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e99f630a-f383-4f66-b461-1b16c1847c4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba83a37-61b9-49a3-b15d-d93784c0c4dc",
        "cursor": {
          "ref": "6efc59fa-a730-453d-a64b-9e4372064c22",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6d70aeb4-0375-46cf-ab69-ed0c43adf62d"
        },
        "item": {
          "id": "1ba83a37-61b9-49a3-b15d-d93784c0c4dc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "30fc21ed-3b7e-4624-beb3-6c2fe9d077ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba83a37-61b9-49a3-b15d-d93784c0c4dc",
        "cursor": {
          "ref": "6efc59fa-a730-453d-a64b-9e4372064c22",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6d70aeb4-0375-46cf-ab69-ed0c43adf62d"
        },
        "item": {
          "id": "1ba83a37-61b9-49a3-b15d-d93784c0c4dc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "30fc21ed-3b7e-4624-beb3-6c2fe9d077ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7f063b-6755-4500-be4b-73aafefab183",
        "cursor": {
          "ref": "94f30fbc-457f-4aca-889e-df2bc63675d8",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "69822e87-1b8f-4859-8821-2d8a8e232bdd"
        },
        "item": {
          "id": "8e7f063b-6755-4500-be4b-73aafefab183",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fcd2905a-abdc-4962-8a40-5bb8be9c2e3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7f063b-6755-4500-be4b-73aafefab183",
        "cursor": {
          "ref": "94f30fbc-457f-4aca-889e-df2bc63675d8",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "69822e87-1b8f-4859-8821-2d8a8e232bdd"
        },
        "item": {
          "id": "8e7f063b-6755-4500-be4b-73aafefab183",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fcd2905a-abdc-4962-8a40-5bb8be9c2e3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a65ed95-4b45-49c7-815c-9db637fda56f",
        "cursor": {
          "ref": "c910bf5c-8ceb-4be1-ba1c-4aa925181b81",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "300f3ee7-452d-429a-ab1a-c92e3fec70a9"
        },
        "item": {
          "id": "7a65ed95-4b45-49c7-815c-9db637fda56f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "99a18692-1fe8-4b5d-83a1-4d3b353c944d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a65ed95-4b45-49c7-815c-9db637fda56f",
        "cursor": {
          "ref": "c910bf5c-8ceb-4be1-ba1c-4aa925181b81",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "300f3ee7-452d-429a-ab1a-c92e3fec70a9"
        },
        "item": {
          "id": "7a65ed95-4b45-49c7-815c-9db637fda56f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "99a18692-1fe8-4b5d-83a1-4d3b353c944d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3132b451-deb2-41a6-8b66-7bba6378aaf7",
        "cursor": {
          "ref": "d25ca434-d2f9-469a-bed8-972347501df9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "be9273f7-63d2-4662-988c-670029f69346"
        },
        "item": {
          "id": "3132b451-deb2-41a6-8b66-7bba6378aaf7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "04d45af1-7593-4021-be42-ba6aff14bcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3132b451-deb2-41a6-8b66-7bba6378aaf7",
        "cursor": {
          "ref": "d25ca434-d2f9-469a-bed8-972347501df9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "be9273f7-63d2-4662-988c-670029f69346"
        },
        "item": {
          "id": "3132b451-deb2-41a6-8b66-7bba6378aaf7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "04d45af1-7593-4021-be42-ba6aff14bcb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e9cf54-804c-4a9d-96f7-383c37f94ebc",
        "cursor": {
          "ref": "8e131c07-916c-4b1c-96dd-73890b91c325",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e134d816-8c27-4c67-8b5c-8d7d52e24859"
        },
        "item": {
          "id": "e8e9cf54-804c-4a9d-96f7-383c37f94ebc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "aa08b31c-ca34-42bf-9eb5-4e5698660488",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e9cf54-804c-4a9d-96f7-383c37f94ebc",
        "cursor": {
          "ref": "8e131c07-916c-4b1c-96dd-73890b91c325",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e134d816-8c27-4c67-8b5c-8d7d52e24859"
        },
        "item": {
          "id": "e8e9cf54-804c-4a9d-96f7-383c37f94ebc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "aa08b31c-ca34-42bf-9eb5-4e5698660488",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff6cfc-48c9-44c1-ae05-29b951166ef0",
        "cursor": {
          "ref": "5d05f417-e1cf-4ea3-9bb7-5f430f1946ff",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f3a97c56-61fa-411d-88e7-f6fd79926edb"
        },
        "item": {
          "id": "e2ff6cfc-48c9-44c1-ae05-29b951166ef0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "08dc6dc6-c5c4-47b1-acf7-754268f349c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff6cfc-48c9-44c1-ae05-29b951166ef0",
        "cursor": {
          "ref": "5d05f417-e1cf-4ea3-9bb7-5f430f1946ff",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f3a97c56-61fa-411d-88e7-f6fd79926edb"
        },
        "item": {
          "id": "e2ff6cfc-48c9-44c1-ae05-29b951166ef0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "08dc6dc6-c5c4-47b1-acf7-754268f349c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828ac853-9155-46fb-ac69-63692bfc982b",
        "cursor": {
          "ref": "2f6083a8-a48c-44ea-b982-6282f9ad7a6f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c1f1d08d-fd1a-46cc-b791-1d0c7e107923"
        },
        "item": {
          "id": "828ac853-9155-46fb-ac69-63692bfc982b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "255ab594-7d40-4b84-80f3-1d6d9feb638e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828ac853-9155-46fb-ac69-63692bfc982b",
        "cursor": {
          "ref": "2f6083a8-a48c-44ea-b982-6282f9ad7a6f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "c1f1d08d-fd1a-46cc-b791-1d0c7e107923"
        },
        "item": {
          "id": "828ac853-9155-46fb-ac69-63692bfc982b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "255ab594-7d40-4b84-80f3-1d6d9feb638e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d801505a-4e79-4840-929b-9a2b21d75ba2",
        "cursor": {
          "ref": "7f9add28-b1b7-4041-9aa7-fd8f6c4b8d00",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "202af99d-6176-4ac6-a4b0-c267859a1eab"
        },
        "item": {
          "id": "d801505a-4e79-4840-929b-9a2b21d75ba2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1ac0211c-a6ed-4427-aebc-74cb91b0a0d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d801505a-4e79-4840-929b-9a2b21d75ba2",
        "cursor": {
          "ref": "7f9add28-b1b7-4041-9aa7-fd8f6c4b8d00",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "202af99d-6176-4ac6-a4b0-c267859a1eab"
        },
        "item": {
          "id": "d801505a-4e79-4840-929b-9a2b21d75ba2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1ac0211c-a6ed-4427-aebc-74cb91b0a0d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9733d0e2-c57e-46fa-836f-9415f21990b8",
        "cursor": {
          "ref": "3498bffe-ed5b-4bb9-8faa-cd2a6967a391",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f6528b2b-8936-48b9-b7de-fe6d920704cb"
        },
        "item": {
          "id": "9733d0e2-c57e-46fa-836f-9415f21990b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ea52c141-29c9-402e-bfb4-6131d9f0ad91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9733d0e2-c57e-46fa-836f-9415f21990b8",
        "cursor": {
          "ref": "3498bffe-ed5b-4bb9-8faa-cd2a6967a391",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f6528b2b-8936-48b9-b7de-fe6d920704cb"
        },
        "item": {
          "id": "9733d0e2-c57e-46fa-836f-9415f21990b8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ea52c141-29c9-402e-bfb4-6131d9f0ad91",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0966cc46-2e4d-4874-ab65-c4d09f716272",
        "cursor": {
          "ref": "d4d63d2b-d7b3-47d4-aaf5-3b2bcaaf08cf",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fae941cb-ce1f-478c-b56d-3df7d21ecf8a"
        },
        "item": {
          "id": "0966cc46-2e4d-4874-ab65-c4d09f716272",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "11f599a6-27b7-414d-9a89-010e2481d39e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0966cc46-2e4d-4874-ab65-c4d09f716272",
        "cursor": {
          "ref": "d4d63d2b-d7b3-47d4-aaf5-3b2bcaaf08cf",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "fae941cb-ce1f-478c-b56d-3df7d21ecf8a"
        },
        "item": {
          "id": "0966cc46-2e4d-4874-ab65-c4d09f716272",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "11f599a6-27b7-414d-9a89-010e2481d39e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce470fb7-8b62-48ef-8420-9057f2c23ab0",
        "cursor": {
          "ref": "a72eafba-83aa-4cdf-a372-e4fbdd70f2bb",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "166781bc-a718-4179-93e4-1177afbfa738"
        },
        "item": {
          "id": "ce470fb7-8b62-48ef-8420-9057f2c23ab0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eef868e5-8869-4e23-a141-cc36b95ac78e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce470fb7-8b62-48ef-8420-9057f2c23ab0",
        "cursor": {
          "ref": "a72eafba-83aa-4cdf-a372-e4fbdd70f2bb",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "166781bc-a718-4179-93e4-1177afbfa738"
        },
        "item": {
          "id": "ce470fb7-8b62-48ef-8420-9057f2c23ab0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "eef868e5-8869-4e23-a141-cc36b95ac78e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1471ff-65b3-405e-8be2-4c82ca9b3fe6",
        "cursor": {
          "ref": "38b05d7b-605b-4571-b335-77844cc9daa4",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6ef1052c-ca04-44ee-8639-5999027c024b"
        },
        "item": {
          "id": "9f1471ff-65b3-405e-8be2-4c82ca9b3fe6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7ccaaec-41ca-44f3-b2a5-152afa0857d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1471ff-65b3-405e-8be2-4c82ca9b3fe6",
        "cursor": {
          "ref": "38b05d7b-605b-4571-b335-77844cc9daa4",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6ef1052c-ca04-44ee-8639-5999027c024b"
        },
        "item": {
          "id": "9f1471ff-65b3-405e-8be2-4c82ca9b3fe6",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7ccaaec-41ca-44f3-b2a5-152afa0857d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09add42-88f1-4e66-9785-2ac98cb0a23a",
        "cursor": {
          "ref": "502ebcdc-e8bf-4290-8c4c-c18e60e94863",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "84611198-c28a-4ea2-9fd4-67e147327a04"
        },
        "item": {
          "id": "d09add42-88f1-4e66-9785-2ac98cb0a23a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bea6d9fe-9128-497e-aa5f-ef94843cfd11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09add42-88f1-4e66-9785-2ac98cb0a23a",
        "cursor": {
          "ref": "502ebcdc-e8bf-4290-8c4c-c18e60e94863",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "84611198-c28a-4ea2-9fd4-67e147327a04"
        },
        "item": {
          "id": "d09add42-88f1-4e66-9785-2ac98cb0a23a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bea6d9fe-9128-497e-aa5f-ef94843cfd11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f21f547-9a0f-4655-9ac8-826cdc3c2b2f",
        "cursor": {
          "ref": "feaaee72-4df6-49cb-9598-eb7165f133c6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "490ba732-feae-4a2d-a0f6-97b2e4f55b6f"
        },
        "item": {
          "id": "5f21f547-9a0f-4655-9ac8-826cdc3c2b2f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d54fe91-d73d-4fd6-8103-75dd39a5b191",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f21f547-9a0f-4655-9ac8-826cdc3c2b2f",
        "cursor": {
          "ref": "feaaee72-4df6-49cb-9598-eb7165f133c6",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "490ba732-feae-4a2d-a0f6-97b2e4f55b6f"
        },
        "item": {
          "id": "5f21f547-9a0f-4655-9ac8-826cdc3c2b2f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d54fe91-d73d-4fd6-8103-75dd39a5b191",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf7d623-5894-423e-8a99-7e10e133da8f",
        "cursor": {
          "ref": "cab7ed03-2290-44f4-9e49-9c4a402cc8a0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9bb7bc52-07a5-478a-aa5c-98d61b82d19d"
        },
        "item": {
          "id": "aaf7d623-5894-423e-8a99-7e10e133da8f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "21d2dd87-0383-48e1-94fb-44a14f5e6bef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf7d623-5894-423e-8a99-7e10e133da8f",
        "cursor": {
          "ref": "cab7ed03-2290-44f4-9e49-9c4a402cc8a0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9bb7bc52-07a5-478a-aa5c-98d61b82d19d"
        },
        "item": {
          "id": "aaf7d623-5894-423e-8a99-7e10e133da8f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "21d2dd87-0383-48e1-94fb-44a14f5e6bef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a469c9-fccc-4b3c-b427-54a10b23dfc6",
        "cursor": {
          "ref": "b352c06b-bf2e-4453-8fc0-dcdaa1c71308",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ff7c79f9-9e1b-4937-bee1-a612914ec631"
        },
        "item": {
          "id": "06a469c9-fccc-4b3c-b427-54a10b23dfc6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9a00acac-ce88-4c4c-81da-f4562be63b12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a469c9-fccc-4b3c-b427-54a10b23dfc6",
        "cursor": {
          "ref": "b352c06b-bf2e-4453-8fc0-dcdaa1c71308",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ff7c79f9-9e1b-4937-bee1-a612914ec631"
        },
        "item": {
          "id": "06a469c9-fccc-4b3c-b427-54a10b23dfc6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9a00acac-ce88-4c4c-81da-f4562be63b12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de59d75-6d6f-4309-b4b5-8123d43274ab",
        "cursor": {
          "ref": "07e99d44-bede-4e5c-8d80-6760f93729b7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cac0cdac-cf30-4e6d-9cd4-72829eade844"
        },
        "item": {
          "id": "0de59d75-6d6f-4309-b4b5-8123d43274ab",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "746016e5-6523-49d5-81a7-9e342ce3d946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0de59d75-6d6f-4309-b4b5-8123d43274ab",
        "cursor": {
          "ref": "07e99d44-bede-4e5c-8d80-6760f93729b7",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cac0cdac-cf30-4e6d-9cd4-72829eade844"
        },
        "item": {
          "id": "0de59d75-6d6f-4309-b4b5-8123d43274ab",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "746016e5-6523-49d5-81a7-9e342ce3d946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b28c40-c2b9-4910-897c-5a3bf67925a7",
        "cursor": {
          "ref": "532daa05-39f5-4dbe-ac3d-5806397098ed",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a099321e-e639-43fc-993b-263b284c5163"
        },
        "item": {
          "id": "c6b28c40-c2b9-4910-897c-5a3bf67925a7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b92efc8c-915f-4b1a-8353-62890be8b0b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b28c40-c2b9-4910-897c-5a3bf67925a7",
        "cursor": {
          "ref": "532daa05-39f5-4dbe-ac3d-5806397098ed",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "a099321e-e639-43fc-993b-263b284c5163"
        },
        "item": {
          "id": "c6b28c40-c2b9-4910-897c-5a3bf67925a7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b92efc8c-915f-4b1a-8353-62890be8b0b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724a152a-2280-40e0-b27a-df03fcdcffca",
        "cursor": {
          "ref": "3388f459-c002-4952-90ec-53125df0b765",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d45fd2fe-c039-4568-b7fb-67967ec690b5"
        },
        "item": {
          "id": "724a152a-2280-40e0-b27a-df03fcdcffca",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "38d99940-c669-4855-b066-7c8aa92b3e93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724a152a-2280-40e0-b27a-df03fcdcffca",
        "cursor": {
          "ref": "3388f459-c002-4952-90ec-53125df0b765",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d45fd2fe-c039-4568-b7fb-67967ec690b5"
        },
        "item": {
          "id": "724a152a-2280-40e0-b27a-df03fcdcffca",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "38d99940-c669-4855-b066-7c8aa92b3e93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c026bac9-a465-479c-8923-2c68efbf7ba4",
        "cursor": {
          "ref": "6593acd9-2add-4372-83ed-ceaa2cec9ec1",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "49b93210-fda7-4afb-a76e-6d71524031ca"
        },
        "item": {
          "id": "c026bac9-a465-479c-8923-2c68efbf7ba4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "69b84a5c-2e95-42a4-a677-574f04185c79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c026bac9-a465-479c-8923-2c68efbf7ba4",
        "cursor": {
          "ref": "6593acd9-2add-4372-83ed-ceaa2cec9ec1",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "49b93210-fda7-4afb-a76e-6d71524031ca"
        },
        "item": {
          "id": "c026bac9-a465-479c-8923-2c68efbf7ba4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "69b84a5c-2e95-42a4-a677-574f04185c79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e9811c-0ed2-416e-8843-9073c80714fe",
        "cursor": {
          "ref": "ead586c1-eafb-4528-9e8a-71b9a658f865",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "94a2287a-7bbe-4ef8-ac50-ad16dbd6bb9f"
        },
        "item": {
          "id": "89e9811c-0ed2-416e-8843-9073c80714fe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c1db60be-8926-4cbe-9cae-3b91182edf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e9811c-0ed2-416e-8843-9073c80714fe",
        "cursor": {
          "ref": "ead586c1-eafb-4528-9e8a-71b9a658f865",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "94a2287a-7bbe-4ef8-ac50-ad16dbd6bb9f"
        },
        "item": {
          "id": "89e9811c-0ed2-416e-8843-9073c80714fe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c1db60be-8926-4cbe-9cae-3b91182edf61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87d8822-59e4-4b7c-ab9c-4c52046a0dac",
        "cursor": {
          "ref": "e1456eee-7c51-4c4a-91b7-e6329e9a32db",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5cc83a0a-71b5-4883-a512-3740bb31eb82"
        },
        "item": {
          "id": "b87d8822-59e4-4b7c-ab9c-4c52046a0dac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3cc05400-fe03-4af6-ae34-056bedac03f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87d8822-59e4-4b7c-ab9c-4c52046a0dac",
        "cursor": {
          "ref": "e1456eee-7c51-4c4a-91b7-e6329e9a32db",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5cc83a0a-71b5-4883-a512-3740bb31eb82"
        },
        "item": {
          "id": "b87d8822-59e4-4b7c-ab9c-4c52046a0dac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3cc05400-fe03-4af6-ae34-056bedac03f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e26ec6-9792-483f-9006-6e776649b29f",
        "cursor": {
          "ref": "9aebaf85-66f1-43af-b0ec-f6fe646d8dc0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e76d2443-0755-4bc0-b85f-d843084325b8"
        },
        "item": {
          "id": "91e26ec6-9792-483f-9006-6e776649b29f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "270117b9-6d98-4645-a107-71538016bf44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e26ec6-9792-483f-9006-6e776649b29f",
        "cursor": {
          "ref": "9aebaf85-66f1-43af-b0ec-f6fe646d8dc0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e76d2443-0755-4bc0-b85f-d843084325b8"
        },
        "item": {
          "id": "91e26ec6-9792-483f-9006-6e776649b29f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "270117b9-6d98-4645-a107-71538016bf44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5dd681-27bd-4f2f-9a5e-1ae84cb3b69c",
        "cursor": {
          "ref": "53934725-ffe2-4c89-9a9c-e53863df5cf4",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a5e9b422-72d1-4658-af50-a0df752283c7"
        },
        "item": {
          "id": "ae5dd681-27bd-4f2f-9a5e-1ae84cb3b69c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df3bfe16-f145-4e27-9f40-de7e9112d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5dd681-27bd-4f2f-9a5e-1ae84cb3b69c",
        "cursor": {
          "ref": "53934725-ffe2-4c89-9a9c-e53863df5cf4",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a5e9b422-72d1-4658-af50-a0df752283c7"
        },
        "item": {
          "id": "ae5dd681-27bd-4f2f-9a5e-1ae84cb3b69c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df3bfe16-f145-4e27-9f40-de7e9112d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cafb2bc-5746-4daa-a926-0d76a412a84a",
        "cursor": {
          "ref": "ee7641dd-677d-4101-9b2e-d59102024e0a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17488291-90fd-4a16-a992-efb92357fff5"
        },
        "item": {
          "id": "2cafb2bc-5746-4daa-a926-0d76a412a84a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "72c87273-835c-4c71-b4a0-5454f44f63fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cafb2bc-5746-4daa-a926-0d76a412a84a",
        "cursor": {
          "ref": "ee7641dd-677d-4101-9b2e-d59102024e0a",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "17488291-90fd-4a16-a992-efb92357fff5"
        },
        "item": {
          "id": "2cafb2bc-5746-4daa-a926-0d76a412a84a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "72c87273-835c-4c71-b4a0-5454f44f63fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c2b1ea-0840-4720-829c-5c6b704aa2b8",
        "cursor": {
          "ref": "ec16f0a6-6fc4-4545-9b00-1fb9243e6c1b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "74b413f7-cca5-4f59-bb3c-75c6f0ac6fc5"
        },
        "item": {
          "id": "04c2b1ea-0840-4720-829c-5c6b704aa2b8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e4e83f6a-cf54-4ee5-9af9-e3a1af49e4a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c2b1ea-0840-4720-829c-5c6b704aa2b8",
        "cursor": {
          "ref": "ec16f0a6-6fc4-4545-9b00-1fb9243e6c1b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "74b413f7-cca5-4f59-bb3c-75c6f0ac6fc5"
        },
        "item": {
          "id": "04c2b1ea-0840-4720-829c-5c6b704aa2b8",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e4e83f6a-cf54-4ee5-9af9-e3a1af49e4a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36132cbc-1cfd-49d6-9934-12084dc7b1ba",
        "cursor": {
          "ref": "3f7eee41-6169-4c95-9760-8ac827f7fa50",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a1e4bd0f-a8d1-4223-ac87-79b1250334da"
        },
        "item": {
          "id": "36132cbc-1cfd-49d6-9934-12084dc7b1ba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f50cb72b-c625-4576-bf4a-7d2ffdf05def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36132cbc-1cfd-49d6-9934-12084dc7b1ba",
        "cursor": {
          "ref": "3f7eee41-6169-4c95-9760-8ac827f7fa50",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a1e4bd0f-a8d1-4223-ac87-79b1250334da"
        },
        "item": {
          "id": "36132cbc-1cfd-49d6-9934-12084dc7b1ba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f50cb72b-c625-4576-bf4a-7d2ffdf05def",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2f7a4f-9c83-413f-a25d-cfd943956710",
        "cursor": {
          "ref": "581ff7c4-e4f9-475e-b54f-32aae51b925e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4e22d6a9-30ad-4cbb-ad12-a5c9b89fe45f"
        },
        "item": {
          "id": "cc2f7a4f-9c83-413f-a25d-cfd943956710",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f9c86b63-ad02-47da-bce3-c1d56f829b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2f7a4f-9c83-413f-a25d-cfd943956710",
        "cursor": {
          "ref": "581ff7c4-e4f9-475e-b54f-32aae51b925e",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4e22d6a9-30ad-4cbb-ad12-a5c9b89fe45f"
        },
        "item": {
          "id": "cc2f7a4f-9c83-413f-a25d-cfd943956710",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f9c86b63-ad02-47da-bce3-c1d56f829b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c88f97-7ae4-4db4-8cf2-82bb97913a04",
        "cursor": {
          "ref": "f6078c91-429c-4fbb-901b-eac7bb72c256",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "414ac7e6-4e69-48e5-bc20-e1e58e30414d"
        },
        "item": {
          "id": "b7c88f97-7ae4-4db4-8cf2-82bb97913a04",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b86e11cb-a095-4074-863e-b898c257b62f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c88f97-7ae4-4db4-8cf2-82bb97913a04",
        "cursor": {
          "ref": "f6078c91-429c-4fbb-901b-eac7bb72c256",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "414ac7e6-4e69-48e5-bc20-e1e58e30414d"
        },
        "item": {
          "id": "b7c88f97-7ae4-4db4-8cf2-82bb97913a04",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b86e11cb-a095-4074-863e-b898c257b62f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc75d473-2949-41dd-bae0-3ae220025a47",
        "cursor": {
          "ref": "f5095b2b-2aec-460a-9790-d61e45487dcf",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2ba679f6-2b02-476c-a792-e9db45ee65e6"
        },
        "item": {
          "id": "fc75d473-2949-41dd-bae0-3ae220025a47",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d80f309e-f717-4397-913c-70a2570df2f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc75d473-2949-41dd-bae0-3ae220025a47",
        "cursor": {
          "ref": "f5095b2b-2aec-460a-9790-d61e45487dcf",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "2ba679f6-2b02-476c-a792-e9db45ee65e6"
        },
        "item": {
          "id": "fc75d473-2949-41dd-bae0-3ae220025a47",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d80f309e-f717-4397-913c-70a2570df2f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7a2e0a-201f-4b78-8f8e-189eca1addf4",
        "cursor": {
          "ref": "991745fa-2dbe-4d42-8e80-22984450c52b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "03cf5359-4213-424e-9a1c-43b541fd272d"
        },
        "item": {
          "id": "3b7a2e0a-201f-4b78-8f8e-189eca1addf4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c5751595-cc93-4c74-bd50-143ea4267ae7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7a2e0a-201f-4b78-8f8e-189eca1addf4",
        "cursor": {
          "ref": "991745fa-2dbe-4d42-8e80-22984450c52b",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "03cf5359-4213-424e-9a1c-43b541fd272d"
        },
        "item": {
          "id": "3b7a2e0a-201f-4b78-8f8e-189eca1addf4",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c5751595-cc93-4c74-bd50-143ea4267ae7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49288008-dc96-4de2-8138-04c2f8697f46",
        "cursor": {
          "ref": "b5182f17-aecf-45df-9710-d5ab401c8795",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5866a6b9-8a04-4e87-8d8f-c8aad2bc0b08"
        },
        "item": {
          "id": "49288008-dc96-4de2-8138-04c2f8697f46",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c162df5f-c32e-47cc-acc6-3ba3c6132a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49288008-dc96-4de2-8138-04c2f8697f46",
        "cursor": {
          "ref": "b5182f17-aecf-45df-9710-d5ab401c8795",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5866a6b9-8a04-4e87-8d8f-c8aad2bc0b08"
        },
        "item": {
          "id": "49288008-dc96-4de2-8138-04c2f8697f46",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c162df5f-c32e-47cc-acc6-3ba3c6132a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b4b061-03f2-4e1b-b405-9a571684898e",
        "cursor": {
          "ref": "25652687-65ed-4031-a287-7914b1b503a3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a2584d2-020f-4024-ba62-c25de2539111"
        },
        "item": {
          "id": "07b4b061-03f2-4e1b-b405-9a571684898e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "606d89c1-bec8-4ebc-87f4-a2cfd3f6b7db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07b4b061-03f2-4e1b-b405-9a571684898e",
        "cursor": {
          "ref": "25652687-65ed-4031-a287-7914b1b503a3",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6a2584d2-020f-4024-ba62-c25de2539111"
        },
        "item": {
          "id": "07b4b061-03f2-4e1b-b405-9a571684898e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "606d89c1-bec8-4ebc-87f4-a2cfd3f6b7db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b8d876-6386-4311-8e9f-ffed3b55d076",
        "cursor": {
          "ref": "cc7760ff-4004-45e0-8f97-8ef4cf163bf9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4c7d9337-7029-48df-b943-4df07d08e84f"
        },
        "item": {
          "id": "d6b8d876-6386-4311-8e9f-ffed3b55d076",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2516c619-87f6-4eff-96dd-bff77e0a3e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b8d876-6386-4311-8e9f-ffed3b55d076",
        "cursor": {
          "ref": "cc7760ff-4004-45e0-8f97-8ef4cf163bf9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4c7d9337-7029-48df-b943-4df07d08e84f"
        },
        "item": {
          "id": "d6b8d876-6386-4311-8e9f-ffed3b55d076",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2516c619-87f6-4eff-96dd-bff77e0a3e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff050352-3e14-46b4-a276-8c0861ff01fc",
        "cursor": {
          "ref": "99f62ffd-14da-4ebc-a01e-16b690dfc17b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "07346d2c-92d7-44fd-a025-3554807eb621"
        },
        "item": {
          "id": "ff050352-3e14-46b4-a276-8c0861ff01fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6813e360-e04e-4f4c-8e23-a492eb396b2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff050352-3e14-46b4-a276-8c0861ff01fc",
        "cursor": {
          "ref": "99f62ffd-14da-4ebc-a01e-16b690dfc17b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "07346d2c-92d7-44fd-a025-3554807eb621"
        },
        "item": {
          "id": "ff050352-3e14-46b4-a276-8c0861ff01fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6813e360-e04e-4f4c-8e23-a492eb396b2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f133ec-413f-4997-91f1-707882c1fc7b",
        "cursor": {
          "ref": "99f29886-3a64-4951-8a4b-a0b543a1c4e3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f533749d-18d3-490a-a9e7-783503fc4087"
        },
        "item": {
          "id": "f0f133ec-413f-4997-91f1-707882c1fc7b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "347ecf5c-f0f1-476c-9467-a9b581aebd3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f133ec-413f-4997-91f1-707882c1fc7b",
        "cursor": {
          "ref": "99f29886-3a64-4951-8a4b-a0b543a1c4e3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f533749d-18d3-490a-a9e7-783503fc4087"
        },
        "item": {
          "id": "f0f133ec-413f-4997-91f1-707882c1fc7b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "347ecf5c-f0f1-476c-9467-a9b581aebd3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f50ca25-bc76-4e91-9d51-163351805151",
        "cursor": {
          "ref": "54dfd1fa-794b-4f48-8498-64d8de07bcb9",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "acae6803-567f-48a1-a7e1-bcabfc017624"
        },
        "item": {
          "id": "2f50ca25-bc76-4e91-9d51-163351805151",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dabac098-9127-46fc-89cb-7c57aedb7431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f50ca25-bc76-4e91-9d51-163351805151",
        "cursor": {
          "ref": "54dfd1fa-794b-4f48-8498-64d8de07bcb9",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "acae6803-567f-48a1-a7e1-bcabfc017624"
        },
        "item": {
          "id": "2f50ca25-bc76-4e91-9d51-163351805151",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "dabac098-9127-46fc-89cb-7c57aedb7431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd1302a-6113-491c-996e-a563c6553770",
        "cursor": {
          "ref": "6cfa818f-a455-44df-8454-129a3b3e6bfd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fb93fe2c-e921-45ba-9197-0762db437500"
        },
        "item": {
          "id": "dcd1302a-6113-491c-996e-a563c6553770",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0cda67bf-79db-4daf-ab5e-70de0375d394",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd1302a-6113-491c-996e-a563c6553770",
        "cursor": {
          "ref": "6cfa818f-a455-44df-8454-129a3b3e6bfd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fb93fe2c-e921-45ba-9197-0762db437500"
        },
        "item": {
          "id": "dcd1302a-6113-491c-996e-a563c6553770",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0cda67bf-79db-4daf-ab5e-70de0375d394",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7056ee0d-30cb-4a31-9b3c-61a9b99f5d65",
        "cursor": {
          "ref": "7f8f601d-d124-455e-b47f-933c5d291fd1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ff974fcb-f22c-4bbb-b2aa-d0c64186fcc0"
        },
        "item": {
          "id": "7056ee0d-30cb-4a31-9b3c-61a9b99f5d65",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f49fc352-2a17-4b4f-bf3c-6dcfe23375bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7056ee0d-30cb-4a31-9b3c-61a9b99f5d65",
        "cursor": {
          "ref": "7f8f601d-d124-455e-b47f-933c5d291fd1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ff974fcb-f22c-4bbb-b2aa-d0c64186fcc0"
        },
        "item": {
          "id": "7056ee0d-30cb-4a31-9b3c-61a9b99f5d65",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f49fc352-2a17-4b4f-bf3c-6dcfe23375bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e5a213-9f67-4555-ba47-c466e2d07fd5",
        "cursor": {
          "ref": "0dc41330-42fe-4bdc-80de-c86f0309cd3d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e5e672ee-8121-48ba-9cc2-120592649858"
        },
        "item": {
          "id": "45e5a213-9f67-4555-ba47-c466e2d07fd5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "91e1417e-d242-421c-a42b-23fbf0faf145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e5a213-9f67-4555-ba47-c466e2d07fd5",
        "cursor": {
          "ref": "0dc41330-42fe-4bdc-80de-c86f0309cd3d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e5e672ee-8121-48ba-9cc2-120592649858"
        },
        "item": {
          "id": "45e5a213-9f67-4555-ba47-c466e2d07fd5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "91e1417e-d242-421c-a42b-23fbf0faf145",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afe0e89-81c9-4d83-b4d9-5c32d4ac8dbd",
        "cursor": {
          "ref": "6d217b7c-55f7-4807-9ced-0295ebe8840e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b96151a3-ef9d-4099-93dc-662344651d4d"
        },
        "item": {
          "id": "8afe0e89-81c9-4d83-b4d9-5c32d4ac8dbd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "32fec44b-e73e-41b7-8f33-0cc05086f13f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8afe0e89-81c9-4d83-b4d9-5c32d4ac8dbd",
        "cursor": {
          "ref": "6d217b7c-55f7-4807-9ced-0295ebe8840e",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b96151a3-ef9d-4099-93dc-662344651d4d"
        },
        "item": {
          "id": "8afe0e89-81c9-4d83-b4d9-5c32d4ac8dbd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "32fec44b-e73e-41b7-8f33-0cc05086f13f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d044df9d-101c-4178-8a53-6121f1197291",
        "cursor": {
          "ref": "c81c0237-0812-4ae6-9b6d-f6ba5ed71727",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7e8fc6d6-1bce-4a32-9df1-fd04c2915a86"
        },
        "item": {
          "id": "d044df9d-101c-4178-8a53-6121f1197291",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d99826ba-37bc-496e-bd67-4369ad801a29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d044df9d-101c-4178-8a53-6121f1197291",
        "cursor": {
          "ref": "c81c0237-0812-4ae6-9b6d-f6ba5ed71727",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7e8fc6d6-1bce-4a32-9df1-fd04c2915a86"
        },
        "item": {
          "id": "d044df9d-101c-4178-8a53-6121f1197291",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d99826ba-37bc-496e-bd67-4369ad801a29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c955d8-d2ab-4cf9-9e4b-9886047890e6",
        "cursor": {
          "ref": "00e07571-46be-4115-b653-0cc4094bfc69",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8dda97cf-175f-47fa-9d70-306173734871"
        },
        "item": {
          "id": "f5c955d8-d2ab-4cf9-9e4b-9886047890e6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "db3cce23-fd06-4fe3-bfbf-c068706553b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c955d8-d2ab-4cf9-9e4b-9886047890e6",
        "cursor": {
          "ref": "00e07571-46be-4115-b653-0cc4094bfc69",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8dda97cf-175f-47fa-9d70-306173734871"
        },
        "item": {
          "id": "f5c955d8-d2ab-4cf9-9e4b-9886047890e6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "db3cce23-fd06-4fe3-bfbf-c068706553b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaa2e12-5580-4d84-a394-a1ba28f66c88",
        "cursor": {
          "ref": "09b9296d-1439-4f26-956c-08f306d3c321",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a7e8227-026e-4a67-8b29-0d20cd5c716b"
        },
        "item": {
          "id": "4eaa2e12-5580-4d84-a394-a1ba28f66c88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ab08d2cd-e768-4dea-91d7-bf06759a6884",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eaa2e12-5580-4d84-a394-a1ba28f66c88",
        "cursor": {
          "ref": "09b9296d-1439-4f26-956c-08f306d3c321",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6a7e8227-026e-4a67-8b29-0d20cd5c716b"
        },
        "item": {
          "id": "4eaa2e12-5580-4d84-a394-a1ba28f66c88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ab08d2cd-e768-4dea-91d7-bf06759a6884",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef3ed7c-21fc-4892-a1a5-720ddf66428d",
        "cursor": {
          "ref": "b5597647-6f2e-4540-ae78-53dfc1b1b599",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f7785d1c-933d-41d2-b899-1b6fa538ad32"
        },
        "item": {
          "id": "aef3ed7c-21fc-4892-a1a5-720ddf66428d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3397d9b7-31b2-4e19-9a01-f9867b8b6531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef3ed7c-21fc-4892-a1a5-720ddf66428d",
        "cursor": {
          "ref": "b5597647-6f2e-4540-ae78-53dfc1b1b599",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f7785d1c-933d-41d2-b899-1b6fa538ad32"
        },
        "item": {
          "id": "aef3ed7c-21fc-4892-a1a5-720ddf66428d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3397d9b7-31b2-4e19-9a01-f9867b8b6531",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860be3d7-7211-4d0c-b383-3793fa674d90",
        "cursor": {
          "ref": "375e24de-33c6-47b4-9804-d95fbc0eb278",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "12b3b1b4-9272-44e3-8385-541993a14119"
        },
        "item": {
          "id": "860be3d7-7211-4d0c-b383-3793fa674d90",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f4ad24b-a77d-4b0f-b29e-a580930a8664",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860be3d7-7211-4d0c-b383-3793fa674d90",
        "cursor": {
          "ref": "375e24de-33c6-47b4-9804-d95fbc0eb278",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "12b3b1b4-9272-44e3-8385-541993a14119"
        },
        "item": {
          "id": "860be3d7-7211-4d0c-b383-3793fa674d90",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f4ad24b-a77d-4b0f-b29e-a580930a8664",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ef50b1-ccec-402b-8a3e-d94c3680caf7",
        "cursor": {
          "ref": "11cee445-0ff2-4f2d-9576-9884124c08a4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2b3f93e4-b8f2-4ad0-a3bd-e4b0ddd60ca2"
        },
        "item": {
          "id": "84ef50b1-ccec-402b-8a3e-d94c3680caf7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8e390fef-0375-434a-99d0-7674cd75fddb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ef50b1-ccec-402b-8a3e-d94c3680caf7",
        "cursor": {
          "ref": "11cee445-0ff2-4f2d-9576-9884124c08a4",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2b3f93e4-b8f2-4ad0-a3bd-e4b0ddd60ca2"
        },
        "item": {
          "id": "84ef50b1-ccec-402b-8a3e-d94c3680caf7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8e390fef-0375-434a-99d0-7674cd75fddb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fde110-737d-4ff8-a2bc-e6ca14179fcc",
        "cursor": {
          "ref": "e40a0b61-dec9-4f10-9898-0b46b5ffa48c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "db5e695f-413e-441f-8e0a-e2ba4a40c4db"
        },
        "item": {
          "id": "10fde110-737d-4ff8-a2bc-e6ca14179fcc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c3727cca-d7ae-4906-bf93-15e611e15a11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fde110-737d-4ff8-a2bc-e6ca14179fcc",
        "cursor": {
          "ref": "e40a0b61-dec9-4f10-9898-0b46b5ffa48c",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "db5e695f-413e-441f-8e0a-e2ba4a40c4db"
        },
        "item": {
          "id": "10fde110-737d-4ff8-a2bc-e6ca14179fcc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c3727cca-d7ae-4906-bf93-15e611e15a11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fe7aa4-d76c-4670-aba5-abca8a2f7db2",
        "cursor": {
          "ref": "6ceaf2fb-0cbc-4804-8aa9-acc0f518d684",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0086a8cd-9b9a-44e2-8dd7-81e4241b8558"
        },
        "item": {
          "id": "f9fe7aa4-d76c-4670-aba5-abca8a2f7db2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b9f1e333-99d4-485f-8e9a-5af210cea3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fe7aa4-d76c-4670-aba5-abca8a2f7db2",
        "cursor": {
          "ref": "6ceaf2fb-0cbc-4804-8aa9-acc0f518d684",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0086a8cd-9b9a-44e2-8dd7-81e4241b8558"
        },
        "item": {
          "id": "f9fe7aa4-d76c-4670-aba5-abca8a2f7db2",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b9f1e333-99d4-485f-8e9a-5af210cea3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2277cc00-f468-42a9-baed-7124803d2f43",
        "cursor": {
          "ref": "4d0d97cc-91c9-42ac-b1f6-3ed3c1ea122b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d605bfc6-9fbe-4e19-b1a5-a58bbe2ba652"
        },
        "item": {
          "id": "2277cc00-f468-42a9-baed-7124803d2f43",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fbc5cbc1-3cc3-4ffa-9624-231d9a9c56eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2277cc00-f468-42a9-baed-7124803d2f43",
        "cursor": {
          "ref": "4d0d97cc-91c9-42ac-b1f6-3ed3c1ea122b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d605bfc6-9fbe-4e19-b1a5-a58bbe2ba652"
        },
        "item": {
          "id": "2277cc00-f468-42a9-baed-7124803d2f43",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fbc5cbc1-3cc3-4ffa-9624-231d9a9c56eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888d82c5-f46f-459d-9d8b-02d5b8d0d8b4",
        "cursor": {
          "ref": "e0308071-87e8-4f4f-a219-c57cc9e2656a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f21fa248-befb-4be3-b7f8-5953b1afe1ca"
        },
        "item": {
          "id": "888d82c5-f46f-459d-9d8b-02d5b8d0d8b4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "05415852-8c59-41f4-a18d-6274db55c940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888d82c5-f46f-459d-9d8b-02d5b8d0d8b4",
        "cursor": {
          "ref": "e0308071-87e8-4f4f-a219-c57cc9e2656a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f21fa248-befb-4be3-b7f8-5953b1afe1ca"
        },
        "item": {
          "id": "888d82c5-f46f-459d-9d8b-02d5b8d0d8b4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "05415852-8c59-41f4-a18d-6274db55c940",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2180d7b4-729a-488e-a547-fc2df46a94c5",
        "cursor": {
          "ref": "c8ff01f6-5055-4a20-bc96-f3ab3037734e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "270e331e-d0ab-48cc-a464-58544e472f6b"
        },
        "item": {
          "id": "2180d7b4-729a-488e-a547-fc2df46a94c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc771abc-d6a4-4a07-8023-973172b43371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 139,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2180d7b4-729a-488e-a547-fc2df46a94c5",
        "cursor": {
          "ref": "c8ff01f6-5055-4a20-bc96-f3ab3037734e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "270e331e-d0ab-48cc-a464-58544e472f6b"
        },
        "item": {
          "id": "2180d7b4-729a-488e-a547-fc2df46a94c5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "cc771abc-d6a4-4a07-8023-973172b43371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 139,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23340e72-be61-49aa-a917-46952d1f2e35",
        "cursor": {
          "ref": "f6f31931-7c1c-4e93-ad21-45c79e1f0817",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f8aa75e-ae11-4a15-b41c-9217da3e4148"
        },
        "item": {
          "id": "23340e72-be61-49aa-a917-46952d1f2e35",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d2bc6553-e9a0-4441-862a-0e1f3b22a4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 101,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23340e72-be61-49aa-a917-46952d1f2e35",
        "cursor": {
          "ref": "f6f31931-7c1c-4e93-ad21-45c79e1f0817",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f8aa75e-ae11-4a15-b41c-9217da3e4148"
        },
        "item": {
          "id": "23340e72-be61-49aa-a917-46952d1f2e35",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d2bc6553-e9a0-4441-862a-0e1f3b22a4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 101,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e22717-6e68-4c9a-b7e7-e035e176e7f7",
        "cursor": {
          "ref": "3b8d5c84-607d-4ba6-b9cb-b20c67b20ec2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2f2e80e7-c5fa-4784-a234-f446fa95413e"
        },
        "item": {
          "id": "a2e22717-6e68-4c9a-b7e7-e035e176e7f7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "342e144b-f29e-40d3-8e51-c2dbb8036df8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e22717-6e68-4c9a-b7e7-e035e176e7f7",
        "cursor": {
          "ref": "3b8d5c84-607d-4ba6-b9cb-b20c67b20ec2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2f2e80e7-c5fa-4784-a234-f446fa95413e"
        },
        "item": {
          "id": "a2e22717-6e68-4c9a-b7e7-e035e176e7f7",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "342e144b-f29e-40d3-8e51-c2dbb8036df8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c75d78e-3b14-499e-ae23-2f0821d775cb",
        "cursor": {
          "ref": "f1224cb9-3b04-4a56-b49c-fd3e4aebd150",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "388fda32-90af-43ec-b8c9-3eded4b6544d"
        },
        "item": {
          "id": "5c75d78e-3b14-499e-ae23-2f0821d775cb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "45556d20-abad-4b67-8b3e-694e25e7066a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c75d78e-3b14-499e-ae23-2f0821d775cb",
        "cursor": {
          "ref": "f1224cb9-3b04-4a56-b49c-fd3e4aebd150",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "388fda32-90af-43ec-b8c9-3eded4b6544d"
        },
        "item": {
          "id": "5c75d78e-3b14-499e-ae23-2f0821d775cb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "45556d20-abad-4b67-8b3e-694e25e7066a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b4edfa-fd32-4690-bee8-5b9c3763a7c2",
        "cursor": {
          "ref": "9dc28395-d723-461b-929f-9b0b2e8432b0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3a19750-0519-4eac-a978-1fadb1dfc9b9"
        },
        "item": {
          "id": "30b4edfa-fd32-4690-bee8-5b9c3763a7c2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "26bbc118-614c-4d56-b28e-ad9ad009e8d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30b4edfa-fd32-4690-bee8-5b9c3763a7c2",
        "cursor": {
          "ref": "9dc28395-d723-461b-929f-9b0b2e8432b0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3a19750-0519-4eac-a978-1fadb1dfc9b9"
        },
        "item": {
          "id": "30b4edfa-fd32-4690-bee8-5b9c3763a7c2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "26bbc118-614c-4d56-b28e-ad9ad009e8d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32bb1b7-b69a-4462-90d8-c1428f3cc3c6",
        "cursor": {
          "ref": "4b42cc16-e583-4d0b-9cbc-c21538c480b0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "dba3d4d7-6b6f-4b70-b3d4-1dbc6caadd9b"
        },
        "item": {
          "id": "b32bb1b7-b69a-4462-90d8-c1428f3cc3c6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fadfe9e8-106c-47a2-abaa-26b379fa4d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32bb1b7-b69a-4462-90d8-c1428f3cc3c6",
        "cursor": {
          "ref": "4b42cc16-e583-4d0b-9cbc-c21538c480b0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "dba3d4d7-6b6f-4b70-b3d4-1dbc6caadd9b"
        },
        "item": {
          "id": "b32bb1b7-b69a-4462-90d8-c1428f3cc3c6",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fadfe9e8-106c-47a2-abaa-26b379fa4d19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b32da7f-8248-48b2-83c1-62e9ae5e98ae",
        "cursor": {
          "ref": "2b43a94a-6def-4480-ab24-6f6cb388459b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "00402fae-10db-4520-a5f1-bf43a153b9d3"
        },
        "item": {
          "id": "4b32da7f-8248-48b2-83c1-62e9ae5e98ae",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9b1ee66d-edee-40e1-bb48-4d48f0928d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "4b32da7f-8248-48b2-83c1-62e9ae5e98ae",
        "cursor": {
          "ref": "2b43a94a-6def-4480-ab24-6f6cb388459b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "00402fae-10db-4520-a5f1-bf43a153b9d3"
        },
        "item": {
          "id": "4b32da7f-8248-48b2-83c1-62e9ae5e98ae",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9b1ee66d-edee-40e1-bb48-4d48f0928d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "189a9942-58a1-4135-ac5d-c7e63b594e95",
        "cursor": {
          "ref": "53998752-24c6-47e7-b4d0-b8d2c45211c5",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fad284bd-9e1a-4b29-99ad-ab989e7013c3"
        },
        "item": {
          "id": "189a9942-58a1-4135-ac5d-c7e63b594e95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a520c16f-f828-4b9e-ac1a-64e20be59406",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "189a9942-58a1-4135-ac5d-c7e63b594e95",
        "cursor": {
          "ref": "53998752-24c6-47e7-b4d0-b8d2c45211c5",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "fad284bd-9e1a-4b29-99ad-ab989e7013c3"
        },
        "item": {
          "id": "189a9942-58a1-4135-ac5d-c7e63b594e95",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a520c16f-f828-4b9e-ac1a-64e20be59406",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "c4fa248e-ad3a-42bb-a7f0-6b3a542d728a",
        "cursor": {
          "ref": "a49f1424-013a-40f8-97a9-999542cddde9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8315144b-ef54-45f4-9d8e-606d50a3189b"
        },
        "item": {
          "id": "c4fa248e-ad3a-42bb-a7f0-6b3a542d728a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c4bf3ff2-3e37-465f-b032-a32a17610f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "c4fa248e-ad3a-42bb-a7f0-6b3a542d728a",
        "cursor": {
          "ref": "a49f1424-013a-40f8-97a9-999542cddde9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8315144b-ef54-45f4-9d8e-606d50a3189b"
        },
        "item": {
          "id": "c4fa248e-ad3a-42bb-a7f0-6b3a542d728a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c4bf3ff2-3e37-465f-b032-a32a17610f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a5c936fb-6bab-46ef-a4ea-f8f9ba5cc8a0",
        "cursor": {
          "ref": "02885d10-093f-4467-9b6b-4b538b8a782e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e40584d7-4a1e-4dec-b71f-ede542776a5e"
        },
        "item": {
          "id": "a5c936fb-6bab-46ef-a4ea-f8f9ba5cc8a0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b84cc83-099f-40e7-92d2-1aa2632badea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "a5c936fb-6bab-46ef-a4ea-f8f9ba5cc8a0",
        "cursor": {
          "ref": "02885d10-093f-4467-9b6b-4b538b8a782e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e40584d7-4a1e-4dec-b71f-ede542776a5e"
        },
        "item": {
          "id": "a5c936fb-6bab-46ef-a4ea-f8f9ba5cc8a0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4b84cc83-099f-40e7-92d2-1aa2632badea",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "6e06ebb8-b488-4ca9-8980-b4523a4b0c17",
        "cursor": {
          "ref": "0e265908-ebfa-44f0-ad80-dd72eff33526",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6c12e11b-4955-487a-a104-9dd6de6d2861"
        },
        "item": {
          "id": "6e06ebb8-b488-4ca9-8980-b4523a4b0c17",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5835e20d-b33d-4c74-88c8-d7b30268c2f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "6e06ebb8-b488-4ca9-8980-b4523a4b0c17",
        "cursor": {
          "ref": "0e265908-ebfa-44f0-ad80-dd72eff33526",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6c12e11b-4955-487a-a104-9dd6de6d2861"
        },
        "item": {
          "id": "6e06ebb8-b488-4ca9-8980-b4523a4b0c17",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5835e20d-b33d-4c74-88c8-d7b30268c2f6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "edc8b78b-86ef-4924-aa33-9c69f67d06f7",
        "cursor": {
          "ref": "0b7b59d0-bf69-4a77-b6c4-9a818b920c13",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "672463fa-b3cc-4ff9-adea-dc7a0429ca2e"
        },
        "item": {
          "id": "edc8b78b-86ef-4924-aa33-9c69f67d06f7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5d2c4e3e-d99a-4265-b59b-ed52af1706f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "edc8b78b-86ef-4924-aa33-9c69f67d06f7",
        "cursor": {
          "ref": "0b7b59d0-bf69-4a77-b6c4-9a818b920c13",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "672463fa-b3cc-4ff9-adea-dc7a0429ca2e"
        },
        "item": {
          "id": "edc8b78b-86ef-4924-aa33-9c69f67d06f7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5d2c4e3e-d99a-4265-b59b-ed52af1706f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "bf16634d-3e23-4a8b-9e50-943214e6b8db",
        "cursor": {
          "ref": "f1360447-f194-4e27-b5e1-b4a2777148b4",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2dccdf4a-7686-4e3e-b5ad-038f84929c06"
        },
        "item": {
          "id": "bf16634d-3e23-4a8b-9e50-943214e6b8db",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3d2d4e0c-2e7d-4152-90ce-be8b1a9ce072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "bf16634d-3e23-4a8b-9e50-943214e6b8db",
        "cursor": {
          "ref": "f1360447-f194-4e27-b5e1-b4a2777148b4",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2dccdf4a-7686-4e3e-b5ad-038f84929c06"
        },
        "item": {
          "id": "bf16634d-3e23-4a8b-9e50-943214e6b8db",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3d2d4e0c-2e7d-4152-90ce-be8b1a9ce072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "b05bc982-124a-4e7a-96e0-b6278fd3eb2b",
        "cursor": {
          "ref": "ad004a39-05c6-4b0c-ad56-e592853003d9",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9f9efae3-2505-41b8-b3f0-0d485adfeb5e"
        },
        "item": {
          "id": "b05bc982-124a-4e7a-96e0-b6278fd3eb2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "59a327c7-88cd-4252-a0eb-4c8ef9591cfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05bc982-124a-4e7a-96e0-b6278fd3eb2b",
        "cursor": {
          "ref": "ad004a39-05c6-4b0c-ad56-e592853003d9",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9f9efae3-2505-41b8-b3f0-0d485adfeb5e"
        },
        "item": {
          "id": "b05bc982-124a-4e7a-96e0-b6278fd3eb2b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "59a327c7-88cd-4252-a0eb-4c8ef9591cfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659e8b8f-50e4-43cd-a369-fed75ebc7cdc",
        "cursor": {
          "ref": "f66ab51b-63d9-4d4c-ae32-ab8b45b5c7ec",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "89119d1c-4b9e-4702-bdea-8f5d61adc3fa"
        },
        "item": {
          "id": "659e8b8f-50e4-43cd-a369-fed75ebc7cdc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ac1b3f3a-8297-46ee-8670-bfd70987d487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659e8b8f-50e4-43cd-a369-fed75ebc7cdc",
        "cursor": {
          "ref": "f66ab51b-63d9-4d4c-ae32-ab8b45b5c7ec",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "89119d1c-4b9e-4702-bdea-8f5d61adc3fa"
        },
        "item": {
          "id": "659e8b8f-50e4-43cd-a369-fed75ebc7cdc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ac1b3f3a-8297-46ee-8670-bfd70987d487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1651573d-21b2-428b-9d7c-056aefc8af5a",
        "cursor": {
          "ref": "8c8530ff-1fa3-4772-8b0e-ad0ba2528606",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "66d39eb5-8f94-41e6-b092-f793b383f185"
        },
        "item": {
          "id": "1651573d-21b2-428b-9d7c-056aefc8af5a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e744f1c3-faa2-4958-a701-251289be4208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1651573d-21b2-428b-9d7c-056aefc8af5a",
        "cursor": {
          "ref": "8c8530ff-1fa3-4772-8b0e-ad0ba2528606",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "66d39eb5-8f94-41e6-b092-f793b383f185"
        },
        "item": {
          "id": "1651573d-21b2-428b-9d7c-056aefc8af5a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e744f1c3-faa2-4958-a701-251289be4208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5734af-8b14-45d9-8ff4-6735840a434d",
        "cursor": {
          "ref": "3d46d79f-6b32-47b6-8890-105d5165bb14",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d9dce1e1-ad6c-4a01-993b-aa9f159b87de"
        },
        "item": {
          "id": "7f5734af-8b14-45d9-8ff4-6735840a434d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5e20c7d8-6839-4632-9fe5-5a85a22cfc90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5734af-8b14-45d9-8ff4-6735840a434d",
        "cursor": {
          "ref": "3d46d79f-6b32-47b6-8890-105d5165bb14",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d9dce1e1-ad6c-4a01-993b-aa9f159b87de"
        },
        "item": {
          "id": "7f5734af-8b14-45d9-8ff4-6735840a434d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5e20c7d8-6839-4632-9fe5-5a85a22cfc90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c14b38-53c7-43ed-b3e6-a6107d9118b3",
        "cursor": {
          "ref": "01c619bc-9ae8-4207-ba67-98aab3a71259",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1ebb0e43-682f-43dd-8629-e21a1f7874cb"
        },
        "item": {
          "id": "c4c14b38-53c7-43ed-b3e6-a6107d9118b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "319f5803-829e-4cb1-987a-63358ad95e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c14b38-53c7-43ed-b3e6-a6107d9118b3",
        "cursor": {
          "ref": "01c619bc-9ae8-4207-ba67-98aab3a71259",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "1ebb0e43-682f-43dd-8629-e21a1f7874cb"
        },
        "item": {
          "id": "c4c14b38-53c7-43ed-b3e6-a6107d9118b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "319f5803-829e-4cb1-987a-63358ad95e41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a558f32-1a84-47b5-bf27-7f3451ad026a",
        "cursor": {
          "ref": "97b98783-e946-466f-a371-5a2e4a2bea92",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fc8bbc55-6ff5-4e25-844f-a62aecd153f6"
        },
        "item": {
          "id": "9a558f32-1a84-47b5-bf27-7f3451ad026a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f1ac67e5-ae9e-4d2c-b90e-8c07ecbe79a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a558f32-1a84-47b5-bf27-7f3451ad026a",
        "cursor": {
          "ref": "97b98783-e946-466f-a371-5a2e4a2bea92",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fc8bbc55-6ff5-4e25-844f-a62aecd153f6"
        },
        "item": {
          "id": "9a558f32-1a84-47b5-bf27-7f3451ad026a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f1ac67e5-ae9e-4d2c-b90e-8c07ecbe79a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e4ccb4-ef52-4465-92cc-b5be4f1c61d1",
        "cursor": {
          "ref": "408bd80a-a08e-4ae8-8a75-de410e793e3b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f7d6adb-06bf-4a0c-a2db-66a8f95a9eba"
        },
        "item": {
          "id": "e0e4ccb4-ef52-4465-92cc-b5be4f1c61d1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1d0d238d-08be-4d5d-a2bc-74e0ae2ffaee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e4ccb4-ef52-4465-92cc-b5be4f1c61d1",
        "cursor": {
          "ref": "408bd80a-a08e-4ae8-8a75-de410e793e3b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2f7d6adb-06bf-4a0c-a2db-66a8f95a9eba"
        },
        "item": {
          "id": "e0e4ccb4-ef52-4465-92cc-b5be4f1c61d1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1d0d238d-08be-4d5d-a2bc-74e0ae2ffaee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6556252b-bdc2-4d8e-9701-166992dd6541",
        "cursor": {
          "ref": "ef6a4548-8052-4a03-9b33-7e425ed4933d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4dc82d0d-3f8d-4ae9-8d2a-c30641483c36"
        },
        "item": {
          "id": "6556252b-bdc2-4d8e-9701-166992dd6541",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "38369672-d394-4a5c-b935-b04549f96e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6556252b-bdc2-4d8e-9701-166992dd6541",
        "cursor": {
          "ref": "ef6a4548-8052-4a03-9b33-7e425ed4933d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4dc82d0d-3f8d-4ae9-8d2a-c30641483c36"
        },
        "item": {
          "id": "6556252b-bdc2-4d8e-9701-166992dd6541",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "38369672-d394-4a5c-b935-b04549f96e9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8a058-a4b0-4089-8cf1-b88497cd9ec3",
        "cursor": {
          "ref": "c1fb6a9d-480f-4768-9b0f-2d1dd108b11d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8829e4a5-114a-46c5-906e-b8f305e92c9e"
        },
        "item": {
          "id": "74c8a058-a4b0-4089-8cf1-b88497cd9ec3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "69116973-5cb8-48f0-9e96-204b1742fdc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8a058-a4b0-4089-8cf1-b88497cd9ec3",
        "cursor": {
          "ref": "c1fb6a9d-480f-4768-9b0f-2d1dd108b11d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8829e4a5-114a-46c5-906e-b8f305e92c9e"
        },
        "item": {
          "id": "74c8a058-a4b0-4089-8cf1-b88497cd9ec3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "69116973-5cb8-48f0-9e96-204b1742fdc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1595c226-4c38-49df-b7ac-2a1f57f9c92a",
        "cursor": {
          "ref": "1bb5aadf-3f25-4d8e-a027-60477477ea0a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "548df5d0-0ea5-4274-9221-3c61b5d89aad"
        },
        "item": {
          "id": "1595c226-4c38-49df-b7ac-2a1f57f9c92a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1302960b-f16a-4117-bead-281ce295e3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1595c226-4c38-49df-b7ac-2a1f57f9c92a",
        "cursor": {
          "ref": "1bb5aadf-3f25-4d8e-a027-60477477ea0a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "548df5d0-0ea5-4274-9221-3c61b5d89aad"
        },
        "item": {
          "id": "1595c226-4c38-49df-b7ac-2a1f57f9c92a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1302960b-f16a-4117-bead-281ce295e3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee9a8b1-90dd-445f-a636-625627b18090",
        "cursor": {
          "ref": "9cb45cca-efde-4ee4-8477-f8519742c458",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "427de913-c68c-49f2-af2f-1da4ccb74de5"
        },
        "item": {
          "id": "6ee9a8b1-90dd-445f-a636-625627b18090",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e64e4839-8cfb-4d4d-97de-8a8a157b1ed3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee9a8b1-90dd-445f-a636-625627b18090",
        "cursor": {
          "ref": "9cb45cca-efde-4ee4-8477-f8519742c458",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "427de913-c68c-49f2-af2f-1da4ccb74de5"
        },
        "item": {
          "id": "6ee9a8b1-90dd-445f-a636-625627b18090",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e64e4839-8cfb-4d4d-97de-8a8a157b1ed3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf64f09-fb10-42be-8c9e-9966f3c4495c",
        "cursor": {
          "ref": "9de02d03-87d8-46c6-ab12-79cb7783a797",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c8167f44-a221-4a4e-9660-f2eace02e8c7"
        },
        "item": {
          "id": "6bf64f09-fb10-42be-8c9e-9966f3c4495c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "501b51eb-52c8-4326-888f-4a4945bae71f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf64f09-fb10-42be-8c9e-9966f3c4495c",
        "cursor": {
          "ref": "9de02d03-87d8-46c6-ab12-79cb7783a797",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c8167f44-a221-4a4e-9660-f2eace02e8c7"
        },
        "item": {
          "id": "6bf64f09-fb10-42be-8c9e-9966f3c4495c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "501b51eb-52c8-4326-888f-4a4945bae71f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5579f561-c564-438c-a1f9-5120a5395aa0",
        "cursor": {
          "ref": "e3800d99-6da3-40b3-bfb3-039e731510fb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "841124be-7e34-49af-87f9-ec5f2d755e6f"
        },
        "item": {
          "id": "5579f561-c564-438c-a1f9-5120a5395aa0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "53a2d220-7a53-4eaa-84fd-57dbfa567e20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5579f561-c564-438c-a1f9-5120a5395aa0",
        "cursor": {
          "ref": "e3800d99-6da3-40b3-bfb3-039e731510fb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "841124be-7e34-49af-87f9-ec5f2d755e6f"
        },
        "item": {
          "id": "5579f561-c564-438c-a1f9-5120a5395aa0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "53a2d220-7a53-4eaa-84fd-57dbfa567e20",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83de8557-cabe-4abb-8fa2-4bb0e113f006",
        "cursor": {
          "ref": "5c90a9b0-a71c-4342-8381-e85fa96c6df6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d451ca5d-b97c-4732-b7b2-955e15f16424"
        },
        "item": {
          "id": "83de8557-cabe-4abb-8fa2-4bb0e113f006",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a216ecd4-917f-4e75-a07a-227779ce347c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83de8557-cabe-4abb-8fa2-4bb0e113f006",
        "cursor": {
          "ref": "5c90a9b0-a71c-4342-8381-e85fa96c6df6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d451ca5d-b97c-4732-b7b2-955e15f16424"
        },
        "item": {
          "id": "83de8557-cabe-4abb-8fa2-4bb0e113f006",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a216ecd4-917f-4e75-a07a-227779ce347c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c049188-8224-487d-a48b-267f07abf5b1",
        "cursor": {
          "ref": "1bbe5704-07a6-4941-9161-d3612375a4b8",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3635956c-ad42-43b8-bdff-b6e312d390f1"
        },
        "item": {
          "id": "5c049188-8224-487d-a48b-267f07abf5b1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ffe07527-9b8d-43b4-8c1c-828fb02ac265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c049188-8224-487d-a48b-267f07abf5b1",
        "cursor": {
          "ref": "1bbe5704-07a6-4941-9161-d3612375a4b8",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3635956c-ad42-43b8-bdff-b6e312d390f1"
        },
        "item": {
          "id": "5c049188-8224-487d-a48b-267f07abf5b1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ffe07527-9b8d-43b4-8c1c-828fb02ac265",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b1fb9a-1414-4f55-8643-a807f178357c",
        "cursor": {
          "ref": "a4a11b17-c275-4ef2-b013-9ca612af531b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "895bd662-71a5-4088-b81b-6fe7ab22fad2"
        },
        "item": {
          "id": "06b1fb9a-1414-4f55-8643-a807f178357c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "782440a5-eed2-4437-a276-b5af921a744f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b1fb9a-1414-4f55-8643-a807f178357c",
        "cursor": {
          "ref": "a4a11b17-c275-4ef2-b013-9ca612af531b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "895bd662-71a5-4088-b81b-6fe7ab22fad2"
        },
        "item": {
          "id": "06b1fb9a-1414-4f55-8643-a807f178357c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "782440a5-eed2-4437-a276-b5af921a744f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71ccd2b-5144-4333-b44c-1b7386661f56",
        "cursor": {
          "ref": "135d6943-14e1-4965-923c-0a3b40c99180",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cae8e7f0-ea83-4b30-b660-f65920ab5f0c"
        },
        "item": {
          "id": "a71ccd2b-5144-4333-b44c-1b7386661f56",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1033e06a-ed0e-48a3-a468-53cee1a11830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71ccd2b-5144-4333-b44c-1b7386661f56",
        "cursor": {
          "ref": "135d6943-14e1-4965-923c-0a3b40c99180",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cae8e7f0-ea83-4b30-b660-f65920ab5f0c"
        },
        "item": {
          "id": "a71ccd2b-5144-4333-b44c-1b7386661f56",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1033e06a-ed0e-48a3-a468-53cee1a11830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de984a79-fc80-4929-94cc-a587c7441d2b",
        "cursor": {
          "ref": "14143d0c-27f8-45f7-b7c4-e858acfb1dba",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ba02ebf2-aecd-4b6c-9c34-e117ee26d79e"
        },
        "item": {
          "id": "de984a79-fc80-4929-94cc-a587c7441d2b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "86491052-0b6d-4ced-b614-1222066b7020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de984a79-fc80-4929-94cc-a587c7441d2b",
        "cursor": {
          "ref": "14143d0c-27f8-45f7-b7c4-e858acfb1dba",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ba02ebf2-aecd-4b6c-9c34-e117ee26d79e"
        },
        "item": {
          "id": "de984a79-fc80-4929-94cc-a587c7441d2b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "86491052-0b6d-4ced-b614-1222066b7020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07ba1cf-11a4-452c-86aa-4aba6fb61433",
        "cursor": {
          "ref": "639f8bb0-88a5-44ef-89bf-78f025247bd3",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e0bbec5-9e93-4042-92a8-afbcd84e213c"
        },
        "item": {
          "id": "c07ba1cf-11a4-452c-86aa-4aba6fb61433",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e455f78-42b1-4d80-8856-815f874c86f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07ba1cf-11a4-452c-86aa-4aba6fb61433",
        "cursor": {
          "ref": "639f8bb0-88a5-44ef-89bf-78f025247bd3",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e0bbec5-9e93-4042-92a8-afbcd84e213c"
        },
        "item": {
          "id": "c07ba1cf-11a4-452c-86aa-4aba6fb61433",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7e455f78-42b1-4d80-8856-815f874c86f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592e96ec-9f32-4f93-814d-29f2442d72a9",
        "cursor": {
          "ref": "f3da1645-90e5-44af-96de-832e52f61851",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "157fbec1-122d-4c14-9309-8437280e21ce"
        },
        "item": {
          "id": "592e96ec-9f32-4f93-814d-29f2442d72a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46be2f6c-8921-461a-a21c-00db3b6bad48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592e96ec-9f32-4f93-814d-29f2442d72a9",
        "cursor": {
          "ref": "f3da1645-90e5-44af-96de-832e52f61851",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "157fbec1-122d-4c14-9309-8437280e21ce"
        },
        "item": {
          "id": "592e96ec-9f32-4f93-814d-29f2442d72a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46be2f6c-8921-461a-a21c-00db3b6bad48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2299cb65-8b6f-4fd6-b99e-967a6ae75acc",
        "cursor": {
          "ref": "3765d66e-96aa-48ee-880d-f07d7d313649",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c370025e-2369-4817-bde5-bead93176ef5"
        },
        "item": {
          "id": "2299cb65-8b6f-4fd6-b99e-967a6ae75acc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "50456828-47db-4117-a59f-7248c817085a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2299cb65-8b6f-4fd6-b99e-967a6ae75acc",
        "cursor": {
          "ref": "3765d66e-96aa-48ee-880d-f07d7d313649",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c370025e-2369-4817-bde5-bead93176ef5"
        },
        "item": {
          "id": "2299cb65-8b6f-4fd6-b99e-967a6ae75acc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "50456828-47db-4117-a59f-7248c817085a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1cf4fa-88a6-4564-b572-17d7a8c53d21",
        "cursor": {
          "ref": "dd07810c-f88d-4f15-8882-84fe3b3cd700",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7ebeb821-d9df-475b-9999-02bc68773c1b"
        },
        "item": {
          "id": "cf1cf4fa-88a6-4564-b572-17d7a8c53d21",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6b3eba26-2777-406e-b235-adb12ee7edfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1cf4fa-88a6-4564-b572-17d7a8c53d21",
        "cursor": {
          "ref": "dd07810c-f88d-4f15-8882-84fe3b3cd700",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7ebeb821-d9df-475b-9999-02bc68773c1b"
        },
        "item": {
          "id": "cf1cf4fa-88a6-4564-b572-17d7a8c53d21",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6b3eba26-2777-406e-b235-adb12ee7edfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72468f42-150a-440d-90b0-432e7f7b3e6f",
        "cursor": {
          "ref": "f68d795b-424d-4827-aee8-30616429206f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8631f4ec-69c0-4a95-9779-e1133d4f42fe"
        },
        "item": {
          "id": "72468f42-150a-440d-90b0-432e7f7b3e6f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cdc00c22-e5dc-407a-a4ac-a14aaedef034",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72468f42-150a-440d-90b0-432e7f7b3e6f",
        "cursor": {
          "ref": "f68d795b-424d-4827-aee8-30616429206f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8631f4ec-69c0-4a95-9779-e1133d4f42fe"
        },
        "item": {
          "id": "72468f42-150a-440d-90b0-432e7f7b3e6f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "cdc00c22-e5dc-407a-a4ac-a14aaedef034",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f36931-f802-4a01-9659-0cb1d4574f9a",
        "cursor": {
          "ref": "e0cae81b-03f9-419d-99d5-b3a1fb778280",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eef743b3-119c-4ee8-93e7-1183a0ac0903"
        },
        "item": {
          "id": "19f36931-f802-4a01-9659-0cb1d4574f9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e90c45b2-9d8e-4206-a93e-a8dd9ab603d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f36931-f802-4a01-9659-0cb1d4574f9a",
        "cursor": {
          "ref": "e0cae81b-03f9-419d-99d5-b3a1fb778280",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "eef743b3-119c-4ee8-93e7-1183a0ac0903"
        },
        "item": {
          "id": "19f36931-f802-4a01-9659-0cb1d4574f9a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e90c45b2-9d8e-4206-a93e-a8dd9ab603d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988cdc3a-8680-451b-8689-4d3f047d17dc",
        "cursor": {
          "ref": "8682abc5-2cfb-48a9-9c8f-09461dff508f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "07556b0a-f412-47c5-a89a-a157706b4ac4"
        },
        "item": {
          "id": "988cdc3a-8680-451b-8689-4d3f047d17dc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "795df71b-8b97-400d-89c1-44ba4be3b717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988cdc3a-8680-451b-8689-4d3f047d17dc",
        "cursor": {
          "ref": "8682abc5-2cfb-48a9-9c8f-09461dff508f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "07556b0a-f412-47c5-a89a-a157706b4ac4"
        },
        "item": {
          "id": "988cdc3a-8680-451b-8689-4d3f047d17dc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "795df71b-8b97-400d-89c1-44ba4be3b717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53bf0e-204e-4a3e-9739-654091533d68",
        "cursor": {
          "ref": "cc1ba4c9-3157-4148-b041-fb9ecb580db4",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "87ee96a9-0fb6-4fef-9dcd-907cee8bf30f"
        },
        "item": {
          "id": "bd53bf0e-204e-4a3e-9739-654091533d68",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d944a8ae-4e35-4fea-99ae-aab4c62bb61d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53bf0e-204e-4a3e-9739-654091533d68",
        "cursor": {
          "ref": "cc1ba4c9-3157-4148-b041-fb9ecb580db4",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "87ee96a9-0fb6-4fef-9dcd-907cee8bf30f"
        },
        "item": {
          "id": "bd53bf0e-204e-4a3e-9739-654091533d68",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d944a8ae-4e35-4fea-99ae-aab4c62bb61d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7248ebd3-d531-4815-803e-1ac88e29305b",
        "cursor": {
          "ref": "a7d76532-d51e-4a26-9f8e-17fc84695312",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4781860c-e4e5-469b-9447-9ace4ef5a57d"
        },
        "item": {
          "id": "7248ebd3-d531-4815-803e-1ac88e29305b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c99894cd-ab23-4645-a8c8-92c85c7a6b32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7248ebd3-d531-4815-803e-1ac88e29305b",
        "cursor": {
          "ref": "a7d76532-d51e-4a26-9f8e-17fc84695312",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4781860c-e4e5-469b-9447-9ace4ef5a57d"
        },
        "item": {
          "id": "7248ebd3-d531-4815-803e-1ac88e29305b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c99894cd-ab23-4645-a8c8-92c85c7a6b32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51566d62-2028-46fb-bc0a-f2f07d941ae0",
        "cursor": {
          "ref": "f9db0de5-62ec-4e68-88f2-17f301abf9d4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e7adbf96-724f-4ffd-b451-456d392f7a06"
        },
        "item": {
          "id": "51566d62-2028-46fb-bc0a-f2f07d941ae0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a472868-2a12-4e46-82c1-16d06f931ff5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51566d62-2028-46fb-bc0a-f2f07d941ae0",
        "cursor": {
          "ref": "f9db0de5-62ec-4e68-88f2-17f301abf9d4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e7adbf96-724f-4ffd-b451-456d392f7a06"
        },
        "item": {
          "id": "51566d62-2028-46fb-bc0a-f2f07d941ae0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a472868-2a12-4e46-82c1-16d06f931ff5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2a2d35-2eef-43e6-bfb6-cfaf34ad89e7",
        "cursor": {
          "ref": "00368d88-b24a-4fc9-843e-323fd40fde78",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3bbc4580-3a23-4a95-a76b-dac1ce4823fc"
        },
        "item": {
          "id": "ad2a2d35-2eef-43e6-bfb6-cfaf34ad89e7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ab3a75d7-2568-4dc3-be3f-5edbce0f66ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2a2d35-2eef-43e6-bfb6-cfaf34ad89e7",
        "cursor": {
          "ref": "00368d88-b24a-4fc9-843e-323fd40fde78",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3bbc4580-3a23-4a95-a76b-dac1ce4823fc"
        },
        "item": {
          "id": "ad2a2d35-2eef-43e6-bfb6-cfaf34ad89e7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ab3a75d7-2568-4dc3-be3f-5edbce0f66ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e8b472-bb70-4d45-9ca2-0b4df031ee42",
        "cursor": {
          "ref": "3ca2d7c5-07a5-487a-86a3-6fd593818c43",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "099392e6-10ee-428f-a455-3a23a9c557ba"
        },
        "item": {
          "id": "69e8b472-bb70-4d45-9ca2-0b4df031ee42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e5b17b5e-a050-4cc9-b1ae-ae3dff6891b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e8b472-bb70-4d45-9ca2-0b4df031ee42",
        "cursor": {
          "ref": "3ca2d7c5-07a5-487a-86a3-6fd593818c43",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "099392e6-10ee-428f-a455-3a23a9c557ba"
        },
        "item": {
          "id": "69e8b472-bb70-4d45-9ca2-0b4df031ee42",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e5b17b5e-a050-4cc9-b1ae-ae3dff6891b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2456bf5-6016-4ec7-a1f9-711f7e0df75b",
        "cursor": {
          "ref": "f9388837-39b2-4a71-817f-f18cfdf8595c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9f2b22aa-7f08-4db8-99a5-5299d1530fbd"
        },
        "item": {
          "id": "e2456bf5-6016-4ec7-a1f9-711f7e0df75b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b4e9fd1d-a157-4420-b183-8ed7750b574f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2456bf5-6016-4ec7-a1f9-711f7e0df75b",
        "cursor": {
          "ref": "f9388837-39b2-4a71-817f-f18cfdf8595c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9f2b22aa-7f08-4db8-99a5-5299d1530fbd"
        },
        "item": {
          "id": "e2456bf5-6016-4ec7-a1f9-711f7e0df75b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b4e9fd1d-a157-4420-b183-8ed7750b574f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f21f6a-fe14-43a6-8198-fbd6b5cc6230",
        "cursor": {
          "ref": "21075a57-87ea-40a4-ae5b-eb4bbe4e8cd0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "354c454d-77ea-41f6-ab40-eb8520162ca6"
        },
        "item": {
          "id": "58f21f6a-fe14-43a6-8198-fbd6b5cc6230",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "edf165bb-ecd6-436c-86a7-97d2e26ef097",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f21f6a-fe14-43a6-8198-fbd6b5cc6230",
        "cursor": {
          "ref": "21075a57-87ea-40a4-ae5b-eb4bbe4e8cd0",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "354c454d-77ea-41f6-ab40-eb8520162ca6"
        },
        "item": {
          "id": "58f21f6a-fe14-43a6-8198-fbd6b5cc6230",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "edf165bb-ecd6-436c-86a7-97d2e26ef097",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8043a178-a61e-4afb-9701-981c891b9af1",
        "cursor": {
          "ref": "6b6b52fd-f457-45a0-a862-76e63e2088f4",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c7b70158-9c7c-47eb-b198-3f5a3ba10ce3"
        },
        "item": {
          "id": "8043a178-a61e-4afb-9701-981c891b9af1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fbb4d16c-7ccf-4f52-8f2e-e29bace29b3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8043a178-a61e-4afb-9701-981c891b9af1",
        "cursor": {
          "ref": "6b6b52fd-f457-45a0-a862-76e63e2088f4",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c7b70158-9c7c-47eb-b198-3f5a3ba10ce3"
        },
        "item": {
          "id": "8043a178-a61e-4afb-9701-981c891b9af1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "fbb4d16c-7ccf-4f52-8f2e-e29bace29b3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27223dc6-54fe-433f-b460-5648e9018e66",
        "cursor": {
          "ref": "32e8dc10-8af2-431e-83a5-7e1cfdb1477a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "72441369-29de-4b0e-b0d5-7ffa29c7c485"
        },
        "item": {
          "id": "27223dc6-54fe-433f-b460-5648e9018e66",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c33e97b8-fc38-4a8a-86a9-26e7b41c7df2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27223dc6-54fe-433f-b460-5648e9018e66",
        "cursor": {
          "ref": "32e8dc10-8af2-431e-83a5-7e1cfdb1477a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "72441369-29de-4b0e-b0d5-7ffa29c7c485"
        },
        "item": {
          "id": "27223dc6-54fe-433f-b460-5648e9018e66",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c33e97b8-fc38-4a8a-86a9-26e7b41c7df2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782e1df1-94c1-4c7d-ad1f-5acfddb960b1",
        "cursor": {
          "ref": "af551b95-bb18-48a9-b391-6a2b8023949d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2396e881-bc7a-471f-b68d-37e839773bbe"
        },
        "item": {
          "id": "782e1df1-94c1-4c7d-ad1f-5acfddb960b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9fbe74eb-29a3-4db8-a6e5-bdc4d259975b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782e1df1-94c1-4c7d-ad1f-5acfddb960b1",
        "cursor": {
          "ref": "af551b95-bb18-48a9-b391-6a2b8023949d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2396e881-bc7a-471f-b68d-37e839773bbe"
        },
        "item": {
          "id": "782e1df1-94c1-4c7d-ad1f-5acfddb960b1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9fbe74eb-29a3-4db8-a6e5-bdc4d259975b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf8662c-02e0-491f-a77d-0a95acd91d53",
        "cursor": {
          "ref": "83ed604a-09b3-467f-b215-4a4a562af488",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b324d7e-66aa-4c05-bedf-43726db4e32d"
        },
        "item": {
          "id": "fcf8662c-02e0-491f-a77d-0a95acd91d53",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a2483b4f-829a-4126-9441-4573c9515a06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf8662c-02e0-491f-a77d-0a95acd91d53",
        "cursor": {
          "ref": "83ed604a-09b3-467f-b215-4a4a562af488",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b324d7e-66aa-4c05-bedf-43726db4e32d"
        },
        "item": {
          "id": "fcf8662c-02e0-491f-a77d-0a95acd91d53",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a2483b4f-829a-4126-9441-4573c9515a06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4532adda-da82-452d-a6ed-991ecb6b7640",
        "cursor": {
          "ref": "a0d80afd-e643-4080-87e4-691ea821710e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4e708b3c-a1cc-4f38-baf8-42f082870484"
        },
        "item": {
          "id": "4532adda-da82-452d-a6ed-991ecb6b7640",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8dfa7af9-9d19-4ca3-a9e7-1655cc9d38a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4532adda-da82-452d-a6ed-991ecb6b7640",
        "cursor": {
          "ref": "a0d80afd-e643-4080-87e4-691ea821710e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4e708b3c-a1cc-4f38-baf8-42f082870484"
        },
        "item": {
          "id": "4532adda-da82-452d-a6ed-991ecb6b7640",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8dfa7af9-9d19-4ca3-a9e7-1655cc9d38a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea31501-6793-4438-b6a6-35e7e03b935c",
        "cursor": {
          "ref": "ce12cc3e-46f7-4481-bb0e-643ff9d89bde",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c843d684-ee7f-4fdc-a22f-51ab4dffc8cd"
        },
        "item": {
          "id": "eea31501-6793-4438-b6a6-35e7e03b935c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d22a572c-8c39-406b-a1e1-6406f4c59b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea31501-6793-4438-b6a6-35e7e03b935c",
        "cursor": {
          "ref": "ce12cc3e-46f7-4481-bb0e-643ff9d89bde",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c843d684-ee7f-4fdc-a22f-51ab4dffc8cd"
        },
        "item": {
          "id": "eea31501-6793-4438-b6a6-35e7e03b935c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d22a572c-8c39-406b-a1e1-6406f4c59b82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c9da39-61a0-40a1-9e0a-7414fead0888",
        "cursor": {
          "ref": "d273739b-88e0-4273-a102-64fab4ed204b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "85fe5c76-8ef8-487b-b623-ebd46e0fb7c2"
        },
        "item": {
          "id": "27c9da39-61a0-40a1-9e0a-7414fead0888",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9bbcdbf7-980d-4dae-8044-f401b1ed26e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c9da39-61a0-40a1-9e0a-7414fead0888",
        "cursor": {
          "ref": "d273739b-88e0-4273-a102-64fab4ed204b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "85fe5c76-8ef8-487b-b623-ebd46e0fb7c2"
        },
        "item": {
          "id": "27c9da39-61a0-40a1-9e0a-7414fead0888",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9bbcdbf7-980d-4dae-8044-f401b1ed26e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcdc28a-4f31-42ec-b511-efa15e92dcb0",
        "cursor": {
          "ref": "828208e8-af18-4195-8531-311c8c261416",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6b5fd69f-b34b-4845-9d16-d5070f039312"
        },
        "item": {
          "id": "6fcdc28a-4f31-42ec-b511-efa15e92dcb0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "77745af4-efe3-4aa0-b0ce-49abf31a5b92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fcdc28a-4f31-42ec-b511-efa15e92dcb0",
        "cursor": {
          "ref": "828208e8-af18-4195-8531-311c8c261416",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6b5fd69f-b34b-4845-9d16-d5070f039312"
        },
        "item": {
          "id": "6fcdc28a-4f31-42ec-b511-efa15e92dcb0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "77745af4-efe3-4aa0-b0ce-49abf31a5b92",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1ab9d2-8bb1-4a78-93a9-3279bdd23857",
        "cursor": {
          "ref": "df729e78-1961-4ee3-893c-f1369c5406a6",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "05d6292b-5b69-4f4d-9703-579b9bda861d"
        },
        "item": {
          "id": "de1ab9d2-8bb1-4a78-93a9-3279bdd23857",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "07be04c9-aeb6-4223-9561-e2ae0d9b8512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1ab9d2-8bb1-4a78-93a9-3279bdd23857",
        "cursor": {
          "ref": "df729e78-1961-4ee3-893c-f1369c5406a6",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "05d6292b-5b69-4f4d-9703-579b9bda861d"
        },
        "item": {
          "id": "de1ab9d2-8bb1-4a78-93a9-3279bdd23857",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "07be04c9-aeb6-4223-9561-e2ae0d9b8512",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf3f7a0-6d0e-45f9-ac38-9d0cd9bd1040",
        "cursor": {
          "ref": "d85c9f42-8e9b-484c-81a9-05c834aefbe8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e38c0fe5-803c-407d-9809-fc6c51ea7142"
        },
        "item": {
          "id": "ccf3f7a0-6d0e-45f9-ac38-9d0cd9bd1040",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c39fb7c7-1841-4915-adcb-eec7693d72b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf3f7a0-6d0e-45f9-ac38-9d0cd9bd1040",
        "cursor": {
          "ref": "d85c9f42-8e9b-484c-81a9-05c834aefbe8",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e38c0fe5-803c-407d-9809-fc6c51ea7142"
        },
        "item": {
          "id": "ccf3f7a0-6d0e-45f9-ac38-9d0cd9bd1040",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c39fb7c7-1841-4915-adcb-eec7693d72b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e041ee27-5678-4129-8462-43ad09846759",
        "cursor": {
          "ref": "f23aba71-5d89-46b3-a21e-cda7c54ebd95",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8e9e474d-fbc2-4b69-88bf-ccf3a2c57781"
        },
        "item": {
          "id": "e041ee27-5678-4129-8462-43ad09846759",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b20e546d-ad34-4e28-ab2f-633d5fc76344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e041ee27-5678-4129-8462-43ad09846759",
        "cursor": {
          "ref": "f23aba71-5d89-46b3-a21e-cda7c54ebd95",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8e9e474d-fbc2-4b69-88bf-ccf3a2c57781"
        },
        "item": {
          "id": "e041ee27-5678-4129-8462-43ad09846759",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b20e546d-ad34-4e28-ab2f-633d5fc76344",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124df446-2244-48d0-a2ae-4f7d2ad2ff21",
        "cursor": {
          "ref": "6700e1f5-ad62-4735-8d9f-9eaa9a4861f6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5cdc620b-0be6-4b5c-9d77-c26b2cc15c0d"
        },
        "item": {
          "id": "124df446-2244-48d0-a2ae-4f7d2ad2ff21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2e12ea64-ca5d-4b7d-b427-f396f15d7637",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124df446-2244-48d0-a2ae-4f7d2ad2ff21",
        "cursor": {
          "ref": "6700e1f5-ad62-4735-8d9f-9eaa9a4861f6",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5cdc620b-0be6-4b5c-9d77-c26b2cc15c0d"
        },
        "item": {
          "id": "124df446-2244-48d0-a2ae-4f7d2ad2ff21",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2e12ea64-ca5d-4b7d-b427-f396f15d7637",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38982cc-c36b-4d12-8073-f9aff8e0a72a",
        "cursor": {
          "ref": "642fbe4b-57c9-48f8-a513-1fd57690cc42",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "18c4ae98-82c4-4d19-8f13-310ca3a74674"
        },
        "item": {
          "id": "f38982cc-c36b-4d12-8073-f9aff8e0a72a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e4f9dbff-b837-4988-b851-32e51089b04b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38982cc-c36b-4d12-8073-f9aff8e0a72a",
        "cursor": {
          "ref": "642fbe4b-57c9-48f8-a513-1fd57690cc42",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "18c4ae98-82c4-4d19-8f13-310ca3a74674"
        },
        "item": {
          "id": "f38982cc-c36b-4d12-8073-f9aff8e0a72a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e4f9dbff-b837-4988-b851-32e51089b04b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a23f7b-82d5-4ce8-81e6-1b73261b8e62",
        "cursor": {
          "ref": "e92d753a-8406-4974-bc4d-9f8f12c44ff6",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1316e67c-d872-4212-88a9-961f6b90539a"
        },
        "item": {
          "id": "47a23f7b-82d5-4ce8-81e6-1b73261b8e62",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1d7351fd-8f47-4c75-9c21-68d003d17886",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a23f7b-82d5-4ce8-81e6-1b73261b8e62",
        "cursor": {
          "ref": "e92d753a-8406-4974-bc4d-9f8f12c44ff6",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "1316e67c-d872-4212-88a9-961f6b90539a"
        },
        "item": {
          "id": "47a23f7b-82d5-4ce8-81e6-1b73261b8e62",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1d7351fd-8f47-4c75-9c21-68d003d17886",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b446b53b-a040-4326-8ed2-1123ab3af0a2",
        "cursor": {
          "ref": "fb9337ea-b88a-4f84-b82f-b1cff45d1a69",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cdcb86e3-21e1-489c-b6c8-b5db57c441ee"
        },
        "item": {
          "id": "b446b53b-a040-4326-8ed2-1123ab3af0a2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81f971de-a048-4138-8531-ff09a3d173f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b446b53b-a040-4326-8ed2-1123ab3af0a2",
        "cursor": {
          "ref": "fb9337ea-b88a-4f84-b82f-b1cff45d1a69",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cdcb86e3-21e1-489c-b6c8-b5db57c441ee"
        },
        "item": {
          "id": "b446b53b-a040-4326-8ed2-1123ab3af0a2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "81f971de-a048-4138-8531-ff09a3d173f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c1f337-fd11-4c9c-8ba3-97f855f8ac59",
        "cursor": {
          "ref": "b42a0cd2-960f-4b78-97f5-473a31bb679b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "923f06cc-4907-46c9-b4b6-1ed45f970381"
        },
        "item": {
          "id": "25c1f337-fd11-4c9c-8ba3-97f855f8ac59",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7e91259-3e4c-4acd-a321-ce0912a5281f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c1f337-fd11-4c9c-8ba3-97f855f8ac59",
        "cursor": {
          "ref": "b42a0cd2-960f-4b78-97f5-473a31bb679b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "923f06cc-4907-46c9-b4b6-1ed45f970381"
        },
        "item": {
          "id": "25c1f337-fd11-4c9c-8ba3-97f855f8ac59",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a7e91259-3e4c-4acd-a321-ce0912a5281f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df854d24-0d47-48ff-80f0-c493a4dfefdd",
        "cursor": {
          "ref": "1191791c-beea-4091-9536-361e42b4fc45",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "337e9d1f-ee4f-430e-afd5-7ce1e4ab734e"
        },
        "item": {
          "id": "df854d24-0d47-48ff-80f0-c493a4dfefdd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c388c95b-d149-4dca-b40f-1963a3e9ab90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df854d24-0d47-48ff-80f0-c493a4dfefdd",
        "cursor": {
          "ref": "1191791c-beea-4091-9536-361e42b4fc45",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "337e9d1f-ee4f-430e-afd5-7ce1e4ab734e"
        },
        "item": {
          "id": "df854d24-0d47-48ff-80f0-c493a4dfefdd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c388c95b-d149-4dca-b40f-1963a3e9ab90",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbc72c4-2704-4e55-b643-d65bac762320",
        "cursor": {
          "ref": "2d508830-9168-4353-8385-6d880e9d8b02",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db47b858-7b08-4508-b736-523b7979ef68"
        },
        "item": {
          "id": "dfbc72c4-2704-4e55-b643-d65bac762320",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b784598-f724-43bb-9408-501039e03f94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbc72c4-2704-4e55-b643-d65bac762320",
        "cursor": {
          "ref": "2d508830-9168-4353-8385-6d880e9d8b02",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "db47b858-7b08-4508-b736-523b7979ef68"
        },
        "item": {
          "id": "dfbc72c4-2704-4e55-b643-d65bac762320",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b784598-f724-43bb-9408-501039e03f94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75211429-233d-44c4-9e00-ce3c642d1067",
        "cursor": {
          "ref": "8c5fff8a-a630-4007-bbed-12393c9ffbd4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fe5f4ffe-d410-4c40-982b-2e7aeba621a0"
        },
        "item": {
          "id": "75211429-233d-44c4-9e00-ce3c642d1067",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23986b4c-4301-4743-ac06-8eaf82f5dcfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75211429-233d-44c4-9e00-ce3c642d1067",
        "cursor": {
          "ref": "8c5fff8a-a630-4007-bbed-12393c9ffbd4",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fe5f4ffe-d410-4c40-982b-2e7aeba621a0"
        },
        "item": {
          "id": "75211429-233d-44c4-9e00-ce3c642d1067",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23986b4c-4301-4743-ac06-8eaf82f5dcfa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab40eb9-8e21-40a0-8018-0637aa64ea46",
        "cursor": {
          "ref": "415392ec-2998-419f-a68c-a7a118a74789",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ef8d3ede-99ef-49cb-bcd2-4b70ade9e56e"
        },
        "item": {
          "id": "eab40eb9-8e21-40a0-8018-0637aa64ea46",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ad52b78b-c6c5-4ed7-948c-d45260003339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab40eb9-8e21-40a0-8018-0637aa64ea46",
        "cursor": {
          "ref": "415392ec-2998-419f-a68c-a7a118a74789",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ef8d3ede-99ef-49cb-bcd2-4b70ade9e56e"
        },
        "item": {
          "id": "eab40eb9-8e21-40a0-8018-0637aa64ea46",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ad52b78b-c6c5-4ed7-948c-d45260003339",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df19a0b-6c30-4e09-8cb9-e87112be33b2",
        "cursor": {
          "ref": "50cb3d61-2240-4d46-bbf1-e0ae88ffb0cd",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1636b8a5-b1f1-4835-88fa-2d495857409c"
        },
        "item": {
          "id": "8df19a0b-6c30-4e09-8cb9-e87112be33b2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52684cfb-544e-453d-8ac7-257081f37a3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df19a0b-6c30-4e09-8cb9-e87112be33b2",
        "cursor": {
          "ref": "50cb3d61-2240-4d46-bbf1-e0ae88ffb0cd",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1636b8a5-b1f1-4835-88fa-2d495857409c"
        },
        "item": {
          "id": "8df19a0b-6c30-4e09-8cb9-e87112be33b2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "52684cfb-544e-453d-8ac7-257081f37a3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c840e7-cf97-46c3-9c98-b1a67ab375e2",
        "cursor": {
          "ref": "787bb71e-40ea-4e39-838e-0d0e82bb2b35",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eab0571c-98a6-4513-a28a-74a13b5dd0eb"
        },
        "item": {
          "id": "06c840e7-cf97-46c3-9c98-b1a67ab375e2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7dc3e722-b101-4dd1-ad48-dd5cddfd899e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c840e7-cf97-46c3-9c98-b1a67ab375e2",
        "cursor": {
          "ref": "787bb71e-40ea-4e39-838e-0d0e82bb2b35",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "eab0571c-98a6-4513-a28a-74a13b5dd0eb"
        },
        "item": {
          "id": "06c840e7-cf97-46c3-9c98-b1a67ab375e2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7dc3e722-b101-4dd1-ad48-dd5cddfd899e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c914ec-15f3-4102-9e1e-68a3f7c8db55",
        "cursor": {
          "ref": "a1f44232-3895-4fe2-b501-815bca0bfb1a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ca60c863-2231-47cf-a8ad-d4abde660c95"
        },
        "item": {
          "id": "a6c914ec-15f3-4102-9e1e-68a3f7c8db55",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "085fb519-9d8f-4980-833f-09fd4a54e7f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c914ec-15f3-4102-9e1e-68a3f7c8db55",
        "cursor": {
          "ref": "a1f44232-3895-4fe2-b501-815bca0bfb1a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ca60c863-2231-47cf-a8ad-d4abde660c95"
        },
        "item": {
          "id": "a6c914ec-15f3-4102-9e1e-68a3f7c8db55",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "085fb519-9d8f-4980-833f-09fd4a54e7f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa4ab5f-e990-471d-abfa-e5a509be5930",
        "cursor": {
          "ref": "a5fa18ea-400d-4271-bcca-291b596b74a3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "03adb5ec-6b2d-485b-af8c-5fe387bd10fc"
        },
        "item": {
          "id": "afa4ab5f-e990-471d-abfa-e5a509be5930",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "585e3d88-7c7c-4d68-b5f6-1574f343c67f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa4ab5f-e990-471d-abfa-e5a509be5930",
        "cursor": {
          "ref": "a5fa18ea-400d-4271-bcca-291b596b74a3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "03adb5ec-6b2d-485b-af8c-5fe387bd10fc"
        },
        "item": {
          "id": "afa4ab5f-e990-471d-abfa-e5a509be5930",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "585e3d88-7c7c-4d68-b5f6-1574f343c67f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcfd550-2609-454d-9e97-3d6d631085db",
        "cursor": {
          "ref": "614ccf14-9a75-4926-be60-5a99b16f229a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3701f244-b5e5-423b-9d52-ad560af7795f"
        },
        "item": {
          "id": "9bcfd550-2609-454d-9e97-3d6d631085db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "571ecba4-10ac-4d96-bafe-61b85e4044ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bcfd550-2609-454d-9e97-3d6d631085db",
        "cursor": {
          "ref": "614ccf14-9a75-4926-be60-5a99b16f229a",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3701f244-b5e5-423b-9d52-ad560af7795f"
        },
        "item": {
          "id": "9bcfd550-2609-454d-9e97-3d6d631085db",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "571ecba4-10ac-4d96-bafe-61b85e4044ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f3fc85-916e-46ac-a3e3-0f40914eff07",
        "cursor": {
          "ref": "0ca529f4-053f-4252-955b-703721842408",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aaae566d-bbc8-4e3d-bf04-c3b3e7fca1a2"
        },
        "item": {
          "id": "35f3fc85-916e-46ac-a3e3-0f40914eff07",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c16eb2ea-adf8-4055-aded-62a09a909fe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f3fc85-916e-46ac-a3e3-0f40914eff07",
        "cursor": {
          "ref": "0ca529f4-053f-4252-955b-703721842408",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aaae566d-bbc8-4e3d-bf04-c3b3e7fca1a2"
        },
        "item": {
          "id": "35f3fc85-916e-46ac-a3e3-0f40914eff07",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c16eb2ea-adf8-4055-aded-62a09a909fe3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ea592-fbbf-4ded-a6af-cf9fc314445d",
        "cursor": {
          "ref": "d1ae92f5-0665-40e7-8734-bb6d64412763",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "24434709-1380-493e-8df4-df43aebcbd8c"
        },
        "item": {
          "id": "912ea592-fbbf-4ded-a6af-cf9fc314445d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b1615cfe-0716-475d-87b0-88e97f629c43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ea592-fbbf-4ded-a6af-cf9fc314445d",
        "cursor": {
          "ref": "d1ae92f5-0665-40e7-8734-bb6d64412763",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "24434709-1380-493e-8df4-df43aebcbd8c"
        },
        "item": {
          "id": "912ea592-fbbf-4ded-a6af-cf9fc314445d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b1615cfe-0716-475d-87b0-88e97f629c43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3996dea9-aac8-458a-8099-d174f7c0c17e",
        "cursor": {
          "ref": "a61407f4-3027-41df-b331-edef8030bc64",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8ae71baa-e12f-4d90-adcd-a3d66b5a7bb1"
        },
        "item": {
          "id": "3996dea9-aac8-458a-8099-d174f7c0c17e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "50fd9e7d-33c9-4c98-9d78-19e1dccd5379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3996dea9-aac8-458a-8099-d174f7c0c17e",
        "cursor": {
          "ref": "a61407f4-3027-41df-b331-edef8030bc64",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8ae71baa-e12f-4d90-adcd-a3d66b5a7bb1"
        },
        "item": {
          "id": "3996dea9-aac8-458a-8099-d174f7c0c17e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "50fd9e7d-33c9-4c98-9d78-19e1dccd5379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba976845-a367-48a8-bf0b-a243193cc180",
        "cursor": {
          "ref": "57606b5a-f644-46fc-9383-d9ede173a219",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "05bdd9e7-ca7d-41b7-ac9b-a6cabe02bdb3"
        },
        "item": {
          "id": "ba976845-a367-48a8-bf0b-a243193cc180",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0e072c2-ab1a-4d14-9616-4cf262d8e6cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba976845-a367-48a8-bf0b-a243193cc180",
        "cursor": {
          "ref": "57606b5a-f644-46fc-9383-d9ede173a219",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "05bdd9e7-ca7d-41b7-ac9b-a6cabe02bdb3"
        },
        "item": {
          "id": "ba976845-a367-48a8-bf0b-a243193cc180",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0e072c2-ab1a-4d14-9616-4cf262d8e6cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f195c4-1908-4d2f-95fb-36a733c46410",
        "cursor": {
          "ref": "1568fed6-2217-4540-bb1a-a08b75287668",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8ffb1b4a-14d2-4b3c-bb7b-85c5f5837606"
        },
        "item": {
          "id": "20f195c4-1908-4d2f-95fb-36a733c46410",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e89b6550-e752-4fad-9274-b98b6fe4a674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f195c4-1908-4d2f-95fb-36a733c46410",
        "cursor": {
          "ref": "1568fed6-2217-4540-bb1a-a08b75287668",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8ffb1b4a-14d2-4b3c-bb7b-85c5f5837606"
        },
        "item": {
          "id": "20f195c4-1908-4d2f-95fb-36a733c46410",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e89b6550-e752-4fad-9274-b98b6fe4a674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bab1a5-ca9a-45ac-a434-057e0f4ba834",
        "cursor": {
          "ref": "014df35f-ac94-4ee0-a6cd-3f97cd171515",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d1d42cbe-9f0e-426a-997e-6e255e161849"
        },
        "item": {
          "id": "21bab1a5-ca9a-45ac-a434-057e0f4ba834",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dd76884c-fa3e-4fc0-b3fe-8b12deb500f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bab1a5-ca9a-45ac-a434-057e0f4ba834",
        "cursor": {
          "ref": "014df35f-ac94-4ee0-a6cd-3f97cd171515",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d1d42cbe-9f0e-426a-997e-6e255e161849"
        },
        "item": {
          "id": "21bab1a5-ca9a-45ac-a434-057e0f4ba834",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "dd76884c-fa3e-4fc0-b3fe-8b12deb500f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca9fb01-81af-48c6-98f9-5af0d4f732a6",
        "cursor": {
          "ref": "1452153e-65ba-4dd1-b0d7-daaf7738a41a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b10db1ca-032f-4464-b646-b095e8b782ba"
        },
        "item": {
          "id": "5ca9fb01-81af-48c6-98f9-5af0d4f732a6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c117cf0d-4a93-430b-a8fb-f2dc4bb870ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca9fb01-81af-48c6-98f9-5af0d4f732a6",
        "cursor": {
          "ref": "1452153e-65ba-4dd1-b0d7-daaf7738a41a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b10db1ca-032f-4464-b646-b095e8b782ba"
        },
        "item": {
          "id": "5ca9fb01-81af-48c6-98f9-5af0d4f732a6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c117cf0d-4a93-430b-a8fb-f2dc4bb870ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34ac1ae-ca3b-45c3-bc69-ec8234074df1",
        "cursor": {
          "ref": "d5d6a6fa-51d7-403c-9bb0-77782c78f116",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7536aef0-33c5-4f0e-a817-57176ef57366"
        },
        "item": {
          "id": "e34ac1ae-ca3b-45c3-bc69-ec8234074df1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5f0612a3-4ae7-437c-85bb-0ebadbebf002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e34ac1ae-ca3b-45c3-bc69-ec8234074df1",
        "cursor": {
          "ref": "d5d6a6fa-51d7-403c-9bb0-77782c78f116",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7536aef0-33c5-4f0e-a817-57176ef57366"
        },
        "item": {
          "id": "e34ac1ae-ca3b-45c3-bc69-ec8234074df1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "5f0612a3-4ae7-437c-85bb-0ebadbebf002",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a902d6b-5eb7-435d-9338-913b9914b64f",
        "cursor": {
          "ref": "d5e496cd-e0b8-4fa3-9179-6b146408930a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8af9460f-57b9-40b2-bfae-3ceed49af231"
        },
        "item": {
          "id": "9a902d6b-5eb7-435d-9338-913b9914b64f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2d7175fc-8da4-4c43-99bd-aa64046a2511",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a902d6b-5eb7-435d-9338-913b9914b64f",
        "cursor": {
          "ref": "d5e496cd-e0b8-4fa3-9179-6b146408930a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8af9460f-57b9-40b2-bfae-3ceed49af231"
        },
        "item": {
          "id": "9a902d6b-5eb7-435d-9338-913b9914b64f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2d7175fc-8da4-4c43-99bd-aa64046a2511",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371ad732-adcf-401d-bb45-76115a7a6e6a",
        "cursor": {
          "ref": "b8227846-d875-46c8-b84b-879f6a3bd820",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4d1d09f7-7cd5-47fb-8bad-3683a3ba0f5f"
        },
        "item": {
          "id": "371ad732-adcf-401d-bb45-76115a7a6e6a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d2e42a6e-0791-4efe-8f87-3a543aee6e73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371ad732-adcf-401d-bb45-76115a7a6e6a",
        "cursor": {
          "ref": "b8227846-d875-46c8-b84b-879f6a3bd820",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4d1d09f7-7cd5-47fb-8bad-3683a3ba0f5f"
        },
        "item": {
          "id": "371ad732-adcf-401d-bb45-76115a7a6e6a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d2e42a6e-0791-4efe-8f87-3a543aee6e73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2274a00d-f1f3-450d-963f-ddc0879f61e6",
        "cursor": {
          "ref": "efe6d12c-293f-482c-a2ff-ac9b69de78f8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c894e6f1-e580-4218-a02b-908152279042"
        },
        "item": {
          "id": "2274a00d-f1f3-450d-963f-ddc0879f61e6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6c9508f7-5e1f-4fa2-80a4-db1e3a757e6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2274a00d-f1f3-450d-963f-ddc0879f61e6",
        "cursor": {
          "ref": "efe6d12c-293f-482c-a2ff-ac9b69de78f8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c894e6f1-e580-4218-a02b-908152279042"
        },
        "item": {
          "id": "2274a00d-f1f3-450d-963f-ddc0879f61e6",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6c9508f7-5e1f-4fa2-80a4-db1e3a757e6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8686b-9eaf-4387-95ec-15c4e8c346af",
        "cursor": {
          "ref": "bde5760e-2a10-4572-9777-67a1ec1ecb9b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6e31f369-4ad0-4ece-a5e8-6ba586f7c114"
        },
        "item": {
          "id": "74c8686b-9eaf-4387-95ec-15c4e8c346af",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2fa94baa-e965-4f1d-89b5-6c93104db208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c8686b-9eaf-4387-95ec-15c4e8c346af",
        "cursor": {
          "ref": "bde5760e-2a10-4572-9777-67a1ec1ecb9b",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6e31f369-4ad0-4ece-a5e8-6ba586f7c114"
        },
        "item": {
          "id": "74c8686b-9eaf-4387-95ec-15c4e8c346af",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "2fa94baa-e965-4f1d-89b5-6c93104db208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818f6913-cdae-4fd2-8d87-d1def38a79a9",
        "cursor": {
          "ref": "05758bf3-cd2f-4cad-8db5-fa62895e6124",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "00846e96-3d1e-403c-bcf9-3d9e824f13eb"
        },
        "item": {
          "id": "818f6913-cdae-4fd2-8d87-d1def38a79a9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "027bf88f-d0bd-477d-bd1a-0aae93d1640c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818f6913-cdae-4fd2-8d87-d1def38a79a9",
        "cursor": {
          "ref": "05758bf3-cd2f-4cad-8db5-fa62895e6124",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "00846e96-3d1e-403c-bcf9-3d9e824f13eb"
        },
        "item": {
          "id": "818f6913-cdae-4fd2-8d87-d1def38a79a9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "027bf88f-d0bd-477d-bd1a-0aae93d1640c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f44962-222b-46fd-9b10-93e2c2398889",
        "cursor": {
          "ref": "437d36ad-27bc-4038-b2f0-8628b63275c3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1ddf3a9c-735c-43e5-af36-bafeea04bc49"
        },
        "item": {
          "id": "59f44962-222b-46fd-9b10-93e2c2398889",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "480897b2-5855-46f9-aa89-2c935f8decf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f44962-222b-46fd-9b10-93e2c2398889",
        "cursor": {
          "ref": "437d36ad-27bc-4038-b2f0-8628b63275c3",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "1ddf3a9c-735c-43e5-af36-bafeea04bc49"
        },
        "item": {
          "id": "59f44962-222b-46fd-9b10-93e2c2398889",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "480897b2-5855-46f9-aa89-2c935f8decf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f073f788-4dcc-4cee-95dc-ff795fa522b9",
        "cursor": {
          "ref": "8005b59d-f6c9-4817-b8c5-7e5374f9362b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e7d3e375-fd15-4746-b700-3546883681d5"
        },
        "item": {
          "id": "f073f788-4dcc-4cee-95dc-ff795fa522b9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "92d0e5d8-f5bb-4779-9723-11966b036241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f073f788-4dcc-4cee-95dc-ff795fa522b9",
        "cursor": {
          "ref": "8005b59d-f6c9-4817-b8c5-7e5374f9362b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e7d3e375-fd15-4746-b700-3546883681d5"
        },
        "item": {
          "id": "f073f788-4dcc-4cee-95dc-ff795fa522b9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "92d0e5d8-f5bb-4779-9723-11966b036241",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a05a9ec-6d2a-4022-a0c1-c2b8f8aedb75",
        "cursor": {
          "ref": "28149704-2d2a-4820-acc8-8d56f30aa565",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "60220e4c-c9dd-4cb5-bdae-acc6b83a7fa3"
        },
        "item": {
          "id": "5a05a9ec-6d2a-4022-a0c1-c2b8f8aedb75",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "566f776f-506b-4dd3-a771-5795ecc7102f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a05a9ec-6d2a-4022-a0c1-c2b8f8aedb75",
        "cursor": {
          "ref": "28149704-2d2a-4820-acc8-8d56f30aa565",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "60220e4c-c9dd-4cb5-bdae-acc6b83a7fa3"
        },
        "item": {
          "id": "5a05a9ec-6d2a-4022-a0c1-c2b8f8aedb75",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "566f776f-506b-4dd3-a771-5795ecc7102f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2055f309-ae66-4a21-a0dd-dd1a29f979ac",
        "cursor": {
          "ref": "eb58c484-4f22-4b21-9d9f-855035c48ca1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "89da7576-b0c6-4251-9421-f49c6913485c"
        },
        "item": {
          "id": "2055f309-ae66-4a21-a0dd-dd1a29f979ac",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42803aa8-9a93-4686-89f9-aa18b05bf32a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2055f309-ae66-4a21-a0dd-dd1a29f979ac",
        "cursor": {
          "ref": "eb58c484-4f22-4b21-9d9f-855035c48ca1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "89da7576-b0c6-4251-9421-f49c6913485c"
        },
        "item": {
          "id": "2055f309-ae66-4a21-a0dd-dd1a29f979ac",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "42803aa8-9a93-4686-89f9-aa18b05bf32a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7508635d-d359-4f59-bb58-cfaddfbb14eb",
        "cursor": {
          "ref": "aab356af-ccbd-4713-8a36-49e499aee597",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "952cc92a-40ba-4e8c-9bd7-9b03668e518f"
        },
        "item": {
          "id": "7508635d-d359-4f59-bb58-cfaddfbb14eb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f23529f-348c-427a-9b2d-c9ea355b430b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7508635d-d359-4f59-bb58-cfaddfbb14eb",
        "cursor": {
          "ref": "aab356af-ccbd-4713-8a36-49e499aee597",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "952cc92a-40ba-4e8c-9bd7-9b03668e518f"
        },
        "item": {
          "id": "7508635d-d359-4f59-bb58-cfaddfbb14eb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5f23529f-348c-427a-9b2d-c9ea355b430b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6b1bb4-3bc2-4c36-bcc4-b7aba1584709",
        "cursor": {
          "ref": "79b4c5d8-bf6d-46bc-9adb-11dea99ba374",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "efe9bc15-2b30-4464-9e3b-b6e4420c2065"
        },
        "item": {
          "id": "0e6b1bb4-3bc2-4c36-bcc4-b7aba1584709",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ce8a098-e2c8-4931-9515-f9acfe9cb7ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6b1bb4-3bc2-4c36-bcc4-b7aba1584709",
        "cursor": {
          "ref": "79b4c5d8-bf6d-46bc-9adb-11dea99ba374",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "efe9bc15-2b30-4464-9e3b-b6e4420c2065"
        },
        "item": {
          "id": "0e6b1bb4-3bc2-4c36-bcc4-b7aba1584709",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8ce8a098-e2c8-4931-9515-f9acfe9cb7ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b01a5cb-3ef3-4a76-afda-0fc961cc2a92",
        "cursor": {
          "ref": "c4d16ed3-4b14-49b0-adf7-328c6bbd37e1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a1a7f1d-1c78-4336-aa08-a617f2f45827"
        },
        "item": {
          "id": "4b01a5cb-3ef3-4a76-afda-0fc961cc2a92",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a5da5a10-3abc-44f4-85c0-06f629ba04ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b01a5cb-3ef3-4a76-afda-0fc961cc2a92",
        "cursor": {
          "ref": "c4d16ed3-4b14-49b0-adf7-328c6bbd37e1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a1a7f1d-1c78-4336-aa08-a617f2f45827"
        },
        "item": {
          "id": "4b01a5cb-3ef3-4a76-afda-0fc961cc2a92",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a5da5a10-3abc-44f4-85c0-06f629ba04ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1556e4-c5a0-48d5-b126-3830cb8d2ebf",
        "cursor": {
          "ref": "e8e00515-dcf3-45b4-9d4f-97807d304db2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d5eecf35-70f6-4f52-898b-a6d692fd7440"
        },
        "item": {
          "id": "9b1556e4-c5a0-48d5-b126-3830cb8d2ebf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a22a907f-cd5e-4da5-ad82-3d130ea44aa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1556e4-c5a0-48d5-b126-3830cb8d2ebf",
        "cursor": {
          "ref": "e8e00515-dcf3-45b4-9d4f-97807d304db2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d5eecf35-70f6-4f52-898b-a6d692fd7440"
        },
        "item": {
          "id": "9b1556e4-c5a0-48d5-b126-3830cb8d2ebf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a22a907f-cd5e-4da5-ad82-3d130ea44aa9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52609f1-82a0-4fca-9e60-4ac1789d982e",
        "cursor": {
          "ref": "364e69d4-15bb-4144-87ba-072436471719",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "906b188c-7ffa-4e97-a0cd-1ab2019c13a6"
        },
        "item": {
          "id": "e52609f1-82a0-4fca-9e60-4ac1789d982e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "281d9689-3e37-44e8-85e1-5b6492fa526a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52609f1-82a0-4fca-9e60-4ac1789d982e",
        "cursor": {
          "ref": "364e69d4-15bb-4144-87ba-072436471719",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "906b188c-7ffa-4e97-a0cd-1ab2019c13a6"
        },
        "item": {
          "id": "e52609f1-82a0-4fca-9e60-4ac1789d982e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "281d9689-3e37-44e8-85e1-5b6492fa526a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7668fa-1067-4835-b8ab-6332eba09811",
        "cursor": {
          "ref": "a2e76720-db09-4a1a-aa18-f927810c65fe",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fc66f62e-723a-4462-95e8-5e8637344f3b"
        },
        "item": {
          "id": "3c7668fa-1067-4835-b8ab-6332eba09811",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ee00415b-1897-4a13-9ef4-0bf961321092",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7668fa-1067-4835-b8ab-6332eba09811",
        "cursor": {
          "ref": "a2e76720-db09-4a1a-aa18-f927810c65fe",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fc66f62e-723a-4462-95e8-5e8637344f3b"
        },
        "item": {
          "id": "3c7668fa-1067-4835-b8ab-6332eba09811",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ee00415b-1897-4a13-9ef4-0bf961321092",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e549f5-2462-4c4d-a855-76d6b25447fe",
        "cursor": {
          "ref": "a002cde4-1385-4c84-912e-eea85ee7dfe0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bc49020c-bc7f-47cb-8d0e-ab4dc8a30171"
        },
        "item": {
          "id": "32e549f5-2462-4c4d-a855-76d6b25447fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f274c7f0-a3ce-4905-a857-095ea34d7c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e549f5-2462-4c4d-a855-76d6b25447fe",
        "cursor": {
          "ref": "a002cde4-1385-4c84-912e-eea85ee7dfe0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bc49020c-bc7f-47cb-8d0e-ab4dc8a30171"
        },
        "item": {
          "id": "32e549f5-2462-4c4d-a855-76d6b25447fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f274c7f0-a3ce-4905-a857-095ea34d7c47",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4e5d7c-c557-4d6c-b5cf-4b41c54465ea",
        "cursor": {
          "ref": "959c1d43-47a3-4835-a8d0-b4991f83e597",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1562bc4c-9b42-439e-a5e9-eb59566f304c"
        },
        "item": {
          "id": "4f4e5d7c-c557-4d6c-b5cf-4b41c54465ea",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "46053e9e-cc8f-4bf3-ab8b-87c0b7c9b4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4e5d7c-c557-4d6c-b5cf-4b41c54465ea",
        "cursor": {
          "ref": "959c1d43-47a3-4835-a8d0-b4991f83e597",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1562bc4c-9b42-439e-a5e9-eb59566f304c"
        },
        "item": {
          "id": "4f4e5d7c-c557-4d6c-b5cf-4b41c54465ea",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "46053e9e-cc8f-4bf3-ab8b-87c0b7c9b4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2501ae28-9d9a-468c-a05d-e2e285d57475",
        "cursor": {
          "ref": "a0cbf9b5-a82d-4544-aeb3-f77058e6658a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ed99bdf6-6cc1-4d40-a3af-d06913b858f8"
        },
        "item": {
          "id": "2501ae28-9d9a-468c-a05d-e2e285d57475",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "89f4d790-9fb5-4ff1-ae6b-b9fc52d72070",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2501ae28-9d9a-468c-a05d-e2e285d57475",
        "cursor": {
          "ref": "a0cbf9b5-a82d-4544-aeb3-f77058e6658a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ed99bdf6-6cc1-4d40-a3af-d06913b858f8"
        },
        "item": {
          "id": "2501ae28-9d9a-468c-a05d-e2e285d57475",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "89f4d790-9fb5-4ff1-ae6b-b9fc52d72070",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6689430-477d-4c29-9cf1-3809fe6446db",
        "cursor": {
          "ref": "e3ee455f-8238-4326-b226-5cab1250fea0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4880ebde-d3d4-4275-9056-f33f34d2c69e"
        },
        "item": {
          "id": "d6689430-477d-4c29-9cf1-3809fe6446db",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13d8ac32-8cf6-41e0-b424-c155cfa794d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6689430-477d-4c29-9cf1-3809fe6446db",
        "cursor": {
          "ref": "e3ee455f-8238-4326-b226-5cab1250fea0",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4880ebde-d3d4-4275-9056-f33f34d2c69e"
        },
        "item": {
          "id": "d6689430-477d-4c29-9cf1-3809fe6446db",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "13d8ac32-8cf6-41e0-b424-c155cfa794d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcec5289-69c5-4c2c-b562-d0b567a7f722",
        "cursor": {
          "ref": "824596ba-ac2d-43f4-8ba1-fb2153343c66",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ee1caebb-e29a-4258-a8e0-bddd3cd513bf"
        },
        "item": {
          "id": "fcec5289-69c5-4c2c-b562-d0b567a7f722",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9d34c8de-ffe3-4f4f-a2c7-b152c1af6df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcec5289-69c5-4c2c-b562-d0b567a7f722",
        "cursor": {
          "ref": "824596ba-ac2d-43f4-8ba1-fb2153343c66",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ee1caebb-e29a-4258-a8e0-bddd3cd513bf"
        },
        "item": {
          "id": "fcec5289-69c5-4c2c-b562-d0b567a7f722",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9d34c8de-ffe3-4f4f-a2c7-b152c1af6df7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7a7ce-2b8b-4665-9f6b-4c57d3d88a86",
        "cursor": {
          "ref": "0042bc4c-e72f-4e52-a4a5-a068c36f13c6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "31b093fd-6e40-4440-8bb9-ed79f231d71c"
        },
        "item": {
          "id": "c8e7a7ce-2b8b-4665-9f6b-4c57d3d88a86",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "74cc92cc-7f87-45cb-91d2-d9d442a4ff1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e7a7ce-2b8b-4665-9f6b-4c57d3d88a86",
        "cursor": {
          "ref": "0042bc4c-e72f-4e52-a4a5-a068c36f13c6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "31b093fd-6e40-4440-8bb9-ed79f231d71c"
        },
        "item": {
          "id": "c8e7a7ce-2b8b-4665-9f6b-4c57d3d88a86",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "74cc92cc-7f87-45cb-91d2-d9d442a4ff1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d9759d-7a38-4595-a573-6b594ccf454b",
        "cursor": {
          "ref": "7509c4b8-2084-46cf-816f-7a4d7b5838c8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2daf12a0-2f3d-4dbd-9927-0045a0b86d02"
        },
        "item": {
          "id": "a2d9759d-7a38-4595-a573-6b594ccf454b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f78dfbba-36d4-437b-9fbf-ca9b92776237",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d9759d-7a38-4595-a573-6b594ccf454b",
        "cursor": {
          "ref": "7509c4b8-2084-46cf-816f-7a4d7b5838c8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2daf12a0-2f3d-4dbd-9927-0045a0b86d02"
        },
        "item": {
          "id": "a2d9759d-7a38-4595-a573-6b594ccf454b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f78dfbba-36d4-437b-9fbf-ca9b92776237",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc18380e-c660-46f6-af9e-0285ef6ce093",
        "cursor": {
          "ref": "3f90f7a7-376d-440c-9fc2-e80aaeedf47a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0394486-dfe3-43ea-8b96-b677819308d8"
        },
        "item": {
          "id": "cc18380e-c660-46f6-af9e-0285ef6ce093",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "17eadd95-480e-4942-93be-9172fae0abb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc18380e-c660-46f6-af9e-0285ef6ce093",
        "cursor": {
          "ref": "3f90f7a7-376d-440c-9fc2-e80aaeedf47a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a0394486-dfe3-43ea-8b96-b677819308d8"
        },
        "item": {
          "id": "cc18380e-c660-46f6-af9e-0285ef6ce093",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "17eadd95-480e-4942-93be-9172fae0abb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed03a29-649e-4e73-b6df-928b2561ef07",
        "cursor": {
          "ref": "c6bb8cd5-6d01-4bf2-a585-11fdbb270ac2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9c980604-e964-4d2e-bd6b-1a0276478ef8"
        },
        "item": {
          "id": "2ed03a29-649e-4e73-b6df-928b2561ef07",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c2dd185f-6b37-4df8-a45e-3ec17166cb34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed03a29-649e-4e73-b6df-928b2561ef07",
        "cursor": {
          "ref": "c6bb8cd5-6d01-4bf2-a585-11fdbb270ac2",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9c980604-e964-4d2e-bd6b-1a0276478ef8"
        },
        "item": {
          "id": "2ed03a29-649e-4e73-b6df-928b2561ef07",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c2dd185f-6b37-4df8-a45e-3ec17166cb34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef6e590-3ed7-4118-be35-1a239d37d4ee",
        "cursor": {
          "ref": "4a9cdf8a-61ff-4392-950a-75eb955abc27",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3e9a1868-79ea-46c3-90af-71e319a636da"
        },
        "item": {
          "id": "bef6e590-3ed7-4118-be35-1a239d37d4ee",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "80eb2f8c-2cd0-4388-8178-d150f658a2dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef6e590-3ed7-4118-be35-1a239d37d4ee",
        "cursor": {
          "ref": "4a9cdf8a-61ff-4392-950a-75eb955abc27",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3e9a1868-79ea-46c3-90af-71e319a636da"
        },
        "item": {
          "id": "bef6e590-3ed7-4118-be35-1a239d37d4ee",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "80eb2f8c-2cd0-4388-8178-d150f658a2dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ce8bff-ff04-4fd7-a645-7be9c86b03fd",
        "cursor": {
          "ref": "61fc3d59-c8f4-4079-a83c-a47f1a7e7f6f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c59fe6d8-38bf-4d80-8cea-bfe7dd33d18e"
        },
        "item": {
          "id": "09ce8bff-ff04-4fd7-a645-7be9c86b03fd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f745721c-7e95-4bd3-b66b-6c7df3fed975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ce8bff-ff04-4fd7-a645-7be9c86b03fd",
        "cursor": {
          "ref": "61fc3d59-c8f4-4079-a83c-a47f1a7e7f6f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c59fe6d8-38bf-4d80-8cea-bfe7dd33d18e"
        },
        "item": {
          "id": "09ce8bff-ff04-4fd7-a645-7be9c86b03fd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f745721c-7e95-4bd3-b66b-6c7df3fed975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f1f703-569a-4a72-9940-6c969a6765e5",
        "cursor": {
          "ref": "7d1b3248-b83c-4924-bf80-ceb55242320c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2e8f5b96-bd68-4ed6-bf0d-4ff46037e395"
        },
        "item": {
          "id": "58f1f703-569a-4a72-9940-6c969a6765e5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "56652b49-24a5-4839-b491-b8d700ec1750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f1f703-569a-4a72-9940-6c969a6765e5",
        "cursor": {
          "ref": "7d1b3248-b83c-4924-bf80-ceb55242320c",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2e8f5b96-bd68-4ed6-bf0d-4ff46037e395"
        },
        "item": {
          "id": "58f1f703-569a-4a72-9940-6c969a6765e5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "56652b49-24a5-4839-b491-b8d700ec1750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb2dc73-2766-4a06-b94e-c179aac06669",
        "cursor": {
          "ref": "417f4309-fb5b-4c30-83e3-47021a146b0d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f20386c1-d5c4-4b61-a423-e6bdf94114bc"
        },
        "item": {
          "id": "2fb2dc73-2766-4a06-b94e-c179aac06669",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b4a6c8d0-6f2a-4f34-9b82-36b3ed5f1717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb2dc73-2766-4a06-b94e-c179aac06669",
        "cursor": {
          "ref": "417f4309-fb5b-4c30-83e3-47021a146b0d",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f20386c1-d5c4-4b61-a423-e6bdf94114bc"
        },
        "item": {
          "id": "2fb2dc73-2766-4a06-b94e-c179aac06669",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "b4a6c8d0-6f2a-4f34-9b82-36b3ed5f1717",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fdacc0-a52d-44d1-8157-dcb94dbd8362",
        "cursor": {
          "ref": "5b321fa7-b1bc-4da9-97be-2dbd73dc6458",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "59f3559e-634b-4008-8e9a-901b0a0d2e58"
        },
        "item": {
          "id": "a2fdacc0-a52d-44d1-8157-dcb94dbd8362",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "907dc521-68dc-4149-8617-fa4d1be6a469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fdacc0-a52d-44d1-8157-dcb94dbd8362",
        "cursor": {
          "ref": "5b321fa7-b1bc-4da9-97be-2dbd73dc6458",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "59f3559e-634b-4008-8e9a-901b0a0d2e58"
        },
        "item": {
          "id": "a2fdacc0-a52d-44d1-8157-dcb94dbd8362",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "907dc521-68dc-4149-8617-fa4d1be6a469",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702f94df-f966-4176-a310-7573b12fe6b8",
        "cursor": {
          "ref": "48cd939d-76a3-407c-8659-3873f6a5a69f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6eeb2ae7-0d36-46c3-86d3-8c9097663594"
        },
        "item": {
          "id": "702f94df-f966-4176-a310-7573b12fe6b8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6040e2c6-9e5e-40db-97ad-ca9a79d00e6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702f94df-f966-4176-a310-7573b12fe6b8",
        "cursor": {
          "ref": "48cd939d-76a3-407c-8659-3873f6a5a69f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6eeb2ae7-0d36-46c3-86d3-8c9097663594"
        },
        "item": {
          "id": "702f94df-f966-4176-a310-7573b12fe6b8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6040e2c6-9e5e-40db-97ad-ca9a79d00e6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcadccc3-3df3-4922-a886-e796e0555376",
        "cursor": {
          "ref": "f9717510-3784-4d40-a8e9-c4d0452b2532",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e365b3fa-cecd-4049-b2a4-d7101f0f5342"
        },
        "item": {
          "id": "bcadccc3-3df3-4922-a886-e796e0555376",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6dc4a668-256e-4d20-a2bc-60af7a470e5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcadccc3-3df3-4922-a886-e796e0555376",
        "cursor": {
          "ref": "f9717510-3784-4d40-a8e9-c4d0452b2532",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e365b3fa-cecd-4049-b2a4-d7101f0f5342"
        },
        "item": {
          "id": "bcadccc3-3df3-4922-a886-e796e0555376",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6dc4a668-256e-4d20-a2bc-60af7a470e5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d9d287-c311-4fc4-a87a-6a6de6b1d6c7",
        "cursor": {
          "ref": "80d54676-0b5c-4285-8aa9-e3976596fee0",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "342803e9-7109-4509-9316-caf40b6d27a1"
        },
        "item": {
          "id": "a5d9d287-c311-4fc4-a87a-6a6de6b1d6c7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c6a36199-41bf-4fa9-afa6-f20d8f69a0f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d9d287-c311-4fc4-a87a-6a6de6b1d6c7",
        "cursor": {
          "ref": "80d54676-0b5c-4285-8aa9-e3976596fee0",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "342803e9-7109-4509-9316-caf40b6d27a1"
        },
        "item": {
          "id": "a5d9d287-c311-4fc4-a87a-6a6de6b1d6c7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c6a36199-41bf-4fa9-afa6-f20d8f69a0f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b72566-3815-45e5-bb76-9d31be14fe97",
        "cursor": {
          "ref": "c77d16ec-ce81-4503-8d68-0c28f935b4dc",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f4d79064-caa1-4145-b79f-7f36d648f581"
        },
        "item": {
          "id": "63b72566-3815-45e5-bb76-9d31be14fe97",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b1afb96a-1768-440f-bd2d-60d638055ba3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 98,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b72566-3815-45e5-bb76-9d31be14fe97",
        "cursor": {
          "ref": "c77d16ec-ce81-4503-8d68-0c28f935b4dc",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f4d79064-caa1-4145-b79f-7f36d648f581"
        },
        "item": {
          "id": "63b72566-3815-45e5-bb76-9d31be14fe97",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b1afb96a-1768-440f-bd2d-60d638055ba3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 98,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1ffa8a-e631-4b54-9861-d891fc8a7fd4",
        "cursor": {
          "ref": "92997c2d-97c2-47cb-a31c-d7ab3fd19b30",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e602872d-6b8b-4c29-aa96-d656d07a8306"
        },
        "item": {
          "id": "3d1ffa8a-e631-4b54-9861-d891fc8a7fd4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c3f55588-3832-44cd-9e37-ca822e5273bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1ffa8a-e631-4b54-9861-d891fc8a7fd4",
        "cursor": {
          "ref": "92997c2d-97c2-47cb-a31c-d7ab3fd19b30",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e602872d-6b8b-4c29-aa96-d656d07a8306"
        },
        "item": {
          "id": "3d1ffa8a-e631-4b54-9861-d891fc8a7fd4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c3f55588-3832-44cd-9e37-ca822e5273bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a45da6-c76c-43c4-b5b9-9fb3fc65ece4",
        "cursor": {
          "ref": "38c27eff-813c-4eba-8538-af059e6de6a5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a6ec2a82-d13f-4fab-99a0-183c38ec291b"
        },
        "item": {
          "id": "85a45da6-c76c-43c4-b5b9-9fb3fc65ece4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "02287c99-0aad-43c1-87bb-229e2062bb39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a45da6-c76c-43c4-b5b9-9fb3fc65ece4",
        "cursor": {
          "ref": "38c27eff-813c-4eba-8538-af059e6de6a5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a6ec2a82-d13f-4fab-99a0-183c38ec291b"
        },
        "item": {
          "id": "85a45da6-c76c-43c4-b5b9-9fb3fc65ece4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "02287c99-0aad-43c1-87bb-229e2062bb39",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daa335e-5e09-4a3c-a012-28e73f419779",
        "cursor": {
          "ref": "c2a2d7e7-17ca-47f2-909d-834e3c952560",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7e81fb20-aecd-4a40-ae86-8aa70040a4b5"
        },
        "item": {
          "id": "7daa335e-5e09-4a3c-a012-28e73f419779",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "33b31eff-51cf-43fa-a653-8e9475210505",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7daa335e-5e09-4a3c-a012-28e73f419779",
        "cursor": {
          "ref": "c2a2d7e7-17ca-47f2-909d-834e3c952560",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7e81fb20-aecd-4a40-ae86-8aa70040a4b5"
        },
        "item": {
          "id": "7daa335e-5e09-4a3c-a012-28e73f419779",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "33b31eff-51cf-43fa-a653-8e9475210505",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386df8cd-4971-4c99-90a3-e92cfc4adf18",
        "cursor": {
          "ref": "663e4d44-b0f9-4a80-b3da-2508febc338f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a1b8142-9680-4895-9c44-f1a6c0eaf862"
        },
        "item": {
          "id": "386df8cd-4971-4c99-90a3-e92cfc4adf18",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40704151-9123-40c8-b810-43b88d90f06f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386df8cd-4971-4c99-90a3-e92cfc4adf18",
        "cursor": {
          "ref": "663e4d44-b0f9-4a80-b3da-2508febc338f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7a1b8142-9680-4895-9c44-f1a6c0eaf862"
        },
        "item": {
          "id": "386df8cd-4971-4c99-90a3-e92cfc4adf18",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "40704151-9123-40c8-b810-43b88d90f06f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9549c1da-d569-4468-92d3-8ba23e827553",
        "cursor": {
          "ref": "210b04c1-ad39-4530-83f9-2534a02f1520",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0924e567-cb55-4eb4-9769-7e9f8bf28587"
        },
        "item": {
          "id": "9549c1da-d569-4468-92d3-8ba23e827553",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6039b85b-67e0-4be5-9a9e-9e60a7f1d3e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9549c1da-d569-4468-92d3-8ba23e827553",
        "cursor": {
          "ref": "210b04c1-ad39-4530-83f9-2534a02f1520",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0924e567-cb55-4eb4-9769-7e9f8bf28587"
        },
        "item": {
          "id": "9549c1da-d569-4468-92d3-8ba23e827553",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6039b85b-67e0-4be5-9a9e-9e60a7f1d3e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9888d86-53a9-44c4-94ba-8a30ab62afda",
        "cursor": {
          "ref": "524a218d-a70f-4df2-a8bd-42a6028a46be",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1a3834a3-d656-429e-9682-b016378c1ccf"
        },
        "item": {
          "id": "c9888d86-53a9-44c4-94ba-8a30ab62afda",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1695a53-0666-49b1-9951-4fa97a7bf24e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9888d86-53a9-44c4-94ba-8a30ab62afda",
        "cursor": {
          "ref": "524a218d-a70f-4df2-a8bd-42a6028a46be",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1a3834a3-d656-429e-9682-b016378c1ccf"
        },
        "item": {
          "id": "c9888d86-53a9-44c4-94ba-8a30ab62afda",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d1695a53-0666-49b1-9951-4fa97a7bf24e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88359fc-73b8-4875-9bbf-5eaec0308cff",
        "cursor": {
          "ref": "48b19c91-1b4c-4d3f-9a5d-4278883590f2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ddc4f1cc-6623-4ab0-a5f3-5b61a5108a70"
        },
        "item": {
          "id": "d88359fc-73b8-4875-9bbf-5eaec0308cff",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "790f2421-7acd-4ca4-80b8-9a5b31f94936",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88359fc-73b8-4875-9bbf-5eaec0308cff",
        "cursor": {
          "ref": "48b19c91-1b4c-4d3f-9a5d-4278883590f2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ddc4f1cc-6623-4ab0-a5f3-5b61a5108a70"
        },
        "item": {
          "id": "d88359fc-73b8-4875-9bbf-5eaec0308cff",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "790f2421-7acd-4ca4-80b8-9a5b31f94936",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804acd7f-0c8b-4d4a-8260-331299bae8db",
        "cursor": {
          "ref": "1b73e21d-8464-4df2-b482-1cb63a9427f6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c6866e1-9f93-4fcc-a985-3bd083e86241"
        },
        "item": {
          "id": "804acd7f-0c8b-4d4a-8260-331299bae8db",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "68d532b9-8d5b-42fd-8028-1f1e199bed0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "804acd7f-0c8b-4d4a-8260-331299bae8db",
        "cursor": {
          "ref": "1b73e21d-8464-4df2-b482-1cb63a9427f6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7c6866e1-9f93-4fcc-a985-3bd083e86241"
        },
        "item": {
          "id": "804acd7f-0c8b-4d4a-8260-331299bae8db",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "68d532b9-8d5b-42fd-8028-1f1e199bed0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e2308c-97e4-4120-a0fb-1d9b47b39db1",
        "cursor": {
          "ref": "a6529bf0-89f4-4ff3-878e-c893fc5671da",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "876f2241-f18f-403f-ae67-b3ab19a8493a"
        },
        "item": {
          "id": "69e2308c-97e4-4120-a0fb-1d9b47b39db1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1179b4d4-1119-474a-9f37-b25561ad84f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e2308c-97e4-4120-a0fb-1d9b47b39db1",
        "cursor": {
          "ref": "a6529bf0-89f4-4ff3-878e-c893fc5671da",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "876f2241-f18f-403f-ae67-b3ab19a8493a"
        },
        "item": {
          "id": "69e2308c-97e4-4120-a0fb-1d9b47b39db1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1179b4d4-1119-474a-9f37-b25561ad84f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc649bc-45fd-44dc-b09a-9fba186a594f",
        "cursor": {
          "ref": "8814a1a6-43a3-4471-b44a-45a5310f5329",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6442a755-c90b-40f0-91a1-075434fe2f38"
        },
        "item": {
          "id": "bfc649bc-45fd-44dc-b09a-9fba186a594f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5fc6c02d-a4d8-4cd1-94bc-ac180fd399a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfc649bc-45fd-44dc-b09a-9fba186a594f",
        "cursor": {
          "ref": "8814a1a6-43a3-4471-b44a-45a5310f5329",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6442a755-c90b-40f0-91a1-075434fe2f38"
        },
        "item": {
          "id": "bfc649bc-45fd-44dc-b09a-9fba186a594f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5fc6c02d-a4d8-4cd1-94bc-ac180fd399a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c521161-e045-4b73-874c-0086843f61e3",
        "cursor": {
          "ref": "0aa39163-2a10-4a82-8b06-a508380fc443",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7d1114d7-b042-4a5e-b7bc-e89d245789ac"
        },
        "item": {
          "id": "0c521161-e045-4b73-874c-0086843f61e3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "97c5ddd5-d085-491d-bf28-3572f687eaa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c521161-e045-4b73-874c-0086843f61e3",
        "cursor": {
          "ref": "0aa39163-2a10-4a82-8b06-a508380fc443",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7d1114d7-b042-4a5e-b7bc-e89d245789ac"
        },
        "item": {
          "id": "0c521161-e045-4b73-874c-0086843f61e3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "97c5ddd5-d085-491d-bf28-3572f687eaa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6070665-a5c8-4664-bb91-dd54c159c7a5",
        "cursor": {
          "ref": "c2f2745e-383c-47ae-842a-83a279c89d45",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a8de2cb8-5f92-44ec-9993-30f0d5a16b2b"
        },
        "item": {
          "id": "d6070665-a5c8-4664-bb91-dd54c159c7a5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ea16fa04-c494-49c5-8244-5167b974495a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6070665-a5c8-4664-bb91-dd54c159c7a5",
        "cursor": {
          "ref": "c2f2745e-383c-47ae-842a-83a279c89d45",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a8de2cb8-5f92-44ec-9993-30f0d5a16b2b"
        },
        "item": {
          "id": "d6070665-a5c8-4664-bb91-dd54c159c7a5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ea16fa04-c494-49c5-8244-5167b974495a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f0d15f-6414-4362-9171-a55411f19997",
        "cursor": {
          "ref": "fcaf0c90-f28f-4232-b725-7ac83b20e7c9",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "970b960d-f5f5-43d7-b6b3-4a41e5294245"
        },
        "item": {
          "id": "a6f0d15f-6414-4362-9171-a55411f19997",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5ad86eac-9598-4229-b334-3cd6e000987c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f0d15f-6414-4362-9171-a55411f19997",
        "cursor": {
          "ref": "fcaf0c90-f28f-4232-b725-7ac83b20e7c9",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "970b960d-f5f5-43d7-b6b3-4a41e5294245"
        },
        "item": {
          "id": "a6f0d15f-6414-4362-9171-a55411f19997",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5ad86eac-9598-4229-b334-3cd6e000987c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b2c792-17f5-4f8e-adc5-a19241a1b7f6",
        "cursor": {
          "ref": "23592fae-a34f-4ae7-8301-a4b29252fbb5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f8a62fc0-ffe5-4a21-aceb-47d0a792437c"
        },
        "item": {
          "id": "a5b2c792-17f5-4f8e-adc5-a19241a1b7f6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6746e853-818e-413a-a35c-88bc2d831115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b2c792-17f5-4f8e-adc5-a19241a1b7f6",
        "cursor": {
          "ref": "23592fae-a34f-4ae7-8301-a4b29252fbb5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f8a62fc0-ffe5-4a21-aceb-47d0a792437c"
        },
        "item": {
          "id": "a5b2c792-17f5-4f8e-adc5-a19241a1b7f6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6746e853-818e-413a-a35c-88bc2d831115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295a29d1-c501-43e8-991f-d63d46a7de95",
        "cursor": {
          "ref": "bf90ba81-7b23-4f00-84c7-eac529600115",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12f4b1c1-f40c-44fb-948c-b69f3e47153a"
        },
        "item": {
          "id": "295a29d1-c501-43e8-991f-d63d46a7de95",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1bd65659-ba1e-4846-9667-84db88e8cfd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "295a29d1-c501-43e8-991f-d63d46a7de95",
        "cursor": {
          "ref": "bf90ba81-7b23-4f00-84c7-eac529600115",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12f4b1c1-f40c-44fb-948c-b69f3e47153a"
        },
        "item": {
          "id": "295a29d1-c501-43e8-991f-d63d46a7de95",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "1bd65659-ba1e-4846-9667-84db88e8cfd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2702fd5f-d511-4e6b-93bb-01bdfa1162a3",
        "cursor": {
          "ref": "0a27aa4f-e265-44dc-a4ac-bfddf739166d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bd256b8f-f218-4575-80f3-3f01331b7aa9"
        },
        "item": {
          "id": "2702fd5f-d511-4e6b-93bb-01bdfa1162a3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "affbc2e6-2c00-4357-aa3b-a5327dbf0891",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2702fd5f-d511-4e6b-93bb-01bdfa1162a3",
        "cursor": {
          "ref": "0a27aa4f-e265-44dc-a4ac-bfddf739166d",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "bd256b8f-f218-4575-80f3-3f01331b7aa9"
        },
        "item": {
          "id": "2702fd5f-d511-4e6b-93bb-01bdfa1162a3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "affbc2e6-2c00-4357-aa3b-a5327dbf0891",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c33077-4e50-4ea2-997b-4aa2097683b8",
        "cursor": {
          "ref": "7aed6cf4-a135-4533-9dad-aacd3ad97443",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "be144c70-a113-4fc1-8936-eea9cd7fc0a4"
        },
        "item": {
          "id": "23c33077-4e50-4ea2-997b-4aa2097683b8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dff6f3cf-5e46-40c5-925e-dfe9eb993084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c33077-4e50-4ea2-997b-4aa2097683b8",
        "cursor": {
          "ref": "7aed6cf4-a135-4533-9dad-aacd3ad97443",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "be144c70-a113-4fc1-8936-eea9cd7fc0a4"
        },
        "item": {
          "id": "23c33077-4e50-4ea2-997b-4aa2097683b8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dff6f3cf-5e46-40c5-925e-dfe9eb993084",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4c36d7-fd29-4448-ac62-dfc13fbd024e",
        "cursor": {
          "ref": "31c5f303-90bd-4d28-a0ab-89feb1b6d677",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2db12cd5-61b0-4f7c-bd9d-330cc6eba154"
        },
        "item": {
          "id": "2e4c36d7-fd29-4448-ac62-dfc13fbd024e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0829d751-6935-4b2b-8c87-5b0dc196ccd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4c36d7-fd29-4448-ac62-dfc13fbd024e",
        "cursor": {
          "ref": "31c5f303-90bd-4d28-a0ab-89feb1b6d677",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2db12cd5-61b0-4f7c-bd9d-330cc6eba154"
        },
        "item": {
          "id": "2e4c36d7-fd29-4448-ac62-dfc13fbd024e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0829d751-6935-4b2b-8c87-5b0dc196ccd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bf1438-65ba-4832-9f37-9c39d812af79",
        "cursor": {
          "ref": "011d3c03-9cfa-499f-b953-fddf6572086b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2921f4e8-7b57-449e-a632-b287ffce782b"
        },
        "item": {
          "id": "b4bf1438-65ba-4832-9f37-9c39d812af79",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0a3235a1-6e2e-40f0-9b45-c05514f80666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bf1438-65ba-4832-9f37-9c39d812af79",
        "cursor": {
          "ref": "011d3c03-9cfa-499f-b953-fddf6572086b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2921f4e8-7b57-449e-a632-b287ffce782b"
        },
        "item": {
          "id": "b4bf1438-65ba-4832-9f37-9c39d812af79",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0a3235a1-6e2e-40f0-9b45-c05514f80666",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b7f4a0-44b8-479d-857d-0e18c1e3afca",
        "cursor": {
          "ref": "8ad93086-66b6-4c81-b083-914dd9502858",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "86c4f280-e7d8-494e-8cf5-ed578a40603c"
        },
        "item": {
          "id": "48b7f4a0-44b8-479d-857d-0e18c1e3afca",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc04cd79-849e-4a63-9323-f5e9ebef70f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b7f4a0-44b8-479d-857d-0e18c1e3afca",
        "cursor": {
          "ref": "8ad93086-66b6-4c81-b083-914dd9502858",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "86c4f280-e7d8-494e-8cf5-ed578a40603c"
        },
        "item": {
          "id": "48b7f4a0-44b8-479d-857d-0e18c1e3afca",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bc04cd79-849e-4a63-9323-f5e9ebef70f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d05ee1c-3316-4b09-804e-1cc506ead946",
        "cursor": {
          "ref": "2b29c463-694e-485b-ab7b-8cda9a699cbc",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "82af0c12-58d2-4718-8139-e27f473b0f3a"
        },
        "item": {
          "id": "4d05ee1c-3316-4b09-804e-1cc506ead946",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "871a0d4e-9076-40fb-adc2-5a38aaa9d1d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d05ee1c-3316-4b09-804e-1cc506ead946",
        "cursor": {
          "ref": "2b29c463-694e-485b-ab7b-8cda9a699cbc",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "82af0c12-58d2-4718-8139-e27f473b0f3a"
        },
        "item": {
          "id": "4d05ee1c-3316-4b09-804e-1cc506ead946",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "871a0d4e-9076-40fb-adc2-5a38aaa9d1d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c51ab07-ea29-4365-b5ba-49a78b85a777",
        "cursor": {
          "ref": "cb55d8d7-73da-49ec-93fb-b57e6483f9d2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab453001-2c76-415f-9c31-1feb95e662a3"
        },
        "item": {
          "id": "7c51ab07-ea29-4365-b5ba-49a78b85a777",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a70057ee-8111-4244-9d76-57a91b0ac6bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c51ab07-ea29-4365-b5ba-49a78b85a777",
        "cursor": {
          "ref": "cb55d8d7-73da-49ec-93fb-b57e6483f9d2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ab453001-2c76-415f-9c31-1feb95e662a3"
        },
        "item": {
          "id": "7c51ab07-ea29-4365-b5ba-49a78b85a777",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a70057ee-8111-4244-9d76-57a91b0ac6bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc73cee-b29d-4d01-9581-22b88d8ffb85",
        "cursor": {
          "ref": "c148e17e-3181-4310-9f1c-b30914487b51",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3dba7b6c-0f52-4720-8eb9-6d6e86d0e7e3"
        },
        "item": {
          "id": "8fc73cee-b29d-4d01-9581-22b88d8ffb85",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d5a4ef4-7e37-4f1c-ac26-3f8811fde630",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc73cee-b29d-4d01-9581-22b88d8ffb85",
        "cursor": {
          "ref": "c148e17e-3181-4310-9f1c-b30914487b51",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3dba7b6c-0f52-4720-8eb9-6d6e86d0e7e3"
        },
        "item": {
          "id": "8fc73cee-b29d-4d01-9581-22b88d8ffb85",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d5a4ef4-7e37-4f1c-ac26-3f8811fde630",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14392b4f-48c6-4d40-bb4a-44b7b54e1715",
        "cursor": {
          "ref": "dd64abae-595b-432a-976e-2b7c0c81e244",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ec7d1a55-4363-428d-8117-4e8b42f45cf9"
        },
        "item": {
          "id": "14392b4f-48c6-4d40-bb4a-44b7b54e1715",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4372171b-bc8d-4d17-8680-f65c255cf05d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14392b4f-48c6-4d40-bb4a-44b7b54e1715",
        "cursor": {
          "ref": "dd64abae-595b-432a-976e-2b7c0c81e244",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ec7d1a55-4363-428d-8117-4e8b42f45cf9"
        },
        "item": {
          "id": "14392b4f-48c6-4d40-bb4a-44b7b54e1715",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4372171b-bc8d-4d17-8680-f65c255cf05d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e36f0f9-615e-4dd7-98a0-50cf057905a0",
        "cursor": {
          "ref": "096b2987-492b-4089-84d5-8bbe99837aff",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f8f25df9-595e-46e0-9bdc-41a6f05a3248"
        },
        "item": {
          "id": "1e36f0f9-615e-4dd7-98a0-50cf057905a0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2d44cf19-96c6-4403-821f-b85566b5ac4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e36f0f9-615e-4dd7-98a0-50cf057905a0",
        "cursor": {
          "ref": "096b2987-492b-4089-84d5-8bbe99837aff",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f8f25df9-595e-46e0-9bdc-41a6f05a3248"
        },
        "item": {
          "id": "1e36f0f9-615e-4dd7-98a0-50cf057905a0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2d44cf19-96c6-4403-821f-b85566b5ac4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec1210f-98c4-4903-a8e2-897ff5bfcaa3",
        "cursor": {
          "ref": "1ca6a363-784b-4b5b-89f4-aa044295ffd7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7216d16d-c369-4033-ad27-6581d0be1c86"
        },
        "item": {
          "id": "8ec1210f-98c4-4903-a8e2-897ff5bfcaa3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1924e730-a094-41d9-a320-7a271a03d2de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec1210f-98c4-4903-a8e2-897ff5bfcaa3",
        "cursor": {
          "ref": "1ca6a363-784b-4b5b-89f4-aa044295ffd7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7216d16d-c369-4033-ad27-6581d0be1c86"
        },
        "item": {
          "id": "8ec1210f-98c4-4903-a8e2-897ff5bfcaa3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1924e730-a094-41d9-a320-7a271a03d2de",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7140fbe6-17a2-4bce-b78e-ad55f764f186",
        "cursor": {
          "ref": "913e4faa-212c-4ca6-8c85-a6ebf4c42c91",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9961b1da-2302-4103-887c-97f7aa553e7a"
        },
        "item": {
          "id": "7140fbe6-17a2-4bce-b78e-ad55f764f186",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bd40809f-e8f9-4093-b6cd-03e8fcc6703e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7140fbe6-17a2-4bce-b78e-ad55f764f186",
        "cursor": {
          "ref": "913e4faa-212c-4ca6-8c85-a6ebf4c42c91",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9961b1da-2302-4103-887c-97f7aa553e7a"
        },
        "item": {
          "id": "7140fbe6-17a2-4bce-b78e-ad55f764f186",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "bd40809f-e8f9-4093-b6cd-03e8fcc6703e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c5835c-8311-4d16-bbe7-df5006f21253",
        "cursor": {
          "ref": "3559c225-851e-41de-9cd7-4823a224069b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fce01d6c-2667-43c6-81f9-753b832f7ab1"
        },
        "item": {
          "id": "54c5835c-8311-4d16-bbe7-df5006f21253",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e796c1a-feda-451b-9d2c-53057030ff13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c5835c-8311-4d16-bbe7-df5006f21253",
        "cursor": {
          "ref": "3559c225-851e-41de-9cd7-4823a224069b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "fce01d6c-2667-43c6-81f9-753b832f7ab1"
        },
        "item": {
          "id": "54c5835c-8311-4d16-bbe7-df5006f21253",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7e796c1a-feda-451b-9d2c-53057030ff13",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda5066d-c014-43f9-a198-83b69d1ec63a",
        "cursor": {
          "ref": "0ca6b7b2-3420-42d4-aa95-f3d24c2d5978",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e329a26f-3ab1-498e-9735-95167ea0f0d8"
        },
        "item": {
          "id": "fda5066d-c014-43f9-a198-83b69d1ec63a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "33759df5-b406-4520-816c-951825d5c807",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda5066d-c014-43f9-a198-83b69d1ec63a",
        "cursor": {
          "ref": "0ca6b7b2-3420-42d4-aa95-f3d24c2d5978",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e329a26f-3ab1-498e-9735-95167ea0f0d8"
        },
        "item": {
          "id": "fda5066d-c014-43f9-a198-83b69d1ec63a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "33759df5-b406-4520-816c-951825d5c807",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8093ef-d4ec-425f-9ae0-65f9fa2c862c",
        "cursor": {
          "ref": "fbb8d2b4-0cbd-4e2e-ac81-15b819ef8cee",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "db9ff64e-a5fd-4408-aeff-1c67204482c0"
        },
        "item": {
          "id": "9d8093ef-d4ec-425f-9ae0-65f9fa2c862c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3f5178fb-ec05-40db-ac26-99f79f6c804a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8093ef-d4ec-425f-9ae0-65f9fa2c862c",
        "cursor": {
          "ref": "fbb8d2b4-0cbd-4e2e-ac81-15b819ef8cee",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "db9ff64e-a5fd-4408-aeff-1c67204482c0"
        },
        "item": {
          "id": "9d8093ef-d4ec-425f-9ae0-65f9fa2c862c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "3f5178fb-ec05-40db-ac26-99f79f6c804a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23f16ab-ff2f-4daa-94df-454f92d2b67f",
        "cursor": {
          "ref": "6752110c-8ac6-44b8-8f78-0e04dfb99766",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "39e5a52c-96c0-4979-a919-89985056d557"
        },
        "item": {
          "id": "d23f16ab-ff2f-4daa-94df-454f92d2b67f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "49b3fdc4-3521-46ec-b985-24571abb1043",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23f16ab-ff2f-4daa-94df-454f92d2b67f",
        "cursor": {
          "ref": "6752110c-8ac6-44b8-8f78-0e04dfb99766",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "39e5a52c-96c0-4979-a919-89985056d557"
        },
        "item": {
          "id": "d23f16ab-ff2f-4daa-94df-454f92d2b67f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "49b3fdc4-3521-46ec-b985-24571abb1043",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83000da5-0b8d-46a6-9c7b-2970a13f542e",
        "cursor": {
          "ref": "6315467a-227b-4db1-9254-fa8e5abe1a9b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "64e15a22-6cfa-46fe-9fed-467b6057475f"
        },
        "item": {
          "id": "83000da5-0b8d-46a6-9c7b-2970a13f542e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4d27bd45-fd93-40ba-81e7-befc9e14b236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83000da5-0b8d-46a6-9c7b-2970a13f542e",
        "cursor": {
          "ref": "6315467a-227b-4db1-9254-fa8e5abe1a9b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "64e15a22-6cfa-46fe-9fed-467b6057475f"
        },
        "item": {
          "id": "83000da5-0b8d-46a6-9c7b-2970a13f542e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4d27bd45-fd93-40ba-81e7-befc9e14b236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49d3ca1-5641-450b-88b5-e7e2b5c44535",
        "cursor": {
          "ref": "af809df8-dae5-4278-805d-76aa393669f9",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "44ec3b36-a0a6-4ac7-a6a8-94fe8c23b1fa"
        },
        "item": {
          "id": "f49d3ca1-5641-450b-88b5-e7e2b5c44535",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8727806e-949f-49c4-bb78-793dcc32b586",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49d3ca1-5641-450b-88b5-e7e2b5c44535",
        "cursor": {
          "ref": "af809df8-dae5-4278-805d-76aa393669f9",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "44ec3b36-a0a6-4ac7-a6a8-94fe8c23b1fa"
        },
        "item": {
          "id": "f49d3ca1-5641-450b-88b5-e7e2b5c44535",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8727806e-949f-49c4-bb78-793dcc32b586",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b10f95-e9ec-40c4-9ee9-bc610d2c7d71",
        "cursor": {
          "ref": "9b0bbf66-c5c6-4173-8b53-0c9ec8304e70",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d5c3781e-e521-43a0-8536-e7bfa83342f7"
        },
        "item": {
          "id": "d0b10f95-e9ec-40c4-9ee9-bc610d2c7d71",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4aeefa5b-82fc-4684-9bc6-5f040ffc96b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b10f95-e9ec-40c4-9ee9-bc610d2c7d71",
        "cursor": {
          "ref": "9b0bbf66-c5c6-4173-8b53-0c9ec8304e70",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d5c3781e-e521-43a0-8536-e7bfa83342f7"
        },
        "item": {
          "id": "d0b10f95-e9ec-40c4-9ee9-bc610d2c7d71",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4aeefa5b-82fc-4684-9bc6-5f040ffc96b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6631cdcb-2657-40ee-b414-3f59e7fd39c6",
        "cursor": {
          "ref": "ff1b03ec-485f-406b-b3f5-c9cf5b4abf04",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bafe05b4-6de3-43ca-a860-1d61bb83aa18"
        },
        "item": {
          "id": "6631cdcb-2657-40ee-b414-3f59e7fd39c6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3de65845-d8bb-430e-a398-50f5538bb88e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6631cdcb-2657-40ee-b414-3f59e7fd39c6",
        "cursor": {
          "ref": "ff1b03ec-485f-406b-b3f5-c9cf5b4abf04",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bafe05b4-6de3-43ca-a860-1d61bb83aa18"
        },
        "item": {
          "id": "6631cdcb-2657-40ee-b414-3f59e7fd39c6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3de65845-d8bb-430e-a398-50f5538bb88e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afdf284-6749-4a63-bef8-445f0c96b59b",
        "cursor": {
          "ref": "e28ab042-2d38-466b-aac3-49cfb412deaf",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b18b3aad-98e3-423e-9bea-58f46b5d8d48"
        },
        "item": {
          "id": "3afdf284-6749-4a63-bef8-445f0c96b59b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1d5db0d5-1ffd-40f7-919e-1b3ee029850c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afdf284-6749-4a63-bef8-445f0c96b59b",
        "cursor": {
          "ref": "e28ab042-2d38-466b-aac3-49cfb412deaf",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b18b3aad-98e3-423e-9bea-58f46b5d8d48"
        },
        "item": {
          "id": "3afdf284-6749-4a63-bef8-445f0c96b59b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1d5db0d5-1ffd-40f7-919e-1b3ee029850c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35630894-bc08-45ec-b564-6bca8b8d3477",
        "cursor": {
          "ref": "78eb2d07-5706-4d41-8dd5-b0e4b3a486c2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5d75c411-b24d-407e-8ad1-b2c34183c629"
        },
        "item": {
          "id": "35630894-bc08-45ec-b564-6bca8b8d3477",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e6109503-d233-4e99-a279-828f157e5a98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35630894-bc08-45ec-b564-6bca8b8d3477",
        "cursor": {
          "ref": "78eb2d07-5706-4d41-8dd5-b0e4b3a486c2",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5d75c411-b24d-407e-8ad1-b2c34183c629"
        },
        "item": {
          "id": "35630894-bc08-45ec-b564-6bca8b8d3477",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e6109503-d233-4e99-a279-828f157e5a98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10aea8e-7f0f-4bd9-90ce-bf99110681aa",
        "cursor": {
          "ref": "a1827e50-365f-4825-94eb-13315ccfed6f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7d37cdc3-4890-497a-8c8e-9f57dbbdcacb"
        },
        "item": {
          "id": "f10aea8e-7f0f-4bd9-90ce-bf99110681aa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "58591f8c-e33a-4fe9-bad2-aabeb243599c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10aea8e-7f0f-4bd9-90ce-bf99110681aa",
        "cursor": {
          "ref": "a1827e50-365f-4825-94eb-13315ccfed6f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7d37cdc3-4890-497a-8c8e-9f57dbbdcacb"
        },
        "item": {
          "id": "f10aea8e-7f0f-4bd9-90ce-bf99110681aa",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "58591f8c-e33a-4fe9-bad2-aabeb243599c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f5b299-36f6-4221-bcec-525f2074a0cb",
        "cursor": {
          "ref": "9774f904-4cbb-4dca-a98b-77bbe637aae2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5ec16ba5-2df2-4b27-b900-adfdaec93ea9"
        },
        "item": {
          "id": "67f5b299-36f6-4221-bcec-525f2074a0cb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b69b4e67-bed4-4d18-8d70-00a05ec546d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f5b299-36f6-4221-bcec-525f2074a0cb",
        "cursor": {
          "ref": "9774f904-4cbb-4dca-a98b-77bbe637aae2",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5ec16ba5-2df2-4b27-b900-adfdaec93ea9"
        },
        "item": {
          "id": "67f5b299-36f6-4221-bcec-525f2074a0cb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b69b4e67-bed4-4d18-8d70-00a05ec546d1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dc7926-932a-44bc-abfc-794d442c0783",
        "cursor": {
          "ref": "690877be-6833-4dd8-b0b5-04750571f85e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e363ed17-73eb-419f-9b10-2e6a9047ffa8"
        },
        "item": {
          "id": "f4dc7926-932a-44bc-abfc-794d442c0783",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ea495953-ad5b-4933-984a-2814ad8406c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dc7926-932a-44bc-abfc-794d442c0783",
        "cursor": {
          "ref": "690877be-6833-4dd8-b0b5-04750571f85e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e363ed17-73eb-419f-9b10-2e6a9047ffa8"
        },
        "item": {
          "id": "f4dc7926-932a-44bc-abfc-794d442c0783",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ea495953-ad5b-4933-984a-2814ad8406c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0af763-ffc4-4bc4-abf3-94b6ca65abc1",
        "cursor": {
          "ref": "0e95da75-668b-4a7b-981d-61a6389675ef",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c45c839b-fed7-4335-9169-b8ec21940196"
        },
        "item": {
          "id": "5e0af763-ffc4-4bc4-abf3-94b6ca65abc1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47cf04c4-f3dd-4ad3-a694-c1d148c25e0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0af763-ffc4-4bc4-abf3-94b6ca65abc1",
        "cursor": {
          "ref": "0e95da75-668b-4a7b-981d-61a6389675ef",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c45c839b-fed7-4335-9169-b8ec21940196"
        },
        "item": {
          "id": "5e0af763-ffc4-4bc4-abf3-94b6ca65abc1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "47cf04c4-f3dd-4ad3-a694-c1d148c25e0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23029c-973f-4d2a-8aec-9e29f0298502",
        "cursor": {
          "ref": "d1dff004-c56a-4c36-a6b9-2d1e2b219e41",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e7d1f8a2-66ea-4241-baa4-f88bc19ef916"
        },
        "item": {
          "id": "5a23029c-973f-4d2a-8aec-9e29f0298502",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "86bd4d81-07a9-45fb-a032-74f07cf1de1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a23029c-973f-4d2a-8aec-9e29f0298502",
        "cursor": {
          "ref": "d1dff004-c56a-4c36-a6b9-2d1e2b219e41",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e7d1f8a2-66ea-4241-baa4-f88bc19ef916"
        },
        "item": {
          "id": "5a23029c-973f-4d2a-8aec-9e29f0298502",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "86bd4d81-07a9-45fb-a032-74f07cf1de1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30030dd4-20a5-42ec-b4c6-f0df19165a73",
        "cursor": {
          "ref": "96c35fd5-b76c-4881-a5a5-7bf9e5340340",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6f5ebc13-77c6-4c82-b644-06a592a77322"
        },
        "item": {
          "id": "30030dd4-20a5-42ec-b4c6-f0df19165a73",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "94230872-dd97-447f-bdb2-703f3577d0ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30030dd4-20a5-42ec-b4c6-f0df19165a73",
        "cursor": {
          "ref": "96c35fd5-b76c-4881-a5a5-7bf9e5340340",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6f5ebc13-77c6-4c82-b644-06a592a77322"
        },
        "item": {
          "id": "30030dd4-20a5-42ec-b4c6-f0df19165a73",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "94230872-dd97-447f-bdb2-703f3577d0ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd0480-9a2b-4219-a525-762305b35317",
        "cursor": {
          "ref": "363ec95a-93a4-4f8e-89f2-6318a32e4dde",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "51f8dc1e-657a-47f8-af7a-c7a2606d9a98"
        },
        "item": {
          "id": "b3dd0480-9a2b-4219-a525-762305b35317",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "208efa2d-75eb-4d9d-b222-e9a7a2b3e9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dd0480-9a2b-4219-a525-762305b35317",
        "cursor": {
          "ref": "363ec95a-93a4-4f8e-89f2-6318a32e4dde",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "51f8dc1e-657a-47f8-af7a-c7a2606d9a98"
        },
        "item": {
          "id": "b3dd0480-9a2b-4219-a525-762305b35317",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "208efa2d-75eb-4d9d-b222-e9a7a2b3e9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9d7515-d9f0-4e06-98cf-bea9c2d5cf38",
        "cursor": {
          "ref": "a5a398c3-02e3-4ab7-88ae-2b7099b6806a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8bb19c5e-2fa4-4b38-a789-2316fddbfebd"
        },
        "item": {
          "id": "bf9d7515-d9f0-4e06-98cf-bea9c2d5cf38",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c6e79218-2215-42a5-9a19-1530a2a999ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9d7515-d9f0-4e06-98cf-bea9c2d5cf38",
        "cursor": {
          "ref": "a5a398c3-02e3-4ab7-88ae-2b7099b6806a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8bb19c5e-2fa4-4b38-a789-2316fddbfebd"
        },
        "item": {
          "id": "bf9d7515-d9f0-4e06-98cf-bea9c2d5cf38",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c6e79218-2215-42a5-9a19-1530a2a999ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d891c63-dbdf-4e38-81b5-636aea904be6",
        "cursor": {
          "ref": "d6cc4a16-aaa3-4ad8-afcd-f6c19dc847af",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "659496ef-c304-44af-86e7-94d6b03227d2"
        },
        "item": {
          "id": "5d891c63-dbdf-4e38-81b5-636aea904be6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "97a6117f-0eea-482b-923a-60eb00d850bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d891c63-dbdf-4e38-81b5-636aea904be6",
        "cursor": {
          "ref": "d6cc4a16-aaa3-4ad8-afcd-f6c19dc847af",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "659496ef-c304-44af-86e7-94d6b03227d2"
        },
        "item": {
          "id": "5d891c63-dbdf-4e38-81b5-636aea904be6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "97a6117f-0eea-482b-923a-60eb00d850bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9852114b-bb25-440e-8cec-ba8802412bbe",
        "cursor": {
          "ref": "36909e36-6722-4a8d-9ebd-fd66fedacfe5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8658d7a8-67cb-4650-855e-50a31e384c0f"
        },
        "item": {
          "id": "9852114b-bb25-440e-8cec-ba8802412bbe",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3cb3b5d3-31eb-4214-b697-4a88f54294fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9852114b-bb25-440e-8cec-ba8802412bbe",
        "cursor": {
          "ref": "36909e36-6722-4a8d-9ebd-fd66fedacfe5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8658d7a8-67cb-4650-855e-50a31e384c0f"
        },
        "item": {
          "id": "9852114b-bb25-440e-8cec-ba8802412bbe",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3cb3b5d3-31eb-4214-b697-4a88f54294fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a20a13-3972-4a45-9abe-49745e3daf73",
        "cursor": {
          "ref": "4759546f-c4bc-4942-9fbe-ed0d18956189",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "782ca6ab-f8a6-48a9-8b6c-049ba522d0d6"
        },
        "item": {
          "id": "a4a20a13-3972-4a45-9abe-49745e3daf73",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c97dd4e7-20eb-4b36-9edf-98a1c82a532f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a20a13-3972-4a45-9abe-49745e3daf73",
        "cursor": {
          "ref": "4759546f-c4bc-4942-9fbe-ed0d18956189",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "782ca6ab-f8a6-48a9-8b6c-049ba522d0d6"
        },
        "item": {
          "id": "a4a20a13-3972-4a45-9abe-49745e3daf73",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c97dd4e7-20eb-4b36-9edf-98a1c82a532f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109084db-9a84-4fd0-86be-ae052b383b5f",
        "cursor": {
          "ref": "1be76f29-455f-4c42-b3ef-3d16d473af3c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "313f7bf6-7c4b-4bbf-b91f-bf21ba75fbb5"
        },
        "item": {
          "id": "109084db-9a84-4fd0-86be-ae052b383b5f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "581e33c9-c285-4d51-a789-d6b2c240ecef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109084db-9a84-4fd0-86be-ae052b383b5f",
        "cursor": {
          "ref": "1be76f29-455f-4c42-b3ef-3d16d473af3c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "313f7bf6-7c4b-4bbf-b91f-bf21ba75fbb5"
        },
        "item": {
          "id": "109084db-9a84-4fd0-86be-ae052b383b5f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "581e33c9-c285-4d51-a789-d6b2c240ecef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eb2da4-553d-4cee-baa2-ee5f841b95db",
        "cursor": {
          "ref": "0ac8239c-6f00-4d86-acb7-a8f7fb1d5584",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "17ff1724-7f9a-42a7-be88-40a42e9e9973"
        },
        "item": {
          "id": "49eb2da4-553d-4cee-baa2-ee5f841b95db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5d3fd975-01c6-445c-9abb-27c588febe3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49eb2da4-553d-4cee-baa2-ee5f841b95db",
        "cursor": {
          "ref": "0ac8239c-6f00-4d86-acb7-a8f7fb1d5584",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "17ff1724-7f9a-42a7-be88-40a42e9e9973"
        },
        "item": {
          "id": "49eb2da4-553d-4cee-baa2-ee5f841b95db",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5d3fd975-01c6-445c-9abb-27c588febe3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc630fbf-2099-48b1-be05-886abdeb2454",
        "cursor": {
          "ref": "fb1f113f-2bdf-4378-9c96-7b8e9a0c1eda",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "854b233e-ea86-4503-897e-7c67b270c7ba"
        },
        "item": {
          "id": "bc630fbf-2099-48b1-be05-886abdeb2454",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "89d83948-22a9-4d1b-809e-911e63eeef0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc630fbf-2099-48b1-be05-886abdeb2454",
        "cursor": {
          "ref": "fb1f113f-2bdf-4378-9c96-7b8e9a0c1eda",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "854b233e-ea86-4503-897e-7c67b270c7ba"
        },
        "item": {
          "id": "bc630fbf-2099-48b1-be05-886abdeb2454",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "89d83948-22a9-4d1b-809e-911e63eeef0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b75ad4-b1c2-4b2f-b1c0-9ca6f772bcfd",
        "cursor": {
          "ref": "f48e7685-6b9f-4edb-8c22-6eeb9a181f4e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9ca33cb2-abfa-4a2c-bc2b-6ce163a86bd0"
        },
        "item": {
          "id": "83b75ad4-b1c2-4b2f-b1c0-9ca6f772bcfd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "92d307bf-00cd-43ec-97cc-84db3dd04eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b75ad4-b1c2-4b2f-b1c0-9ca6f772bcfd",
        "cursor": {
          "ref": "f48e7685-6b9f-4edb-8c22-6eeb9a181f4e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9ca33cb2-abfa-4a2c-bc2b-6ce163a86bd0"
        },
        "item": {
          "id": "83b75ad4-b1c2-4b2f-b1c0-9ca6f772bcfd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "92d307bf-00cd-43ec-97cc-84db3dd04eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14d1011-9da0-4298-a75d-e4b83e3c0338",
        "cursor": {
          "ref": "33fee831-f714-4f75-99e2-47a771787773",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c1076261-084f-4581-828d-4ca5dc88d713"
        },
        "item": {
          "id": "b14d1011-9da0-4298-a75d-e4b83e3c0338",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b6280c7f-5c7c-4a5b-a224-8d932255494b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b14d1011-9da0-4298-a75d-e4b83e3c0338",
        "cursor": {
          "ref": "33fee831-f714-4f75-99e2-47a771787773",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "c1076261-084f-4581-828d-4ca5dc88d713"
        },
        "item": {
          "id": "b14d1011-9da0-4298-a75d-e4b83e3c0338",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b6280c7f-5c7c-4a5b-a224-8d932255494b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2070d9-39fd-4622-91ca-047f3d6e8499",
        "cursor": {
          "ref": "904baddc-79a2-47f0-85da-b6d563c349f4",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "18c41272-ff42-4f52-a078-c67472c5f372"
        },
        "item": {
          "id": "9a2070d9-39fd-4622-91ca-047f3d6e8499",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fa532b0a-9057-4ad0-82e7-75cca807f677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2070d9-39fd-4622-91ca-047f3d6e8499",
        "cursor": {
          "ref": "904baddc-79a2-47f0-85da-b6d563c349f4",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "18c41272-ff42-4f52-a078-c67472c5f372"
        },
        "item": {
          "id": "9a2070d9-39fd-4622-91ca-047f3d6e8499",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fa532b0a-9057-4ad0-82e7-75cca807f677",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06da8eb2-e23d-42f8-b445-390a3048b754",
        "cursor": {
          "ref": "665e582d-6ddb-4860-8d1c-719e7dc00273",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ae431b47-a694-40fd-82c7-452e4d01a97b"
        },
        "item": {
          "id": "06da8eb2-e23d-42f8-b445-390a3048b754",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e9352133-7e5a-425c-b8b8-547d475a35b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06da8eb2-e23d-42f8-b445-390a3048b754",
        "cursor": {
          "ref": "665e582d-6ddb-4860-8d1c-719e7dc00273",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ae431b47-a694-40fd-82c7-452e4d01a97b"
        },
        "item": {
          "id": "06da8eb2-e23d-42f8-b445-390a3048b754",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e9352133-7e5a-425c-b8b8-547d475a35b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea8280b-4a84-469c-b7e5-05b0413c8ea8",
        "cursor": {
          "ref": "7e273efe-6a83-4af2-903c-150c81646962",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c66d61b9-1749-4d03-998d-c7f73383ff0d"
        },
        "item": {
          "id": "eea8280b-4a84-469c-b7e5-05b0413c8ea8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7f13665d-db44-4439-ab63-3edbad6d6022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea8280b-4a84-469c-b7e5-05b0413c8ea8",
        "cursor": {
          "ref": "7e273efe-6a83-4af2-903c-150c81646962",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c66d61b9-1749-4d03-998d-c7f73383ff0d"
        },
        "item": {
          "id": "eea8280b-4a84-469c-b7e5-05b0413c8ea8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7f13665d-db44-4439-ab63-3edbad6d6022",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2edc6f6-b955-439d-8057-2472e9d2e6e7",
        "cursor": {
          "ref": "f8da4643-f60b-4a4f-9e3b-97e9e89e4452",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3b39dfa0-e7a7-4ac7-a32a-f1fa2149c458"
        },
        "item": {
          "id": "a2edc6f6-b955-439d-8057-2472e9d2e6e7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "491379a5-206d-4f4d-b697-7591ed2b2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2edc6f6-b955-439d-8057-2472e9d2e6e7",
        "cursor": {
          "ref": "f8da4643-f60b-4a4f-9e3b-97e9e89e4452",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3b39dfa0-e7a7-4ac7-a32a-f1fa2149c458"
        },
        "item": {
          "id": "a2edc6f6-b955-439d-8057-2472e9d2e6e7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "491379a5-206d-4f4d-b697-7591ed2b2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c76d7f0-042c-430d-8e4a-ec6e4bbe617f",
        "cursor": {
          "ref": "3f773463-c238-4ce4-a672-c5746cd4ae65",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4e5f1bbe-f1b0-4c80-8390-33d2bcb37542"
        },
        "item": {
          "id": "4c76d7f0-042c-430d-8e4a-ec6e4bbe617f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bf510eaf-1e94-447d-824f-4aa54bd17b81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c76d7f0-042c-430d-8e4a-ec6e4bbe617f",
        "cursor": {
          "ref": "3f773463-c238-4ce4-a672-c5746cd4ae65",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4e5f1bbe-f1b0-4c80-8390-33d2bcb37542"
        },
        "item": {
          "id": "4c76d7f0-042c-430d-8e4a-ec6e4bbe617f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bf510eaf-1e94-447d-824f-4aa54bd17b81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96621f24-b870-4a37-a476-0a7363a203bb",
        "cursor": {
          "ref": "7646d667-e9c0-4852-98b8-b437042e9c7e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bacdef49-ced6-453a-ad57-fc98e7517dc6"
        },
        "item": {
          "id": "96621f24-b870-4a37-a476-0a7363a203bb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9d823fbf-9880-4dce-9070-231cf926065f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96621f24-b870-4a37-a476-0a7363a203bb",
        "cursor": {
          "ref": "7646d667-e9c0-4852-98b8-b437042e9c7e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bacdef49-ced6-453a-ad57-fc98e7517dc6"
        },
        "item": {
          "id": "96621f24-b870-4a37-a476-0a7363a203bb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9d823fbf-9880-4dce-9070-231cf926065f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea80618a-2c3f-4c9c-b4bd-05cddfe468ff",
        "cursor": {
          "ref": "a930213a-ea22-4bfa-ab29-1536df8b4cdf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "71919611-26fc-4215-8448-ba11b5f1b32a"
        },
        "item": {
          "id": "ea80618a-2c3f-4c9c-b4bd-05cddfe468ff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6a808b5c-a1b2-4264-9606-9fbb758bebb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea80618a-2c3f-4c9c-b4bd-05cddfe468ff",
        "cursor": {
          "ref": "a930213a-ea22-4bfa-ab29-1536df8b4cdf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "71919611-26fc-4215-8448-ba11b5f1b32a"
        },
        "item": {
          "id": "ea80618a-2c3f-4c9c-b4bd-05cddfe468ff",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6a808b5c-a1b2-4264-9606-9fbb758bebb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904ccd0c-82a4-41f2-97a9-a105adc7a5e2",
        "cursor": {
          "ref": "767956d4-e45b-4f93-8fbc-700b717ac007",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "df6deb05-3974-4fab-a94d-c8ab4bda7873"
        },
        "item": {
          "id": "904ccd0c-82a4-41f2-97a9-a105adc7a5e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0c032825-0cb5-4144-b4bf-fb08f6b51e1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904ccd0c-82a4-41f2-97a9-a105adc7a5e2",
        "cursor": {
          "ref": "767956d4-e45b-4f93-8fbc-700b717ac007",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "df6deb05-3974-4fab-a94d-c8ab4bda7873"
        },
        "item": {
          "id": "904ccd0c-82a4-41f2-97a9-a105adc7a5e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0c032825-0cb5-4144-b4bf-fb08f6b51e1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425da9b1-216a-439a-a95c-aa7c6bae66b3",
        "cursor": {
          "ref": "7d3f1560-34ee-46dc-b02e-b9581acd99ba",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d62ee04f-f4ca-4fce-aa02-e583f0da9f06"
        },
        "item": {
          "id": "425da9b1-216a-439a-a95c-aa7c6bae66b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b3ab3e13-73ed-42bc-92f1-99d87cb673f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425da9b1-216a-439a-a95c-aa7c6bae66b3",
        "cursor": {
          "ref": "7d3f1560-34ee-46dc-b02e-b9581acd99ba",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d62ee04f-f4ca-4fce-aa02-e583f0da9f06"
        },
        "item": {
          "id": "425da9b1-216a-439a-a95c-aa7c6bae66b3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b3ab3e13-73ed-42bc-92f1-99d87cb673f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63a3211-9f6a-44a3-84ba-4d25e0e455e1",
        "cursor": {
          "ref": "a0fc436a-65d4-464a-b011-f4e05bec6fc9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "60c679dd-7299-4094-a855-b4bb0a46d59c"
        },
        "item": {
          "id": "a63a3211-9f6a-44a3-84ba-4d25e0e455e1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "25a933bf-12aa-4e30-b267-09fdb122dbb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63a3211-9f6a-44a3-84ba-4d25e0e455e1",
        "cursor": {
          "ref": "a0fc436a-65d4-464a-b011-f4e05bec6fc9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "60c679dd-7299-4094-a855-b4bb0a46d59c"
        },
        "item": {
          "id": "a63a3211-9f6a-44a3-84ba-4d25e0e455e1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "25a933bf-12aa-4e30-b267-09fdb122dbb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820f4b21-6ba0-4045-8635-c5e99f03dc25",
        "cursor": {
          "ref": "f05e3a7d-50ab-477a-a623-58531035425d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fd93cd58-2410-48f2-a092-d46f7d3b667a"
        },
        "item": {
          "id": "820f4b21-6ba0-4045-8635-c5e99f03dc25",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4083114a-cf56-41dc-b6a4-2dc14c58fb84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820f4b21-6ba0-4045-8635-c5e99f03dc25",
        "cursor": {
          "ref": "f05e3a7d-50ab-477a-a623-58531035425d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fd93cd58-2410-48f2-a092-d46f7d3b667a"
        },
        "item": {
          "id": "820f4b21-6ba0-4045-8635-c5e99f03dc25",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4083114a-cf56-41dc-b6a4-2dc14c58fb84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fbdb1c-ca05-4aa4-8389-1fc8f62119ab",
        "cursor": {
          "ref": "905d876d-bcfc-4bed-8557-bbd6ba7f7f52",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "12740879-17b3-43e9-9977-dd3989977cad"
        },
        "item": {
          "id": "d3fbdb1c-ca05-4aa4-8389-1fc8f62119ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a1ff00ad-ffc1-4072-8499-1549076fc6bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fbdb1c-ca05-4aa4-8389-1fc8f62119ab",
        "cursor": {
          "ref": "905d876d-bcfc-4bed-8557-bbd6ba7f7f52",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "12740879-17b3-43e9-9977-dd3989977cad"
        },
        "item": {
          "id": "d3fbdb1c-ca05-4aa4-8389-1fc8f62119ab",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a1ff00ad-ffc1-4072-8499-1549076fc6bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291ef2af-9956-463a-be56-2664fb8df84f",
        "cursor": {
          "ref": "b927b8ec-b6d3-4caa-9d5e-db7d5e58d1ef",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "53381aa2-0f46-47c2-9d5a-96c62abb3151"
        },
        "item": {
          "id": "291ef2af-9956-463a-be56-2664fb8df84f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e4da912b-6710-426b-8ae7-b5a1737dd8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291ef2af-9956-463a-be56-2664fb8df84f",
        "cursor": {
          "ref": "b927b8ec-b6d3-4caa-9d5e-db7d5e58d1ef",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "53381aa2-0f46-47c2-9d5a-96c62abb3151"
        },
        "item": {
          "id": "291ef2af-9956-463a-be56-2664fb8df84f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e4da912b-6710-426b-8ae7-b5a1737dd8fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d62628-5963-4536-84cb-3f1f8eb7689a",
        "cursor": {
          "ref": "762dd8f4-bc85-4f16-ba95-8dcb3b1ae294",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "e36fe28d-12c3-43cb-ac2a-891b20ad239f"
        },
        "item": {
          "id": "50d62628-5963-4536-84cb-3f1f8eb7689a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "270a3352-4850-4829-b078-0fa222df55f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d62628-5963-4536-84cb-3f1f8eb7689a",
        "cursor": {
          "ref": "762dd8f4-bc85-4f16-ba95-8dcb3b1ae294",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "e36fe28d-12c3-43cb-ac2a-891b20ad239f"
        },
        "item": {
          "id": "50d62628-5963-4536-84cb-3f1f8eb7689a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "270a3352-4850-4829-b078-0fa222df55f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7a8fc-c837-4efd-a2ec-7bbb95dfc067",
        "cursor": {
          "ref": "70e9c84f-c67e-4a00-ba17-fb71ccaa5feb",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f26a3baa-2360-4a1b-95aa-35f139fe7c8c"
        },
        "item": {
          "id": "05a7a8fc-c837-4efd-a2ec-7bbb95dfc067",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "77a7c0dd-179b-420e-854b-7b1e94235c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a7a8fc-c837-4efd-a2ec-7bbb95dfc067",
        "cursor": {
          "ref": "70e9c84f-c67e-4a00-ba17-fb71ccaa5feb",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f26a3baa-2360-4a1b-95aa-35f139fe7c8c"
        },
        "item": {
          "id": "05a7a8fc-c837-4efd-a2ec-7bbb95dfc067",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "77a7c0dd-179b-420e-854b-7b1e94235c65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410cdc3d-83b6-4f6b-b8bd-27fab6e11cb0",
        "cursor": {
          "ref": "0419e545-0a62-4e93-908d-267d505eca44",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0e0a1496-7262-4f0e-a375-e39c9ccf84b9"
        },
        "item": {
          "id": "410cdc3d-83b6-4f6b-b8bd-27fab6e11cb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3aba0faf-20d8-4ffe-a2fb-32a1e593964c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410cdc3d-83b6-4f6b-b8bd-27fab6e11cb0",
        "cursor": {
          "ref": "0419e545-0a62-4e93-908d-267d505eca44",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0e0a1496-7262-4f0e-a375-e39c9ccf84b9"
        },
        "item": {
          "id": "410cdc3d-83b6-4f6b-b8bd-27fab6e11cb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3aba0faf-20d8-4ffe-a2fb-32a1e593964c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7b0472-2cfc-48a9-9af2-0b6ab32d5282",
        "cursor": {
          "ref": "0641836d-3da4-4c48-8b8e-e87c3fae525f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "16f4b3c0-fb30-45ba-9a52-2add16caf268"
        },
        "item": {
          "id": "bb7b0472-2cfc-48a9-9af2-0b6ab32d5282",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "145c545e-5f16-49b3-809e-f53ef3920270",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7b0472-2cfc-48a9-9af2-0b6ab32d5282",
        "cursor": {
          "ref": "0641836d-3da4-4c48-8b8e-e87c3fae525f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "16f4b3c0-fb30-45ba-9a52-2add16caf268"
        },
        "item": {
          "id": "bb7b0472-2cfc-48a9-9af2-0b6ab32d5282",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "145c545e-5f16-49b3-809e-f53ef3920270",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a334472a-f08c-4ffc-8481-fe7e94fe63ad",
        "cursor": {
          "ref": "eec2396a-aef5-413c-b597-f07956eaad73",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "70303413-f28c-45ed-a57d-f7c87f812ea9"
        },
        "item": {
          "id": "a334472a-f08c-4ffc-8481-fe7e94fe63ad",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2e0822eb-e5f2-4dd5-85f1-5a5c87097a6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a334472a-f08c-4ffc-8481-fe7e94fe63ad",
        "cursor": {
          "ref": "eec2396a-aef5-413c-b597-f07956eaad73",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "70303413-f28c-45ed-a57d-f7c87f812ea9"
        },
        "item": {
          "id": "a334472a-f08c-4ffc-8481-fe7e94fe63ad",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2e0822eb-e5f2-4dd5-85f1-5a5c87097a6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1eb208-20a1-4937-b1a4-6ad0d5c452c0",
        "cursor": {
          "ref": "c7dc9738-3cae-4d9a-8e01-c14366fdf3d0",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "faf4b603-4494-46f5-9b72-1fcd43c86fcd"
        },
        "item": {
          "id": "3c1eb208-20a1-4937-b1a4-6ad0d5c452c0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "614c627f-f547-49a4-837f-fe8d52b0d44c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3c1eb208-20a1-4937-b1a4-6ad0d5c452c0",
        "cursor": {
          "ref": "c7dc9738-3cae-4d9a-8e01-c14366fdf3d0",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "faf4b603-4494-46f5-9b72-1fcd43c86fcd"
        },
        "item": {
          "id": "3c1eb208-20a1-4937-b1a4-6ad0d5c452c0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "614c627f-f547-49a4-837f-fe8d52b0d44c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d6e4b8f1-d46c-4984-9488-ab69338b4c44",
        "cursor": {
          "ref": "fdfdd23b-9d85-485b-99a0-1ece0752189b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2d4b305e-81f3-497c-9385-636ff8d4362f"
        },
        "item": {
          "id": "d6e4b8f1-d46c-4984-9488-ab69338b4c44",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aba95e60-434d-436f-a25b-2a4d7a655ed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "d6e4b8f1-d46c-4984-9488-ab69338b4c44",
        "cursor": {
          "ref": "fdfdd23b-9d85-485b-99a0-1ece0752189b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2d4b305e-81f3-497c-9385-636ff8d4362f"
        },
        "item": {
          "id": "d6e4b8f1-d46c-4984-9488-ab69338b4c44",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aba95e60-434d-436f-a25b-2a4d7a655ed9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "3d6866df-da17-43a5-bdc4-333e74db7b98",
        "cursor": {
          "ref": "a3f993a1-1494-490b-8ce6-aee05bbeb581",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "577537aa-ae5c-4377-b4fc-c1b27d5929fa"
        },
        "item": {
          "id": "3d6866df-da17-43a5-bdc4-333e74db7b98",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4e0cb4ee-1433-4938-9c73-cf71fcfb841f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "3d6866df-da17-43a5-bdc4-333e74db7b98",
        "cursor": {
          "ref": "a3f993a1-1494-490b-8ce6-aee05bbeb581",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "577537aa-ae5c-4377-b4fc-c1b27d5929fa"
        },
        "item": {
          "id": "3d6866df-da17-43a5-bdc4-333e74db7b98",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4e0cb4ee-1433-4938-9c73-cf71fcfb841f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
        "cursor": {
          "ref": "eb903711-d760-43f9-89cc-477eb65e2a1f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0c38d2fa-6a8f-4f3c-8632-a96f235d9a10"
        },
        "item": {
          "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6b042c-2b18-4663-8ef6-d505688eead9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
        "cursor": {
          "ref": "eb903711-d760-43f9-89cc-477eb65e2a1f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0c38d2fa-6a8f-4f3c-8632-a96f235d9a10"
        },
        "item": {
          "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6b042c-2b18-4663-8ef6-d505688eead9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
        "cursor": {
          "ref": "eb903711-d760-43f9-89cc-477eb65e2a1f",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0c38d2fa-6a8f-4f3c-8632-a96f235d9a10"
        },
        "item": {
          "id": "7ec0d4aa-3f22-4c63-bebd-e62f0ac95ad5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dc6b042c-2b18-4663-8ef6-d505688eead9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b41539-a024-42f4-8a69-d5ea87c2e235",
        "cursor": {
          "ref": "a5a90320-3816-483f-93ac-e17a5328d9de",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9f8063d0-1277-4fd9-a79a-45f5289b358c"
        },
        "item": {
          "id": "44b41539-a024-42f4-8a69-d5ea87c2e235",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f94dc9f9-c3c3-41bd-a3cf-6ea053588eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b41539-a024-42f4-8a69-d5ea87c2e235",
        "cursor": {
          "ref": "a5a90320-3816-483f-93ac-e17a5328d9de",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9f8063d0-1277-4fd9-a79a-45f5289b358c"
        },
        "item": {
          "id": "44b41539-a024-42f4-8a69-d5ea87c2e235",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f94dc9f9-c3c3-41bd-a3cf-6ea053588eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21a12c4-de27-414f-9f8f-b30b47fc12df",
        "cursor": {
          "ref": "655f461b-9f7e-4da3-8a72-5f7efb5e1179",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2de7e462-03e0-430a-aeb1-e71f05d4b59f"
        },
        "item": {
          "id": "e21a12c4-de27-414f-9f8f-b30b47fc12df",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bf5c6594-69b6-4884-a381-e455a6b656d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21a12c4-de27-414f-9f8f-b30b47fc12df",
        "cursor": {
          "ref": "655f461b-9f7e-4da3-8a72-5f7efb5e1179",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "2de7e462-03e0-430a-aeb1-e71f05d4b59f"
        },
        "item": {
          "id": "e21a12c4-de27-414f-9f8f-b30b47fc12df",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bf5c6594-69b6-4884-a381-e455a6b656d5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}