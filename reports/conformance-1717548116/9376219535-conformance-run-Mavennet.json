{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "83c291f8-80a7-4f3e-962f-84e8ceeedf65",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d3bf7fa1-3cc2-4536-8a0d-0511d5bacddd",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a351c137-10a2-4a76-abd7-97be21292955",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2539fa6f-07bd-4c72-a708-3f9d0f49c9c2"
                }
              }
            ]
          },
          {
            "id": "d159e75f-084f-44b7-9e76-5446e0dad868",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4bda9345-cde5-42a7-b211-9b7bf4974f73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5a386392-3cd9-4d03-8b60-7b95ac57a28f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf7bdd31-6276-410e-84dc-fc0a2a15ac09",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3c8b9bf2-9af3-4120-acf9-212c8b40fcbd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "96d97ae6-3846-431c-b751-91375c84bceb",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0da0655a-945a-493b-a303-1b5b96a87f7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8aa83a3e-e4f9-4f7f-a792-2929605640d1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7668063-ed48-4cad-8ff9-113c41f17a40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f606413-5015-4fb0-9482-c316e372c8a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b1d27c91-190e-45f7-a0e4-f25b920d0ccb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "361deb2f-2ac8-4786-b4f6-87e6008503d3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0880e594-a3e8-47e2-acf8-a9e456358e06",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "eddd5596-fb72-4cf1-a5f2-90d1bd51c114"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc773b64-7e75-49c3-8067-fde5d8003631",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03d75e17-8434-4276-afef-d80878a07592"
            }
          }
        ]
      },
      {
        "id": "f5a9e2a9-b4b8-472f-a9b3-9e6a3249f074",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "6c3237d4-5bc2-4d52-9f21-32b361fc5e62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f54c9ee-e328-4ac6-a42b-063d221a23ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e1141238-05fa-4719-ae2e-38890d2d8bb7",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1373cd0-9f6b-463b-a405-b72535d4e982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc40f116-7caa-4cce-8e17-340cf3d4cda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff38582-e88d-4770-9ac3-ad84a2e322a2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4a8e7b-d068-45ea-95ad-b7bcc688c47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41fdbc10-b63a-4dd7-a1a9-b5e1ccb6d665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcc35c1-199b-458c-9c78-29ceec72dc42",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6632c1c-00cb-464a-9f9f-e42a4205b029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77daae47-c4be-4a43-9f2a-4921517eea67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8f010b9-0f6d-4b86-a764-de3cd69c1291",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "306bd4c0-45e3-48df-b0f3-c9b0f95e5676",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5e65ce-0d8c-458f-94ab-7e57c8a7124f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3db0074d-b615-47b5-a437-6395dcde51b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c8afbf-a034-4d28-9391-3995a68423a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f050d54-d463-4168-936a-31b2420d0fa1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b32b4fa6-4605-46aa-b62c-fa67be26eda8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "077ebed7-6bad-449b-9253-912d36febfe4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bdccc29a-fa52-4270-9e31-20072779bbbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3e9a45b8-6e06-4171-9fe8-b91f9184447e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "216a12ca-a065-4d26-ae67-6b03c3a3e0ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "2ca05f06-1000-4059-8369-3ca486d12ea5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddfb05a3-1612-4ad4-a1f5-437e50d6a556",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fdc760b-e20a-4cc4-9b7e-798a811de1f7"
            }
          }
        ]
      },
      {
        "id": "9f6f7651-7b7b-42eb-b2f5-272746f0bb03",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "727d2a52-2906-4a8b-9b3d-438f9733e78d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f0abd526-6b65-44c3-accf-1a0ed9887688",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d4d57ac2-2309-40f8-aee2-6fff79bb0f13",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7427ca01-9fa2-4f5d-9858-703f1706c68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41159a3b-c8e3-4154-8bfa-aef3be1e0ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c0426b-61a5-4e5a-a6cc-614c84c7f7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7466db79-0d12-41ef-82df-d1442086dfdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1de5b7-8ba8-4ec3-b33a-082a6e711b82",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ae0cad-6a53-4b33-8001-db5997fdc435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b47318-c90e-4330-85a8-7233a2b6f16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860740f2-8ead-45fe-8332-178581b52b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64a13dd9-9355-403a-8467-d03f8c7c42b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a769733-55df-402d-9daa-eae09401c334",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cbd5ab-7b4c-4a01-b36a-f82dd93d2177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26f93f1-68ef-4054-8395-d375abd465a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570eac53-c12a-4574-8c70-3f579c36b0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9d3a6c5-101f-441e-816d-b5ecb66d6470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd23286d-f08b-4bbb-82ce-f6847cb56ede",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86beda4a-dc6d-436e-8554-49bfc6e83bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "583ba69e-03f5-464f-bdf5-1d238c1d23aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0236363-d2a1-4812-987c-12fbba33d770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aec08703-5232-4e2a-afe0-0cffc40b81fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b339540c-e125-411b-81b9-e008e93b3f6c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149234d1-ae52-42a9-a06b-872f319aaa7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed223f2-a98c-407e-b095-d4b98c61801a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7100388-7ba8-469a-b047-d830efd811aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1df7be1-03c3-4199-ab7b-de9d19c3db41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d926ad-616f-455a-9192-5bbb37dae735",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88dfac9-c2e5-473e-a5a2-1db00292fe2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e9a7dfd-3324-4959-a287-11f0e44a6c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e12c691-00ab-43b6-9b5e-fdb56079fc23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab1ab028-8690-40b1-8e9f-a95348a23301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39b9af6-1289-4e27-ab18-fffa05a8cba9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97750357-5769-4a0f-a312-364692122d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821f4e27-28c5-49e3-a374-c280f0796c51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bcc0aa-1e5c-4071-aef3-cec5558e0faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "857fd479-0835-4f50-9c4f-110157d504cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f96056-6987-4eda-a74d-f569f3b06e82",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085ced3b-26fb-4183-8426-9a207c757339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35122719-bca6-4d27-8061-befb27c33fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7650fcb3-4827-4c83-8cf7-3d6f058bfb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "812c28f7-8c66-47e1-867e-ca07452c6a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e57377b-5114-4f6e-b8a7-961614169230",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1393abc-8360-4daa-96f1-b7c4f5cf9bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02597ac-a2cf-47af-b4b7-e2953094ba68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2241dc6-1e3b-4ca3-97ef-439a832b8b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd96823c-21e5-4915-9ddd-876a0839f99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8cb622-5037-4a38-af39-496c77d24b40",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4cbe2b-7640-45a6-9a2e-991679f29d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474c8966-4c5b-44f6-94fc-e8a967534c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82450ce-0ab5-492a-9167-6d868f58dd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6f0b9a4-d666-4903-b4b4-5b1424d2a95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0c8a8b-1e4a-4bc6-975d-61a1ceea0ac9",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce6bf33-0895-4bbb-b885-a13975ca292d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7309639-a25c-484d-9f7a-d88a5f6ca6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63cbcf9-fb15-43ab-a353-6abd7da5a8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c975994-b1bf-4980-869c-7408b6554fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "510482ee-ae38-4f2c-ad64-0ef866b03a3e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1166d75-3f35-486f-8db6-77a42d79a54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62013d0e-50ec-437d-808a-98d6d9661f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40605d4-a355-4835-affd-b78741bf710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5337994-2fd7-4542-b38c-c8336056ddd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e64bf6f-ea05-4698-b31e-6aaf4ad38030",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034429f0-b192-419d-898b-f8dacd677988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3fb84c2-38da-4a8f-8ff8-53ce833cc5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9edc240d-16ae-48da-b61d-7b585d1ee70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0964105e-33e4-48c3-b3cd-4ffe14a4c471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec1c0dc-34bf-4934-a711-45f1eb506b3c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643a0709-fdc6-4013-8648-9e2c71131ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c923de6-dd06-4ced-9a0a-ffb57d06320d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8ee4ca-5a54-4b15-aad2-3d7c6ba17a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21cef2b0-4256-4438-b3f3-31a0a0e89de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587be5cb-abc6-496b-8ca8-ea03eb609607",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4bf42f-5cde-4a00-b38a-f098a2071344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2248d0bb-1222-4982-ab09-f842439185a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8201f4-0bd6-4623-9914-3378cd7f95d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a754631-7a6a-4413-8b5a-141c3bc95bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e145a9da-bc36-42f8-a3a2-12eb6517531a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506fcd34-34a2-480e-9194-9018f7588abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2ab715-5f8c-42af-b6a4-adfde47c8df8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3df620-df05-4e88-91e1-0a2ea7d2ece4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cae1dc6-ba81-4000-a188-f78e4736d372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86a7b8f-d8ff-4117-a863-7c160e1be0e8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7ffcdb-6784-47ce-998d-85415c4ef157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8bf8ec-d884-489f-8f50-30539769543a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5bf0d7-390f-417c-b215-8562c6ca95df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "231f76c5-6a02-49d2-a772-76600e4d41b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "201ba5a4-fde9-47bb-bc8c-93b3d5471c9d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003806c7-3ba7-4bff-b1f2-6d209ba92cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d6a167-8d72-4f33-81a6-a9c5a5993540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2377419f-ced1-4da1-a156-e5dacd17ef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f8bc1d-ffe2-45eb-910b-693857e76904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656d337d-81c5-4d17-9db4-609c57dd31ab",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72879f19-8a17-4629-bc2f-d101618636c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3246d020-3d55-462b-9d16-98f5055bc70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0eb822d-4d7f-42fa-a0d5-a5aedb6657c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2913ab5f-0df1-453b-8e52-21428bb20e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6789caf-84b3-4d2b-a387-d2c424bbc6dc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75c2c63-80c8-42a0-b504-ca8f2ee2e6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2cf93da-a202-43a7-b3cb-6f8b473e1b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ba84d5-2efd-442e-867c-e0b8884360ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "946f401e-780f-4599-bd44-3c4cfd3c399d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8929305a-e989-4471-a899-040c116e2bcd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6295b64e-10d6-40b6-bfbe-d7da0f6f3201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fefe71-1030-463a-ad75-051f831fe63c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2ffbee-0d51-476f-a507-ee9eead64a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7810908b-d590-4726-bd23-e450e95e68fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4ba5bc-0124-4b6f-b16e-577cf465620c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd84471-da55-4484-8b3a-64aefcc63611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eea0916-f041-4e7a-ad61-07a7ca2a075f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed368a63-49a6-4cf0-bf1c-4c0bc26790dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "289652b5-af03-49fa-b6b6-65dbcec1df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a4a61a-f05b-40b2-9e8a-5446705acc34",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f80d691-7734-4800-823e-6b4d94f13a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2f0acdd-ab8d-4e22-9d4c-0d11f8e01580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b7fc4c-6096-44c7-8075-19fb7b90391a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfccb20b-6456-453d-ac14-b0010465c9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed12c532-64a5-4f49-927b-622dd6692c59",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea2c7a1-cba1-4f32-a4a1-d515b87b8497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87aa5fa7-dc19-4dc9-a14a-aaf3b26a2d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5e56f2-0996-4d3f-9eae-bc0f5cc1e6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "500cea1e-13c4-46d0-869a-165bfac882bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d5a065-1a75-4595-89dd-bf04a26831e2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf6cf0b-18de-4c56-bf69-750410f25600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32cc1ad-41d3-4073-a337-c7d902de877c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e54a7e-3389-41b8-8954-26323cdc3050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56880b16-3ab6-4eea-a2bb-851d1092660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b85373c-3614-4110-a7ab-07112e5c77ec",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fb6df6-3234-46e1-a332-826d53e51a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3056bc9a-352d-421b-9059-f153b535c212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e0b78f-b388-438f-ae91-d118af4be785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a12386ff-69ac-432c-9f90-ba3b96c26363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7dde4b3-04ec-4424-9f7d-b8909ebdf527",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc72ff0d-7c35-439b-a7aa-827eafeeea1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231ac165-7792-4c3a-8f5b-e1ea62a5db6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c794b8-34f4-4cd5-a902-93c5f934db6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b44b77bd-f11c-416c-a38a-7e672a42db3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dffc089-d56c-4ee5-a608-17aeedb0c547",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2c1c24-c89c-4112-8763-4d4f8c9e2333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41445eda-64d2-40f3-9441-01259020ae12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c5761a-0712-4ce5-8144-60ec128862f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7afd91db-2711-4b39-a706-745b5493beb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e4e2b3-fb62-4cd9-8b47-480b2c1300e5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dff68b-5174-4770-92cb-312e77a48955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f4edea-56fe-417d-ac7e-afb7c2a4b29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c838962a-2892-4e0a-9a42-87b6ba2fbf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a9ddde8-ff72-4a05-86bf-5b9cb65c3605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec07744-27d8-4f20-b94b-db05ae6ccffd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b571d26-9a40-4c2c-ba5f-65c1c3928197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333bb0a7-4140-4d8b-8787-d43685c6c585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db26c178-727a-4730-86eb-cb3405b9f136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5da81d17-44fb-443c-b47f-d532b9ac6438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b015f0c-5f16-4a6d-8a0c-2b4f9682d2fd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb3c4b22-819f-4244-9687-e200d99a265c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056d8e33-9ab4-4224-9676-340dd010751a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f943829-5da5-4da9-b075-084c316df96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "22a4ad28-2ea0-4ba0-be2f-ee544557697d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3403bda-7614-4a4f-b8d7-c4eed6190f71",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e004991a-2e03-49b3-a812-d87d4411581d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a49e6f0-882f-41ef-afee-a22265dc6371"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ee73f-da81-463b-81de-fc5e807ac1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fde156a-6819-42ff-a4f8-4be105f5eda0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939e040b-5c00-41ba-aab1-49e043f6a902",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9da7046-0cb4-4f08-bba7-747af4f69d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9070be50-68a6-4e2b-baa2-45be20f20cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35425278-0714-40ca-b8e6-423cb0d62e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b7a5f28-e21c-4af8-82fe-93c4c1356388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bf749e-c407-4ad4-8dee-d16b2f963890",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a09feae-079b-4bd6-8285-82086f416791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4286a0-5f2a-4c3a-9c98-206bd93e8ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cc07f9-7258-4d1e-8ed8-7722309ac5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2897ca5-73ac-4a11-9458-b2c4c5b4911c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c3d370-b39f-4533-80a6-4c506f890d57",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaabfda-5e43-49c3-8ad4-fc5558a827bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb5bd7a-b863-400a-8adc-f2ed81a3e108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb579c9-2129-4523-99c4-04a93d5361c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "3bac9999-e479-4bf9-895c-e51ab4bd216a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067d6afc-c70f-412f-8f52-63691f9a94b2",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3c88f9-aff9-4ba5-923d-f48a8bcf28de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0065229a-35e1-4b23-8eb7-07567eef652b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58012b1-897b-4540-9309-d1b0c5baa1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed357caa-f513-4147-81b3-2c2062367885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a131ee5-21f3-4ea8-8e92-de34b8598a79",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7d2082-194c-47c2-a8ce-3072db5604a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e5445c2-f65c-4a2c-ab63-01b058a8eeb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa7b806e-f9a9-412a-99f1-812dc134d7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f925922-90b7-46ae-b6d7-5aecf635bdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "941ddc96-8363-429f-b7b6-d4974e4bc5fd",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0b78bcd-4e4b-43c7-92a0-c573685e15f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315578e1-b500-4f15-aa51-9fed83b7adef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b47e300-d210-458a-93e4-30a93a7e7cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44063e9a-d539-4cde-aa36-b0d981667621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782e7cad-674e-47e7-b0b6-7c9add8a6f99",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7d77ca-f5d4-426c-be51-6bb734b03efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c80517-a300-47db-bd05-71b59d5b1dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7c1ba9-b479-4fea-8479-95d6880b11b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d29a6be9-1fbe-4c54-ac55-f454d9dcc648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca744cd-9c76-4835-b040-bd8a4255360c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf32511-c3d0-4e32-b763-19fabb608e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8193dda9-0653-493a-b338-c866cd292d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9c4d7b-b083-44a4-9246-d13a40a1f1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd2d489-eec6-4cf9-b4aa-88c86b72423c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258cc17b-0e7a-4163-9b94-5ada0af126fe",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a290fad-0236-4fea-a249-52905cbe98ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f593ba-2170-4416-b8d5-4a075ad778ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb558fb-0543-4a17-92de-ad9750563d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "048d25a2-8c9c-4a3f-9ff4-08881e498958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec7280d-c100-4608-af51-64c891b03955",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db079255-19eb-402e-8b8f-7b84244557a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c108187-aa07-4e16-a0f8-0921bf3e90db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc76385-c5d9-4bbe-929c-37feab12a25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b07958-028f-452c-b6b2-b20d8d1af467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4494d46-6d94-441c-9863-4181be9dc926",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da1bfe6-a25d-4627-bc6d-b4a07971e8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf7a313-2446-46fa-9599-70066e24d158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70cdd888-8bf7-439d-863a-341b77465849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "609f8c11-6aa1-44a2-91d5-c0195bf98211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e5cba5-148e-493d-abd5-964cd9250b5e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac23adca-e912-44fa-88b5-bd088df6c397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82b2598-7fdb-4edd-ba5d-585ea660b9c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb52cfef-34e1-49ca-9853-ba97839ff6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "df7da987-f6ca-4097-91d7-873ea23b240d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f9fda4-52ac-4513-8c92-ed275a8340aa",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f791d50-3efa-452f-b054-d0bc3861e40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7677761-6ef1-4e6d-821a-2cf6eaecc0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170aaef2-db05-427f-b9d3-8faf5a513f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5720408f-acdd-445f-bf7b-7138a9f9a8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ed9817-e924-4886-b20a-c40fda0a74ab",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1cb1c22-9e42-4a84-9656-23cbbdf3ffa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e269e6f0-e64d-4f1d-9c9e-faad95aef165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc928ce7-eea5-4652-90cd-b94377beb27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3975a1dc-64be-4b16-8aa0-7c6bf08bcc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e625f158-7925-4ea4-834f-c071a418ba15",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de5d0c0-7ea9-4e8a-9788-263d8ad06ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8250c69-93a5-4167-a5fd-489317b8c63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d63cf0-057d-4b9c-a834-55052aa349f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "20d246fe-7897-4142-9a14-0eb01cb65198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebf35cd-6d4a-4898-9bcf-bd8e2e4baed7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f689e70-3ad3-49c7-b796-0b106807721e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516ce058-21e1-4272-b90c-93eaebba33de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973230b5-98c4-4232-a987-73eb97aa45b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e46b36e-2736-49cd-8fd2-2923792f9ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fc6260-7fee-4a24-8557-933cff63604c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc47943f-7dba-44a9-95bf-895e51e08691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369e9a92-cfb5-46ad-a6c7-42b888bdd809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc7f44e-b3f2-4065-b9d8-55e989ec7795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "273485af-385a-48b5-a958-5b38c35fb5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dcecad-caef-45ff-ab22-48cd5e5c6a64",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d5dd44-90e5-4f01-8957-6857784eb6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce854744-c9ff-48ce-8814-c89bf0e082d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37377160-bf58-479f-811b-b32aec572250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21c2c422-b62a-41d9-9f81-0b2716dbe67a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73676fc5-180c-40d2-b55e-05c393c66623",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb946999-e14c-42bd-9828-4f7d77174f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5ba143-558a-44fd-99a3-c1e62d4bb43c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac41ba1-8227-4c51-8d5e-f515d00197ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63a33b5-c8d2-4397-b82b-6276db690a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599fc749-57ae-4409-8fe2-ba69e7bf6dcd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5433e587-6c24-4d6b-b40f-c1ae10f96e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65232592-04be-42de-9f70-be2355dc4d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f7886c-c3b9-430a-ad66-3b8bf0dc0b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29b0baa9-3444-4720-a8d0-847cc7bafe92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a66b33a-dd95-434d-bd3a-40a83b1e5c68",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0bab4ee-5ba3-4212-9fb4-5997e735c394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130c481d-c6c3-47a0-867e-dc0a0e606260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1826e397-30f7-49ca-8ba7-6702263b23d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f66411e-b0d7-4610-b20b-d392f544cf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e1694e-a789-4a76-aa56-3795b3385732",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65ab3d2-8014-4c44-ae52-c4b558f61520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34d7b98-981a-4c0d-9509-485a3537f3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3e2ce-052f-4313-b51e-623fa6ae51c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71fa2dde-f399-4dc3-87a9-e557dbed5ecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36acfe77-f4bd-47d1-8770-6884983820f6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef71d9e-c938-4243-a318-12c62e34a7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594ac3c5-6d9e-46f4-8da1-af243a6c3367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6deb7528-bf59-4d82-a29f-53e8302f13bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55281346-625d-4fef-b2a7-0bf6c2aad274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055559a1-6e85-4024-ad24-1cc26228a84a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a2c4cd-fdd8-42f2-bb0c-149fe1a29538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f15dc7d-88a1-4c7d-99ef-09efafd74042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e36928c-6780-4187-b143-6f215f6da7eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e054e2b3-c2b9-410b-850b-54c60dfd55d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847c891f-8c08-41ec-8455-45e947141bd4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e8e58-c3fe-4d53-9baa-c18e07f6556b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0565eadb-bda7-4ff5-9e8b-9654c913e3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dc3fa0-7ed4-46fc-8fa7-9f5bea58bc0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5843ea93-68c2-4728-a3c7-0d7efb03cf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5803d31-0f3c-4195-a707-e76f63187a9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24e1d91-0492-4c13-bb90-4f71722b73fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b750b729-1c1f-4cde-befa-055bd0fd515b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c50996c-d4f0-4e49-8882-de4ef32390d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "008da4d9-5dbd-42ce-aa03-d5e12c318fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae513da-4221-404b-a0e5-4791d65c1437",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449958e8-04b4-421d-a10d-0dff57ae0c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a208938c-e3e3-4ea7-892a-02a92095ee5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d09704e-d3fa-4333-92c7-e196f5d6edbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe6c2ba-7d89-4d96-a87b-3ce95f4caeab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409e8ea5-aa41-4ba9-9118-728c866d6d4d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e068347e-af80-46dd-9d28-c7f590c62763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabe621f-4aab-4bb4-80d0-fb23f748a879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19281d68-2581-4586-afde-8ed0a3cf294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "07e717ba-514a-4ed6-bb23-5e0eed34d2b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a48e9f-5e45-46ab-a6c0-77b31d3237d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341748e3-168f-4c22-b9ff-97106cbba59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abf9f17-262d-4102-a5ad-69542b5e75d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7a2eed-e35a-4ee8-8fcf-9b087eb9694f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "113243f8-d766-49fa-9447-9f0e2cbac0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849258fc-ca5d-41cf-a591-79f4155c0046",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a501f7-605b-4b90-9ca3-03cb80659444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0481e501-08d2-4998-ab1a-9879d1052fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6f8343-c591-4e8c-8c92-eacecf5c8858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea80c3b3-e6a4-4a26-a36e-68dacd380325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02493163-71ac-4571-87e6-1808f0ac9d0a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dfb1ee-6b6d-4242-ae92-cd37530f2d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bffcd19-33f2-4e1c-be00-9c334d795c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e5c91e-38e7-4afd-8258-d72993234ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e091a877-5597-47b8-a05f-a3ec153540cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9678e5e6-537f-45f4-b76d-f93068281b18",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc40d778-8872-4710-90b3-96d12a5d4d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3041fe15-d9bc-4d4a-a7b4-aee07e153b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b721fa-8c7b-41f2-af76-3f6bac9de7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edc8f76a-3f1e-4d22-ab11-b1964e39bfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6358c6a-4f0f-47b2-9773-a9fd5917a5ef",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5820fad0-cc8a-49e1-9103-4a78d639eb29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf3eb9d-65db-4c25-bcbd-5bf75d85e177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682995cc-ec99-4010-a559-06b094106b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "354d7bf6-390f-48e8-9207-0c549dfe7a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f507e02-7b1c-4e49-b688-ca2fd9f89a88",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fad2b8f-1b09-47ad-8448-73b6f286c616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9b545b9-7300-4937-9e4b-a50580221243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4faa945a-8f85-41e9-b0a9-f4cea0d9610e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03c1832c-6e5a-4f28-9955-9892d3880c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc20c4b2-47ea-4caa-8392-d27d605779f8",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c7e070-4214-4e33-acbc-0e721df91ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991f52ff-83f4-4798-adeb-04adf4c54e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1545bb-e544-40f9-8c10-f61fd5aaf35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c99d220c-f2bf-4203-abd8-7bde178935c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0cd19b-ddca-488d-9a18-f864f741b60e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9e5863-433a-40e9-b55c-25312ea1bfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "862d3334-052d-4200-b8c8-3ff0ef4470d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfd418e-6a6c-4cd3-9121-cad86c85f569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "789eca1c-e766-465c-9bd1-11387f13eafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff3a0de-b456-4f7d-a1a3-a11cd2a81dfe",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3a5eff-8f2c-4bbc-940e-753a53a27bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d43143-9a2a-4b8c-9f69-f4a8f0e5f683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66eb3a43-fc54-42e4-96a4-c56065d61781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e998ba27-07de-4a73-bbf3-f226c74225c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78592e82-49fe-4008-9e82-a6d9d7c3f7ae",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48506318-7e7e-4dc0-879e-b06641ffb362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b373d7-4242-4148-9b35-4f087c073410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9752d4ff-3bc8-4766-8f6f-5110d1b59d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "740c8189-d0f9-4d96-8709-e19e1593fdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b3e1d9-9ca3-4f8a-9487-01c3773564c7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8502c647-b216-4b87-ae41-888548f1a6f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94ff3bc0-6357-4950-9fa0-041667c7a2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "269d6009-67d6-4e0c-a8d3-239c8a40f612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34df1323-bb3d-4b66-ad49-2b00b231660f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab337dd3-760b-4785-b494-9b803e0911ef",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9692564e-6603-46f4-b7da-65d6a46bc1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b503ce9-a861-4f81-a0bd-bd111c8dbf6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd84f4c-9281-498b-9b2f-78d50d529e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2507c1bf-7148-4a2e-ac6a-ec4a16706e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48b6615-f819-49fa-9d54-6f31a89daeeb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8137ffa-7316-4fe0-aacb-e6fc320073a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090b7d5d-1043-4295-8349-fd55b1d82b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a978e5-1686-4d87-8b98-9db9d9a3d12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef1942d9-4ed0-40cc-ad11-f752cba1087b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b080b092-5aae-48ea-855c-4bb2db5bd718",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200d7e53-ec78-4f8d-9c15-c9128ad02ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2c3135-aa4c-4071-be3f-9865569fb32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a951dda-1d7f-41e4-b295-1288f777ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdebb551-95f8-4001-8394-27ff5b0c1e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22c129d-9e7a-416f-ac8a-9f609c25489d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e04caf-c066-4946-bfb8-843ae9891e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a15b9fb-b1ac-403e-88c9-6cdb55af3ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b481cc30-009c-46b6-93e4-b1a4428f4c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "571e4c31-dac2-4300-8f41-d3f98e3f077b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c23adea-07fe-408b-9c85-ed08d3251bc3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9179e104-ac59-453a-8830-aa511521f54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2d3ded4-52a3-425b-bcbf-c197a61c3ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2bafc8-74ef-48b3-8193-86096cf6b6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7865966e-91d9-4f50-bf8a-b8c5fdcc7f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4a3f9d-b9e7-438c-bf41-c32dc2e0bfaa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c4187e-ee86-4324-a22b-0ffb4e796fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bca3558-7406-4dc6-8243-16857325a422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f7d46a-7cbe-4981-8697-5c5d3230fcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96167e6f-a2d0-4087-9b2b-186fb29ba71c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8734b7b3-a889-484b-b6b2-7b0a052451a4",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcf74aa-3fa3-407a-9442-d851269761c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02537c56-1aa5-4d96-ab1c-48fb31b32f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6637328-b70b-44e9-affd-1df26990ebb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fb3483-bd18-44e0-9dde-af09a925fbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65749dc5-47a0-4f22-abcd-28408ee1f221",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e21b33-0c5d-44d2-a87a-95a33f81f766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e64af86-6e65-45b7-a1a2-c95f4f28d3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70b2f7d-e633-4760-9193-2d0e1a535429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8304863b-3511-4b48-b8b7-b66cadb3fd33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6dcf93-dfae-47fa-87b3-69a466cc3170",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e3339a-f946-4f60-be57-42e55779d4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afd041fe-bf53-4dc9-9b59-bcc5e253e9b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a684d44a-0c74-4590-9993-392ae869569c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c788c75-d6cd-442b-a100-3737e14b6cab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73ec2a9-d11d-44ee-82c4-2f928f7f7b05",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00312344-3d11-4fa4-8eeb-b52bc3a1f0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "856c8cd5-3a07-4fd5-93f8-4dd59b6f7308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8492f561-ee40-4075-b673-9f95b15a7851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1b961e3-1582-4f3d-8286-714f616e0b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f383f7f-af6d-41a0-b469-e99ada19a33a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14613471-021f-4221-84c6-5866ebcd7ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322848cb-71b9-469f-ab97-69d1fed1d696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13162f43-158e-4205-ba2d-d1f10ca75611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aee27300-8e1f-4235-bbe1-9031e1dcccce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762e5a3d-7347-4215-9d47-a228237eb827",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b3a377-44ca-4e04-bc24-d19a626e7a92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8308cc-d010-4ddf-a135-a3bdd436732e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7c9696-c5c1-4c69-b58d-d5ec6a524888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1309ab1b-d0bc-49cd-a59a-5de9dbe781fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cdf9dd3-3938-40c6-96b8-f95121b2bca0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceece0ba-7f05-42eb-b3a0-85ad51df1958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544da518-ac8e-4b6e-8a03-b84ce42b766a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d999eef4-03e3-4e22-902b-2207cc856aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97da6b37-22f7-498a-ad00-f3bcd3aac8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31232b7-1d29-49cd-a15f-ee04e3ba5369",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5bbc7a-cf24-466d-9051-19cc29554d5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf66fd9-784b-47d7-8f85-6b16aa095f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f2f213-0b69-4c93-98b9-3ad276a57242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "365ea6ed-885b-4b96-99ef-5441b92a0f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2968c99a-cece-4333-b821-2667e5b964ec",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bc24ab-d10f-4588-a369-2714f3361dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f8ac7d-1f4b-4158-be0f-165db47da019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f0209f-ab62-466e-a04a-7634217c14af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "797ce518-5e20-4513-9838-6de09feecf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1e3758-7b9b-4827-bec7-39ff9b30ee1c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b4fc7b-264b-4926-af5d-e775dcbbf841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c7740f-9ee7-48eb-88bf-eed06beacde0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7d207d-206d-4c75-a827-41dbae5e1186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53e5da81-b930-445f-95d1-41d613ceb7ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580ba7bc-7eae-48d6-a63b-9869a77cd51e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c8e632-b1bc-4d61-8e13-c726fa34b0e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1195c0e-503f-4650-a9e5-8c8c4459d5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b63b591-a0a0-4dc0-bdb0-2d61b931a781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed3e9464-0685-46f9-97ab-ef8a6be66108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bd248a-c3c8-451d-9e51-ae8027a2cd38",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e03d9e6-95f8-4be1-b937-43110f349fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960eca4e-dce2-4144-9ef9-13797cd51c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf4f980-300a-4b4a-817b-e4917a716f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1a73f7-ba7c-4106-b5dc-699d0cf531a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2caf3f-2fe0-4722-9375-7564b0685d02",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ebcc3b-3882-4db6-972c-e08c158c666a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6033fe7d-65de-4648-a633-c1098befb174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a9683d-9b21-479d-a261-87185c3b573f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17db3d05-2c49-4b05-8ff8-b06e1b86e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49177b7-1ba2-4f72-be3a-ced696551241",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08720aea-9f0f-4664-9f2b-dc396f702fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48a8fa1-2a2c-4fba-adc3-38b4ea3ae9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06db2523-f5cf-4fde-874d-a9e49aa05169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "da3ec760-4f24-41a7-8dca-10c98b208a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63eb3d5f-801b-48f5-b186-13172bac2c2c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "184a9654-33f4-4176-b1e2-41044a47064a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ed537544-34b3-4c5e-88d6-10fc7b66c244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a3b10d-1ea3-47c6-9663-08b2222b14a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9747f2cf-a179-4b41-b873-84a65ec6e211"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "86ffe6a1-2e9b-4a86-bbe9-b78718d10d59",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7efd105-1b58-4289-a29f-e2e866b7b6e3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed842b4b-93de-46b1-9f8f-f0f202caf288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c35da8f5-efec-4af9-a446-9e473982cd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d656ee1-8b86-42e7-8366-cfdf0537a181",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e48f779-df61-4213-8733-e466122d3e3c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a01e9de-1503-49db-9d91-a74bfe5b3ad7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f885e99-f1da-4674-87f9-3dcb3228e87f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb24c5a7-aad6-4c63-ac57-8e85ef6cca68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8358bc7e-82df-414c-ac47-b3622d94e56e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "940c2272-c97e-434b-9b2b-fbc10e38f23f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "267f9295-b164-4ccd-aded-bc68c47a619f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e4fae69-a030-4055-a817-fffa077b304d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c39c9ef5-9405-40cc-8bdb-7b58f4e10e6b"
                }
              }
            ]
          },
          {
            "id": "c56994fb-38b0-40ea-b57c-a1d23aec8bd1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a428b332-b61b-4678-8b2b-ae37052ea2dc",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "76921832-a09f-4cca-8c53-970ac809de77",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8751b857-6483-49a6-99c4-1f1b1eda999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9462517c-8e55-44f3-84fe-ac350e20cc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0d053d3-c56b-409c-98d0-499d40287ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa70474-6659-4d57-b2fc-d22939de9e9f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4f963d1-3ba9-4f46-92fb-386de60fbb7a",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cc859ef-03ce-4e4b-b0d2-19bacaa242ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "852ccf09-08e0-4cce-ae51-6043b9095416"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc704808-1925-401a-8e76-4623da5840e4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4666f4e1-0d1e-454a-a282-11d96427a141"
                    }
                  }
                ]
              },
              {
                "id": "16fd703f-da73-415d-a0a0-733f0a17f90d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60cb78a9-3209-4717-9e7c-40a09c78bfac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "842f2eb0-457e-4540-8567-6d1dc96f1808"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b60dec-b5bf-42f0-8523-3d688ad55961",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "00caa840-4e39-4f76-811f-2a64d35c8e13"
                    }
                  }
                ]
              },
              {
                "id": "40fe6365-cc90-4b4e-ab38-50dcd4cda41e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36612a6d-c7d0-4440-9670-fa6ee87d7b86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d77c6c63-b132-4e3d-9733-a6bba22e6f68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2296884-16fc-473a-8c10-5c6a91e24754",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b05d654e-ff5b-4ff1-b6f0-8f3965478663"
                    }
                  }
                ]
              },
              {
                "id": "ed5ea111-c235-4df5-aba8-e41009339eda",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbc581e0-e6e9-416f-af0f-37affb37bb4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5c2f0735-441a-42a6-a692-f5b4c3b39141"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff12b4d3-6ac4-4ba1-adb6-ee49e252ec5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "582e3621-717e-4705-bdda-89138dbb77f9"
                    }
                  }
                ]
              },
              {
                "id": "6c51398c-fe48-483e-a110-beece279fc23",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4984c822-a0f4-4383-ad54-1b935a13667b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6564797-4797-47c2-9f0f-700658617e00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "77e5ab28-94a1-4524-91e9-1f403312e968",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fef5cae3-2932-46d3-aec9-c6c06f1d96e4"
                    }
                  }
                ]
              },
              {
                "id": "67b39355-70bd-4695-9a78-e5cade1a7c7d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "209c8010-e5db-4b9e-8ac7-22d126840493",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f76a266-128f-468e-a8bf-290887cb562f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8dad722e-3a4e-4197-bf65-64e88f725416",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e130e2d1-869e-4882-89f5-d74a6955ee70"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "24231f51-28ba-45f6-810e-adb52c8c8258",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f273916-81ea-413d-a235-a13045b52041"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e1f404f6-2ccb-4c30-a6a0-77f8cd5eeefb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7458175-d496-491b-a51a-d849881bb6fe"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d2a2c02-5346-4fd5-bbd8-22cc1cdfb5ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "73bd803b-2009-4374-83b1-60bdeb487e7e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dde1569c-0f4f-4953-ac91-476b54496a3b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fd4e03d-1e99-4abf-8a4f-eda2f9dc08d0"
            }
          }
        ]
      },
      {
        "id": "a68d9512-4074-4bf3-8a88-94821a408437",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5d02ea1e-bd6c-4390-8d1f-12cfe9c08d69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e663eb1-5333-4171-be44-9d824e07e8f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a9b268c7-1a3f-46c4-a7bd-5ad4e75a35ec",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7866a3f-b87a-4c69-88b3-abf8d31d9884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93e6195-c27d-49b6-b633-91cdedb43690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6176ed3d-c270-46f1-a50b-d9fecc845e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "560a2d72-21e6-44b3-8814-df99568b8302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f60a68c-877d-4184-8d9c-057ef2d23581",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902f4ccc-779b-4b3b-852d-336f9ebaec59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0eac713-d230-4151-86c9-57ca99d450c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "466f368a-2ba4-4ed4-b735-ad48aaff5c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "853f5e31-fa24-43b4-9713-20197bbbc7ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8138bf07-cbee-4393-81a7-af91bf206a56",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91ea8c0-90fb-4e6f-91db-d9f60dda31b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1159e0-2668-4b06-99d6-9f7a1457a33a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9515549-bad9-45b9-a142-2b64c770b0fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b046a5-08b8-4055-83e3-6c0cf7ddff8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43826d2-0f98-4045-be71-3bca94ced8b9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac7459d-ad4b-450a-8e31-5f45f009e7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1d1ff3-91b0-48fa-bdd3-0280804d79a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c08028b-31fb-4a1b-a9a2-d7663455b120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da9720a2-ce07-45e9-8a81-fb177fae39f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c00c7a-6955-4faa-a136-75f3c08e9c14",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b90d41-f56b-430a-9c67-e9e4dea6d069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17549d4-25aa-4c23-ad01-1742937c3c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a735ed72-18e3-4b55-b580-2babdf08ca13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03eaf608-2ff6-4142-ad91-aacf086ebf64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d34f29d-dd52-43e7-afd9-ba017666cac3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc2c4ab-8698-43d0-aad3-8aea366382d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec8fbbc-f962-4a71-b721-d1e58edadc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f454da-4793-4ce6-8e8f-8398786df54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbbc7130-e21f-4c00-8b61-b72a12dcd56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67203141-adf5-4fbf-9310-4b5ebe5f7d06",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56889f1a-c450-44f7-afe0-bcaa5dc87c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79b32fb5-e5a6-4c95-ba48-59ff3de11610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5272537d-8ec5-4579-b86f-7fd43320c4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0ec335-006a-4ebc-8186-376ec0e4e35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e08b3c-533d-41eb-b7db-11d3802faf5e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247b5b07-a14d-4982-a2d4-775f1429bed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09413eb4-11e1-4acc-92d7-26df3c5bee8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d53bd53-58da-4e59-879c-e90f3e76350a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "30a68fec-c9e0-4b0f-8124-e2b1bd2916fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9005b3-ffc3-40aa-8d95-b50bc2ffcb4b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "399d2007-9e25-434f-abe7-ec3e4c7220f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbb4ad5-de57-4028-a7af-e54fe955f73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c768a3f-533d-4782-b1e4-b9e529d27193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b723e1f5-4bc2-4dea-b038-5bda5d4e85ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "073fefb1-b1aa-416a-8156-b3798daf6354",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2328fe58-3e08-4bfb-9fff-ef0198b88a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d8577d-9c47-43a3-86a3-22e7680e4bba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8005cc5c-b75f-4745-945b-9857bca025f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f87adb7-f380-4a12-ad87-ffd351f29f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80eade55-902d-4232-9b28-29d4975e8f56",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0088d66a-cf13-4ead-b00b-0cc08a62c5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcadbe97-4e86-4cd3-bd72-e43aebce457a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc514186-4863-4369-99b4-a39987877bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7bfa77bc-b14a-4511-a863-c9491e9a19fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06a139d-5955-443e-8fad-e1cd384611b7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fb162b-681e-4cf3-9653-0f4596f9c549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038e70a2-3f6f-49bc-bd3e-9847a67719a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c78a6a8-7ec8-4015-9a89-8953c29a7387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f8d4bd-a829-4af4-bc1d-21a7f3a4dcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae1fb26-eb88-42ef-a994-2819023c5e6b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31efcd5e-630a-434a-81d2-9e243ec6e35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09819e24-2260-4994-a911-885641d15ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25fbbb8-a61e-44bc-b13d-d0aa54e565eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "728476b0-e4c1-45c7-be7d-a5000d3e97d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6bffad-1305-4995-88c1-97c316049250",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3b7267-4042-4398-9833-8d4128b42095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa164b7a-c57f-4cf1-86d7-b09fde29ec0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3328138d-5eb9-477a-9597-9d51ea5cfea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c486b623-27f1-4339-960a-7303a0852a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f8ff38-efba-45ae-832e-c2046fef58e8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d30323-3591-43a1-85e4-974503a49cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235ae1d7-3c90-44a4-b15f-32d41b21c851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f712af24-f3f9-4521-a7ff-f4ed639318de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1d67d9-d259-4868-9c32-db69e2e02230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5697c96-200d-488c-9dc0-bddd68e986ce",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcac478a-ea1e-4791-9d42-523d29fb77f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2cbc9d6-78f5-4b69-829f-bac143eebb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4662159-7c0e-484c-a325-9a991f0e23a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdeb1fca-107e-4ebe-b81a-0055bbf37670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855da500-123b-425a-a525-e1b88a13d0ec",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fe576d-2ee2-4238-a5b5-ec117df9f6b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49894a4-f14a-42a4-85e4-216876dd867f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b38058-0eb1-49fc-bfa2-f6e8709fd31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "67036f02-746e-45e8-89cf-ca78928ca29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ad85a0-dcfc-4516-a664-44ffbd7a928c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe45462f-4ff2-4e4f-a162-4199c83a31bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65dfd07-793e-4c8f-a9a3-cc07a2c2acca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c883cd62-2259-4ef0-b311-a258ab318b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec73197-f41b-47be-a1e3-8584b2b59406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6720fbd3-ac07-46c2-abbb-30825fdecc78",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512b76ef-d22c-4aae-99c2-2710f3a4e7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc3132e-2da9-4ba1-bbc4-8171fc8f9ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6473901a-2482-4211-9d23-431dacb16108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60cccaf5-e3d1-4914-80b3-f758a23616c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5557d63-260d-433b-928b-b6fde7866aa2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68db657-c0f5-43ae-b93b-20c92515a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa91207-d7be-45c6-ad17-3714b31ff681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e1cb04-1d1b-49c2-b5cf-5e898ef94ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a11c374a-a3ae-4c35-98cb-3c0e1ccd3141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d64503-42da-4609-ac0d-7b3f720c7d4c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453058f5-7706-4491-9413-aac149a0d9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f451cd-6d1e-4ac8-ae8d-d07f88c5b288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79328935-bc33-49a6-a75e-a566de3c29f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7275859f-99fe-4938-baf4-2ed0ea7eebac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9a6ece-2a50-44b9-95c5-5d235bda6892",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1daf8b1c-8846-4ac1-9226-6c3620a51a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6ee33a-d3d0-41d4-8fee-4cf5c85c5070"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c43266-f986-4f5a-a6d8-f84a7df1744e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c767f036-7286-4274-bec4-9f1582cf3291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d0f72c-b4ea-4bba-b260-f889cd607a91",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c75bd9d-41ed-4859-9f47-7e1ca16767d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e277b74-8323-4910-8341-0e619099844f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da138ab-9010-4649-bc9e-c6c4c475b22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6a7dd13-9b47-4f27-ac41-e1bab92b3614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0e8373-50c9-4cf2-952e-956e095a59ea",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4aacb7b-3545-4373-be46-9ca3812f0048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63eab02a-050d-441a-8b3f-a9a788c6cd2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9b3283-1b7f-4f63-80bd-5363a08af314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db38bb0-5a48-4138-bda2-42ebd4d1baa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aabf3f62-72b3-4656-82bf-bc8daac09aa2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e08e8b-57cc-42b7-b7ce-352efab1ed0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a59c243-6f30-4075-b1a5-348a526192cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9b6db3-c5be-4e18-a3db-f68deb0d11a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f31fcf1e-09b2-4078-9b19-07d992a7f1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa47cd4-13b6-4656-a645-4e2e0c0b97a8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c1abff-b985-4fb5-9254-86ec2559e1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfc61a5-760a-4c0c-81cc-8a18cbbb9970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96ba3ed-3d7b-40b4-8b49-872b8e8068d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38d1f13-8ffd-4c4b-b309-cf99bd2beb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514f7b2e-b79b-41ce-857b-3430be094878",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250ffafc-def5-4080-bf19-34659df2b5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3242fe1e-632b-4d03-94f7-c5a8d14e9af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212483cc-4187-44c8-ab1b-4f6938f78ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38c11abe-5382-4d2d-bafd-3790b1da8044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c79fb0-e475-4611-9e7d-d2cc5b6e6891",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83ff017-4fe2-4db5-bc46-a1064a65895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09dbf5a0-14e8-4e81-9792-7a2c0e0b4d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7e4a31-3eba-4cf2-b78e-cd18dca7eeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6fc8aec-e3f6-4715-af3f-b1818e3ce789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1317a5e7-c758-4def-8136-1218dfa831a7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d437a6cd-0296-406d-97db-016bc6d274dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c8c426-f53b-495e-8d01-724a05afb2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03de59b-b55f-4887-b394-89e9a7497d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bad854-9758-48be-8862-f6b90f02288f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0026658-ee09-4ba0-a521-359c08e633f2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bd3f27-0cfe-4ccc-a8b5-9fdd6f595c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a3fff46-73b3-41ac-84b4-244c15fbe6d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cb6468-9683-400b-a25e-5dfdae1a2a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4175df22-e259-45e0-a214-4e7db1ab27ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce0c330-c876-497c-82b7-4b3d261cdcca",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a597585a-0c8a-44ad-9a64-04b313f77c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4969e0e2-a667-4330-b737-68d0808bbe6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dcdcd3-3916-4da9-850d-95228b94597e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60247479-01cb-4b5c-8119-bd7f2e2d6768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4187b8-0bb4-4e8a-81e5-2f0d8e1f29c5",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3fc0cb1-871b-4799-b0c3-14132a56d536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c712c0db-297f-4e4b-bbe3-7f77500c9836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871beacd-7eb5-4fa4-b958-c775cb402358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9bcad0-ab94-4f30-bcdd-572d449055ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e73b304-19b5-4afa-b362-3166a5c74a04",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b667b7be-21d0-4be3-ad00-f7d78e009721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f6cdb1-4ec6-4677-9dab-cc813be86b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4139ac78-c7f7-400b-9a01-0c8b24bd596f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1c33b7-6605-4adf-b252-64819f3e139b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf087b07-eb43-4300-9069-a52299cd8534",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe7cc4d-6063-4f28-9667-91a8b8e5334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65996777-898e-479b-83fa-d0da1235d16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487c9022-bcc9-4f62-94ad-08d840fc06de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41b9ad46-a311-4434-a475-a1eb1f23b441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e60a2d-7ec0-45c8-83cb-8724e2a066c0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac2dc5e-7973-4589-8b45-9151e1d44ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6b43ae-284c-4cd3-8853-f37aa4a2abb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da0fdb2-f2b9-49b9-9bc2-a15d448d059a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4875687f-4d33-4095-8065-d5fdfd500973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53be69e8-ed4b-4364-b8ab-685983c800ea",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "777f02dc-13ee-4c0b-9963-7a39c6ee0881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1eba46-2679-400b-8114-62e3a40fb7de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "710db2f6-8576-46a4-bc8a-135d697b6884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7874baf6-2869-4863-8ad4-3b56c1f3eb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "effa9c41-9c46-4dbd-929f-86be9ead1389",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ddb4e5-29a3-4bab-a795-2b4efa22b9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c238ccd6-e028-4082-ba4f-e1f13a0b9297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6237c49-bffb-4088-8f5b-5eef7815bb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57cd27ed-9fb4-4f48-b3d4-92384ae41279"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "223e5fa0-0c59-483c-9626-f6d3abc85d2e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f954b86-d900-4e1b-bf52-eafb6431292c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c230a0-b4b6-477f-84f4-bb4f486d0891",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fd8883df-b31d-4ad9-90c1-d4d40efe9a08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60af652e-767d-4357-ad32-4ec96b24764a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e55e0d5e-721e-4b11-ad37-1c42420e682a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d2f0f0f-97f7-403f-8c07-b3336a943685",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0766ed8-4bca-4172-a9c4-33d5aa5bbbaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "220f82d3-d17a-4307-9201-6cd0af13ba97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8ae8164-bc16-4f3d-9916-c375be564be3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "427d0458-8580-4160-b7aa-ac3a91231800",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c5604420-1d7c-45f3-a56e-6f92bf31a7b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80b953c5-1726-46a9-b68e-42dc22f61597",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ceaf8ff0-3fbb-470e-af94-d36689587034"
            }
          }
        ]
      },
      {
        "id": "3c130282-ca0b-4e59-b02b-fbdd740494e4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cb2f99f2-a47e-4c93-ad23-9f6edf49e8f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "876c6bf4-80e4-4aa7-88c7-98a5f91ac896",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "51cade4a-7538-4cbd-ae05-d2258c2a0911",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeb1fd0-5564-4ac7-b759-a69ce4d73158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74eaeb4c-34d9-4cbc-9569-dea858370761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c71e91c-5577-4d6d-a71c-f9b897864659",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03eb9bcc-b640-40e6-90df-28ce9049e09a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b36ad502-76bb-49f2-a50d-2dedf8a8b3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa3f6b7-cd7a-47ab-ad56-d3b64cba269b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cbca04-5804-433b-858a-672f0aa41379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8189917-41fc-4ae8-bf19-fda3be701c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2fd0706-b54b-4988-8151-1cc51c862150",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4109fed-ae0b-4dc8-b129-0bd62a44f638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af1aa19-9d8b-4125-b798-83e453fc20c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f55b33e-982c-4a80-90af-1f340f5a40eb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045ca6e9-1ca2-4e46-86b7-cb79ba6babf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8463e7e-654d-4b84-9d9b-90c807ea11d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc203fd5-09a5-4ead-b3b7-4de4096e5138",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8928b390-8fec-4906-8a00-c6dc138b527c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3158f41-9d87-4400-a265-1b7d237570ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "873e8db3-9ce0-4535-93ad-10ff16e67381",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bfff0d-e76c-48da-8dc2-3a39e33d97eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64470e9a-387c-456d-be83-7a4563ecb33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9244a33-e70d-44a3-ab25-36f2e3a3b29e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e84246-20df-48c7-a9cf-4818bca3689b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b69c8a22-09e5-414e-a608-e0ca7506e792",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633695cd-82e2-4f6c-b65d-9b77d0549d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e4c13a2-79eb-4800-9c7c-bbf5444de2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ae90bf-8a08-4a4e-aeb0-9a63f57c3a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1369271-97f1-4e12-bcf9-974b080ddefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a35dd26-52de-4500-b29c-202321a58947",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bebc6b-d7f0-4f93-902d-5a3430b1701f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ed0d51-e544-4ea5-b17d-776b33278cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3e6964-95b6-4cc4-bdd5-52772006ea6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b97a7f-821e-4292-b62e-5d8f379c5237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec68e97-94ee-4617-b2a1-23107ffe076c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ae89f5-7a11-4757-aab1-46e1231caae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6769b05-a33f-40ed-8ca5-f0cff36fc149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71097c59-322f-4b1e-92e0-5b0a81aaf358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e218317-085e-4837-a1ad-ff4439de59c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82957110-9918-4bb5-aa2e-2a72b482ff41",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b983547f-e05f-44fa-856b-eae283dfb7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f40cbc9-e227-4ed5-b235-cbe7064c033b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8751d9-3af7-457c-b2ed-9bcafb4f9961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3af62db-6a08-4ba6-93c8-907a11476aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c5a6fe-66b3-40fa-b915-1d9ed4424651",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494d20ea-c1ea-48bb-86d0-d3ab0f1da786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bffa21-b295-4608-bd07-ef5b47105320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85976e53-a495-472a-ac08-ac45d143a315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b90c23-e34d-41ab-845e-453441126ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4103044-4e42-44fb-9475-0dd216a2b300",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e813b7a-5650-4c32-b9c9-11212387bf0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e095bd5-d226-48d2-98ce-72fdd4b713db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f673679-e571-4a28-bce4-3394cb698548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ce1ff4-b2b3-432f-9e76-8c2135751085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6567ba1-fc71-46a4-ac8f-e36ad76747d5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59f8e35-87c5-4f05-a9cd-5e953bad2cc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd901c4c-73ba-4ba7-9d63-c45beb2c4ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "347d9ed7-1347-42e2-a46e-f25bc05a90c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c80240c-2fc2-4fee-9c92-b056d9e53ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3cde5b1-758c-49ad-9aef-661b5420a123",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c319706-8ea9-4b8e-b70e-f5c1574c9c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b17425f8-2746-46f5-9be2-a1e5757ecc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e185e487-ec4b-480a-97f3-9241a558fdba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d62c700-f16c-4a7a-8330-458b5a111115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513f846f-9d82-426e-9469-512ec666afde",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88210b2e-f957-4f87-a82f-1eac2756e6a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d8f4fa-84b7-4b7e-8cd3-8297019cecb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8717c88-bef6-4df4-a8ee-164bdf7ee574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5680fd42-5ea3-435b-990b-1e04e686ae67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6b4e1d-8c6d-4c34-a880-83e15db66690",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a566d91c-f309-4550-a39c-96a4fc3b6565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3e7847-10fd-4862-bd5c-2faeea4ce5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ee09a3-f37f-44b6-8650-f96f186c6f7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc151bcd-8d4c-4dab-a35c-a948b3d119d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56993e49-de52-4fda-8fb2-4387f6940367",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b4eacc-a5a1-4d38-bae5-8ce9ff665895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e335162-9b44-407b-893e-f2c502ef6d05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6645e66-2f6d-4e1e-a473-60e6a420cf85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243467d5-2dd8-4939-990c-400f195be1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68911449-47f3-4895-baa2-f77904feab9f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307a8633-fb72-47e2-9202-4a0f00163cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469a1b12-f565-49b1-b7ab-e416284466fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4556d8-b28c-44c2-b1e8-c6cba095b488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7d7f9c-aa7e-4263-a4b7-0f0355fba242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ce05e8-aa5b-416f-9c3f-71b0d999c820",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef7e12c-2d14-45c8-8d83-55179548373f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1b7d9e-4f40-49d8-9e3a-e37bf2527fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20df7bf3-57aa-4d6e-a73a-3cd1b74870f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cc0f1c-d3e0-42d0-8f11-0466ba260937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e7f21b-6806-4d41-b4a5-a943c5128cc7",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26fbe3b-940a-4fe6-a127-8531bccfba7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087950a0-b7e9-40e6-b37c-894f3986e7cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e8ee77-7f55-4282-8595-8e5b56529867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0e82d0-fa93-4a66-a39e-1acf7032d726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef798e8-8add-4576-8649-a8d6a63d294f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafb711f-97da-4ba6-a6c6-88c2135b2011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc18ab1a-ffd7-4e32-ab43-98eb908272ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6d7b57-5e5e-4641-a066-1b001c8e128f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53fe2cc7-e6e3-4b0b-aa19-1ec8c1c187e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eea8c02-7f52-4c2e-934f-879556d39bc9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9389d946-8166-4980-a84d-05b8058df32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a011cc27-f67a-43ea-85b9-72164346bd77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f21184f-6a15-4110-9c43-4ca3f3cbbae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bb032d-9eee-4cd2-be47-7cf0e6319a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c8fc80-1d69-4dfe-9bf7-9acf255f6bf0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5562baf-4521-49d5-85ba-144e1f9403ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4549f55-8e04-40aa-b585-4f4836c46041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701e8e8b-287f-43f3-b4fa-fa503a977c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2edfea-5b45-47e0-9909-296e54b9084f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bde172f-ce9f-4e26-88b4-9391f2c3e20d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e3e426-9c65-4f8b-a22e-b2c1b770bfb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66085395-c450-479d-9e7e-0cfa0ec64211"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129d440f-ea36-433c-bf9b-e787153fba58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae76c7b4-a2a0-4e0e-bd36-f7df88f099a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320a5183-b561-45cc-86f1-a6162bf3a0a2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2add794d-c393-46c5-b0a1-b236f37bec24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65008956-3e42-41bf-99ab-f6a8b4126582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b75d0e5-452f-4e4a-91a5-f5a1bf36c631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8939de94-a636-40e0-9517-b20435017fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb771fa-bcac-4550-aa21-0f15c9cafd23",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cc8c64-b22a-4b63-8822-69496e5cd02b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab204565-e03a-44ac-8264-127017014638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59883ad8-284a-4024-b028-ece7959b498e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a739e7c3-6d0f-4af4-804b-b8657db64016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c1c62f-0e96-4a4f-95a2-97b7f5ef56a1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4300f779-bb70-4b5f-aee3-34078f36e069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5490f0e4-6d31-4a57-a267-fb0642491724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f4bccc-710b-4c33-a644-ce8ad10aef16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a80001-a76c-4699-8243-3afcaa4e7c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee851cf-64f4-4585-9938-d7b1c8a4f9b7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabb19a5-e0be-4c0b-86d9-bf4736c9a75f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d506fea5-40fa-42fe-af85-a457cd7265f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f313e856-d414-4a0a-9102-ddf6038eb991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9afe0d-b401-49d0-bb13-6ad3f7491117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f097925b-2894-4b9f-922f-1aad6457a4f8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0841c1de-323d-4608-b3bb-bff7fec1faa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816c456c-813a-427a-a496-2321ef202d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cd2f50-cdb9-4a45-88e0-6a3a7c2f8db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7e93db-85aa-4c8b-bb59-2d64df3bb9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218b35ac-1012-4079-8d2f-a7bb560e7eb5",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e1df87-0f82-4d8d-8664-2a7dd754e41b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73524aaa-fa43-49c4-b3df-0ea4d9a9ff5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3403cab6-ec43-4654-a44e-b510423313c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eea699e-47a5-4ac8-9628-bdc98d6e1184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b66e3e6-b709-49f0-bec1-e733d5bc542d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d66088d-0822-4b72-bd0e-fe8d812725c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f74bddb2-f210-4094-a763-1f775a83af90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34e040d-df75-452f-9752-20585a745e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43082902-09e5-484c-8fd9-4fcb8b82298f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c0bd2e-5fc8-4f9e-aeec-6f648d7fa6f5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1685e1b4-d6b2-427a-961a-dbeb531e230f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458c0780-32a5-4927-9dd8-606bfe70dc26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc711fa2-072f-45c4-8c3a-05198a394007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70d196af-48d3-4bcc-8d6b-2e493fd36135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fd552c-5c32-473f-8152-9196b034572d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed100e7-cbdc-4022-9f46-a676fe8f7567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4281735b-0bf5-447d-8d12-386fcb388185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32ae347-13c7-4519-bd1e-a8f5cdc04513",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0b11d0-ef0c-477d-bc90-30f9a42aad10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfca153-e04f-41f3-838e-73e07bdab20e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad6159f-66dc-4d83-a879-a689b7629c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48baea58-8f19-48d8-b3fe-fc7fe2ae5178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10268251-7eae-4c66-8bfa-c2233c77aa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "decbd0a8-9b0d-441d-856a-debcc9212286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ee4e2f-bd26-45b2-977a-e61b15d83a74",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405aacfc-3676-46d7-bb64-30f837cbaa0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb878e0-5044-4b23-bfb4-45f7d641ee33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b76a5a-ee56-4753-b9e9-5fd581fa2a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e42d7a-4bbb-48ff-a07a-fd5269cb6f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1fd288-751c-4263-ab64-84387ee6ea1b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c2e195-ad04-4a6a-b6ee-0c3deee72b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f55b2031-8da5-4b06-9e25-cd5137a0ed82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2161ab-22bc-4213-a294-e4dd485066b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cafa296-4cbc-4642-804c-e1123b86e97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c57e4a-a082-4719-8122-695333fa5b36",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d146e46e-6b9d-438c-a050-da642bd94cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16bbe687-b62f-4de6-a3b7-f674bbf330d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "523e8ce2-2f2c-4268-bb5c-7d2af886e1e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9ec38b-a56c-44d1-ac25-b4f711c0a2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365ab0b3-32c4-403a-844f-509d707ec185",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d950e6-2200-4789-b463-81b9863a60dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485961bf-ce7a-4102-8c79-e3b5c0808c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564923f8-f926-4604-8414-0b601ad02a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236af099-6bcf-4cc9-902a-f45eb35a7489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f527b90-d245-49ba-9674-6eba9aa44ea9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ada56c-208f-45c7-9812-7e2cba0032e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1154500f-8c52-422a-9dfa-d640691f1931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b01b215-1e0f-4492-9da0-29e6dfbed018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec318d5-244e-4c12-9087-3e26a6757a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85355ff2-cd28-46e4-9029-a59143de7fe8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a02b0cb-fa22-4f23-9f82-23f24999fc0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844375e3-ab6c-483d-93a2-dd7fdc529d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafec34d-7552-469c-9623-548261021405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "653cd516-8bbd-4f9a-ba92-acc01647798c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404847a9-5793-46f9-98ed-f6cdfed1e3a0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15844184-6aca-45bd-a481-2ef0ce17a861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f945e53f-e7c3-4aa2-ab9d-774b1f71264e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf73b6ce-4fa9-4ba1-b967-adaa081851ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0091a0b-2f05-49d5-8754-e09f45349756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0057a7-5b0e-4fe0-86cf-e59bd955b7b6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efbc651-d340-4d45-9cb5-19f1a80d281a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176fb4bd-e45a-467f-a599-c1bc90457046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aeceb0-07f9-4226-8d7f-a397bd2dcfb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49fb35a0-1ace-4eb5-8bc6-f36398c39fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a607ab-7a32-422b-82cc-59acad7f34d7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597aaaa9-a1a7-4367-a565-d8cbda9288a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbc85c6-4fb2-41c9-88c4-76a4d0fc70a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c439ae6-2351-44b1-88df-abc736c58b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47e6ea0a-40e3-4ccd-b7b8-16c4b726d0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b403618c-23ad-4655-b3b5-c813d749ba87",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2b61dc-449e-4d79-a12e-69d305642f5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "699b514c-fb7b-44d3-9781-ed656c1a29a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5936bd81-d299-4a72-9870-a5519231f934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2caae47-acf5-4ff1-b99f-8873a4c07862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ffa820-284b-4247-83e4-0f3835a06b48",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fc070f-e8a1-4a5d-810f-b9fc5a112d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb2b04e-c844-4a82-8270-ebcfc24f66e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8851a606-b635-4ef5-aaee-8d331c06b079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9606415b-e5e4-4770-8368-823b6f69537e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2edb3d-66f5-4dd8-b604-bc68195de061",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c48d6d4-5fd2-41b8-90ba-72dafbd823d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cd1f3d-785a-4912-922d-594767541b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af996553-f09d-4140-ab18-2c5afe7f436b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0661e20-3a5a-4445-8150-428a52fddc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a675473-914c-4e58-b056-423172305474",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0a34b6-b629-441d-88e3-593039516878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991be434-cdc4-4917-97e5-afb9bd908738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac83bd60-1991-44ac-87e4-256809e86baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6574607-89ba-4d09-a6f0-93d10e17f180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df6b103-1ab7-4478-bf83-0bcae4f6bc17",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083390f4-12a7-4d99-afd3-e2c1f0a193c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0a0084-4dd5-44de-9edc-500ed518b95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb3aa44-80be-4bc4-a6ad-ac0bcde75041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c12719-a6af-4c10-97bc-258b9daf4c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d061eb-1847-4870-afa6-4f022d5ef627",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0cbbd7-b526-414f-9d7e-95482f92865f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56324a7-66b1-4d8b-8f82-a2e263c3daf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa51c560-a79d-4000-b2cc-cb58f97f3937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e230bda-a095-4ac5-97da-f3e6c2a88ec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680e9b98-33f8-4beb-b27a-c165e7c8220e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05ef7a7-9a50-49f4-a962-a271157b54d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e90494f-45ae-4ee3-ba8f-5cfeaea2e079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05b3837-d298-4c3e-9c60-bd62dffc3c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a2acff-304c-4b9f-b939-67857b71099c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2542b65-a9b5-4632-bcc6-873ad7c98454",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6b6dcb-5694-4df1-a9c1-1500fbea2dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f947711a-0c15-4696-a89f-c49f0dabedb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7390f762-625c-4864-b994-c17b6d48d7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d9232f-459f-4d48-8a4e-9c953862095d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc931f26-5f2f-4584-a464-8b5607799383",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea393d5-4abd-4f76-a8f9-9a5435209a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15479193-75ea-4b07-b748-22be6979d883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09e5147-2e0f-4eed-8d8d-f92d38151367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7463c765-ac04-4c83-9840-ed4b7b81b01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4a04bd-3d08-4c47-aa75-e2c9673547ab",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d29d1e-b288-4787-b563-fe978d348181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5637b9ff-d1ab-40ef-8ab2-88b1fa764b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f22f68b-f4f5-452a-b2ea-f481ce77e18e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f49e83-882a-4d05-a20b-e50e2abce82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff9f84a-970a-411b-8b86-e8ccb6119eeb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed4cdf2-dd99-472d-b413-64b6be896e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab00cbd-072d-450c-8f83-d0124d23cd77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95ce53e-9950-4d46-be49-4823a9027a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b2df2b-27cc-47b1-8e5d-bfc9bc2499c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aeff632-7a76-4f18-b816-f4392747e449",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c7005c-00ca-4aca-a80b-3372dba5a180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdeb635-be74-4024-a5d8-892c0204be63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b060b59e-dc4b-4cd6-a2d1-637b147120f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664d3098-0626-4ff5-aabf-95e8199f110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a732faa-0920-4ad1-8920-c25dd701a891",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63dc3b0a-3847-40cf-9d08-661bac71d63c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0252671-81aa-427b-8c2a-d3776244e436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c35350a-596c-4f62-934b-e183505da0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae6019eb-d6dd-47a9-94b5-a11e59b38d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e6ee02-6897-4682-92e7-f9423aeb52c7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97e6179-8a39-4823-9a39-0cd152c686d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c61dcdd0-1940-4a7c-a444-ea55410e7331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca00c11-db1c-4308-a79b-8d9b89b2f6e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f3d316-4a16-46e3-898d-ed1b20c85b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eebef3c-1082-4be2-8fba-b39acf7bd131",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee8e036-9d54-4f2f-98f0-31f15e3ad6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98190c39-f344-4afc-9a40-85b518a8c34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d149f88-7468-425f-8f9b-69317dcbea64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5ffb17-b03d-4cdb-a66c-4eab6556f9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfeaf93-1a39-4864-bef2-74c34fbec5aa",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e223267-189f-496f-a9ea-4f2502d29bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6bd7374-0e4b-4605-99f3-fb3a9950f425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6ab430-80a3-4de1-9b9d-5e939a0a1ade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ce56ed-7ad2-49dc-b7cd-2808c697c1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a98a079-a44e-4ec5-8989-1a16bde47e71",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ca17d1-e557-4d09-982f-4b6ed570c881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1e7da2-30bf-4167-b878-2fdf9f9aae43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b25948-db50-4f02-9f85-74caa6c189e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8fa819c-7db8-4bc7-a21f-bb6b3395aa1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9fb7f4-0832-42e5-b358-b085e83dbadf",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0036c2-5379-4a1c-86fc-c8a70b12976a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1efa90-c6a4-4152-bc10-516f4845d933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f832c58-6f90-45bd-bc73-7379c5896b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0fda8e-12e2-4bc9-9aed-281dc7f4cddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfbc5a9-561a-4ad2-80b4-5d54c974aa92",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c3e7fa-678d-45cc-8db8-db12fc1f9115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b342400f-9eec-4502-8f90-8204629bf1d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d26b064-5036-4970-996d-538433ee559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d161e5-8746-4381-b508-a8dfd4d0f584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03083206-9cbe-497a-9a9f-c58a4ae678db",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3feb7f-05ea-468d-b947-68f848220b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8ac50b2-4abb-428b-8029-1e0abb8c3da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9e2f5a-80d2-4ec1-9575-1d0365b110ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c89bca-af79-4274-9743-2980a5f2d6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7fc28f-fd16-4b09-8bd5-892256772180",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f5a6d2-b12c-4685-9629-9d892de2e8e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce5b8cd-4ffd-4b4a-b1b6-92174afff987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60fd41ec-cccf-4190-a4f3-02e5577a4e37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f865b40-aaad-4acc-937e-08a19ae513a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d526c25-526e-4330-a0a3-e5e43a8ffe4c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50630a3-5803-475d-b82d-74a9d16eac1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7088ca1c-ca84-4626-a52b-518ece3f7609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd755ce-41c9-4768-889e-e2e89b7757fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92808c4b-fdcc-4c50-8330-958e6818fab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e93238-a01f-47d9-95bb-074f9ff43d90",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee933c7-224c-4209-b3a6-e7b44b68323a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16841e3a-55d6-48b8-adac-da127d310aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a10f76-5476-4928-a9b0-9e05a35e4b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4174481-8ff4-4de4-a0e6-eac19beb7f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f0d4225-7698-42d0-950a-818c3ad30514",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c7c373-096e-4f49-a61b-d3fd26e194a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c405ea4f-cde5-4927-8624-965147f7c4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf91d8e0-10da-403b-9b08-d1f58eb77375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8388685f-71f2-4a69-bff4-2762aef524b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1b4501-0066-4f0b-8261-05ef2630d934",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1946602a-26f1-423d-a5a1-a4a32fb576c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0591d9d-c94e-477b-9c3f-b7293fb1659a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea015f25-269a-4711-b87f-abd8981dd5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0c82c33-7e8d-459c-83cc-953dd7024628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103932f8-c737-46f1-9fb5-b193fed2f169",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22b8877-7eb6-4323-9237-f13e0c96c0ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421ecef8-84bb-4c8a-bd12-e6f71d0b281f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a082d0f2-f96e-4ab0-9705-8693b0718cf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c52cad7-dd03-4c82-b040-30fa1e69ffa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b10357-8fc3-486b-8563-536cf0f3ae81",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12eecb32-c298-40fc-9d0a-5951fd3f2416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3b54896-837a-48ec-82d5-716456ac422c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45b87c8-3121-4f85-a034-e716275cdda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ddf6df-ed05-4112-b6f7-c5de16c88d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e950fa1d-1472-476c-a85e-330a114d40db",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e1e586-672a-4dd6-ba7c-90434fdcacc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e16cfad-f624-48c9-ae38-b9d5be8b8c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6142b0-3910-44e3-8679-a76591d44494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216ef79b-6e7e-4ccc-b694-f08ccf7825d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce763020-2ca1-496e-887b-3e84495811f3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b897193e-03ca-4431-ab2b-9015458f50a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a25b407-9309-4233-9778-cda67f42ac66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc63bc4-6491-43dd-a919-841300fd9418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8991f778-4123-474e-a148-1452af2bdaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564af4d3-4698-4278-bb45-07ab3e0836de",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221df34d-acf4-412e-b4e1-294b6911aa4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6024880-7e6d-4e7f-a0b8-0f474967835f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f174d3a-6208-4748-b9be-7ab953df54e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637c61fa-d031-4ff8-b63b-2fcfe00cfe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5fb8e8-ffd0-4fe8-8c90-b2cd0d04f77c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38c4ec8-300b-41a1-8683-72bff05bf792",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8466018a-b931-4047-a9f5-aa506f98407c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade19d26-955b-4ae8-84d9-46c20d4a256a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09f8001-eadc-4014-9ffb-60b866528b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7351d515-0bab-4390-b565-1bb8173dc13d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851f7c25-a746-4c48-9f2c-b6ec301fc38a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aae42bd-1f57-4899-9db6-1ae27b67b83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4099cf92-6f74-4a61-86f3-206c6ec3ee47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "755800bd-3db3-4cc0-b591-97b030425a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7133fc3-f68f-4c24-996c-2a5e32d0a9e1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7451a262-7bb5-4dc2-8a0f-a4c6025f98d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a75a8ce-4686-48f1-a982-d7706d1ea1b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ec3908-eda4-47df-a83d-fd5fb0bbefdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b3a8ef-733e-4217-a5b5-8053110f4a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d234ae-fe6a-4d38-9660-9e3b9b2ab454",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4221bd7c-033d-4535-a614-5e8c0e9a29ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05861f83-6ced-4fee-be3b-8d35c6321553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d9dec9-4a8f-4281-a37d-2599c62cacc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f234b8e3-ef30-4f08-8a8b-6da653f9ed19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3ddc93-4ae6-4d0b-8886-5812fe6fd748",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b59b91-071e-4f60-acea-21d9bc38a9a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a1cbaf-ebf4-4ef1-b74f-e4c22d261916"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828a4b06-db94-412a-8f9c-2389455c7104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae515c4-9d8b-4eed-810b-07700522e8cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e973efa-e04d-43cf-b131-23a7fb731c06",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c936f7-5f64-4f2e-bcdb-dea636649f8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afa30b76-f091-46f3-a0cf-fe42d73e7580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b2c57c-85a7-4961-a6db-986d92d0bb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e511400e-d489-4104-bad9-e1caeabe4ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a28eedd-164c-47fa-9c36-92b86ed9eaa4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0310523-75be-412c-9c53-79bc48a0c8c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae2d660-0163-40b4-9bf6-8aa3bf4d861f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5480166d-49b3-43d1-a818-2839043e6fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4f1d05-bff1-4d5c-8c62-d9e92d1c3312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5780d12-121b-4dd4-b22b-6d5cd932443e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a4984d-161e-4e79-ad6d-8b7c654640ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af1c56e-8e0b-4af3-bd5e-431439b3340f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9073e2c0-b224-445b-95d4-39b86855e4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b180ee4-1b81-4edc-9f0e-e3758b3ce241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a519ba81-d04d-412c-a6b6-9a600e33b15e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6390c6f6-90a9-492b-a64d-4bc069ad1e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66eba341-5208-4c8d-b386-7ee5d733eae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6dcb76-3a96-4097-8a33-3affe39aee94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c094992a-df19-4f3e-9c38-5cb3fd9b549e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ae6c38-df36-477d-9efe-fdd80fa83cec",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96c2039-5afb-4dc0-b326-748055c8c6b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8c45e63-dc0c-47b6-8cce-5577613c148e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2113a5f-46ea-43f6-8263-775288a279a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870a6928-3963-4c17-974b-d91f3fab2777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df079b99-aad4-47f9-934e-507743b99591",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94724e3-b71e-4725-b198-fc6f28d98d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bc6c1a7-d5f9-4926-badf-8fef4a3fbfff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41f1ce1-d975-419d-907c-baa451dc3aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53748c7e-46e6-4edb-858b-71959a7881b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3636401f-4355-42c7-8c14-f98c2c009189",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f438054-df90-4bc9-acee-882b37b22f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6fd6997-a2e2-4e27-ab5b-8df7ea9e49fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a06ceed-101c-47ba-8430-7026c5abfb5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5fc9303-e7f4-43e3-b4ac-86a726d3281a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3a47f1-cabc-4b57-9f58-ce39c0a5ce3c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999743be-4799-4534-a7ae-44c049124d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c75e3c8-47ea-4191-a75d-86cbdfa3b663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf81ad9-e3f1-4e33-bbf8-c0a6e5ce4aee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02cc1a3-40ee-4768-bc13-179ee5d2777f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cdd7ac-41a7-4527-9a8f-6bd938ada43b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac68ca1-25a0-4aa4-8ced-3bcda1791348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffdee6d1-af55-4d02-b664-9f77089bb87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344c9106-213d-47ca-8180-11ae5d351943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71bc7b19-ce54-4e67-900c-90470c764fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdabcdd-83fb-473b-b83b-c0f44182183a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8bdcde-19a6-48f5-94cc-dd19e0d0d4b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca58af1a-e9ad-4c71-938b-4deb0a587ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf51df3-7de5-43a9-8bd0-af7f2367439e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19af0ae7-3b3c-4291-824d-9d5e6a873ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025c6a4f-06d5-4f90-950b-0e6df2364dbb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee85ecf-2d8b-4be5-b9f1-d47d0d0ab53a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2df58f-ad7f-4cbf-8aa3-b36690e7086c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc78fd43-d84c-4b2c-8497-81c930c1f462",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "037a92cd-e418-4691-957d-c09b5521a04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b37cb09-ebdf-4061-ad51-cdfc150a167f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e1b3e1-f662-471f-a91b-20f2990ad7e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3c6b11e-091b-4430-9e4c-25646a0021d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ec3dbac-d056-4ff3-a44c-c3cb9f9c43da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4706bd-6465-4c20-8cbc-a4f8a44885c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6951d7b-6b2f-45d0-9647-d5797d87f76f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d5e844-2a85-4cdb-a24a-80415d3ecaa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a18fd7a7-4522-4ce0-a8ec-9ff97b05238e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d44912-b719-4b98-939c-05dc3ca399a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1057e5d-b193-41fc-a2c9-296292fe140d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b875da5f-ae69-4dbd-97bf-fde6267f4477",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cbf7f8-5d38-4158-b19e-b0491130b6f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c604ead-8ac2-4e6a-b304-16f5f25e4357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6b91a0-a630-43b7-a646-c7120e150b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970eea7b-c5e1-4345-99ed-e161fc0d74d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a64219a-92ca-4f98-8191-b55ec6f34e41",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98138417-a531-4759-a9a2-e27fd9262c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21694759-5b71-438d-a3a3-e9c2bf3876ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf141ede-9f28-4b51-aace-600b1e8b998d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6453eb39-b04b-44af-bb45-a068eeb9198d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2556d4bb-c145-4eed-b0da-48163d9c42ac",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817777c0-88d8-4ba6-b08e-3378bddccc75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3397e7b6-bc76-4646-a7ac-cf4d21d6fac8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5cf79e6-89db-45ff-a0c3-8ff064600b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be126e12-e280-4aa9-beda-bb38b984cf86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa0ca31-7098-4640-b00d-4579fe83b88e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef0decf-38ec-44fa-95b9-e4915485f1d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d85b859-f560-41c8-bda6-3f1b6f90cb2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f74f4f-f088-4576-b05f-2764c8bdfbbf",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c448f1f-8c58-46ca-9333-d4d520bf3287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ab39ea-58d5-418a-9197-7fc9b7e252f0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9959249-cf07-4ff1-a67d-3bfe8d702540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217af2f5-4c04-43ef-9003-7972a7f543d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d532240-579d-4ec5-9ea7-d4e0f1f4b965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc45ed49-81e8-4eed-b81e-e72fe1142839"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "941fad9a-87ff-4775-9acd-6129bac1b67a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c808698b-4303-433d-a71f-c626e0d0f650"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "593419de-4ed1-40a6-94e5-989530397b98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "439f4fa7-6d2e-45f2-b2cd-e8e7f668ce7d"
                    }
                  }
                ]
              },
              {
                "id": "f48b5612-7daa-42c4-84b5-fbcf9cf021d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0d66e27-3036-415a-bb14-db837d1aabcb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14cbde09-b0e4-4757-a8b0-29ac94c99d38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4464791b-b715-4bf6-bf78-73e9c4db4670"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a67bc0-a598-4fc2-a09b-8c3e6539d9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ef9cbf5-3c49-41a7-b95f-6b615244a146"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4c30673-5932-44de-8ccc-341403da760d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69fd16b6-b9d3-4e10-94d6-1c6d609dcbaa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2e44852-fcbe-42b3-ae08-a4111b52d73c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "450b8acd-5f08-4079-b3b0-3dac865a1387"
                    }
                  }
                ]
              },
              {
                "id": "d66f9a3b-f774-4e8b-8a77-7ec194f5393c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1500ea7e-66cb-4342-b88d-1bd4197ee5f8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749917c0-7501-457d-80a5-f8987b153be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6e8ef1d0-496f-4c07-b719-b027b7cbec2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed132bdf-7220-4704-aae3-bf98490bf15b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e49e8b-e83e-44af-ae1e-fffd6c9005bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7f1d37e3-0963-411e-9752-05eb8dfbf26a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "818fe98c-8f92-40c7-8557-514d1e8de317",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e7faa52-0c28-4405-affe-4ca8f87d3172",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1ae35038-0f70-412f-8bda-907de8d51d5c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "47f45e3c-bf29-4900-a229-9170d4a80cd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7a7eeb4-aba3-4236-a933-33bc997cf7d6"
                    }
                  }
                ]
              },
              {
                "id": "5ad1ca2c-310e-4025-bb9c-0ad7e73869de",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a6e0e5c-3c7d-4b1c-9713-bc336cfa40ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c08601c6-f61e-4a53-9f81-7a2ba8cd7843"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2723c67b-9102-4825-b43e-7a808b1eb232",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97cda6e0-ea03-4246-9063-ede86d7d6adc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa3dd8a1-5023-47f3-86a0-7c615e64b3bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6305f35c-f20b-41b6-a5e1-b66b2e9e8774"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a66b076-b348-44bf-8696-fbc0c98762c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8291b85e-e5ef-49cb-8105-16e6b18c782f"
            }
          }
        ]
      },
      {
        "id": "2cd6142c-8d36-42f8-b7b4-744e09beecdb",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "dab16898-31f4-43f4-be40-2f5699279a2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d09a77c3-9eca-4717-adb1-a02623c407b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b7daf17-0d30-493c-80dc-6f8cad454b9b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4ec7d1-f81e-4e6a-9c71-4e27a43a602f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "45cc70ef-5334-4c02-8f52-ed9e60bffc4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fcbf2e-92fb-4e3b-b1f1-9ddf59e1e581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d6fdf11-e4f7-4314-b929-6436ec977312"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8962d8d0-ecb5-4c69-b9b6-b68d96987a14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a22e125f-39ae-47a9-9ca6-dfb4de6d7aa0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58914e68-9025-4df7-b58b-f262f9703a24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dff2bcbe-b829-4b48-a972-35e9f4891007"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "93d4b411-8496-4ab3-ae96-0ea606795db7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "872f0c58-c3c8-44f5-8912-ef7a1a8f80d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dda50e8d-fd1c-43da-a087-6ed157e7a966",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96ec5331-f037-46bc-ae46-22e8fb1171f4"
            }
          }
        ]
      },
      {
        "id": "e88069ac-0474-4225-b7b4-e39eb47a7e56",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "b54a5292-b5ce-4e3f-900a-c4607062d96a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8c94831-23dd-4ea7-a3bb-a3630602448a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "24cb575f-eea1-4308-bd42-ab9acde1ceed",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b9c93f-90c7-4b4d-87a6-5cabf3ed48db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c0f0c8f-f0dd-41b7-a65e-c335b9ebf343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f3b895-9aca-4c34-a55d-58357627a040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56e20203-82ae-4c5b-9c02-c84580389123"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b28b0dba-a91f-4d45-b124-a841e4d30673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5240c6a-6da3-466b-bb63-74bc30d13f7f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c5a38cc-5aac-48ba-bc31-b21b1485e89f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3950003a-04a2-4a63-be2f-a55e0357eabb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f9bc724-9607-4f20-bb55-06e38ed5830a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "541899e0-d4da-4bdc-a0c3-b4744d56353c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "246131f9-74cc-405d-b2e0-9bf56bf009e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d629cfb6-3728-4044-8faf-7d383352265d"
            }
          }
        ]
      },
      {
        "id": "5ccea153-f4c6-4969-b273-b7be9fd23f47",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ba471e08-914b-4e14-9bd9-4a7ad2ed8906",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9dc401b-ada2-403e-a8af-f00f6ef19aa4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "069bdac3-d543-4747-86ed-f6c4d59eda80",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a72a7ed-11bb-411d-902b-95e54f5c9a9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d6aafef-4289-4595-bf91-894a21fb90b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95986b1f-b83d-419a-8e73-55b1db812652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e473af38-4fea-4eeb-9d41-365197136a71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f50c2d20-7584-4dd7-8d9f-9925aa0588a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c74797d3-61d1-4667-a1f7-ec9bdfbaf20d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d71f721-3a91-4092-a562-7ea25f2f185c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9e5d2fc-3da8-4b33-a544-e0ba08404d13"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d70c5d8-7c1f-4079-9edf-9a32ad4159ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "422a4cdc-adc9-4357-96c7-5f03422ce5ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3102691e-fa6c-4daa-8baa-8faeac93434e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4f52468-bf47-4fa5-9db3-55946ceb4980"
            }
          }
        ]
      },
      {
        "id": "55ffa866-e1fd-4206-a1ad-652fa04c1b98",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea9fd07b-d2ed-4edc-aceb-ad52a97c3cfc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6812ca96-a5de-4dfb-9706-98cf92ce0bca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "550499ec-6827-4a05-bb34-2f2abbddc06a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a740540-8945-4c91-a2f4-c7d9fb620bbd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb0590a2-d9b9-42c2-b122-b62e0945d03c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.88095238095245,
      "responseMin": 10,
      "responseMax": 643,
      "responseSd": 76.95309921281964,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717547839225,
      "completed": 1717547863201
    },
    "executions": [
      {
        "id": "d3bf7fa1-3cc2-4536-8a0d-0511d5bacddd",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe374072-258d-49fe-9778-b23c7f23f21e",
          "httpRequestId": "618cfe9b-0091-4c83-a376-5d84517e661b"
        },
        "item": {
          "id": "d3bf7fa1-3cc2-4536-8a0d-0511d5bacddd",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4494b397-e1fb-455f-a692-015945c14c8b",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "d159e75f-084f-44b7-9e76-5446e0dad868",
        "cursor": {
          "ref": "4a66ecb4-dd24-40b6-a7af-6ffe6050fca3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "be6d265e-5411-47cc-9323-864f291a84d1"
        },
        "item": {
          "id": "d159e75f-084f-44b7-9e76-5446e0dad868",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "22247473-293b-4ab1-9e19-00107808bab4",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "96d97ae6-3846-431c-b751-91375c84bceb",
        "cursor": {
          "ref": "954468ed-cc21-4680-800a-d8ef76586503",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "cecdd2a3-37d6-4333-85b6-c5b0f291c9e0"
        },
        "item": {
          "id": "96d97ae6-3846-431c-b751-91375c84bceb",
          "name": "did_json"
        },
        "response": {
          "id": "60941e78-fc2e-40b0-a095-1e47a7a683fc",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1141238-05fa-4719-ae2e-38890d2d8bb7",
        "cursor": {
          "ref": "f6d694fd-d037-4189-b582-7e2470cf6182",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48d33cc8-1a32-450b-8b17-f27223ccbe35"
        },
        "item": {
          "id": "e1141238-05fa-4719-ae2e-38890d2d8bb7",
          "name": "did:invalid"
        },
        "response": {
          "id": "4e5f19eb-a937-483b-a479-256cf11a01b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1141238-05fa-4719-ae2e-38890d2d8bb7",
        "cursor": {
          "ref": "f6d694fd-d037-4189-b582-7e2470cf6182",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48d33cc8-1a32-450b-8b17-f27223ccbe35"
        },
        "item": {
          "id": "e1141238-05fa-4719-ae2e-38890d2d8bb7",
          "name": "did:invalid"
        },
        "response": {
          "id": "4e5f19eb-a937-483b-a479-256cf11a01b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff38582-e88d-4770-9ac3-ad84a2e322a2",
        "cursor": {
          "ref": "cc0ba5ed-6b94-4531-b1ab-af8fa9a8b9c2",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d3e2f5ba-5fd3-4d51-b65c-a90734c71ecc"
        },
        "item": {
          "id": "6ff38582-e88d-4770-9ac3-ad84a2e322a2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "06fae5a1-4722-4986-ba8a-dfcd327095d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 316,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dcc35c1-199b-458c-9c78-29ceec72dc42",
        "cursor": {
          "ref": "26bc9d17-0cde-4ce4-9243-cac8763b3b82",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "24443510-0827-4fed-a935-1c936140e9c0"
        },
        "item": {
          "id": "9dcc35c1-199b-458c-9c78-29ceec72dc42",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eb2212e6-1438-416e-8dc5-688a0273efa3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306bd4c0-45e3-48df-b0f3-c9b0f95e5676",
        "cursor": {
          "ref": "7b8ce89f-004d-4c13-b170-c0c31562334a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a3dbe2ea-8ed9-46a4-9091-b42deb665dd1"
        },
        "item": {
          "id": "306bd4c0-45e3-48df-b0f3-c9b0f95e5676",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e94eb1dd-b40a-48cb-bdaf-41361c180696",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077ebed7-6bad-449b-9253-912d36febfe4",
        "cursor": {
          "ref": "c0205a12-0676-47c5-93a3-8b2c160169f3",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "43228676-fad1-4b2e-b8bf-de8d20c64fd5"
        },
        "item": {
          "id": "077ebed7-6bad-449b-9253-912d36febfe4",
          "name": "identifiers"
        },
        "response": {
          "id": "65926c9f-8580-449d-a7de-8c2a07215852",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d57ac2-2309-40f8-aee2-6fff79bb0f13",
        "cursor": {
          "ref": "cdbecc1a-97b9-48c7-855e-72c3ef982ad1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "35e2c4d6-75fd-460f-9641-dbc956199268"
        },
        "item": {
          "id": "d4d57ac2-2309-40f8-aee2-6fff79bb0f13",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c6a8abd5-54cb-4c01-a631-81611ef9f744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1de5b7-8ba8-4ec3-b33a-082a6e711b82",
        "cursor": {
          "ref": "ec16c93f-7015-494f-b489-fda2f3330b35",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2566f8da-0e69-4e1d-a0dd-abe7a0078e28"
        },
        "item": {
          "id": "0f1de5b7-8ba8-4ec3-b33a-082a6e711b82",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "37ba095f-ba68-4906-8796-5e9581ae8fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a769733-55df-402d-9daa-eae09401c334",
        "cursor": {
          "ref": "9011bbea-903f-4d4d-872a-30a214bc5b0f",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "45b95847-298c-42c6-a022-c0ff57362cbe"
        },
        "item": {
          "id": "7a769733-55df-402d-9daa-eae09401c334",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c08063d3-bb15-4328-b59b-f3fc7bca205f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd23286d-f08b-4bbb-82ce-f6847cb56ede",
        "cursor": {
          "ref": "785f48e7-c054-412f-a9d5-6cbb653c6cb1",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4a7b3b98-7c2d-40cb-ab2c-e9a8bfb66507"
        },
        "item": {
          "id": "cd23286d-f08b-4bbb-82ce-f6847cb56ede",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fe254c94-884b-4ae9-a94d-19dba6bc8814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b339540c-e125-411b-81b9-e008e93b3f6c",
        "cursor": {
          "ref": "4d624d61-0271-41c4-9dfa-7d7f63b0aade",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4092e735-6365-4522-8381-5cdb3d27aac6"
        },
        "item": {
          "id": "b339540c-e125-411b-81b9-e008e93b3f6c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "509fb7d8-7e87-45d5-a756-fe0b28fe8ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d926ad-616f-455a-9192-5bbb37dae735",
        "cursor": {
          "ref": "248d409f-d168-4ea9-b3fd-2db185047c7c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4ab26346-b783-4fc6-9a04-e1dcb18f1be1"
        },
        "item": {
          "id": "42d926ad-616f-455a-9192-5bbb37dae735",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "18aa7af2-b1c6-4590-be6f-291bb2e754b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39b9af6-1289-4e27-ab18-fffa05a8cba9",
        "cursor": {
          "ref": "42071264-6324-47c9-a06d-6a283f10831a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d3443c34-b43b-4576-abe8-cca8ea11c7c4"
        },
        "item": {
          "id": "a39b9af6-1289-4e27-ab18-fffa05a8cba9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "955ced2f-c7c7-4345-8ab2-938a0f06e5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f96056-6987-4eda-a74d-f569f3b06e82",
        "cursor": {
          "ref": "c3fefae4-b92b-47e3-b0fc-e8e70d92e28e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8c8c7f43-09f2-4549-92aa-68fac7521591"
        },
        "item": {
          "id": "04f96056-6987-4eda-a74d-f569f3b06e82",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "088b1eea-908a-4760-ba3e-7dd102e541ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e57377b-5114-4f6e-b8a7-961614169230",
        "cursor": {
          "ref": "781ce8c1-4496-4acf-aa33-9bef339759c1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6d0836d2-b49e-46bf-8d88-3205a96e03fe"
        },
        "item": {
          "id": "2e57377b-5114-4f6e-b8a7-961614169230",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "04628539-47ce-49e4-b742-08f225d4fbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8cb622-5037-4a38-af39-496c77d24b40",
        "cursor": {
          "ref": "966919f1-b154-4ad5-9df0-023ac6515d5f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b82d6741-d248-4b49-9ba4-7df0f1365c1c"
        },
        "item": {
          "id": "9a8cb622-5037-4a38-af39-496c77d24b40",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fd882fe4-c44c-4d2e-bd5e-5f0648a6a689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0c8a8b-1e4a-4bc6-975d-61a1ceea0ac9",
        "cursor": {
          "ref": "5beaedde-ecfe-4df1-bdc1-42ded6612fa2",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1b357287-79de-4c93-acb0-e69a51a4f757"
        },
        "item": {
          "id": "1e0c8a8b-1e4a-4bc6-975d-61a1ceea0ac9",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f4bdb3f7-171a-4908-b4c5-7eaa83ec24b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "510482ee-ae38-4f2c-ad64-0ef866b03a3e",
        "cursor": {
          "ref": "d78f4d76-f174-4664-ac55-1337b1e7135f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0fa6211e-caff-447d-8cb6-ffa3dc3c8ca6"
        },
        "item": {
          "id": "510482ee-ae38-4f2c-ad64-0ef866b03a3e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8cdbe12c-7142-4eb8-8d90-0bd2288ba36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e64bf6f-ea05-4698-b31e-6aaf4ad38030",
        "cursor": {
          "ref": "3fe5e9a5-f447-4f47-867d-dab1e40ec500",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5baf1434-f4bf-4461-b68d-6778d28cfc08"
        },
        "item": {
          "id": "2e64bf6f-ea05-4698-b31e-6aaf4ad38030",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e63d52a4-1ead-49ad-a2d3-44662c59f4ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec1c0dc-34bf-4934-a711-45f1eb506b3c",
        "cursor": {
          "ref": "2cfba251-a4f0-49a2-ba9d-e55f0a0906e8",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c86a7fce-cce5-4267-840f-25fb5708d9d9"
        },
        "item": {
          "id": "bec1c0dc-34bf-4934-a711-45f1eb506b3c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "84b2cded-5682-40c6-aac7-eaaea7184498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587be5cb-abc6-496b-8ca8-ea03eb609607",
        "cursor": {
          "ref": "dd53d009-a61f-440d-b685-2759b8c59811",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e9b8db5c-d100-42a9-bdf8-d894bfcb9d70"
        },
        "item": {
          "id": "587be5cb-abc6-496b-8ca8-ea03eb609607",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "46d5c14e-49cc-46fc-be8c-ca3c8f47b233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e145a9da-bc36-42f8-a3a2-12eb6517531a",
        "cursor": {
          "ref": "1b29a251-f1ad-4b67-931a-1ddf64900592",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a8d708b9-6181-4af6-8534-e3ab1b710984"
        },
        "item": {
          "id": "e145a9da-bc36-42f8-a3a2-12eb6517531a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f1f3dd85-bc72-44ad-b5cf-8bf4449f75e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86a7b8f-d8ff-4117-a863-7c160e1be0e8",
        "cursor": {
          "ref": "2a8492ab-0780-4734-b049-fce301d75af2",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e811eaf0-871b-4a99-b78b-b5c17ec4ee4a"
        },
        "item": {
          "id": "a86a7b8f-d8ff-4117-a863-7c160e1be0e8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "93dff284-95e8-4320-a5ad-5b1c6afbe687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "201ba5a4-fde9-47bb-bc8c-93b3d5471c9d",
        "cursor": {
          "ref": "3356b9b0-b345-49de-b7cc-da8f05611826",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "9dbc7657-7a09-4c3a-8fd6-4c275f40aca5"
        },
        "item": {
          "id": "201ba5a4-fde9-47bb-bc8c-93b3d5471c9d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3c9b45ca-983a-4006-9115-3c070d43c65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656d337d-81c5-4d17-9db4-609c57dd31ab",
        "cursor": {
          "ref": "1ea82542-79df-4ec4-9e9b-78832d528aa7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8cf7f0e9-29a9-45cd-8ca2-0b4d9948c7ac"
        },
        "item": {
          "id": "656d337d-81c5-4d17-9db4-609c57dd31ab",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b97e3dfa-7b42-459c-985d-28d7fe6b8565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6789caf-84b3-4d2b-a387-d2c424bbc6dc",
        "cursor": {
          "ref": "4a832484-abf8-471a-bb20-74720496b6c7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "46c8b6c4-237c-4413-9d9b-72d9b7027b5a"
        },
        "item": {
          "id": "d6789caf-84b3-4d2b-a387-d2c424bbc6dc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "03b98d27-6e5a-45c4-94ef-a31078aef066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8929305a-e989-4471-a899-040c116e2bcd",
        "cursor": {
          "ref": "b5aa31fe-0053-4000-9252-0888588b8d3a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "44eb1284-2af2-4983-89d4-11e56306f396"
        },
        "item": {
          "id": "8929305a-e989-4471-a899-040c116e2bcd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ecaa4160-610b-429a-8301-459c7bff8267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a4ba5bc-0124-4b6f-b16e-577cf465620c",
        "cursor": {
          "ref": "62492c2e-13d6-4c04-a289-dbefae7487d7",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e254176-e2c6-419c-b9e5-13184a86d89d"
        },
        "item": {
          "id": "6a4ba5bc-0124-4b6f-b16e-577cf465620c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e96ca45d-365e-4559-a3cc-3e6a161ac287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a4a61a-f05b-40b2-9e8a-5446705acc34",
        "cursor": {
          "ref": "f0f044d9-e20e-4645-b73b-06d2f27f35aa",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "058477bc-00d1-406c-8714-2487d5c300db"
        },
        "item": {
          "id": "64a4a61a-f05b-40b2-9e8a-5446705acc34",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "513417c6-7cb4-4410-b956-5e8880250bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed12c532-64a5-4f49-927b-622dd6692c59",
        "cursor": {
          "ref": "47d6c21d-5e9c-4d82-93af-78fe986e55ed",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1cb4cd53-39bf-44de-bc34-b8bffd3b03e4"
        },
        "item": {
          "id": "ed12c532-64a5-4f49-927b-622dd6692c59",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0730705e-352d-4c5b-b7c1-c71c24cb69d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d5a065-1a75-4595-89dd-bf04a26831e2",
        "cursor": {
          "ref": "338a0288-19f0-4214-b6d3-5d43c54895ba",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "57d0f70e-10c0-4be5-bf56-777e12e47643"
        },
        "item": {
          "id": "b7d5a065-1a75-4595-89dd-bf04a26831e2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3d785909-6994-4b00-83de-5d0276f91e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b85373c-3614-4110-a7ab-07112e5c77ec",
        "cursor": {
          "ref": "1abbc0ba-8002-4b83-85f1-d9973f202ab5",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "67b61abc-d57b-4dd4-b7f4-fac9f835e81e"
        },
        "item": {
          "id": "7b85373c-3614-4110-a7ab-07112e5c77ec",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "388a2195-5a7c-4546-a590-8f89e366a453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dde4b3-04ec-4424-9f7d-b8909ebdf527",
        "cursor": {
          "ref": "335cb103-391a-4312-99c5-b4facc70307f",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1d1d149e-e0b8-4c36-8ab6-0a7c09d37e20"
        },
        "item": {
          "id": "e7dde4b3-04ec-4424-9f7d-b8909ebdf527",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c4755c45-1393-4644-bd03-7abaaa755471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dffc089-d56c-4ee5-a608-17aeedb0c547",
        "cursor": {
          "ref": "5a4ed74c-e3eb-4d49-aad4-7d9d0b11598c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c0336fe1-282a-4b7c-b418-f69756716eeb"
        },
        "item": {
          "id": "0dffc089-d56c-4ee5-a608-17aeedb0c547",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e31757c6-57ee-47dc-97d7-c4417a10d94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e4e2b3-fb62-4cd9-8b47-480b2c1300e5",
        "cursor": {
          "ref": "aff8d7c5-b799-45b9-a26a-224839ddf9e2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "58988af9-a83d-45ad-8b8e-ce9641de5ded"
        },
        "item": {
          "id": "f6e4e2b3-fb62-4cd9-8b47-480b2c1300e5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e7c60a33-ad11-4704-94a5-6b8cdb0ca3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec07744-27d8-4f20-b94b-db05ae6ccffd",
        "cursor": {
          "ref": "5fe8218c-cf46-49cf-b1e7-0901f957eec0",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a6363435-7741-4690-9f12-e1158ff39087"
        },
        "item": {
          "id": "1ec07744-27d8-4f20-b94b-db05ae6ccffd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "28a01347-332f-4950-b1c2-266861922b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b015f0c-5f16-4a6d-8a0c-2b4f9682d2fd",
        "cursor": {
          "ref": "200c28b7-0990-493a-8986-6f5861832cda",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3892083c-ebdd-48cd-8d3d-116845602b03"
        },
        "item": {
          "id": "8b015f0c-5f16-4a6d-8a0c-2b4f9682d2fd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "7c3e0860-3cbb-46e0-a11f-c4f8cf3edcc2",
          "status": "Created",
          "code": 201,
          "responseTime": 643,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b3403bda-7614-4a4f-b8d7-c4eed6190f71",
        "cursor": {
          "ref": "4a63c4ac-2955-45b8-8917-30d927359832",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6fe0021d-6f26-4915-af26-6cdf9400a640"
        },
        "item": {
          "id": "b3403bda-7614-4a4f-b8d7-c4eed6190f71",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d501043d-c516-438c-9d08-f778581f6623",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "939e040b-5c00-41ba-aab1-49e043f6a902",
        "cursor": {
          "ref": "1cab773b-b009-4687-8602-256624d94173",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d9656d03-89f1-4b27-a7a9-e44384cbccb9"
        },
        "item": {
          "id": "939e040b-5c00-41ba-aab1-49e043f6a902",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "02facedf-34dc-47a9-ba39-6d6f9f3586b4",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "88bf749e-c407-4ad4-8dee-d16b2f963890",
        "cursor": {
          "ref": "d6e07ea3-d325-4b9a-aa43-03d10d8487f7",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "af68fe19-ce6c-435a-8ffe-600b95431d76"
        },
        "item": {
          "id": "88bf749e-c407-4ad4-8dee-d16b2f963890",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d64d68fb-9a8b-4e13-a883-41323c540e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c3d370-b39f-4533-80a6-4c506f890d57",
        "cursor": {
          "ref": "ec4a8502-4a54-44a1-9846-fa9b6271ba55",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3bd189db-96ab-4468-8c5a-b1d7d6c27391"
        },
        "item": {
          "id": "a4c3d370-b39f-4533-80a6-4c506f890d57",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f0618918-1e48-479b-8ae6-4425acbce3be",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "067d6afc-c70f-412f-8f52-63691f9a94b2",
        "cursor": {
          "ref": "c0defcc8-3368-4b06-804c-618628f3f528",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0986f6c1-1f27-42ae-877c-39d8e5be7ac6"
        },
        "item": {
          "id": "067d6afc-c70f-412f-8f52-63691f9a94b2",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6906758d-d58a-413f-9fc2-9b399a5de993",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4a131ee5-21f3-4ea8-8e92-de34b8598a79",
        "cursor": {
          "ref": "47dbc6f3-6939-4fc5-ad86-920113f860ce",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ddd188c5-7477-4845-9e16-de317909cd60"
        },
        "item": {
          "id": "4a131ee5-21f3-4ea8-8e92-de34b8598a79",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d7aefd63-6584-4eca-a168-c24063dd0074",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "941ddc96-8363-429f-b7b6-d4974e4bc5fd",
        "cursor": {
          "ref": "c0a3fc9a-af67-43cf-8ff4-9e4059a430b3",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0f89fc3d-27d9-4784-a0a5-6c05fb7abb8e"
        },
        "item": {
          "id": "941ddc96-8363-429f-b7b6-d4974e4bc5fd",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7b3976d2-53d3-4cd5-952d-6b3c00f598c2",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "782e7cad-674e-47e7-b0b6-7c9add8a6f99",
        "cursor": {
          "ref": "8a358ea5-0824-47b2-8e71-5ab783cc4969",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "35bfa77e-c6b4-4a97-8bec-98536cd34965"
        },
        "item": {
          "id": "782e7cad-674e-47e7-b0b6-7c9add8a6f99",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9d3fedc7-69d9-4225-9c0a-706740d142d2",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7ca744cd-9c76-4835-b040-bd8a4255360c",
        "cursor": {
          "ref": "0d2b2268-9cef-47d7-bea5-0208b3a60d9d",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ca66c648-8456-40e1-a51c-6cc9e3c73718"
        },
        "item": {
          "id": "7ca744cd-9c76-4835-b040-bd8a4255360c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ef4d73f0-bf0c-46d0-bc17-482eef8d4d35",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "258cc17b-0e7a-4163-9b94-5ada0af126fe",
        "cursor": {
          "ref": "f994b424-b1b6-425d-8034-d4ea64de01d1",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6ac03a44-f0f3-44c8-a027-7dbc65e9f87f"
        },
        "item": {
          "id": "258cc17b-0e7a-4163-9b94-5ada0af126fe",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "532fd2f3-0a99-4dd3-a7cc-cef9712ce931",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1ec7280d-c100-4608-af51-64c891b03955",
        "cursor": {
          "ref": "e7140c7b-36be-40b7-9990-91915bdf6f1d",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "56352439-acfb-443d-927c-0c9fe0bdd644"
        },
        "item": {
          "id": "1ec7280d-c100-4608-af51-64c891b03955",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "200ce1a3-8adc-43ff-9a4a-e89dc59e72ee",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a4494d46-6d94-441c-9863-4181be9dc926",
        "cursor": {
          "ref": "b400b926-29b0-43e3-ad40-6f9968578f68",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f83a914b-b1d9-4d35-968e-f3467a9af21f"
        },
        "item": {
          "id": "a4494d46-6d94-441c-9863-4181be9dc926",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7b32b905-de53-4836-98fe-fe29d2b75d8d",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "50e5cba5-148e-493d-abd5-964cd9250b5e",
        "cursor": {
          "ref": "cb9b4576-c240-4c16-8a08-dfc1e719cd1b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "54f32599-f889-443e-88fd-f011cea1282d"
        },
        "item": {
          "id": "50e5cba5-148e-493d-abd5-964cd9250b5e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fe3f84b9-4650-41db-8bb1-1f82a9f130b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f9fda4-52ac-4513-8c92-ed275a8340aa",
        "cursor": {
          "ref": "4419680b-3ca2-44e7-af89-8e02ebc94d6e",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "dc3aaf61-ea51-4bae-8a0e-abf7325bae05"
        },
        "item": {
          "id": "89f9fda4-52ac-4513-8c92-ed275a8340aa",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3e3c6910-db41-4a44-9235-9c7b6d348f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ed9817-e924-4886-b20a-c40fda0a74ab",
        "cursor": {
          "ref": "48d4aea7-7c5e-49f2-8846-4fc92eccae6c",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d34ea5d7-7e6c-477b-a87a-48b5ffd6d9f6"
        },
        "item": {
          "id": "19ed9817-e924-4886-b20a-c40fda0a74ab",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cda380da-5866-4f36-82fc-0c297bc5edf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e625f158-7925-4ea4-834f-c071a418ba15",
        "cursor": {
          "ref": "662233e2-8a20-42b0-a226-434e0c29255e",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e81938be-3667-4cac-910e-0d88df50663a"
        },
        "item": {
          "id": "e625f158-7925-4ea4-834f-c071a418ba15",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e7952fba-8270-4b65-b607-e9cb04b0466e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebf35cd-6d4a-4898-9bcf-bd8e2e4baed7",
        "cursor": {
          "ref": "576d6d10-e268-4a3a-ae0e-77a3f862ad8c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c4a3a7c1-36e2-4494-885c-98521fdbba96"
        },
        "item": {
          "id": "8ebf35cd-6d4a-4898-9bcf-bd8e2e4baed7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5e4614fa-bc88-49e9-a2b6-b520add99b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fc6260-7fee-4a24-8557-933cff63604c",
        "cursor": {
          "ref": "7dbef79e-c948-426d-83d0-16f493c91b07",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "31cc0f00-424c-4d17-bce6-ec1f470e25ac"
        },
        "item": {
          "id": "b9fc6260-7fee-4a24-8557-933cff63604c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c3826fd3-185c-4e00-85ee-a323cfa0363a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dcecad-caef-45ff-ab22-48cd5e5c6a64",
        "cursor": {
          "ref": "26eebc7b-aae1-4883-942b-b6ae1cfa8bef",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f0092a05-aed7-488d-be10-11502578e5c5"
        },
        "item": {
          "id": "09dcecad-caef-45ff-ab22-48cd5e5c6a64",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "caeedf7d-8a41-429f-b7a9-eb4bece71815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73676fc5-180c-40d2-b55e-05c393c66623",
        "cursor": {
          "ref": "9d0022a5-9fe4-41bc-a464-25b02cbcd0e6",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "587259da-27f1-4eb6-8efd-7d0b46c06476"
        },
        "item": {
          "id": "73676fc5-180c-40d2-b55e-05c393c66623",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8848444d-66bd-498d-aade-b57e8e8e124e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599fc749-57ae-4409-8fe2-ba69e7bf6dcd",
        "cursor": {
          "ref": "3c8ac6cd-340e-470e-a986-313e71fb722e",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f49f4620-8a40-43e4-9709-10de49416e7d"
        },
        "item": {
          "id": "599fc749-57ae-4409-8fe2-ba69e7bf6dcd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a5ce1be4-03e9-4cc7-82a3-90eb3c7216d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a66b33a-dd95-434d-bd3a-40a83b1e5c68",
        "cursor": {
          "ref": "e3f97091-480a-41d3-a02a-e6c3c144d059",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0233b8cb-8e3e-4a6a-894b-279a1851e2ba"
        },
        "item": {
          "id": "1a66b33a-dd95-434d-bd3a-40a83b1e5c68",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cac26277-306c-4cfd-8384-7674ac1badf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e1694e-a789-4a76-aa56-3795b3385732",
        "cursor": {
          "ref": "6667c3d5-98a2-41b8-83c9-b7e7aff15a07",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "940e2d3b-d6b5-4a9a-9493-7b614e88206f"
        },
        "item": {
          "id": "91e1694e-a789-4a76-aa56-3795b3385732",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4d8f7c21-c40d-4f69-942a-c8fe28ac0da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36acfe77-f4bd-47d1-8770-6884983820f6",
        "cursor": {
          "ref": "e5148cc4-6361-45fc-948a-60bd7f7c8906",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "59b65796-f52e-4b51-bca6-d72fbdc662b7"
        },
        "item": {
          "id": "36acfe77-f4bd-47d1-8770-6884983820f6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "13ce9a10-01ff-4c00-ae71-1f88b88b2b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055559a1-6e85-4024-ad24-1cc26228a84a",
        "cursor": {
          "ref": "d246bfe5-1bd6-4823-85bc-06f7003d6beb",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "81855a84-df7a-48a8-ae49-44da1cb7247e"
        },
        "item": {
          "id": "055559a1-6e85-4024-ad24-1cc26228a84a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "25cab8d0-a406-41dd-841e-97532d7863c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "847c891f-8c08-41ec-8455-45e947141bd4",
        "cursor": {
          "ref": "984f9dee-82c0-4f2c-b6f7-dd312e17a321",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "790a8308-397f-4e3e-8cdf-5748d8d8360a"
        },
        "item": {
          "id": "847c891f-8c08-41ec-8455-45e947141bd4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7d72131b-9116-494e-b339-1aa837ded19e",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b5803d31-0f3c-4195-a707-e76f63187a9f",
        "cursor": {
          "ref": "00a9f2d9-964e-4930-a7a1-a0041b2c2935",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a34c39b7-f982-4e10-b918-5c8e591c8fe9"
        },
        "item": {
          "id": "b5803d31-0f3c-4195-a707-e76f63187a9f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "99c120a7-2c61-44e2-a7fe-228675ac1542",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9ae513da-4221-404b-a0e5-4791d65c1437",
        "cursor": {
          "ref": "7aac77f7-50a2-4bb6-aad4-5d263569338e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "cda78ed9-0e63-4691-9c7f-bd47822b8d1e"
        },
        "item": {
          "id": "9ae513da-4221-404b-a0e5-4791d65c1437",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6a8e9db9-2ddf-4ee7-8f66-2985256e1b31",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "409e8ea5-aa41-4ba9-9118-728c866d6d4d",
        "cursor": {
          "ref": "29e5a10c-c33b-4560-ae17-04b03b3f2047",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1ad81a14-fd42-4d1d-a360-e0b2803bae97"
        },
        "item": {
          "id": "409e8ea5-aa41-4ba9-9118-728c866d6d4d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7288c65d-6325-40c6-ad22-f944ec0aedf3",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "42a48e9f-5e45-46ab-a6c0-77b31d3237d3",
        "cursor": {
          "ref": "33e51d63-c180-43fd-af00-d34437ccff2b",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a3515892-950c-4152-848c-7276fb35b2bb"
        },
        "item": {
          "id": "42a48e9f-5e45-46ab-a6c0-77b31d3237d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d8493bf4-ff66-4a9e-830d-cc4c2d589bb7",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "849258fc-ca5d-41cf-a591-79f4155c0046",
        "cursor": {
          "ref": "ec205ec1-3d63-4823-b19c-141d19312307",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c1f24b30-c799-46a1-9062-5b745d32ab87"
        },
        "item": {
          "id": "849258fc-ca5d-41cf-a591-79f4155c0046",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7690fa9d-1f8e-41d9-bc77-d8ee8db57149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02493163-71ac-4571-87e6-1808f0ac9d0a",
        "cursor": {
          "ref": "92298014-ce19-4f1a-b4d6-a1992730f915",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8ca59d18-489c-472b-8f0d-2836ab318b68"
        },
        "item": {
          "id": "02493163-71ac-4571-87e6-1808f0ac9d0a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "54b7876d-0ed1-4174-b318-102c129712c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9678e5e6-537f-45f4-b76d-f93068281b18",
        "cursor": {
          "ref": "5126e7f6-028b-4604-b2f5-cfd2b969c8a9",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7572c48f-a3d0-43d1-a5d3-4ad2aba894e0"
        },
        "item": {
          "id": "9678e5e6-537f-45f4-b76d-f93068281b18",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "728504d4-6b6b-4452-a27a-fdf50ed5861e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6358c6a-4f0f-47b2-9773-a9fd5917a5ef",
        "cursor": {
          "ref": "cf4619fc-cc00-4b8d-afb7-5c7b7da402be",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a4a6b965-8976-4768-9961-7409388b298e"
        },
        "item": {
          "id": "d6358c6a-4f0f-47b2-9773-a9fd5917a5ef",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "22d0358d-bec5-44d0-bb63-b36ab068c567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f507e02-7b1c-4e49-b688-ca2fd9f89a88",
        "cursor": {
          "ref": "76d04afa-f2c7-4004-b070-ca01c7aef6b3",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "008d75c7-7e55-4f75-a5b9-b52f8b9bcfe3"
        },
        "item": {
          "id": "5f507e02-7b1c-4e49-b688-ca2fd9f89a88",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f682528f-80ed-40a6-9b22-345eb40b1f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc20c4b2-47ea-4caa-8392-d27d605779f8",
        "cursor": {
          "ref": "df720fef-df4f-48d2-9317-f66bf6baa1d4",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3fb2bf74-ca50-4a26-9cf1-ac08e587237e"
        },
        "item": {
          "id": "cc20c4b2-47ea-4caa-8392-d27d605779f8",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "906fd3ea-fae8-4e87-83e2-150d368d4f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0cd19b-ddca-488d-9a18-f864f741b60e",
        "cursor": {
          "ref": "d7a3805c-7948-45ed-bd31-448b1d9fdaea",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a504721a-2105-4e8f-b202-67b56b5f7243"
        },
        "item": {
          "id": "ff0cd19b-ddca-488d-9a18-f864f741b60e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "225d4fc9-a36e-4e1e-88f2-690b45bc61a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff3a0de-b456-4f7d-a1a3-a11cd2a81dfe",
        "cursor": {
          "ref": "e3c38f94-a1a6-4f4e-876b-99be326dc6c3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "03537e78-535c-4af9-a4ec-5662d477820e"
        },
        "item": {
          "id": "6ff3a0de-b456-4f7d-a1a3-a11cd2a81dfe",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "14c8e179-a606-4725-9850-3e41f87936c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78592e82-49fe-4008-9e82-a6d9d7c3f7ae",
        "cursor": {
          "ref": "3c06ba09-cf71-4043-a9fa-2c0995f11b82",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "eb50fe45-dd1c-4b6d-a0a4-8bd2b2188f90"
        },
        "item": {
          "id": "78592e82-49fe-4008-9e82-a6d9d7c3f7ae",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8d5eec92-20f5-4e45-9ae7-3bf6b9a0c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b3e1d9-9ca3-4f8a-9487-01c3773564c7",
        "cursor": {
          "ref": "50d55830-9b25-4a40-bbca-a23c285f105b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5d410e25-025c-48cc-b363-2b4eb856764d"
        },
        "item": {
          "id": "64b3e1d9-9ca3-4f8a-9487-01c3773564c7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "eb6d2e8d-c6b8-445f-9889-8bd5940ff83a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab337dd3-760b-4785-b494-9b803e0911ef",
        "cursor": {
          "ref": "bae999df-7e87-4448-a647-8b5c2c21ea82",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5e7b36c4-4f4b-430a-9782-25ed55b2cee4"
        },
        "item": {
          "id": "ab337dd3-760b-4785-b494-9b803e0911ef",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2cf255f5-0dd5-4419-a6f1-8836e692b4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48b6615-f819-49fa-9d54-6f31a89daeeb",
        "cursor": {
          "ref": "76de67a6-7822-4542-939b-b597483d4693",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "76b03438-36c7-4581-8821-cc4164f22a55"
        },
        "item": {
          "id": "c48b6615-f819-49fa-9d54-6f31a89daeeb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "43cc16d8-85b5-4976-be55-31152da8728e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b080b092-5aae-48ea-855c-4bb2db5bd718",
        "cursor": {
          "ref": "4812c81a-e717-4ab9-a690-a7a1f1546eb5",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b9593b9a-18f4-4755-87e9-60c59b84e6de"
        },
        "item": {
          "id": "b080b092-5aae-48ea-855c-4bb2db5bd718",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "62b2ba50-030a-42d0-9181-8f129c895e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22c129d-9e7a-416f-ac8a-9f609c25489d",
        "cursor": {
          "ref": "c81d06fa-3a92-461e-b71b-14841ae426c5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e2b93a25-0ae7-434d-a0fc-6ac344c0fc45"
        },
        "item": {
          "id": "c22c129d-9e7a-416f-ac8a-9f609c25489d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "c635368a-2375-4c3a-b763-41554d1719fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c23adea-07fe-408b-9c85-ed08d3251bc3",
        "cursor": {
          "ref": "19c607df-10ed-47d4-af12-7a74be6a1f3a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e04976d0-7938-4117-8b5d-0606bb7acd1e"
        },
        "item": {
          "id": "0c23adea-07fe-408b-9c85-ed08d3251bc3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5c52631d-de52-4b33-b068-2ff1eaa6addd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4a3f9d-b9e7-438c-bf41-c32dc2e0bfaa",
        "cursor": {
          "ref": "9c0c5e4e-ec80-4f3e-9a9d-3579fc08fb80",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bc3691be-5e72-4de2-a527-33edaada4867"
        },
        "item": {
          "id": "5a4a3f9d-b9e7-438c-bf41-c32dc2e0bfaa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "223e17ae-0f8b-4dcf-87b5-f882a41e519e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8734b7b3-a889-484b-b6b2-7b0a052451a4",
        "cursor": {
          "ref": "d1ea8c2f-58b8-40ba-a2ae-827971b08bcc",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b2fb975c-1992-425d-aaea-0470dd57ff1c"
        },
        "item": {
          "id": "8734b7b3-a889-484b-b6b2-7b0a052451a4",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f5d5afb2-4ae3-455a-9332-f1afaec01804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65749dc5-47a0-4f22-abcd-28408ee1f221",
        "cursor": {
          "ref": "6a2504cf-8cf7-4721-95a2-49bce6c09021",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6e40b93a-47ea-4aa7-8938-808c287a8999"
        },
        "item": {
          "id": "65749dc5-47a0-4f22-abcd-28408ee1f221",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f79d955f-7fb7-4625-afbf-d87a79b4d279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6dcf93-dfae-47fa-87b3-69a466cc3170",
        "cursor": {
          "ref": "8f9d0e1d-e0f5-4cc5-8849-ad7ceb12adcf",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4317fe63-cf35-454d-abc9-5eea02065e10"
        },
        "item": {
          "id": "bc6dcf93-dfae-47fa-87b3-69a466cc3170",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d17db031-9ae0-45a5-ae63-951e68627c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73ec2a9-d11d-44ee-82c4-2f928f7f7b05",
        "cursor": {
          "ref": "545b23d8-e4e0-4686-89ae-0d2d363b443d",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f5804e01-9117-401f-8cd5-2743fbf1a5ab"
        },
        "item": {
          "id": "a73ec2a9-d11d-44ee-82c4-2f928f7f7b05",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0d646b78-e681-43c0-989d-adf48da1b6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f383f7f-af6d-41a0-b469-e99ada19a33a",
        "cursor": {
          "ref": "6e5c095c-b4ea-49a2-816c-25e474ceaf6c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a0a51a68-a208-4af0-a60f-658ac502e15c"
        },
        "item": {
          "id": "9f383f7f-af6d-41a0-b469-e99ada19a33a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b1f158e5-f116-4592-a707-af5995676a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762e5a3d-7347-4215-9d47-a228237eb827",
        "cursor": {
          "ref": "cbb442ef-e212-4bdd-9273-5358c598da5e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e684964e-e652-4279-8053-c9867714dffa"
        },
        "item": {
          "id": "762e5a3d-7347-4215-9d47-a228237eb827",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "39537031-c824-4c05-b14a-c09e9c8f07d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cdf9dd3-3938-40c6-96b8-f95121b2bca0",
        "cursor": {
          "ref": "d99cf715-70b3-40c9-96dd-af7c1e9dd6a7",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "30abd41e-b52f-4f46-a888-829c08ada2aa"
        },
        "item": {
          "id": "9cdf9dd3-3938-40c6-96b8-f95121b2bca0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4ba73467-fef5-4ec7-a351-7e86130fbb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31232b7-1d29-49cd-a15f-ee04e3ba5369",
        "cursor": {
          "ref": "df5652ff-5cd5-41f8-9391-7420ab6057ed",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6b3281a9-0990-4282-8796-02e2c5cbf83c"
        },
        "item": {
          "id": "c31232b7-1d29-49cd-a15f-ee04e3ba5369",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "81d3f062-4e6b-4833-9659-121aae3c8187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2968c99a-cece-4333-b821-2667e5b964ec",
        "cursor": {
          "ref": "db24990b-5593-450f-a3ac-f690d18e36e6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7ee9bec5-d7fe-4d33-8f66-3f4c6e0c0a77"
        },
        "item": {
          "id": "2968c99a-cece-4333-b821-2667e5b964ec",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a39c0f26-b977-4847-b5e4-7632e6fcff87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1e3758-7b9b-4827-bec7-39ff9b30ee1c",
        "cursor": {
          "ref": "453c051b-37e0-4173-a3ca-abebed7da920",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "2c845f4a-f91f-4f5a-b99e-34ea5c0f48ad"
        },
        "item": {
          "id": "df1e3758-7b9b-4827-bec7-39ff9b30ee1c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "31cfe05b-3063-4046-b8a2-9c2c23fcb8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580ba7bc-7eae-48d6-a63b-9869a77cd51e",
        "cursor": {
          "ref": "bb9a25dd-a13b-4524-a06a-2d2fb79722de",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2c6bd0f5-cb48-40d9-a997-0a2a2c9ff757"
        },
        "item": {
          "id": "580ba7bc-7eae-48d6-a63b-9869a77cd51e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8a17ba3d-e88b-44ab-b2d1-0cc5dd41122d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bd248a-c3c8-451d-9e51-ae8027a2cd38",
        "cursor": {
          "ref": "605bff6a-17bb-4b0b-ac70-74adf977a088",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8d81e9c6-6dc5-4c2c-a8f9-80acd6ae7391"
        },
        "item": {
          "id": "75bd248a-c3c8-451d-9e51-ae8027a2cd38",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9e633dbb-8b42-4f02-9635-2da36429ced5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2caf3f-2fe0-4722-9375-7564b0685d02",
        "cursor": {
          "ref": "31d8bea7-a9f3-4f2d-b946-b1dcb4c238c0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ec39bc5a-7cb8-4df3-a2b1-af67e6de6451"
        },
        "item": {
          "id": "bc2caf3f-2fe0-4722-9375-7564b0685d02",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5f68b19c-0b30-42f2-bbf6-2cd46fce75a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49177b7-1ba2-4f72-be3a-ced696551241",
        "cursor": {
          "ref": "382ab683-06b4-49d1-824d-e8cebb5d4a55",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "23dc13d7-7a60-43fe-b3ce-7a221506d6b9"
        },
        "item": {
          "id": "a49177b7-1ba2-4f72-be3a-ced696551241",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "04202369-a5c6-4b7d-ba0b-9803d28f6767",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63eb3d5f-801b-48f5-b186-13172bac2c2c",
        "cursor": {
          "ref": "a4ccf52b-6a64-40c5-bb2e-095b971c88c8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c68aa92e-d897-4c68-8cd6-f037dbf44325"
        },
        "item": {
          "id": "63eb3d5f-801b-48f5-b186-13172bac2c2c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "4f9244cd-2470-4755-a62f-03bfd1721254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7efd105-1b58-4289-a29f-e2e866b7b6e3",
        "cursor": {
          "ref": "089c3105-96a6-4d49-8b4e-77f28146ff91",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9e88bd82-903d-440d-9bdc-99a496c782a8"
        },
        "item": {
          "id": "c7efd105-1b58-4289-a29f-e2e866b7b6e3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fbf3f468-195e-461e-b8db-d197567991cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76921832-a09f-4cca-8c53-970ac809de77",
        "cursor": {
          "ref": "24a6654e-9fe0-4b7c-8d15-818c8c1a5758",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aa5c6d8e-64e5-461d-b4c5-92e70d5f2669"
        },
        "item": {
          "id": "76921832-a09f-4cca-8c53-970ac809de77",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8e75188e-2fae-4c94-adf6-3f6cf8493295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d4f963d1-3ba9-4f46-92fb-386de60fbb7a",
        "cursor": {
          "ref": "e957ba51-9fa8-4fdf-b373-b8e91697d59b",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "87a4d63c-6bbf-4f50-81ae-cbbff274e7ce"
        },
        "item": {
          "id": "d4f963d1-3ba9-4f46-92fb-386de60fbb7a",
          "name": "credentials_issue"
        },
        "response": {
          "id": "07aeff2e-6c1f-442d-b8b2-72b9e9cc9414",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd703f-da73-415d-a0a0-733f0a17f90d",
        "cursor": {
          "ref": "aecd5ca1-45f8-4a57-a052-9577afc5eab4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3dfcad31-cf09-4631-b473-a7816d4e87e3"
        },
        "item": {
          "id": "16fd703f-da73-415d-a0a0-733f0a17f90d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "50c5d676-9ae8-4ef1-8218-d09f34301177",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40fe6365-cc90-4b4e-ab38-50dcd4cda41e",
        "cursor": {
          "ref": "c2f5f555-ffb1-41c0-95c2-db91437fe1d5",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f1eb2b35-4de9-4719-b2e6-7ca8cfa4bf4e"
        },
        "item": {
          "id": "40fe6365-cc90-4b4e-ab38-50dcd4cda41e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9f4456a8-7cda-4aa9-adb3-6898fedddb5f",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5ea111-c235-4df5-aba8-e41009339eda",
        "cursor": {
          "ref": "f40e8c95-72ab-446b-ba79-17c3fcb1cf7c",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4bea6854-b738-4816-88c2-cccc1b12fba9"
        },
        "item": {
          "id": "ed5ea111-c235-4df5-aba8-e41009339eda",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "44686bf1-c59d-44c5-98a2-6fce075d6feb",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c51398c-fe48-483e-a110-beece279fc23",
        "cursor": {
          "ref": "0a4b8077-2565-4577-a62d-759ad14fde70",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dae2082e-73bf-4b9c-8620-be5d3502059f"
        },
        "item": {
          "id": "6c51398c-fe48-483e-a110-beece279fc23",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b161a176-82e7-4d95-ba8e-b845519aa8e1",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-05T00:37:32.740Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-05T00:37:32.740Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "67b39355-70bd-4695-9a78-e5cade1a7c7d",
        "cursor": {
          "ref": "785623b5-e535-4f98-8355-93d18a07a7f5",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3793bef8-cd73-4293-978f-9da81d533c1c"
        },
        "item": {
          "id": "67b39355-70bd-4695-9a78-e5cade1a7c7d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bbda85e3-a646-47ef-98ef-eafabe912399",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b268c7-1a3f-46c4-a7bd-5ad4e75a35ec",
        "cursor": {
          "ref": "2589ace9-ffdc-42de-8eea-f87a610e587f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a208f3ef-2682-499b-b22f-4e01c0ba7b91"
        },
        "item": {
          "id": "a9b268c7-1a3f-46c4-a7bd-5ad4e75a35ec",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9e1aa290-63bc-4590-b956-91279d1b1138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f60a68c-877d-4184-8d9c-057ef2d23581",
        "cursor": {
          "ref": "5e026f0a-fac4-43d3-a86f-aaeaf3be3970",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "15602101-fd9d-48ed-b48d-95def1d70dbb"
        },
        "item": {
          "id": "0f60a68c-877d-4184-8d9c-057ef2d23581",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a1b245df-9a69-4eb9-b275-294575343af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8138bf07-cbee-4393-81a7-af91bf206a56",
        "cursor": {
          "ref": "1a60bac8-ffcf-4447-8635-78cc020c4ef1",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db7a043c-23e8-4cbc-a7d6-9bf7dcf4e646"
        },
        "item": {
          "id": "8138bf07-cbee-4393-81a7-af91bf206a56",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3c21bad4-5876-4944-8605-c66f3c65a16d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43826d2-0f98-4045-be71-3bca94ced8b9",
        "cursor": {
          "ref": "293b0026-1b0c-43af-bf9e-9a902d3d89db",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f416a73d-7c33-4bf3-978f-3fece481e7a4"
        },
        "item": {
          "id": "a43826d2-0f98-4045-be71-3bca94ced8b9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "28075bba-221f-4ce2-a380-5006890b2d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c00c7a-6955-4faa-a136-75f3c08e9c14",
        "cursor": {
          "ref": "dc05f8af-a58f-4e4e-a50d-a31a36bd90df",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eb7c296b-55dc-4f52-b359-28807cd989e0"
        },
        "item": {
          "id": "03c00c7a-6955-4faa-a136-75f3c08e9c14",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2c586e02-74f0-445a-bb19-11370c9fa265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d34f29d-dd52-43e7-afd9-ba017666cac3",
        "cursor": {
          "ref": "10746e1d-9f9e-4b0d-9965-1d5c192c4bde",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "01f327e9-ea4b-41a9-ad2f-3f8b05d2b7cb"
        },
        "item": {
          "id": "4d34f29d-dd52-43e7-afd9-ba017666cac3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d1243808-f873-4204-88f8-17fe9f8f08d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67203141-adf5-4fbf-9310-4b5ebe5f7d06",
        "cursor": {
          "ref": "5b84619d-639e-48b4-b0f2-5a039e5239f1",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7b939588-7d2a-474a-b934-e40850360db2"
        },
        "item": {
          "id": "67203141-adf5-4fbf-9310-4b5ebe5f7d06",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d163fa77-b080-4785-9909-40639a55c163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e08b3c-533d-41eb-b7db-11d3802faf5e",
        "cursor": {
          "ref": "5633d806-0a71-47d8-83d3-a4d6295ba735",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4acbf97b-9504-4666-9c83-0cbe971b0a39"
        },
        "item": {
          "id": "76e08b3c-533d-41eb-b7db-11d3802faf5e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3c298071-31cc-48ab-aaa3-658976717947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9005b3-ffc3-40aa-8d95-b50bc2ffcb4b",
        "cursor": {
          "ref": "7af366f9-1bf6-4de8-be6f-10e5b2c71a44",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0b72a3ce-9c4e-413f-ac07-d3f3e4edc771"
        },
        "item": {
          "id": "8d9005b3-ffc3-40aa-8d95-b50bc2ffcb4b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "acf0b69e-789c-44f9-8d63-06a57aedb004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "073fefb1-b1aa-416a-8156-b3798daf6354",
        "cursor": {
          "ref": "2918842c-a9e1-4440-bcc7-e10c3470d888",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1463150c-8fb7-4ec3-9148-73db5be28eed"
        },
        "item": {
          "id": "073fefb1-b1aa-416a-8156-b3798daf6354",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a8795b4c-7985-4264-97d7-f6222b54f4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80eade55-902d-4232-9b28-29d4975e8f56",
        "cursor": {
          "ref": "34855cdc-47af-42eb-a112-353e1c45fe57",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "80dc899e-df3d-40f5-82c5-9e7ff1fbc0a4"
        },
        "item": {
          "id": "80eade55-902d-4232-9b28-29d4975e8f56",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad789797-c601-4a25-a1ed-d94514f8bf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06a139d-5955-443e-8fad-e1cd384611b7",
        "cursor": {
          "ref": "9e29964b-9946-4e23-81c3-c40ee4104960",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "510662c7-e80c-4c7b-95ca-adbe251c96c8"
        },
        "item": {
          "id": "d06a139d-5955-443e-8fad-e1cd384611b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d5a6700f-b894-49ac-9dd5-9228e542fdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae1fb26-eb88-42ef-a994-2819023c5e6b",
        "cursor": {
          "ref": "120a3bfe-1e0a-4125-8f9d-d93990684b68",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "53e0c6dc-70ba-415e-a63c-11612b8cd306"
        },
        "item": {
          "id": "4ae1fb26-eb88-42ef-a994-2819023c5e6b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "5d3b542d-a9fb-4529-8851-c4d058733ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6bffad-1305-4995-88c1-97c316049250",
        "cursor": {
          "ref": "0b5ff7de-31ee-46a6-8fc9-56c4e7f3f065",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "40573e58-45ef-4b51-a39f-2506e37668d6"
        },
        "item": {
          "id": "5b6bffad-1305-4995-88c1-97c316049250",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50505ef1-ff46-4f02-87b1-58768b8bf86f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "11f8ff38-efba-45ae-832e-c2046fef58e8",
        "cursor": {
          "ref": "e04e49cc-e499-4e78-a619-808e45abbba6",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6b2c2e61-11de-4053-bbe8-08b217834012"
        },
        "item": {
          "id": "11f8ff38-efba-45ae-832e-c2046fef58e8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7d7f12bc-cbab-49ee-a0ac-f51c2e73a54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5697c96-200d-488c-9dc0-bddd68e986ce",
        "cursor": {
          "ref": "3e21fab4-d9a4-4318-b6b5-25e3fa4c039a",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "deea89b8-3e66-4434-9c7f-95eae6929681"
        },
        "item": {
          "id": "f5697c96-200d-488c-9dc0-bddd68e986ce",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "51a19e9c-228b-41d3-a115-e16b26cbc615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855da500-123b-425a-a525-e1b88a13d0ec",
        "cursor": {
          "ref": "ab74a050-70d1-49c6-ad19-ce9ea9eb7572",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3d8b83fd-4f25-482d-a065-d3b2c6ae5df3"
        },
        "item": {
          "id": "855da500-123b-425a-a525-e1b88a13d0ec",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4c7290a5-2c44-447d-8b85-d5126afbc49f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ad85a0-dcfc-4516-a664-44ffbd7a928c",
        "cursor": {
          "ref": "b21905fa-d845-44eb-822e-8cc418959d04",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ecc34218-4086-44fb-907d-255f1fbb68c5"
        },
        "item": {
          "id": "c1ad85a0-dcfc-4516-a664-44ffbd7a928c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f2f887bf-5306-42d3-82b9-91ec7fc24ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6720fbd3-ac07-46c2-abbb-30825fdecc78",
        "cursor": {
          "ref": "2359900f-78b7-4b7c-94d5-712a8be3a4a0",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f7c930c9-547a-47a6-a8bf-36119423061a"
        },
        "item": {
          "id": "6720fbd3-ac07-46c2-abbb-30825fdecc78",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "91adf5f5-c4ce-488d-9a6b-48e5c7dad3b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5557d63-260d-433b-928b-b6fde7866aa2",
        "cursor": {
          "ref": "be7e5cc1-4110-4409-8b4c-58b1c243db14",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e7974cb1-6546-448c-9a96-526dd387d812"
        },
        "item": {
          "id": "f5557d63-260d-433b-928b-b6fde7866aa2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "10f39670-6726-46b2-83c2-4b44c84a5715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d64503-42da-4609-ac0d-7b3f720c7d4c",
        "cursor": {
          "ref": "bbc59166-8a69-47f5-9ef6-c7b534b9ce64",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "309b9dd1-660a-4d3b-b680-829016b8562a"
        },
        "item": {
          "id": "92d64503-42da-4609-ac0d-7b3f720c7d4c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0eaa6896-e44a-4c50-b2f9-d526c74d5f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9a6ece-2a50-44b9-95c5-5d235bda6892",
        "cursor": {
          "ref": "ec5d10ba-0002-4080-8cc4-d7ba7b262e5e",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2bbeb451-7458-4ce3-9a86-c1c660b7045e"
        },
        "item": {
          "id": "5a9a6ece-2a50-44b9-95c5-5d235bda6892",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ae027345-d014-484a-b459-18bab2c51eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73d0f72c-b4ea-4bba-b260-f889cd607a91",
        "cursor": {
          "ref": "9e59986d-81b4-4b36-82bf-c206d9f7f928",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0064feed-7926-4eb2-9aae-d2182c99f42c"
        },
        "item": {
          "id": "73d0f72c-b4ea-4bba-b260-f889cd607a91",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b2e5c5f6-f981-44e9-b402-326b3a5148a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0e8373-50c9-4cf2-952e-956e095a59ea",
        "cursor": {
          "ref": "cd5f7ab6-66e7-498a-ac48-437ac9920f4f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0d8505ac-e4c6-450b-bb41-dd08ace2b30a"
        },
        "item": {
          "id": "ed0e8373-50c9-4cf2-952e-956e095a59ea",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9edda93b-52d1-43bb-8627-4125cbbc8199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aabf3f62-72b3-4656-82bf-bc8daac09aa2",
        "cursor": {
          "ref": "79be50a7-3df7-4ba2-9697-5f31c680f31f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8126db19-3f9b-443d-a30c-d5732eabf882"
        },
        "item": {
          "id": "aabf3f62-72b3-4656-82bf-bc8daac09aa2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "573fd95c-7166-470c-abaf-0c704d88aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa47cd4-13b6-4656-a645-4e2e0c0b97a8",
        "cursor": {
          "ref": "207d9c1c-f02b-43a2-bb4b-82ab582c8c16",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8651001d-8114-43b3-938c-b07eaaf1acaa"
        },
        "item": {
          "id": "6fa47cd4-13b6-4656-a645-4e2e0c0b97a8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "716648d5-43e4-481b-becb-399d95047c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514f7b2e-b79b-41ce-857b-3430be094878",
        "cursor": {
          "ref": "21b93af2-29b3-4752-baee-ac896ba6ec9c",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0bb12a20-210d-44d9-95c8-99c4458aa387"
        },
        "item": {
          "id": "514f7b2e-b79b-41ce-857b-3430be094878",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "04c6ea37-39ff-4e0d-b57f-f7e62ef8d6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c79fb0-e475-4611-9e7d-d2cc5b6e6891",
        "cursor": {
          "ref": "054650b1-4876-4d66-97d0-7a43008492b3",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d4d5ad78-f8e3-4b03-9d10-867b3d20e8c6"
        },
        "item": {
          "id": "f6c79fb0-e475-4611-9e7d-d2cc5b6e6891",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "48a006fa-c463-45cc-bf40-d8dde80fa2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1317a5e7-c758-4def-8136-1218dfa831a7",
        "cursor": {
          "ref": "f478533e-da1b-4ab3-a08a-31d42e904e15",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "79d9bfbd-b53c-421e-b5fb-46d215cbf841"
        },
        "item": {
          "id": "1317a5e7-c758-4def-8136-1218dfa831a7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fb45202e-5968-4a3b-98f1-479a412d597a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0026658-ee09-4ba0-a521-359c08e633f2",
        "cursor": {
          "ref": "0bfb10e7-7ca1-44e4-8839-248a5f1b0f5d",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "3984cd2c-eb53-4d54-b599-c9fb7864228e"
        },
        "item": {
          "id": "c0026658-ee09-4ba0-a521-359c08e633f2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cb916f28-f105-4a10-9c73-0f65fc56c350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce0c330-c876-497c-82b7-4b3d261cdcca",
        "cursor": {
          "ref": "657f03b4-097b-40ad-a6ca-8c70e463ff5f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "003b263a-70ad-41ab-85ae-f4d36d51788f"
        },
        "item": {
          "id": "5ce0c330-c876-497c-82b7-4b3d261cdcca",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6f074dab-5f8c-4b54-80bf-3cd368e2ff76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4187b8-0bb4-4e8a-81e5-2f0d8e1f29c5",
        "cursor": {
          "ref": "d9822105-5a0f-48ee-9516-e822eb1d48a4",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "de6d22e1-e5b5-4914-b53d-d7f3cbffdd5a"
        },
        "item": {
          "id": "7f4187b8-0bb4-4e8a-81e5-2f0d8e1f29c5",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8a0ff004-6697-4533-950c-751786693e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e73b304-19b5-4afa-b362-3166a5c74a04",
        "cursor": {
          "ref": "f22e69ee-221d-407a-9330-8de31a51c3c0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c041c658-72e9-4f61-872c-61c2ff73bfbe"
        },
        "item": {
          "id": "9e73b304-19b5-4afa-b362-3166a5c74a04",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c98f6f79-d47a-4b1c-890e-6ea22fac1858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf087b07-eb43-4300-9069-a52299cd8534",
        "cursor": {
          "ref": "d00a4879-7f89-48ae-b8f5-f8395d6e194a",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a74aeac4-aa6a-49be-8e2c-4faa5590b155"
        },
        "item": {
          "id": "cf087b07-eb43-4300-9069-a52299cd8534",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "220f753a-a1d6-4bcb-8acf-aff3fde354bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e60a2d-7ec0-45c8-83cb-8724e2a066c0",
        "cursor": {
          "ref": "ec16eeba-ad0f-4373-9618-bcaad0004f5b",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8832b3bc-2ba9-407e-99d0-9723f935cf37"
        },
        "item": {
          "id": "d4e60a2d-7ec0-45c8-83cb-8724e2a066c0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c075e3f7-382e-4079-ab40-f2908fe1c1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53be69e8-ed4b-4364-b8ab-685983c800ea",
        "cursor": {
          "ref": "52e70e7a-63ae-4920-8062-ce23eba915e2",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4cff804f-909c-41fe-9f37-9c71c6c23e6d"
        },
        "item": {
          "id": "53be69e8-ed4b-4364-b8ab-685983c800ea",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1c49827b-2b0a-4ff8-9ba8-49fc376d18cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "effa9c41-9c46-4dbd-929f-86be9ead1389",
        "cursor": {
          "ref": "0ad1cbe2-c47b-4fa7-8831-c2f04a130f51",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c0ae65eb-67f3-4f0f-92a2-a61b15496854"
        },
        "item": {
          "id": "effa9c41-9c46-4dbd-929f-86be9ead1389",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b3585408-cbf6-4a25-9e25-97df0d88f980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f954b86-d900-4e1b-bf52-eafb6431292c",
        "cursor": {
          "ref": "21e9d3d6-0eb6-4a74-b931-36b3131dad6a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8e4edee3-41df-425e-bb4b-5922ec8096a5"
        },
        "item": {
          "id": "0f954b86-d900-4e1b-bf52-eafb6431292c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ce8c7c3a-3dfb-472d-8b6f-2076b4a21491",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cade4a-7538-4cbd-ae05-d2258c2a0911",
        "cursor": {
          "ref": "7370d47c-3c16-4f55-82ad-d8e50c3462f8",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ef721ffb-ca88-498d-bd47-d0fc2fcf3f73"
        },
        "item": {
          "id": "51cade4a-7538-4cbd-ae05-d2258c2a0911",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "e40a63b8-099d-4cb4-b323-ab0fa983e35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c71e91c-5577-4d6d-a71c-f9b897864659",
        "cursor": {
          "ref": "2b7a3c56-6cd2-4270-8677-e9ebbbca568f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "96650460-8182-4deb-bf86-8f96e98e78eb"
        },
        "item": {
          "id": "7c71e91c-5577-4d6d-a71c-f9b897864659",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0e7635ad-00d0-45dd-baea-62b25ce11ed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa3f6b7-cd7a-47ab-ad56-d3b64cba269b",
        "cursor": {
          "ref": "1ce6b4f3-2d1b-481b-ac47-24a3d2c4fb08",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "681d8104-7c3f-4b02-9c70-ddea6f88c353"
        },
        "item": {
          "id": "efa3f6b7-cd7a-47ab-ad56-d3b64cba269b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b513d043-8a78-4395-adbd-c77b1db9c24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2fd0706-b54b-4988-8151-1cc51c862150",
        "cursor": {
          "ref": "f3b772c1-41a1-43d4-8c69-a80c1ee411f7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4be0379f-dff3-4926-835e-6aa5bb1f0a07"
        },
        "item": {
          "id": "f2fd0706-b54b-4988-8151-1cc51c862150",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bdfe6254-9760-4c45-acc4-71366d1dc512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f55b33e-982c-4a80-90af-1f340f5a40eb",
        "cursor": {
          "ref": "cdc5456c-6a42-46f4-9313-f582b4e6c893",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c05c41fd-7849-4df6-bcbe-96845420ccb5"
        },
        "item": {
          "id": "3f55b33e-982c-4a80-90af-1f340f5a40eb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c4d1e7c5-7bde-47e3-92c7-ba1810879242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc203fd5-09a5-4ead-b3b7-4de4096e5138",
        "cursor": {
          "ref": "5797fd73-8b63-4643-9f48-bdbd73667105",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e9651456-ff3c-4a5c-b46e-4148fcd13b5f"
        },
        "item": {
          "id": "cc203fd5-09a5-4ead-b3b7-4de4096e5138",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cf670b9c-a2a6-4c1a-961f-8876d3e98354",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "873e8db3-9ce0-4535-93ad-10ff16e67381",
        "cursor": {
          "ref": "eee61f1a-9b21-4b6b-9603-b1c46e699f46",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "07d25ef0-8db1-44e6-b4ca-3d8319fe78c4"
        },
        "item": {
          "id": "873e8db3-9ce0-4535-93ad-10ff16e67381",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6fd2ba57-adec-4b9d-b82b-adabed33cf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69c8a22-09e5-414e-a608-e0ca7506e792",
        "cursor": {
          "ref": "97c8f3fd-c9e1-4668-995a-391a39b05b86",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4be6a567-0f42-415a-9c36-b35d1ac3eca6"
        },
        "item": {
          "id": "b69c8a22-09e5-414e-a608-e0ca7506e792",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5eea2546-ea90-46ba-9b82-c368d2f07400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a35dd26-52de-4500-b29c-202321a58947",
        "cursor": {
          "ref": "bfa7cf45-612f-4efd-a9da-a30a5bc9545a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1d2d689c-509d-4514-a69e-ef1b48e6128c"
        },
        "item": {
          "id": "8a35dd26-52de-4500-b29c-202321a58947",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7e241a06-5401-423b-93da-9c6c38b4c0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec68e97-94ee-4617-b2a1-23107ffe076c",
        "cursor": {
          "ref": "ddf648c9-7c64-46af-98c4-6b6bba362af4",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0c4b45d9-4730-4d70-9659-eac138a66ac6"
        },
        "item": {
          "id": "eec68e97-94ee-4617-b2a1-23107ffe076c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3166267b-8f04-42ee-aa62-f88fa842dea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82957110-9918-4bb5-aa2e-2a72b482ff41",
        "cursor": {
          "ref": "9367a05c-1379-4420-b43c-ed29a98a1cff",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8833a72d-28d3-487a-a739-2d4278edb0d4"
        },
        "item": {
          "id": "82957110-9918-4bb5-aa2e-2a72b482ff41",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "22591d16-6a27-47a3-bc5b-6e659944d6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c5a6fe-66b3-40fa-b915-1d9ed4424651",
        "cursor": {
          "ref": "73d3996c-5b62-4c3e-95f5-044c189e42cb",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "489491b9-3ccc-466f-be5c-0eea84ba6979"
        },
        "item": {
          "id": "76c5a6fe-66b3-40fa-b915-1d9ed4424651",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "411849b7-fa96-4c99-ad47-7d8112e8ef0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4103044-4e42-44fb-9475-0dd216a2b300",
        "cursor": {
          "ref": "62724d36-3113-41c6-823f-cd92cf81b1dd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d57eea90-b100-4feb-ba51-4ec0bcc45b0d"
        },
        "item": {
          "id": "b4103044-4e42-44fb-9475-0dd216a2b300",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e74670be-3169-4f1c-b86b-9d413ef5bb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6567ba1-fc71-46a4-ac8f-e36ad76747d5",
        "cursor": {
          "ref": "251dff64-9227-4a06-a167-6ba9b5f08da4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c1e9e7ec-a4c9-49d2-9ba3-66297414856c"
        },
        "item": {
          "id": "b6567ba1-fc71-46a4-ac8f-e36ad76747d5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3855ee30-4552-47fb-b537-e0c32ffbb274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3cde5b1-758c-49ad-9aef-661b5420a123",
        "cursor": {
          "ref": "d9cb3d78-954a-400a-91f8-85ede0c33a56",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8d95f264-ba27-486f-b713-488630cadfd4"
        },
        "item": {
          "id": "e3cde5b1-758c-49ad-9aef-661b5420a123",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c18433bc-c049-4148-9f5c-beb3268feba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513f846f-9d82-426e-9469-512ec666afde",
        "cursor": {
          "ref": "e3db20e0-a7fa-4255-9801-6ac92bd2ae32",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a7166c97-f4db-41a7-9f61-7b149d50c781"
        },
        "item": {
          "id": "513f846f-9d82-426e-9469-512ec666afde",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7a661d80-7e27-49c4-bdfe-0f700f989ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6b4e1d-8c6d-4c34-a880-83e15db66690",
        "cursor": {
          "ref": "2a1274c5-59ec-4850-a2cb-73fa1335ec74",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c1494357-2f5c-4e7d-8148-f92dd9e9063f"
        },
        "item": {
          "id": "ec6b4e1d-8c6d-4c34-a880-83e15db66690",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f91323fa-f51b-4d4c-84f5-5cd94ddaff42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56993e49-de52-4fda-8fb2-4387f6940367",
        "cursor": {
          "ref": "bef4abb8-d28c-4e75-beb2-65cd5aa4a3eb",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "458e7153-e19f-477b-98d6-d7eb41b56d2c"
        },
        "item": {
          "id": "56993e49-de52-4fda-8fb2-4387f6940367",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "063b6bd5-de5c-425d-b42a-28775ad2a130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68911449-47f3-4895-baa2-f77904feab9f",
        "cursor": {
          "ref": "7df60534-8c3d-4602-b6dd-9c6265926077",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "0a5bed5f-e719-4889-964f-ed0d3bb1ead0"
        },
        "item": {
          "id": "68911449-47f3-4895-baa2-f77904feab9f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f260af5c-d203-4c2b-b97a-6da940ba61d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ce05e8-aa5b-416f-9c3f-71b0d999c820",
        "cursor": {
          "ref": "aa594d2f-5eb4-4360-9593-b1c610d4762d",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ed02f212-095e-4e99-b4bb-324f2bb16a58"
        },
        "item": {
          "id": "89ce05e8-aa5b-416f-9c3f-71b0d999c820",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2992f50d-c134-479b-b3e5-48cde1fe9929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e7f21b-6806-4d41-b4a5-a943c5128cc7",
        "cursor": {
          "ref": "a1acd043-c9f9-40cd-be5c-b67f90b96377",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1c11c39e-3a4f-4ff5-80d6-aabbcfcf2cb9"
        },
        "item": {
          "id": "f1e7f21b-6806-4d41-b4a5-a943c5128cc7",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "af1af948-33b9-4db6-a6bd-1bf44457e0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef798e8-8add-4576-8649-a8d6a63d294f",
        "cursor": {
          "ref": "d44386b5-6b0e-492d-8f03-50eaa2c7302b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "68bd01f5-5ab9-4352-82cb-e953a85b4a10"
        },
        "item": {
          "id": "1ef798e8-8add-4576-8649-a8d6a63d294f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "84924a93-26ee-4f78-a7b8-3df4ccffd911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eea8c02-7f52-4c2e-934f-879556d39bc9",
        "cursor": {
          "ref": "75956799-85b9-4ed3-88e2-a6eb02ebe5f8",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "179eb010-87c5-419a-aae5-43f9470ccd1a"
        },
        "item": {
          "id": "1eea8c02-7f52-4c2e-934f-879556d39bc9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a940632b-4697-4cc0-9cc3-56c9f6f4b905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c8fc80-1d69-4dfe-9bf7-9acf255f6bf0",
        "cursor": {
          "ref": "4d751f9c-97e0-48ee-ab69-dbea285c6b59",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8f4c42b1-f1f0-40ae-8036-07fb77e0c3a8"
        },
        "item": {
          "id": "e3c8fc80-1d69-4dfe-9bf7-9acf255f6bf0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6320bd30-683d-4356-8192-0b93d0baca8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bde172f-ce9f-4e26-88b4-9391f2c3e20d",
        "cursor": {
          "ref": "ed5dd6f1-9fe1-4234-adad-82b787fb4c5b",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "258fa433-a130-4a19-8f2f-4ca7c2403ac3"
        },
        "item": {
          "id": "1bde172f-ce9f-4e26-88b4-9391f2c3e20d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1cd67d64-f217-4d6f-9b4f-9fefb42b3423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320a5183-b561-45cc-86f1-a6162bf3a0a2",
        "cursor": {
          "ref": "409544db-24c4-4a6c-9689-839e3cdbb3d7",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ef8d285f-0e10-4158-913b-9897ee2eb1c4"
        },
        "item": {
          "id": "320a5183-b561-45cc-86f1-a6162bf3a0a2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "5ed4441b-38b0-428d-895b-1816d2a69048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb771fa-bcac-4550-aa21-0f15c9cafd23",
        "cursor": {
          "ref": "13560aa8-4c09-47e2-81de-6e4262f5ecd2",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a2aff573-0e91-46c9-a3c1-6ed3b36b1a9a"
        },
        "item": {
          "id": "7cb771fa-bcac-4550-aa21-0f15c9cafd23",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "22ab06d9-9a60-4ba7-86cd-03e719244279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c1c62f-0e96-4a4f-95a2-97b7f5ef56a1",
        "cursor": {
          "ref": "9211b617-1177-4113-b359-c5e1e87180d5",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9ad5ba24-6ce2-492b-9dfd-d813733e5384"
        },
        "item": {
          "id": "71c1c62f-0e96-4a4f-95a2-97b7f5ef56a1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "60655324-434c-4c5d-b9c0-8584c14dc35d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee851cf-64f4-4585-9938-d7b1c8a4f9b7",
        "cursor": {
          "ref": "4c8daeb8-e796-45fe-b358-78300c91c99d",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "056fcfea-b2c8-4421-9f95-afe4b9758eae"
        },
        "item": {
          "id": "6ee851cf-64f4-4585-9938-d7b1c8a4f9b7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "bba46882-a2cf-4a55-a7c0-c220c9598eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f097925b-2894-4b9f-922f-1aad6457a4f8",
        "cursor": {
          "ref": "82bd28c4-e771-406e-8412-44daaa4036bd",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c579c8b2-64ba-4123-87c1-f5050ad7a367"
        },
        "item": {
          "id": "f097925b-2894-4b9f-922f-1aad6457a4f8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a6a0b8d3-df87-4217-b23b-63a1fe51bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "218b35ac-1012-4079-8d2f-a7bb560e7eb5",
        "cursor": {
          "ref": "31c3b2b9-713c-48ec-925d-190972b17216",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "76010f1d-01c3-4839-9ad9-289b54150c4a"
        },
        "item": {
          "id": "218b35ac-1012-4079-8d2f-a7bb560e7eb5",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ab690b9c-1e8c-4843-8be5-87558a1114b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b66e3e6-b709-49f0-bec1-e733d5bc542d",
        "cursor": {
          "ref": "bc615849-dc86-4074-9451-b7888107d20f",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "aa80d14b-bef3-4e30-af61-1fc38933dd14"
        },
        "item": {
          "id": "0b66e3e6-b709-49f0-bec1-e733d5bc542d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6be55159-952b-4d4a-97f2-db7e943d1468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c0bd2e-5fc8-4f9e-aeec-6f648d7fa6f5",
        "cursor": {
          "ref": "5dfca090-c183-43b6-b891-37719b3f27c7",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "14fe9e1a-db24-4867-9de5-6430db113cce"
        },
        "item": {
          "id": "27c0bd2e-5fc8-4f9e-aeec-6f648d7fa6f5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "85560083-62c1-4808-83b2-88ac88b987f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fd552c-5c32-473f-8152-9196b034572d",
        "cursor": {
          "ref": "88291b70-59c5-49da-a388-63c72df3c643",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "43384a99-6771-4351-8fd4-9146d0bd5ee7"
        },
        "item": {
          "id": "94fd552c-5c32-473f-8152-9196b034572d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "0bd7d8d4-bd6b-4cb3-b678-f0e75efcc7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfca153-e04f-41f3-838e-73e07bdab20e",
        "cursor": {
          "ref": "9dc82dc5-1ff3-40af-8688-167f33510586",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6cc0575d-0955-4fc8-9f8f-4240cf35ed1a"
        },
        "item": {
          "id": "fcfca153-e04f-41f3-838e-73e07bdab20e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6f236789-efb1-4cdf-947d-6893897a7376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ee4e2f-bd26-45b2-977a-e61b15d83a74",
        "cursor": {
          "ref": "202eed36-79e1-4752-b3da-f21d1596fb11",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a2d762b1-edfe-434b-8a1e-30a1656f1df5"
        },
        "item": {
          "id": "65ee4e2f-bd26-45b2-977a-e61b15d83a74",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "81d03928-6231-4c15-be7a-2236f230ddd0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "da1fd288-751c-4263-ab64-84387ee6ea1b",
        "cursor": {
          "ref": "79adee57-717e-4954-ba4a-e0fd6428ef52",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e41ba164-1261-4948-a093-711791c6f84a"
        },
        "item": {
          "id": "da1fd288-751c-4263-ab64-84387ee6ea1b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fed4be1f-efdc-44d8-a248-27a616c59cbe",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "95c57e4a-a082-4719-8122-695333fa5b36",
        "cursor": {
          "ref": "c095f140-d1f1-4eb4-9fc6-a2b0f120f5ef",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "14c7a85d-9185-4050-b700-531e1420aa7a"
        },
        "item": {
          "id": "95c57e4a-a082-4719-8122-695333fa5b36",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fe098ad6-c3cc-447a-9932-afed8e25e0a3",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "365ab0b3-32c4-403a-844f-509d707ec185",
        "cursor": {
          "ref": "6d4c008a-cbd5-4aaa-b0c3-7989d008324d",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "54a61f5a-6e3f-4df9-b086-c1238bff81bf"
        },
        "item": {
          "id": "365ab0b3-32c4-403a-844f-509d707ec185",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0750416f-4680-4dda-a085-37e977c810f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f527b90-d245-49ba-9674-6eba9aa44ea9",
        "cursor": {
          "ref": "cabf14b5-b093-4b5e-bdfb-e1b67bb13444",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b698278-21b8-4b0e-83f6-f7a66b9d0cda"
        },
        "item": {
          "id": "9f527b90-d245-49ba-9674-6eba9aa44ea9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "95b3003d-3906-42d5-bea1-485686dbe73d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "85355ff2-cd28-46e4-9029-a59143de7fe8",
        "cursor": {
          "ref": "ca4057e1-afe3-4abc-a453-553c5a829d23",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ae50f4f5-b09a-4478-96ec-6fabe5c766b7"
        },
        "item": {
          "id": "85355ff2-cd28-46e4-9029-a59143de7fe8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3a5fe67e-a1e1-49c6-b447-f36f7579a1e0",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "404847a9-5793-46f9-98ed-f6cdfed1e3a0",
        "cursor": {
          "ref": "ed5fdb9a-6eb8-44db-9c72-a4772ee1cb29",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a2b14b32-7b6a-4447-8bae-d17f7baa86af"
        },
        "item": {
          "id": "404847a9-5793-46f9-98ed-f6cdfed1e3a0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "49e54b12-f977-4ac6-9da5-bc607ee85594",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "dd0057a7-5b0e-4fe0-86cf-e59bd955b7b6",
        "cursor": {
          "ref": "25117925-5bcc-4515-b482-439617461432",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "41e0df3f-05c9-43cf-bc61-a2abc711439c"
        },
        "item": {
          "id": "dd0057a7-5b0e-4fe0-86cf-e59bd955b7b6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "94caeb81-668f-4d8f-bac5-ef5c6980089d",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e4a607ab-7a32-422b-82cc-59acad7f34d7",
        "cursor": {
          "ref": "a310ca75-d5af-4b95-9052-5dcbdd42c892",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cc3e46ba-2e16-4054-99e9-620178c9928f"
        },
        "item": {
          "id": "e4a607ab-7a32-422b-82cc-59acad7f34d7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e409a108-98f7-408f-8ead-0b0585f0760c",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b403618c-23ad-4655-b3b5-c813d749ba87",
        "cursor": {
          "ref": "9cf381f1-d227-4117-b504-f6f778fa73bf",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "28477c60-748d-4df4-90f3-461d4ab5284f"
        },
        "item": {
          "id": "b403618c-23ad-4655-b3b5-c813d749ba87",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7ac66105-bedf-4d10-b98c-6444563cf7b7",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f9ffa820-284b-4247-83e4-0f3835a06b48",
        "cursor": {
          "ref": "d50e9741-f48e-436f-a8d4-59e1ddb13bb6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6187407d-ff25-427d-9751-836ae773732c"
        },
        "item": {
          "id": "f9ffa820-284b-4247-83e4-0f3835a06b48",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1130326e-b95d-4a05-9d28-8163886c7447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2edb3d-66f5-4dd8-b604-bc68195de061",
        "cursor": {
          "ref": "f98cd5e1-0eaf-4242-9771-d068cbacbc52",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "dd77b2ff-8bb5-49a5-85c6-a735f635cf83"
        },
        "item": {
          "id": "cd2edb3d-66f5-4dd8-b604-bc68195de061",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1e692cc1-43f3-4b78-a848-85b009dba813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a675473-914c-4e58-b056-423172305474",
        "cursor": {
          "ref": "0bf3b0ab-9421-414e-b78a-275a1b7fa51c",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "24d898ec-6dc0-4065-93e3-4762e4a3f3dc"
        },
        "item": {
          "id": "3a675473-914c-4e58-b056-423172305474",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5c10640b-930f-414d-b3cd-5435caab6d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df6b103-1ab7-4478-bf83-0bcae4f6bc17",
        "cursor": {
          "ref": "2d3e8f9f-db59-4f6b-99ef-95b50cdc1cfc",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8df592c2-e785-4263-a319-67630ca14d3f"
        },
        "item": {
          "id": "7df6b103-1ab7-4478-bf83-0bcae4f6bc17",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "555d0cb7-1f2a-431d-b4ff-cce266c96614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d061eb-1847-4870-afa6-4f022d5ef627",
        "cursor": {
          "ref": "4aaf344f-9d46-4778-98a0-7a6378b28825",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "14088f31-047d-4b30-b3b4-72ee499c4743"
        },
        "item": {
          "id": "b8d061eb-1847-4870-afa6-4f022d5ef627",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0930c139-2242-4171-b8f0-60f897b5afb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680e9b98-33f8-4beb-b27a-c165e7c8220e",
        "cursor": {
          "ref": "c97d260c-577b-47d8-869a-4ea1494d4de1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "56bf358e-5a98-4da0-a18a-9a1ead0b1387"
        },
        "item": {
          "id": "680e9b98-33f8-4beb-b27a-c165e7c8220e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2260bfec-d4e5-4665-9f71-7a15ed8c15d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2542b65-a9b5-4632-bcc6-873ad7c98454",
        "cursor": {
          "ref": "9677410b-4526-4f1e-9c2d-940dd5aac686",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a19e6e5e-fa96-4940-bbad-9b601183ae2a"
        },
        "item": {
          "id": "d2542b65-a9b5-4632-bcc6-873ad7c98454",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "424dfdd5-381d-4e7c-984a-97032b3d6851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc931f26-5f2f-4584-a464-8b5607799383",
        "cursor": {
          "ref": "c2549858-1e98-4ff3-b4cc-c9baaf255c13",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0f5ef6de-2d2d-43b4-a932-ba7c02b83bc4"
        },
        "item": {
          "id": "fc931f26-5f2f-4584-a464-8b5607799383",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e7df1c69-60cd-4bfd-b9c2-5fd9bf0b3063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4a04bd-3d08-4c47-aa75-e2c9673547ab",
        "cursor": {
          "ref": "f0bcc929-33af-409b-9cf5-04d4989f5ae9",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5bac5eb5-5848-4538-8761-5b8b99a0b0da"
        },
        "item": {
          "id": "9d4a04bd-3d08-4c47-aa75-e2c9673547ab",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2d05c7c6-b78f-430a-bd84-09726cec4e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff9f84a-970a-411b-8b86-e8ccb6119eeb",
        "cursor": {
          "ref": "e586650e-f359-4306-b0bf-b98e6731ead2",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "80ba3a45-a990-4d81-969a-a7bdddfefe95"
        },
        "item": {
          "id": "5ff9f84a-970a-411b-8b86-e8ccb6119eeb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "00da08e3-70ec-4b30-8fd5-8d541fb01790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aeff632-7a76-4f18-b816-f4392747e449",
        "cursor": {
          "ref": "fe1202a0-117f-4749-aa7b-ba06426aa405",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "f2684a98-11b6-443f-b0f7-3289ef62b4c1"
        },
        "item": {
          "id": "6aeff632-7a76-4f18-b816-f4392747e449",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "087868ec-5f61-421b-87d9-977fc4251ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a732faa-0920-4ad1-8920-c25dd701a891",
        "cursor": {
          "ref": "54484be8-75bb-4a04-9b79-dbbf755f220b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f188539a-8a04-4ae3-8441-ad5ffda1c532"
        },
        "item": {
          "id": "8a732faa-0920-4ad1-8920-c25dd701a891",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5fd2bc6c-c9e4-4171-b633-e488c8e269e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e6ee02-6897-4682-92e7-f9423aeb52c7",
        "cursor": {
          "ref": "25c7deb4-9d92-4f28-b8ec-7642d885b818",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "3f7c31cc-b132-468e-befb-31851c9e34e1"
        },
        "item": {
          "id": "49e6ee02-6897-4682-92e7-f9423aeb52c7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8e231dac-45e2-4dfc-aa38-44ba1706b65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eebef3c-1082-4be2-8fba-b39acf7bd131",
        "cursor": {
          "ref": "e2608f87-aac5-4a36-99b5-32b5101a6e0c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c476b1b-daeb-408c-bff4-591842730e25"
        },
        "item": {
          "id": "4eebef3c-1082-4be2-8fba-b39acf7bd131",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7955f446-79a2-4af5-a4c9-8864c9df8e63",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "acfeaf93-1a39-4864-bef2-74c34fbec5aa",
        "cursor": {
          "ref": "43f11d27-eb3d-4dc4-9c2a-e380812ca91b",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cbcf328d-663f-4a31-a88d-4c66bba38139"
        },
        "item": {
          "id": "acfeaf93-1a39-4864-bef2-74c34fbec5aa",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3d18bd69-e942-4014-8026-5b4ac1ec4de5",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6a98a079-a44e-4ec5-8989-1a16bde47e71",
        "cursor": {
          "ref": "93ee2d82-eb70-4f08-953d-7a30fd9ea6fc",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "10494d55-7691-4781-808e-d73bb841b93c"
        },
        "item": {
          "id": "6a98a079-a44e-4ec5-8989-1a16bde47e71",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4a937eaf-5655-4946-998a-443e99314eee",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8a9fb7f4-0832-42e5-b358-b085e83dbadf",
        "cursor": {
          "ref": "63f2db78-2084-46dc-8ac6-31b30a7fdc4e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a41d4c1b-806d-48ec-965f-76b9abc89e59"
        },
        "item": {
          "id": "8a9fb7f4-0832-42e5-b358-b085e83dbadf",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5808b0ad-cb27-405d-9a57-e924fbafc2aa",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dcfbc5a9-561a-4ad2-80b4-5d54c974aa92",
        "cursor": {
          "ref": "b157bc2a-4118-4ca8-9aeb-63974d3cf27c",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6f925a05-e022-4dc0-aa02-5ecd4390a2a2"
        },
        "item": {
          "id": "dcfbc5a9-561a-4ad2-80b4-5d54c974aa92",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bfc676ad-6c88-4b39-a9e5-f9a9ce477d54",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "03083206-9cbe-497a-9a9f-c58a4ae678db",
        "cursor": {
          "ref": "09ea0b03-b64e-44f0-8c25-e6929960c173",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9b89e4c0-9dc7-4dca-9fa4-c2eace4c9fd5"
        },
        "item": {
          "id": "03083206-9cbe-497a-9a9f-c58a4ae678db",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ec8db74a-07fd-4114-8bce-8433c2419fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7fc28f-fd16-4b09-8bd5-892256772180",
        "cursor": {
          "ref": "4caa640f-7f06-447b-bb76-845438da8c6f",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "48823661-95c6-48c9-b895-a5339a70a461"
        },
        "item": {
          "id": "7f7fc28f-fd16-4b09-8bd5-892256772180",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4a41da23-ded7-429c-93e2-7c76d48b9d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d526c25-526e-4330-a0a3-e5e43a8ffe4c",
        "cursor": {
          "ref": "cc7e7dc5-dfc8-4fcf-b05e-1291015f1f19",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bb09ed0f-f428-486c-adf4-92abb8faab84"
        },
        "item": {
          "id": "5d526c25-526e-4330-a0a3-e5e43a8ffe4c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "caaeae72-8048-4c26-b704-76964a84b8c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e93238-a01f-47d9-95bb-074f9ff43d90",
        "cursor": {
          "ref": "7c5b016a-347e-445f-a64a-d10056dcec9a",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "708952ed-869d-40d5-8a3e-80d2ca683bb2"
        },
        "item": {
          "id": "f1e93238-a01f-47d9-95bb-074f9ff43d90",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e8f5533b-ceae-4979-a4f0-a83f3150c5d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f0d4225-7698-42d0-950a-818c3ad30514",
        "cursor": {
          "ref": "56d7a115-b79b-4d02-8f09-6dba14dd1c4e",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "bbfbac66-c70b-4b2a-8be8-e73516613c82"
        },
        "item": {
          "id": "9f0d4225-7698-42d0-950a-818c3ad30514",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "8c18016e-e054-423a-a724-67d284b3f123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1b4501-0066-4f0b-8261-05ef2630d934",
        "cursor": {
          "ref": "ba554063-9369-46e0-8808-3313861cf92e",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ee1d5afe-b033-4301-86c8-9c7aa2793d1e"
        },
        "item": {
          "id": "cf1b4501-0066-4f0b-8261-05ef2630d934",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e1473204-31f1-4d8b-bb60-c0cc425b285f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103932f8-c737-46f1-9fb5-b193fed2f169",
        "cursor": {
          "ref": "2840eb19-e62d-4141-bbdb-84b62f488cfc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ffbcabb7-ca79-4fae-9744-7ff46b4c630b"
        },
        "item": {
          "id": "103932f8-c737-46f1-9fb5-b193fed2f169",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2f4aa3ed-0582-4a3d-b11a-95d960fe9b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b10357-8fc3-486b-8563-536cf0f3ae81",
        "cursor": {
          "ref": "b11f2ac6-555c-42bc-af98-f030ba930e0b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "db72b7ac-c5a8-4f3b-baa4-51412c2a46ef"
        },
        "item": {
          "id": "42b10357-8fc3-486b-8563-536cf0f3ae81",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "64c86ac4-0c5c-4bcd-a85c-1679fa546525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e950fa1d-1472-476c-a85e-330a114d40db",
        "cursor": {
          "ref": "30c04bb8-e8f6-406a-994d-53e091187869",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "139f6db7-5b76-45e3-8aa4-ceaffd6c485e"
        },
        "item": {
          "id": "e950fa1d-1472-476c-a85e-330a114d40db",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b43bd600-f334-47f0-ad78-384b605a77d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce763020-2ca1-496e-887b-3e84495811f3",
        "cursor": {
          "ref": "d8edab0b-523f-421b-9380-7814e97ae41d",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0ed322fb-4c08-48df-b750-b52a1c79fb24"
        },
        "item": {
          "id": "ce763020-2ca1-496e-887b-3e84495811f3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "5180fa8b-1b95-4b81-9106-5044038e149b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564af4d3-4698-4278-bb45-07ab3e0836de",
        "cursor": {
          "ref": "f0c02a62-b391-4c7a-9ea2-d4164e4c87b8",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d8d9ef9e-58af-4302-9f46-be14861bc7a9"
        },
        "item": {
          "id": "564af4d3-4698-4278-bb45-07ab3e0836de",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "186dcc6e-08c8-4cfc-8e74-7c646bf7f734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5fb8e8-ffd0-4fe8-8c90-b2cd0d04f77c",
        "cursor": {
          "ref": "e1842653-3058-4ed9-8ebc-f3c4c2e6478f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3bdde08b-51c8-4ac5-a21e-3d81203e2f5d"
        },
        "item": {
          "id": "9c5fb8e8-ffd0-4fe8-8c90-b2cd0d04f77c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5c0a9d9f-861d-4e62-af83-704efa00a0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7351d515-0bab-4390-b565-1bb8173dc13d",
        "cursor": {
          "ref": "1a5e7f98-7637-4f62-ae6f-90156986398e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "252ba5b6-1f96-462e-891d-369d45e3284d"
        },
        "item": {
          "id": "7351d515-0bab-4390-b565-1bb8173dc13d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "85ea88ba-98da-4b2d-9737-96c3ad1b7bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7133fc3-f68f-4c24-996c-2a5e32d0a9e1",
        "cursor": {
          "ref": "4b8f73ff-99d1-45ca-afb2-ea6da529ef72",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2b09835b-05e3-4844-8dfa-c7b2ee0be49c"
        },
        "item": {
          "id": "f7133fc3-f68f-4c24-996c-2a5e32d0a9e1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7fac5553-1500-4606-8a50-a8ddadeb333c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d234ae-fe6a-4d38-9660-9e3b9b2ab454",
        "cursor": {
          "ref": "ac78fee7-043f-48c3-b19d-a5699ebbc239",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ccb5ea46-027f-47f8-ada3-2c40ced715df"
        },
        "item": {
          "id": "d5d234ae-fe6a-4d38-9660-9e3b9b2ab454",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ee05a848-0a91-4621-b1b5-ab8486b2dc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3ddc93-4ae6-4d0b-8886-5812fe6fd748",
        "cursor": {
          "ref": "c6488bda-2067-4274-be17-75aab6e18208",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "742c0b24-5aba-47aa-a2bf-54b19f1f4ec2"
        },
        "item": {
          "id": "ad3ddc93-4ae6-4d0b-8886-5812fe6fd748",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f8f60932-2ba3-4490-b578-90d6572fdfe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e973efa-e04d-43cf-b131-23a7fb731c06",
        "cursor": {
          "ref": "07feeb3d-e2aa-4d87-a612-c8018464a4be",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c6297932-7108-4bdb-8d85-2e8cb0b4b056"
        },
        "item": {
          "id": "7e973efa-e04d-43cf-b131-23a7fb731c06",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "44b20abb-1120-4a45-9bfb-4e8c7af317e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a28eedd-164c-47fa-9c36-92b86ed9eaa4",
        "cursor": {
          "ref": "a49249b3-9adb-461f-a409-153df7fd9755",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d08799e-a343-4105-bf96-961857209da9"
        },
        "item": {
          "id": "9a28eedd-164c-47fa-9c36-92b86ed9eaa4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2164aa7e-8c7f-4eb7-a5a8-b46143cfff60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5780d12-121b-4dd4-b22b-6d5cd932443e",
        "cursor": {
          "ref": "1ad9657b-1e50-425c-a663-46f6e48fea23",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e63304bb-0779-4bb8-a02b-37252d5c0531"
        },
        "item": {
          "id": "a5780d12-121b-4dd4-b22b-6d5cd932443e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "cec95c6c-cadb-4dbc-8f4e-d3f6b3abc5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a519ba81-d04d-412c-a6b6-9a600e33b15e",
        "cursor": {
          "ref": "c9de0426-0791-402c-95e1-58eb335f4908",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c0e4bafe-2602-47fb-a9f6-b65d562899c3"
        },
        "item": {
          "id": "a519ba81-d04d-412c-a6b6-9a600e33b15e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "21c79f1d-65e6-4a55-88b7-046a76c54cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ae6c38-df36-477d-9efe-fdd80fa83cec",
        "cursor": {
          "ref": "5b039c47-1358-467f-baa1-55b19db34e3c",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5b7a60e7-43f8-4cc4-ad40-ed6c7233b12a"
        },
        "item": {
          "id": "c8ae6c38-df36-477d-9efe-fdd80fa83cec",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a1a5915d-2957-4bea-bfac-b7a7fd713d1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df079b99-aad4-47f9-934e-507743b99591",
        "cursor": {
          "ref": "ce55ca2c-5cd7-4ee9-9c27-efecf77d3d2a",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0a8e967a-0097-47f3-8208-da48e1aaf29d"
        },
        "item": {
          "id": "df079b99-aad4-47f9-934e-507743b99591",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a58b1c1f-6a3d-450b-97bf-9a4c45bc4332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3636401f-4355-42c7-8c14-f98c2c009189",
        "cursor": {
          "ref": "e93c5fd6-5035-40ea-b7b6-e28f3bbefffd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7aac4d13-5dbe-48cf-baf4-eb55891a13bc"
        },
        "item": {
          "id": "3636401f-4355-42c7-8c14-f98c2c009189",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d0a1a98d-01bf-4770-b077-83cf50b9e54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3a47f1-cabc-4b57-9f58-ce39c0a5ce3c",
        "cursor": {
          "ref": "d90cfd0a-0789-44ed-907d-2eb8cbfb5c39",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c72a15fd-5641-4cc9-b399-06b650d835d7"
        },
        "item": {
          "id": "ef3a47f1-cabc-4b57-9f58-ce39c0a5ce3c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "625ca612-4196-4133-bb26-c731568cc93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cdd7ac-41a7-4527-9a8f-6bd938ada43b",
        "cursor": {
          "ref": "94704c58-04d2-47b2-8697-a940986317b8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b206fa4a-0c33-4b20-bbbb-17f58c97331e"
        },
        "item": {
          "id": "d6cdd7ac-41a7-4527-9a8f-6bd938ada43b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "deba54af-bb86-4226-ba90-8c668518bbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdabcdd-83fb-473b-b83b-c0f44182183a",
        "cursor": {
          "ref": "79f99166-8afa-4689-8c5e-07c97c446af8",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "211d8d08-51a0-4dea-9df3-2d6bebbba11e"
        },
        "item": {
          "id": "1fdabcdd-83fb-473b-b83b-c0f44182183a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a5f8f0a3-eefe-40bf-a69c-2832cc8b02b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025c6a4f-06d5-4f90-950b-0e6df2364dbb",
        "cursor": {
          "ref": "66e8b875-9ea6-436c-b2cc-643c577fab87",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f5471e66-a372-460b-8653-a006ed59dda6"
        },
        "item": {
          "id": "025c6a4f-06d5-4f90-950b-0e6df2364dbb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dd31c1d9-12de-48da-b2ee-f22ab9d76d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b37cb09-ebdf-4061-ad51-cdfc150a167f",
        "cursor": {
          "ref": "9fef54b4-d2ea-4266-a977-08b55f97e56f",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0d23c47c-68bf-4731-be9d-3ec6a05d3d8b"
        },
        "item": {
          "id": "8b37cb09-ebdf-4061-ad51-cdfc150a167f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "abc01444-a037-4acc-87c9-782782e0868c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6951d7b-6b2f-45d0-9647-d5797d87f76f",
        "cursor": {
          "ref": "5e227271-afe8-4103-88fe-0ed444e954d0",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "17f3cb34-5f35-412d-8307-2d81abe5c8f7"
        },
        "item": {
          "id": "c6951d7b-6b2f-45d0-9647-d5797d87f76f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "168b0fa0-1d8f-4f5a-ba74-becabd307052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b875da5f-ae69-4dbd-97bf-fde6267f4477",
        "cursor": {
          "ref": "1e2bb99f-25fe-4480-abac-8e05077e6567",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "32987cc6-cec6-4ef4-8244-546d54300f32"
        },
        "item": {
          "id": "b875da5f-ae69-4dbd-97bf-fde6267f4477",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ebbb5bcc-b125-4328-b0f4-23a9180f719c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a64219a-92ca-4f98-8191-b55ec6f34e41",
        "cursor": {
          "ref": "09870df9-f472-4d84-bcda-71c368cfc61f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "507c277e-99ed-4bd7-851b-a8a904c873d7"
        },
        "item": {
          "id": "5a64219a-92ca-4f98-8191-b55ec6f34e41",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "87b16e73-c14c-4120-b8ae-98d6429e1c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2556d4bb-c145-4eed-b0da-48163d9c42ac",
        "cursor": {
          "ref": "5509773d-b53d-41e6-bebc-54c4772280ad",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "177febd6-5f4a-4217-97a3-6a203ce6456d"
        },
        "item": {
          "id": "2556d4bb-c145-4eed-b0da-48163d9c42ac",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4ddaa066-0bc3-49ee-a3f9-57a5677448a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa0ca31-7098-4640-b00d-4579fe83b88e",
        "cursor": {
          "ref": "f5a3b701-1570-43d5-8090-71411fbd90f5",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a1dc5887-02bf-4597-80f9-4548105ce092"
        },
        "item": {
          "id": "baa0ca31-7098-4640-b00d-4579fe83b88e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "bfc8ffea-53fa-407d-b8cb-805c227cd7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ab39ea-58d5-418a-9197-7fc9b7e252f0",
        "cursor": {
          "ref": "9a273c15-017a-4a5a-8ef6-c9693bf18f8b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4ddd360c-c372-4702-985d-9a32f180f446"
        },
        "item": {
          "id": "16ab39ea-58d5-418a-9197-7fc9b7e252f0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "94e73388-1639-45f4-b922-09bc2a818038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d66e27-3036-415a-bb14-db837d1aabcb",
        "cursor": {
          "ref": "483a38a0-fd26-417f-9c2e-8fc393325c28",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7d312cdb-f29b-4403-b886-80f1cc0af85b"
        },
        "item": {
          "id": "a0d66e27-3036-415a-bb14-db837d1aabcb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "835f3fa3-d0cc-4051-baf3-b391dfebae57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1500ea7e-66cb-4342-b88d-1bd4197ee5f8",
        "cursor": {
          "ref": "cb596e27-954a-4899-a453-9c982030efc8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7414a644-76a3-4657-9a7d-e97d3aff4dc8"
        },
        "item": {
          "id": "1500ea7e-66cb-4342-b88d-1bd4197ee5f8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ad8e08ca-57ef-427a-af46-06fc0ee0a697",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "818fe98c-8f92-40c7-8557-514d1e8de317",
        "cursor": {
          "ref": "34cac2a0-68e2-4644-8d2b-b2a27153ed1b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "bf09668c-e688-44ce-b9cc-9ba60ba9b13d"
        },
        "item": {
          "id": "818fe98c-8f92-40c7-8557-514d1e8de317",
          "name": "credentials_verify"
        },
        "response": {
          "id": "56b7465f-c79c-4963-8e8c-7e7d8f2c9206",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad1ca2c-310e-4025-bb9c-0ad7e73869de",
        "cursor": {
          "ref": "03582a62-160b-449c-8ff0-f9fd2333c7b4",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5403582a-385f-43c9-95ed-f4eabab6cffa"
        },
        "item": {
          "id": "5ad1ca2c-310e-4025-bb9c-0ad7e73869de",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c5b9f8ff-1dd5-41a8-810b-48c7135d6dee",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7daf17-0d30-493c-80dc-6f8cad454b9b",
        "cursor": {
          "ref": "1ff9a026-e193-4525-a05a-18eedfe5d12f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b478429a-b21e-4581-bf16-cf66d4681fb9"
        },
        "item": {
          "id": "0b7daf17-0d30-493c-80dc-6f8cad454b9b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c93ef7aa-4997-43e3-90e9-82cdf5617435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7daf17-0d30-493c-80dc-6f8cad454b9b",
        "cursor": {
          "ref": "1ff9a026-e193-4525-a05a-18eedfe5d12f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b478429a-b21e-4581-bf16-cf66d4681fb9"
        },
        "item": {
          "id": "0b7daf17-0d30-493c-80dc-6f8cad454b9b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "c93ef7aa-4997-43e3-90e9-82cdf5617435",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24cb575f-eea1-4308-bd42-ab9acde1ceed",
        "cursor": {
          "ref": "dee92133-7ddd-4f2e-990e-1e6bb7a90ce0",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fd7c1d62-faf0-4ddb-9770-0ccdb84dbfd6"
        },
        "item": {
          "id": "24cb575f-eea1-4308-bd42-ab9acde1ceed",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "32323464-e2dc-47ef-8afc-88c9c6d24656",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069bdac3-d543-4747-86ed-f6c4d59eda80",
        "cursor": {
          "ref": "c8dffdb3-d76a-4087-a0b2-599d268ea83b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "103fc24d-16dc-49b6-8531-50127df7cec6"
        },
        "item": {
          "id": "069bdac3-d543-4747-86ed-f6c4d59eda80",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e8db530f-8a43-4370-a559-257bb3a4f688",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}