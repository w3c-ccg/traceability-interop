{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "29cb3d52-55ce-48a2-9a51-09b148656462",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3edaa679-65ba-4411-90c8-1db042cc0108",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "56ed2968-1c31-4a68-a4e1-6b8e6a2d072b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed6cdcaf-2591-4bca-a468-b5e3db028d64"
                }
              }
            ]
          },
          {
            "id": "29aaa1ea-3f95-418a-9f79-ce77bc3be451",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "510a909a-0e81-4cff-8fd8-77ad714597fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "859898f7-3ee2-4be5-b304-08187e79d62c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "39f976d5-84f8-40c2-ab0f-205cbfb8eca8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "63088cce-1200-4dc6-b619-a9f918aa486d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "558c68d2-2324-4b41-a9fc-f89eedc1808c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1646607d-039e-4921-a864-cf9e323c8d71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "191a8b49-1580-42bf-90b6-07e44e5d7e0e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "19568d83-a176-4a0f-adbb-6f8e3303802e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62453d1d-efc1-4ee3-9232-58317ba6130f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e06ee7d-818d-45d8-829b-aca5d4bc5433",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed59a89e-429f-47ee-97cb-3f82cb4fb4af"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89813341-cf1b-40f6-b3d1-cd21df7eb3d9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0b6cb84e-231c-4935-849b-1d3f2fbc2f22"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa843407-41e1-4209-be0e-70bef9ab275c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c56ad33-0b75-4838-821a-f7cc0326f805"
            }
          }
        ]
      },
      {
        "id": "acafc24a-37c2-45a6-aac1-db791fff6713",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "61169a97-198d-4e4b-a931-d0e4850ec0c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2b9f9c50-b524-40e6-ae82-ce1585b5669f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c43d612f-7a06-4251-9d94-e8b4e66680bd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff70ce4-4fe4-4add-8529-89b58f93bf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16e87d4b-3239-435f-ba02-91019edcbdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee5c85a-fd3e-4413-9042-4127d4a14ee5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2490a2f5-e5cf-4384-9d11-d1989727061b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88ea0238-a2fb-4d44-a859-ea4ef6cd013c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6345093d-4cd1-4e81-88bb-30745fe49434",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f07d01e-06fa-4eed-b8f3-f0276917b243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a283a5c-adcc-45d8-a69a-04515181071a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5f26384c-25c5-4f95-8db7-c2bac9fbb977",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4284cd41-f901-4d86-8ede-e48fb010b85f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ca9ae0-b02d-42c6-8cac-aba5fbb3a409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5d0c79b-b825-484f-ac51-b54547ec7882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b266bdc-4898-4a99-b5aa-496084f82c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5baac4d5-fce3-4a94-931a-01257be5907b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b8207905-301b-4b4e-94bb-a65baa0aaf80",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9adf41f1-3423-48fb-9d10-9984c77c7a53",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "82071470-a272-4cc3-9ce4-6a4eec1b3f14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5d4a34f3-126f-4775-9564-aa0f13b81202"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c491b59-325c-41b1-8ab8-ab80d4c7b645",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "9fe78a5b-a14e-4ffd-b0e2-6bb916f81df1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7c4dfab-8b85-4c5e-a8a0-203dcd4b04f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d01a11ba-fc2c-4886-9a35-ea9fab4c9f26"
            }
          }
        ]
      },
      {
        "id": "e4b59c7a-e8c8-4a7d-8306-247f6e457791",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7afac7ae-6331-42c2-9f15-93976222838a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6457f63-b74c-45e0-a208-2a900d518a76",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "26028b2d-ef4d-453a-a58e-75540d64e395",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14f94be2-d42f-4e3a-9bf7-df1abe17b93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb228be-93c3-4230-b6fd-bd70aa00b759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a7ed45-146b-45ab-9bbd-470c2f2482d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bc2406d-44b6-406f-8d45-9f38a5827581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29085e04-a5d5-4ff7-8e1b-41bbc4e1eba9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ca139b-b6ea-4aab-8ada-610c6edbd45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43de6026-3771-47ac-aec3-f17d9adb9f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75241994-fd44-41f4-8cc3-f832e0a66f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d400847f-a9c5-4681-a15b-f739233f118c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b703f3d-6518-4e0b-a258-135b70e10850",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb47c41-37a4-49ca-b0ad-216b71280ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34306a57-48d1-4849-880d-1bf7878ab02f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c1fc59-bfc6-4fbb-ad4d-b98dda518997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55073609-d350-4b04-9047-3c99855edd2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cde77b8-8f43-4d7e-856b-c4a92fa8f491",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d765f4-7947-4272-92da-821f3a162410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1215553e-4dec-4b3a-b857-0c609b3b11cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8645e6-e2e2-4569-a418-524053275dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90bdd6e4-5c1e-4a4e-8757-1de27ba5f182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fc4e15-c1df-45e9-bf99-624b97268888",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a656b610-5d3c-4e2a-ba93-4658d69df0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b01e72-c780-49d9-bcde-677f6319c926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51158a4-0839-4be5-a913-ae06b1d7b16f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dee78960-3cbe-4b1d-81bc-725241206cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "520ada13-8726-4762-a824-303b36e46111",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b389e30f-efce-45b4-b760-88ec5125ab83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010ccdae-adfe-407d-9f23-916eaa71ef73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224742d3-1ac3-48ff-b7a6-e139faaf753f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb574a40-6cae-4723-9932-156b35de5dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2c3d56-c742-4505-8f6a-a2b401b80b24",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fee34a5-dc0c-41a1-aad2-ecf3c0cbbacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f843632f-cdf6-4e09-a9c5-a99271f3a92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba211c-8160-46d6-aad3-a446449121fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb89f7f3-6c4e-4ed1-b3de-958ee9c3a163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1691c753-1fea-4049-af6e-a3cdc0ae6276",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb49ae3-b557-40f0-91cf-29045b743e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af055752-3d54-4af2-ab9f-9b59bff80389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23996076-ca77-41bb-a9ae-8013206bf353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae874f1f-38c6-43a8-8d09-b354016d4bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b65f3c-9de5-4f5c-85c9-ac4f81a90eb4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4c903c-7a09-42f0-b799-3b0b30744c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd10ede5-7273-4a89-acd5-4843ec7b4cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290f5ea7-bd6d-4cd6-9897-06802070fc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8c70332-5b30-40e9-8300-36428bab5723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64dd025e-ea94-4cfd-ac52-d266769f2038",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e9630-e438-46ff-94e0-686e8e0c4333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db99bca-e30f-4df9-be8e-5404780df2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398286df-f760-4c2a-bc4a-254d8316df76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8360d6f5-14e4-4773-93c4-03292de22d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4142cb8-92ec-4f01-81c7-7c33f437d449",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef7774b-8e0b-4a93-bab3-08230f4fda59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62704297-8a57-4e18-9216-8e8f84f1c47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaa1fb0-f1f5-45bd-88f3-8ac4ab2fc5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "582fbd34-638f-430b-9eef-42cbc4d2a1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4483fae6-7e43-4dd6-8d1f-34b42d27d788",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a49e3aa-98b3-465e-b4f2-31ec96b03892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d0b81c-1929-42bf-a6ff-b80d1bd4ce73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9588fdf3-b69f-4b4e-981c-72ed7c2396ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e3c0a3e-062b-465c-a5df-b85cc13780be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb0c2ec-7660-4842-b688-1fc87232917e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f11b93-ae48-4334-a2fe-05da6e7fc269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bc8caa-7a95-467b-ac2d-1ddb5d7d0a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44dbf96-db5f-4b8d-a65f-f24573baf8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eb02e9d-80d9-42d2-ae6f-9f34e2dc187f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79009184-3df8-489b-8c62-5d8ccb0b8ca8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6df5ccb-8e74-408c-9e0c-d2fa3f32f4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87df641e-ce5c-4007-9c26-77730289ad75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6554a230-f7e0-41d5-bbb3-9e6ce3a1214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8142f1b-101c-4b58-854e-3ccf1ee9f052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42fdf6b-5ee9-473b-b15c-1348e767079a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec8db96-1b0c-4c52-8d3a-8456eaf3a65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff5e737-e5b2-4846-8dab-dc056872a116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f92d5ac7-76fa-4064-a63a-b3d61649949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f332619e-f016-4a8c-a474-603bac07b17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9d950e-62a5-4293-9349-dd442b5dfa15",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aee733-dfbf-4d6c-9256-415a554c1f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2762d5c4-9b21-4a67-bfaf-8159ff1c4e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d69889-3886-48c4-8681-7cf6e15b0861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b556c41-c231-40be-bbee-132f5f1ab04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e178ece5-53e1-4a59-a3f8-a47c7701f7f5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d6fa57-32cb-45ef-a271-e3f4002ad200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09354c0e-1be2-41bc-afa2-2f178b649a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e8531e8-9674-4d69-8181-b2b69484974b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac514c97-a6dd-4bf9-a207-07a3a55f86fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba33514e-327a-423e-8dcd-b2c273f120ea",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d3fdd8-038c-4b9e-bc71-9e1c53f39275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "559efa82-a8a7-4039-a620-9ac9068edf63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d17297-ea95-48e6-9090-3c640713df05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ebb147-869b-453b-90ca-dc350042f904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed462daa-7de5-4ac9-8aa2-83307643cc5a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5215068-30cf-4739-b91f-1ff7e775fc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b063961-8508-472a-8603-227efaae75f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82171716-8947-4790-800d-025607beadb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8408cac5-de6a-43d4-b1aa-1c447e58392c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87acf03c-7638-4380-a54e-144577a65ef3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97728855-e461-489e-af26-88c02153eb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d101e7d4-d630-4aec-aecb-a57e50d29d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5790341-7177-4730-86ea-81a8d7de1c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d63fe02-6f6c-4e47-ab92-caaa90beaee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c7305b-e0f8-4962-853b-cefc9ccf13c8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32af85f-f1e6-4614-9596-6d6e159499a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057c607f-590c-4a21-914e-ebd75e6366d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea5a97a-01a6-47ff-a5ac-64d122aa7bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fc1ead-b8b6-4f4a-aa96-54b4a7012a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee144aa-93c4-48b7-af79-3b470f8f4382",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8e5b86-29a5-4dd7-ae06-69edf086b31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c6adfa-7074-4ac5-a1cf-af2eda769ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a303b515-2a70-416a-bd1d-32bab8bedc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a06af2bc-6d26-4ebf-8d01-e43b61e40258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abae37bf-4d87-40f1-9a23-fc49b259c90d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f16910a-c747-4be3-83da-f886c5f4f274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f78012a-1b19-476d-9acd-32de9554bc0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61711a76-8e21-4c32-aaca-ef7872aaaf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5e00817d-605a-4561-8cef-49c13f6945d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f8b61a-d28a-4707-b1f9-5d2e0a0de498",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec5dfed-6f62-4c3e-8f80-436aac9f0787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d4b783-28ed-4e81-9cb9-d18f3273d65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e8a2861-4815-447e-86aa-b278369673d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f27751-3b0d-41e7-bf3d-d1819727c0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6609780-7190-4e5e-a821-2e88c13befb2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f27511-fe39-4d4f-9e52-b957ea65ae53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c372bd7-d2d6-4e96-bb78-ada39870becc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e38e9d9-9f24-4448-b2e3-5b89fdd0e812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed108570-b6c4-40f8-8e59-50231bab9c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b80b27d-17fc-4e17-8231-c38a568c7b38",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d54135-c114-4f33-9e25-5e03b52e499b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7252108a-0ff8-49dd-a9cf-9e69a38df59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ae4535-208d-4573-b33d-177c39507574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19c73162-422c-478d-801e-8ba3783590f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6628f07b-7558-40cc-9b66-052723a938e4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4d4bed-5d3d-4eae-8b15-85fad1d4ac22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2741f790-a695-48f7-a925-79c77e3f1d4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a34e1c-9892-47cb-9891-04bcb3803829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16203811-f091-47d9-8640-611e40ca7b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e71a78c-fd55-4553-8dc4-ac8289c74c41",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18edccea-88b0-4a65-8542-124fc36b0de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12e8eea-c242-42a0-b6a9-333a95cb28ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2ab0dc-0d07-4472-bdad-defd686c01c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e96abadf-438a-4c27-b4d6-795eea2a571e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f4f9a3-c04e-4e16-a58d-4546980bb86d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a167c103-f538-401d-b1c0-73e762136060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6842e4db-3426-44c9-8f83-71e80ef1956b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44011df4-7a9f-4473-82e0-83fbe2119bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "689db6b7-8898-4418-9736-d16962c925f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a570fda3-3bcb-45fa-a302-a0655028b381",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f356aba7-ccfd-4023-b179-08cb74f8fd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b4a5c00-3710-4f1a-8836-c39ba17a188b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f57f54f-f469-4514-96a2-b9d91803b558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "53635080-83ef-48bb-866c-1d5997a66ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca1dc99-f11b-4a34-8f2b-86d90362a00f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214cc24e-37b5-4ab1-9ae0-f5ddef91e681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4b5e13-0314-4588-abc4-5a53a5569801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bd03d2-38a5-49bc-85b2-34077386180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1f3ceb-340a-4339-9ab2-ccb5febb3a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df4c91-9c23-498c-b549-395144ee71df",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a544bf4a-1e60-4c61-b9bf-fa40c7f8a25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1f6ce6-6ffe-464f-a9ba-d963eb03aa27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199ac101-1f46-42f9-8fc6-490bcb9b4aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a80b7f-2222-4dfb-9d99-146b4c72f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7803d0ee-564e-49f5-96a5-f47e8cb9f96c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55460e2-3d61-4766-b06d-fd18b7af1d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf001cee-83a7-4980-a12e-536a48eb7d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94455d62-ba57-4b65-a075-70e6cb8508f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f6c87a-7232-4881-9da1-5ef55a0c6409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de3ea892-97ea-4ff8-ba3a-fcf5b174ad24",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1c2431-aa39-4bcd-888c-b2ce30fc2ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7435e7ac-3dd0-4d32-a070-c03e1790c611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2f82b1-fd4d-49cc-9feb-1cbd0b2ca825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b607b606-99b3-4463-9fb2-b3dcd14b26bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cda5af1-86fc-499d-a266-88b5463a66a7",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145c9ba5-4f05-464c-bb56-e10c881f0a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b8ebf4-2029-414e-a833-343f0941c5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce08814-d15b-4399-8e17-682107153c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d6046604-5334-475a-803a-7740c90b982d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e235946-b0fc-4291-a7b7-90d08467fe44",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feaf61a5-de05-4a5d-a49d-200d7a544629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2df23b0-d577-417c-b2f1-6c334e9d6b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6a5d98-a5a7-467c-9183-2381895c9c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "112de623-c5ce-48b2-a459-cdd19d603b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0050acd9-291e-4fe4-9e37-8cf6713061af",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8ef555-3e4f-4e5c-b844-e29d113f9a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8738340b-c455-4ce9-b898-bd0e4a8b0fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8238a25-aaf1-4b19-8cd1-8ef070a20ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed13d1bd-e2e1-4b68-9850-bf2b785fc85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1b2c19-4b40-4c5c-a69b-ae835153dcda",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c58c6c-2256-4474-8db9-3af2e98ac40b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd24810-31d1-4052-90ea-f388c50afbcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1381f8bc-b740-4db8-b698-1972958ee861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed57b9ef-212b-4095-8ad7-50023dad21f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba65352e-bf0a-4993-9ba2-3751349bb6e3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a09c4f-6e98-4ea1-ae0f-04850c92fcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5e5636-44c3-418c-a014-f3cf1deae46a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ef2c60-b3d6-4840-9e02-9241b041283b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f07fe314-b5d8-4499-aea7-4164975728db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae1a876-eaaa-43b1-b630-1c1b1230a656",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e44c61a-cc17-4048-b70d-5814cd0c8b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d555a5a5-beec-441d-8d6f-1b15c02eb228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa6fe56-0134-4cf8-accc-f31feed40b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f12990-4460-4743-8d36-313e05e69ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c336648f-3422-4040-825c-2aae7ce47e60",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7555f897-4920-4f1a-90b4-f0ec0083f60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd65a09-1a00-46f2-a7cb-5edc7c85692b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56307e9c-f205-4a71-ab2c-b8ce56c2b1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b56521d-f690-495c-8377-e3b66bb7febc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d49a78-f272-4d8f-8bf9-884e3fe8634b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57130d28-36d8-4592-85c0-593ca16e6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897eb7ed-2946-4307-9c0c-a73f35ca3307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4c3906-1580-4fd4-af76-9be7e77da9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf7cea9-c418-458f-88bb-ffd5a0579490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a43d6a-61bb-4854-ab65-1ed1c9e35b1d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d4e387-705a-41d4-82a6-ca21e3a9bbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9c9b18-2c66-48d7-8f4b-23b4f45b7628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e974c84-090d-41e0-975e-8166b90d3130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f431091-4bdb-43b8-b285-d38232184493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cdaa597-1d7e-446e-b789-35abd6386f5a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e918ff-8d84-46d0-8c4c-4ba182ad25f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6715d185-722b-4d25-953d-d4276bb666ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5736a26f-ef5f-4d17-be59-9c4c532c9096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "20ba2eae-4ead-4669-9e0a-a9fe296f6583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5ba289-a140-46c8-8ce3-a5311b24d863",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e9a8b7-2a2f-4b67-8312-7f6a49b50128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84cd0b3a-8383-4aae-91d5-d7ac8e981efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0cb59a-dba1-452e-a225-4909aeb95ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "95ca9841-cb21-4faf-b2ac-296f0d9c2d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19405d9c-f7fe-4530-a15a-8cf23dd7c596",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05554a5d-5f03-4634-9fc4-f43cdb69e477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acbe535b-2892-4255-ad3f-e09563bfdaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64140ae-e5b9-4603-8abb-a539a76b7c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f4d8de-e1da-4a3a-838a-3d64ed97c599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e48faba-6e79-4936-b830-a36a8a7b6788",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7933fe-9104-469c-90fb-09c9eab3196d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a785ae57-0bb0-442f-ac35-1699bd0d1417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d774e8-b243-472a-b9d0-ca1e56e5f70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d4af50-749a-4b31-bed5-2c61a13ef3bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0edc639-1f02-47a1-87cf-5a8d85b58655",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5518ae-a57a-4e74-8ace-359870fa921d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b703bf80-fe35-4bb7-821c-af9c74f23007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ceb5c57-ade6-45cd-a269-ae3757fc8255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "621b8fae-b6d7-42f3-9116-ab05b98f2f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8f816af-520b-4103-9bd2-abb2e323de68",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d888dc35-dc78-48a4-90a3-a2ca4851dd48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14088b1-ae92-4a1a-bc9a-729328bab1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1505db0-fc92-4aec-b591-230d083eb676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6de77f6f-6de0-438b-8c42-13e096ecffd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6a864f-865c-4d50-b9de-df036098479b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b046c1-d390-4d0d-93e6-7d22553918f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf1d340-213c-4c48-ac5f-8de942a0fe59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91201398-cf09-433e-a466-f9ed794b80f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc93756-ea04-48c2-9204-9810de27eef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ff4e00-5d5b-4104-b0d8-01406da1c69a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d576427a-795f-459c-89f4-36cff66a70d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1165a3c6-d166-404c-85ba-3cd1f8efb3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f1f8ef-5582-4164-858a-4e275ace3fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "56bad421-75bf-4d31-aae3-df1ee1e3bf41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ba41e0-f54e-462c-bef6-c47b4d5284a8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fbb984-3064-4116-9ce5-5b83e6756bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ce5541-c10a-4949-a37b-fdb89f4bb5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226e0a18-77d9-4a9f-85aa-a906a1d8c0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "178ab5a5-fa23-4e55-b5cb-2f7143156712"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a06fa5-9e4c-4f77-8d36-4f872dfeaa2e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0f1290-ea33-4efb-9fcd-146581aca9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead57e49-7d14-4d22-9b09-cdf558b46a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0e7023-f299-4ee1-b01d-d198adab4a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4766fa-9d7c-4d99-8550-e0146f7ac85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cb5744-ef3f-4e4d-87ed-61ca7f39e7c5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee93af5-aab0-4479-a453-e25cc13d367b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808f14bf-a80a-4eee-a37e-d83e98cbea9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876a48c3-37bc-437b-96fb-9c125bba6fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d28cf8-0035-4b84-b983-3bb8c2e10c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79986f88-0c30-4eef-a61e-e179b08c21f3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b935707-7e2b-4167-b01f-2590cc83a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "653f135b-6abf-4fbf-ae4a-64b8ff2d624e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70987f60-6e30-4233-a584-a76405ce5ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74994c9b-3361-4dc2-9f74-a847252e891b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b92649-4e39-44c0-8d84-57f78d24794e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ecd5ac-b61e-4f18-980c-22fc98d8a826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befb7fcf-ae23-444b-ad77-7af5d48849b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7020d8fb-fea7-4bd0-ba97-c5c659893f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8f91236b-713c-4556-82f7-63fd26b35c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc94234-abff-4456-9365-d0ef9c9844af",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a463ee40-2aea-404b-8a54-81247ff304bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1788846-007e-4248-ba36-5de809cc8dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4250e2f-43c4-4d88-9ef8-c14f3e4ad9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c268c016-de30-4227-bb6c-ceec9728ee73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66ec8c4-c508-4f7d-99cf-4282a1494cef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244d1759-08ce-4d36-9475-0cbbc5f8d6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86db1d14-b2af-4ab3-9206-7925d98cd766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d8f287-317c-4399-8b4c-405cc46c755b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a5aa2f-a51d-458e-ae84-bb365d225f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383ae6a2-7b2f-4101-ad8e-dec1f0e12067",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540a99c5-3572-416f-92ee-318b0ee0debc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8607e158-f217-437b-a471-40ba5ea5184a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed5858a-ec30-4ff8-b784-75e70a9e9950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4eb54b9-5b39-4862-854a-2924662c983d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0108317-2d47-49f8-865c-45295e5f2f7f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e72e27c-ddc6-4498-a185-c44c03606530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3ec67a-63c3-4899-9e63-2a8590732157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572f289d-f019-457a-9716-d2fea8feb07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "359bdfc4-171d-452c-a23e-1f859a069822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c948f9-aa3e-4f72-a10e-4a4c8ad726be",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c5f0b4-082a-44d2-98ac-0f5aca113117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3cbacf-190c-44b3-b877-0cff5019e3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894f3d20-f123-4015-8011-a2bded417d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "01ccfeb0-9149-49ea-95ba-bb19442c817d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cee463cc-0e26-4dc2-a14a-91809375972f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c9257-a6f4-4180-8697-37285160f144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05596d37-a7e3-4eb0-9619-8cacef9dd56b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e9c967c-4fd2-437a-ab72-c8d195d9cc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4bcd8d3-2301-4471-b1e6-f854d0150fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0127c4bc-1b77-404a-b563-920166529e0d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1945d1a4-84af-4cd3-a16a-02e5b6006c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c8e023-31e3-4093-9cf2-98d5292da842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4ea993-360d-47d4-bd31-ad8fb17076c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9113a1d-f208-417b-948a-57712754c018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a340fe16-5825-4711-a7b1-461856121fa1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8b8cff-1086-45e6-9788-ba3dd6ae691d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c01f3c-8384-42e3-9ddd-569e620b2a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fc8ce0-39e6-469b-9738-6ab8e432ab25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de130e20-2b3f-4ff9-bf47-80876049c72a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6235ed2a-e84f-4924-bbd3-40902f877c62",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a145174a-f7e4-49f9-8e2e-11b73446a630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45e5132-337e-4563-8fc0-82ca4fa31d97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb61b73-ae5c-48a2-8e6b-e47c12147362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b29765b6-27db-4bf3-ae40-7ef7bf5f8134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cd62bb-0718-4323-86c5-5dc9645bee56",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5392b1-fbe1-423f-b2c9-73e99d3c0393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0382d9ce-fb59-467f-a482-6f2beb4d6d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "127a705b-9452-4c5d-ab91-ecfb9c7ea4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f32914e5-0cda-4b97-a015-586c5aec013b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693584c8-8170-4692-a7a4-a25a6f12d810",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef81e834-02c3-4b28-9282-c625dabc8d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6792072c-9bb9-4081-86a2-cabbfba45e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d8ef97-793f-45f6-9486-8be150eec52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "368f696f-7357-4ee2-8172-ae50634f1f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf920102-7fe6-4989-9c69-ff81a07c50c6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc3ce58-b7fd-4737-8adc-3492a253296e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36435103-e2f5-449a-8902-3447bac3c062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896ff1a9-3949-485d-84aa-e3a09de3ee1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "af15be52-5617-40e8-9349-b805f98fc187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00c065ce-dac8-400c-80fd-ddd1f0cb05c8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c164dd-cb7f-4b63-bd85-9c7f3a55808c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029fe1dc-098e-4741-a48f-f6b90062714e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b61826e-50d4-40f9-8608-22e1d4d38d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e71520-0938-4da2-bca4-ed94616c6dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ed02ce-3c3b-459d-8072-298d9f445d8d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88aacb29-c575-46c1-8f96-6c7783829ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dd45a5c-8350-4b7a-8311-dacc39229b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c67f4d3-bd52-42dc-a7c9-18f0c9618881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "07bb2c0b-5938-49d7-9b31-c340dc70c28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c245e074-e1db-405e-8259-2685d658ef89",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09103e38-45d9-4143-a196-afd768709916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f875b6-7871-4500-b461-2156475b40a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd7d1be-d390-460e-9e56-9dcb5a94b84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da01d5a0-2f04-4639-93c0-4de49166c7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a645f2-64b5-41e7-8233-cd4de88438c4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa07d3e-fd1c-4b82-b3da-36e048ce629b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca9a7bf3-a35a-47bd-814b-c78a2525174a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe9e39a-8ada-4bfc-8042-e7cff127a44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07e4a5ad-bed7-4325-8d4b-3ac19ace6c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b2b09e-ea8b-4aae-8089-ca6e8090a944",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7036e68d-32fd-4d52-9fb1-6e3465084333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f0ec02-6655-426e-b1a8-8eefc7e67c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8353da-e233-4305-9ea0-9a763ed88e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "040b43a0-b86a-401f-8fe1-aacea7474744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65873fb6-3fd8-49f4-a052-36a31e7176a0",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924696bd-2cf6-488a-bbbe-440ae233eaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701e203a-ff13-4adb-a788-b6d4e6538fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceded9d0-6abd-4672-8c01-a2d49c3ef5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70bfe60a-9229-4061-ae1b-c776eb3b2d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70231fe-609a-4031-93a5-a7beb15a3566",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5459ad3-143c-4a40-9a9c-13cd1141fe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2647fc94-c3ed-4b44-9bc7-761bf8daffee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b8ac3c-7e77-4005-8a74-93bd953f5c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "026766b6-e042-456b-8e5b-1b4c405b8596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1b7432-bc41-42dc-9f8e-123ba71c65d0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567856a7-a8a4-458b-bcad-dbc8510e0ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0723db56-2c3f-4ae5-847f-6cd1058b49bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d685bc-dcd3-4797-8758-03f35160ec1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eaabccdc-7724-42d7-a553-7ba1ab7b6a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eac188-417b-45c8-9fc9-d788aa9e3339",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6110a0d-4ecc-4528-bce1-6ddfa09172c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04892eb5-a7b1-4149-bf3c-9a5c7f7ea5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf4ab3a-0f26-4d86-bbca-1336117000c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17279147-0838-4afe-8a8e-176383257c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed4ce0e-3413-4520-8a1e-c060a0f7a936",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dd9f79-e2a5-41dc-a485-d57c4fad26bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1558bdb1-d7d6-4264-8cc6-8542527e5456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d481e6-5dfb-4c14-8b62-bada96d1c3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc65e389-e505-41f7-b713-b0837edab7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499e0c6c-7cf2-4bb7-80f3-776d86df993f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8a928d-7f81-49ce-8011-5112ef1a7ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3644ee-5129-4db9-87da-44b07417e346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e12487-6dc6-4520-830a-6a4246871db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "440d7fbf-a50f-4e68-9000-60bf4336fc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af7c8143-8378-4e2b-b16f-9db0baade640",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2c9108-e592-4f72-b980-dcfcae586bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d19643-d133-4c3b-9e75-95f05a5037c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98331dc6-473e-4b2c-8a69-de2b20846cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "28ed7e6f-5e4b-4e30-9af3-9af87ff2d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24681e4-2326-4e80-81ce-fadf9ebc32f6",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509ad8ae-410b-42f8-a485-9bafd08fb8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1490a9d7-6e82-43ef-8f07-ac2de457dfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4caa3b8-4efd-4bf0-9c6f-e91fa9ea6d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a940b8ae-598f-4e9d-a11e-3e9e5abb09fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018a7bb9-ed10-4254-90cc-c4d446f00c5c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52b1304-31a5-4ec3-95ef-9ff202c161cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af372b49-be08-4303-a7b5-cb35f9752acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad3f769-1a43-44eb-9191-04405f869cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b0e554-1bf2-4307-871c-a92d46c9e9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bd687c-fb0a-4464-977d-6d90ca53dc23",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a242c93-22bb-49c6-ba5c-a06fe7f8a666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aae9d7-3c2c-4cda-8d31-c6f745df76c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaed567d-2171-4f06-8672-57caca6bc7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d509574-c3c0-428d-8f4c-191fba1f64d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea32e18c-f81f-43f5-b008-71c5f39dbca0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f11056-13e9-4fc0-8235-6d982389d338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbad987-3d5a-42d7-af32-749580a76d6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a213549-f41c-41fe-be7a-4491c36f2052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f41fd7e4-3cb9-4ae1-ab47-39be5627c099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e91f8e21-e099-47df-bd73-61f0a05562c5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee597f6-d79b-4fdf-a812-1349928305fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccfb670-d7a1-4ff0-b23a-4385d67b7164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81bd0b8-6f96-41d0-83dd-0ade79164b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac243c21-20c9-42a4-a955-bb09837f8604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6213c007-fa52-418e-98d5-86f2f1298545",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d000e2-9251-426e-ab0f-6a97407d6d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8ba5170-c3f3-4010-af83-0196f4a747e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0873fef-3e57-4b65-959b-d374b51d4689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4b3057-10a3-4827-be12-8e79fcc6c19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0cb84c-7c32-4200-bac7-699a01e7f332",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bfe4b6-a325-4de3-8f16-9b4c7a11efef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48b2408-3b03-4ee4-9081-1f9badc34d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eaed830-544a-4ec5-850b-5422dcfa7e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2a3f3b9-1927-4579-8fa4-006e5e8e2c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2bb4f7-1b11-4049-8c12-d142ebbb9309",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3037d651-928a-4baa-8fe4-fbf063189ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82eedd19-38d0-4fb9-b940-0e531c90ff67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554833c6-f993-49b0-81b2-2669e9967343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1316e9b0-9504-47cc-b849-d279bdc7c47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e042ba-8c12-4402-bbfb-39eba8134383",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdccc8e-48a8-4f8a-8ec2-cf05e47214e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f69668-04a7-4d90-8422-710c3828e48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd0b432-27b3-4eb0-8abe-0ecb31438248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3e8fc26-9fbb-4c11-bf98-4c8002e80854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c90e2a-1459-4603-8754-1c7bc6696715",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2cf001-0de0-4520-bde5-bdd6f9a770c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19cb4aa-fc70-4bf3-97c3-14d0b9aae1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda16959-e480-45fa-8b6a-9ec3a48553de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "db861392-0aa1-4809-ae82-2d2a65607883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b7f47b-757f-40d2-952d-edf415e2cea0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ced2eab-461b-4399-b10b-d56984d4bdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f340edcd-0d66-46be-ad90-04952c728441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5d1a52-3464-4565-af58-8806512ce8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe1886c-24ce-4b5d-94cb-bf650673090c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21590b6-e1cc-49b2-866f-f5580a7e1011",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f8cd12-a233-4016-8d84-8c608077d99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ca6fa959-3bef-4b60-8a1b-e812882650b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddfec05-69a3-4dd3-ba60-77aa58fef3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "031f8a40-efaf-40f9-8517-64befc124282"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9a3f70c4-6689-478d-82fe-af1de43a32ab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81878246-78c5-4189-b556-2fc624dc01c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a819eab-ef5d-46e1-8595-82cf1bb4d1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db9c0096-7847-4f7a-a415-251e35adea9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832a6529-624f-4b82-bc01-e4ab160981e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9280bc6-8fa1-4cc8-a0fb-ce38f10f98ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9909bcb-2d80-4cbd-a150-98c8894ceddb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "17611f24-b401-456b-a0e3-36ed340a51c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c45ab65b-ef7d-4cc0-989b-677353c4650f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6ebb92a-49fd-467a-8376-e742decbdc88"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64aed9a8-47d4-46f0-b66a-6a700668798c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "42f10bf2-8d57-4e36-ad9d-2ad0bdcc7fa0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5edec14-9fdc-4d96-858a-0d3597542924",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eba0c078-becf-490d-82ca-87e26988a2bf"
                }
              }
            ]
          },
          {
            "id": "31366d74-3821-42f9-8529-86b500d05448",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a58eb465-6a7e-4cfe-bb00-5cf4011e0c1f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c618c479-c80d-4a17-a946-23f3906c2285",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "089160ec-f985-483a-9560-856f59a355f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cc35a6fc-af05-42ca-8ed5-36b038024f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76548bb-eff0-4e48-a475-22627c60117e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a138574-c482-4250-b5b5-bc0ff5231952"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6c02299-18b9-4fbe-97b5-9f6897553840",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afbce472-e787-4551-b9bf-16c35e48be63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "32046b94-bf2b-44b0-be80-7cce21a5ce9c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ab70665-51c9-498c-a54b-aef444577e94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ef49f328-5059-40e6-b536-8daf7786e711"
                    }
                  }
                ]
              },
              {
                "id": "f307ab80-b601-40eb-a5c2-fcd7c0617152",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38a4d564-9b0a-4d28-ab36-7334bd4e81a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db8f1fa8-8de8-4e7b-ae56-9ac63e17b58e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3c3c7a6-09c0-458d-997c-c6c0e48367fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "368804c0-2744-42e3-9cb3-33f4e98fc9a2"
                    }
                  }
                ]
              },
              {
                "id": "2434ab5d-5d9e-44e0-ae6a-5d496b073ffe",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c04e5e2-b344-4528-a9eb-c2367454648d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61d3be18-0b01-4cbc-920f-b345f8e544fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26612377-76f4-4dff-9971-2667a0e30b40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b7ce4c8-15bb-495d-ab46-5c1c64ec310d"
                    }
                  }
                ]
              },
              {
                "id": "3b441821-ed39-4d70-960e-74ed81043706",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9025a3b-d16d-4fd1-a583-6ddbd8dd0921",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87367752-930b-4c32-8b92-e02521d6b814"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2c8d791-e03e-4bca-99b5-205b98514a87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "06ec66bd-0cae-4d31-9dff-bbe4d4102669"
                    }
                  }
                ]
              },
              {
                "id": "9feaa8dc-b17b-4dba-9f49-aca91491f6fd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1f35e22-ee26-48b2-95d2-eee6d4837847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2187d6c7-e093-4f1b-b3ab-4bbb28fae30f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc2e9c1f-f708-4616-ae28-245ea5ff7f0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "610a3da9-83b6-4606-a665-d398de313a0c"
                    }
                  }
                ]
              },
              {
                "id": "354ed942-6c81-487d-8914-18b798d93967",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "174683bc-532a-419f-ab1f-c3008511c21a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1500b333-f0a9-469c-a659-5dffb092ca7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82125f31-5ea1-4d21-88b2-369346b0d0aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3c5c460c-b7b8-41de-88c6-c1d663beebfb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca098f14-6663-4ddc-a047-5fb44a551e82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e692b5e2-e8a5-4fed-accd-e2ec173ceb67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fbd64731-8ae2-46fc-a0ac-485d087ac647",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "07401c6b-9cf4-47df-8999-d55cd110777f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d132a632-6dab-4c9e-a225-2fc68fa45ae4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8d0beba8-77eb-4a7e-af3c-215fd783196d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b188fabc-6d73-40dd-af22-c403d22f8112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd6a3fe3-ca00-49ad-a8be-7e864331c5b9"
            }
          }
        ]
      },
      {
        "id": "048c0c53-2ea3-4c4e-ba1b-1297a7e979ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3a4dd35e-32dd-4f7c-a45c-9b99cbc7cc11",
            "name": "Negative Testing",
            "item": [
              {
                "id": "816ae746-bfeb-4ae2-b283-286ed8f3270d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d1eb27b-309f-4fed-becc-dac7430f74fc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2787d560-24a2-44e7-81b4-edb330065333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6853e459-5809-41b5-98b2-12bd8caac378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4de3a8-9004-4b02-965c-58bf87b1156a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "19777d23-a0be-435e-b624-ef0cb322cf5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92b931e-bd0b-479b-9631-3c92248c9c43",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae15ca0-ad86-4a49-8185-488a5db807c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecf8a2a-ec50-4265-8c09-2561115bf24d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921a46e9-97a0-4bbd-acd4-3e8e9e03685a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cecccf7-5840-471f-a533-11ab89caf854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73e9a41-3dca-4408-86d3-9fd1dbbb456f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace516dd-7c27-4311-9050-4fddb976eb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eaeef45-830d-4dd1-85b9-8fe0398185a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dbe38c-1d0c-4663-bbaa-d91807f2b6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "26134a91-f125-40dc-a5f0-ab77e95597f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f240a2f-4234-47f2-80a9-75c5d25937f9",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1914aada-de85-42fa-9625-58995aacad32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861260dd-17e5-4c59-b84a-a146eaf40e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a4aabf-d203-424a-8a86-bd787046f019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf655496-f56a-43dc-9384-ea355c499b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd48baf-b233-404a-ad34-5c52cfc37648",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60a6e99-1a3b-4153-b6cd-8efee671d4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d6cd59-57d5-46c8-9df6-7cddb7ee9a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ddfe72-416e-4f16-9b89-37ca24cf0e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62c5e2ef-c05e-42b3-b1e5-2a9b5dcfd5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3736b552-a708-4c90-a4db-d27582375740",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ac6e099-adfb-4cee-bd94-5958438c08ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10bd0563-4a9c-48d5-a332-d839f8babca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73801ad9-9a74-4f7a-aa8a-4dcba3bbb6ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3833461-b5a8-413e-8523-672ea56a9d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a1e7f3-017e-4a17-922e-6339437ec278",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3721baa1-6814-4e9d-8837-e36943b0fb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600646c5-3299-4d2a-b571-43e559f063bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93af03b0-54cf-4f11-89b3-5cfe678aa54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5834cfd4-dd79-4f0a-960e-efe0730f8e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc20a97-e3cf-4944-9963-f7447f28ce20",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995a77f7-6330-47b2-a82c-3a8353820295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a82adcd-c852-406e-8594-2f5df7fc4466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a301e8-c9b3-4fce-bb66-d68288db0f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2faa6d4-cad1-49cc-aae1-355fa9f743e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d77013-b378-45a9-9561-242db137a62e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32023c29-30ba-4b4a-b0c6-eda8a1705580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a96db449-cc58-45b2-b7ba-75f677126686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b92b9b2-ed32-41df-a8ee-c3ccf2b7bfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e4b3de6-6e49-4dd9-865a-80e6e1cd705d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263b16cb-e07f-4d09-af4e-c131b3cb8458",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c4a6ad-bf30-4a91-881e-336ca0d62996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0443b90f-bf48-4a74-8d68-2d95ae8ef34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffb8f49-63ee-4539-94d2-1d1249df618f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b97ef48-3fe8-485b-8c63-7af7cb8b7a93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bd569c-74a6-443a-8610-35e8ac1affd5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61110431-1d5b-460a-ab4b-15428c2eb4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d99251a-5df5-4f6f-b0ac-af66d582161e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56842b86-a6b6-49f3-9e99-29ce56437add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4e307fa9-09bd-4bef-b6fc-bcfe7a0aa3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cbd2b1-3a4e-4ad8-9f48-8b4afff70fd5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d54de0c-9b72-42e9-98c3-54f9a946b0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834b3b8d-3d8f-497c-a0f5-47fc5c936690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0ed72e-1d92-4080-8923-eec36b786d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2781570f-4a0e-4dea-841b-46466b656be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6d89a6-f751-47c3-9134-d5951920b4ef",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25504e9-0338-4d77-97b0-1f7ded56f3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa66fe7-d9d6-4d6d-8005-cb7225c0d571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc23924-4d44-4753-92dd-12e2d5bdc33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d8a48a-8902-4985-ba1c-7803d986a84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4fa3d1-cfe7-4149-9aff-1015af8bedb2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2517fef3-0f49-4bef-b373-76bba762cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56b65981-f6b1-4eff-b894-bb53dfe7a707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e99bb8-43af-419c-a4cd-6f8657325172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecea9aa5-c3bf-4ac0-a1a7-04d807ca45b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce66a503-25e4-4130-8183-75d952c83cfc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7841ed9-9c37-49f0-a773-5808e71e5a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca949dfa-6426-409a-af34-9ebd1e1085fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da27ee2-d150-42a1-926f-803b427e8738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3620781d-b441-4940-9ee7-e8c36052cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4144438d-1c99-4528-ab6b-fab799ce7045",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7467e1b-a941-4bfb-ad32-4231f88cfcbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e682211f-c88c-4514-aaf6-9cf34041a0f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435ec00a-e78f-409e-9465-0ae0ff7e361a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "960352e9-92d1-4f0d-9af4-adb698daab33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5702491-4395-4015-a6b9-8293962f733b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4eb755c-4870-4b0c-a808-4560d1d8d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61843ae1-7bf1-4ed9-896e-208fc3530970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d06c007-1547-465d-afbd-bb0c61f6d2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e74fcb9-1a46-4b6b-b925-d46110e39e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba5da0e2-2240-4d1a-ac3d-a17c762eec7e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5823c6ce-edd2-433d-8cee-181169b214cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63355dd3-3a6d-4672-ad4c-9b97e3052ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777a0515-0497-4e61-b821-a119724caaa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "075271ca-bb71-45ed-9c92-946de8f85306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29622825-a515-440b-9d8d-3bbe29428f23",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4855dca4-b78b-4c16-8983-a3f88734d924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8d0a14-4426-4892-b90e-5659fe293f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6c5604-3dfd-4e2b-9246-f89307a6f633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fed9827-c3f5-49d4-8596-c33d53549d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7caefb0d-5284-4eaf-b9b7-ede4f62aa05b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f983e1-0261-41ab-ae36-2155436ed278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f60be19-f137-4d12-84e1-13d5a836accf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f1e153-9e58-4123-b54e-cccae2115c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c09873-b193-4fcd-9f73-09ee0838eeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a22f4b5-8d4e-4838-9449-1c7127cd2ce4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa5a39d-136f-40da-94b8-800911c1c3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9ba008-7c12-46af-87d8-207a03fd5b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72f521b-e2b2-404e-9d26-0986a625f29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d244aa-09b0-4160-8d4b-5227c9a54959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9680b3d-5f94-4582-839b-2d7549a23fde",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e483221c-eeb1-41ae-803b-bbb5168edd45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "469192bc-9665-48f7-aaba-5fb066e71d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d087eca-78a9-4864-9289-60554a0953c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb05778c-89b5-485c-afdd-0a27401c5f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4d1411-6731-4980-ab92-bd130d251435",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bac299b-f4b0-4a22-a017-625fd54fef1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b2d2fd-6448-4cbe-883c-b96b1a28d7a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1a21b6-080f-47cb-98f3-73c9ff1940cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "304cebb9-a879-4395-8754-c832e762ecfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d948abe-e63b-433c-b02e-5003dd93eb2b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e98da9-2e56-45f8-b436-0fb374b93253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf0e903-a495-4cf8-84f3-a287a48a3dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6644dfee-fa75-4321-9e0a-49e3377a3c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "752af0b3-8973-4256-a2c0-bccd79663b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e19ab76-33b1-4246-bdcb-c1f5f49d29ba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2ea9a3-1901-4835-90ef-dff10fa217d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0895bc1-f8e6-44ea-accd-3009afb2f613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a69c641-4def-4237-9fd1-436fc862a16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "191cb720-bca9-4e2d-8052-bd885744257a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725e00d2-3068-42a0-a32f-2552a4474433",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3032522-7577-4462-87ad-85fd40509643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0530026d-d388-4dfe-b2b9-5b93927fd3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983bfb9f-e707-4b1c-880f-0fcdb7a6f9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e747a0-ae19-4b3b-91a1-fee7ca0c9044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1ba86a-9580-4b12-88fd-06e6dc8c7be5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e6ec8c6-6f2d-4749-b890-ac8ae7a3cf20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78160266-8998-42ee-a45f-a2fb5ed1033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbde1cc-dbbf-4f23-b785-24b724ac0b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e50facc9-f5a7-4f2e-b95d-6aeb041d8535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdbba76-220f-4a7e-9129-814ed0375dd3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "986980d4-af1b-4fd7-b9b8-3bd11c8a08b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903fb937-458a-4e0c-bfa9-359065b8e3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e26511-6a62-4811-9f73-8764d107a810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0aeb0f7-f921-4ae6-a5f7-a045efe62b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5526f7-f9a0-42ea-bea7-2bfeb4b25e3e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4bed72-2945-4c1b-88cc-45b0f2a785e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7ad9ab-2402-46ae-8bb9-510c25400154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f43c8c-d434-4b19-be09-453bcc1430b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adee6f94-9375-403e-a57f-b1bdd9db6324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cac8a9f-d850-4292-8803-bbb6317c5f3c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad33a26e-7d91-4d56-885a-4115bb816a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7c7ebe-b0d8-4a25-a4b7-116551e72ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5916adc-a4c1-49d9-a504-836cd947d4db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9283b571-c8a6-4302-af64-3b6d71a827d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111d3dfa-eb8d-478e-b923-e1bc8dc7df13",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba34592-cd22-4961-a1ee-f514bead496c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046b95b4-3487-48c0-abcf-826495f40549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8debc001-4e93-4fbf-93d9-f913a5598593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c65e584-5eb2-4071-b3a4-bffdb21ca246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8ae850-0096-4112-ae94-169f7b64141c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2b3396-e507-47de-b3d2-687b9ce13a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e09a8f3-2608-4ed0-8d46-5b87c903b164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c28d7a5-c758-4ad8-a70d-2d0b09a622ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4fed1f2-bcdb-4090-a214-e456abf8cb42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0e671b2f-e5b1-4eca-a310-9088f2534afc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "88b0b38b-82bd-4f2c-ba0e-c793098c4626",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1abefa-a1b0-4527-92df-2b9dd6281daa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e12adfd-7c40-4423-bf5b-5e6bb350afc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d2388e-028f-40e0-adce-d4bf2f0f9427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "627794fc-afe1-415d-b9ee-1d0fa6b65c0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37ab8ffb-efbc-4b59-a8b9-5ae3ad3a800e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80dae244-79f1-4d6d-8023-6a7ed0b69ff5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20ce5064-3342-4e60-bb07-b22a0d588d77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "373644bd-9ebb-41a7-b89a-16e0923be6f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a5f4aef-839b-46dd-8c4d-25bf6717e89b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f976dbd9-31c1-48bd-a090-4f3311b7f17e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7e63c02-a914-4943-b999-df65ef5c2f37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dce3f9ae-0fa9-493e-99c8-0b4eb139a688"
            }
          }
        ]
      },
      {
        "id": "6a16330b-fb40-4feb-b1da-651ee1b4977e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "0ae9ce77-5f6b-4a73-841b-cd87a9a2d909",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b5214b9-7695-45e7-803d-b20e10b50b54",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fcff5a0f-5546-4b1b-99f7-8d1d3a6c0b95",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48218746-a72a-4c17-9dcf-4fff66da7706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c62dabc9-a0af-4f34-b633-03da5ea1dd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba86a1b-6756-469d-b185-76fc77a79fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "45984373-f306-431e-a9b7-39e9017816e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5a35a7-0c0a-4a5e-9ae3-cce03b03c5e4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6f0c48-61cb-45cd-9600-b0e57245efbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7e1496-c6bd-4cdf-910d-856cecca2162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a60cb9d-06f2-4fd9-8eb3-87aa0b2883ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4819fa1-6c2d-46ec-849b-abdbd38c2d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6abfdef-7c00-4642-9539-3cba755bc8c8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148e0d53-98be-4d02-b561-428317cb13f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53b8d5e-9191-45b8-b258-207c315ec61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6468a900-edd7-49e2-adce-ebc2543e0375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92026724-4dac-411c-ae66-d1174cbb32a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c60754-9955-44e2-816a-3bfad4a5a423",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acbc0ce-65cb-4b82-bb79-4cafb8b2b9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6f20a3-e67e-4172-93dd-013a5ddaae05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8f4b9f-52f2-44d4-b64d-8693681d5980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c776e3aa-cb15-4b42-a06c-a0a100a91dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea5ac7d-0ee5-4339-9104-71fc9ea6f8c3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab0a4095-6a4a-4e3c-812c-26da0dbf4954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ba4e9c-b002-419e-8f31-26ef6a3eeda7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862544a-a930-4e7a-82a5-d7a4c463a74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a4523e3-1186-43dc-8870-ec32bbc5aa91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db09747-6062-464d-8c73-c37ddd24500e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6ca0d6-3a74-483f-acbb-feeb1fb25e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e199a986-3115-4ab2-8d72-2eb5f79aabde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9153107-d907-4b87-803e-df68be5d12c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bedd9c5c-1e77-4ab9-b5bf-1834e15ed75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b75118d-17f0-4750-8397-a966aba1f1ac",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fcc8e69-0b91-4e18-b00d-3b31e60724c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785499c0-0a8d-4f45-a638-c56808a440f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67cbfbb0-eb60-448f-8b25-fa7fe7f4b54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f92a95c-3405-422e-9f4e-7da355d1c022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3bb47c-245a-4862-b279-fa8a0d19c392",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d44e83-5e4e-4292-9799-ee4ad818f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6299d67-f4eb-446a-9436-b7e1755bbe71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51848e4e-4f14-4bea-b1e2-8e27211c3874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e9587d-97a4-412a-9f6f-9dcbde9e27f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e033e76-74dd-4b8b-9673-4c6a711368c7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81784831-a63f-4a50-977d-8346bb62aa53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a97632-49b0-4bbe-9ddf-09ed1e9a416d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b96fa9-05f2-4509-82f0-612b08c45a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd42c9b2-0494-4574-8da2-2bd5549ce475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9b32bb-f5d1-480e-b199-9a299e17b249",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af092d45-871a-4193-8c81-2352680b9a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1dc2d2-7306-4ec3-9c9d-854f9be49996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae91570d-65b8-4bca-8d6e-8858ffc53cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "202357c6-48ac-4afe-bc54-2118a005809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e006869-983e-4624-ba1e-9a3c4d401e38",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc00fca-be0d-4596-8dd7-46a3b7dc76cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de998473-236f-4cd3-abb6-257cc211cc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f8d55a-62bf-48b6-a396-d96ac5a42c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0612d671-947b-4100-b0af-95d6cafd084c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31277e4-e618-4469-95d6-a7d5be335e4e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9659e938-9563-43a3-bdae-16178eaf0484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b897ec4a-e622-4f11-b271-eb70190f2d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121e217a-e7d4-4c61-9ba8-54066969af32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc6e4c7-d4a5-476b-a4ff-ff31b9723086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe7cba4-90de-4e21-b574-26f4626ec15a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1975f5d3-b456-468a-84e9-69bac40ebb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2a84e9-a51c-4e53-9f5d-1f7b70593c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba98ee53-21ee-4357-bb38-69dcee08c9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f989cb4d-391f-4f66-806f-a541cfe07572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2657b4-44c4-443e-959b-7cf40ab5f992",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb1dda9-a244-42ae-9d92-ac6e8a125bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aeadc27-275d-404a-9982-8117cf8592bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273096b0-f3d8-43fd-b555-5fe9b5b8ef04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "325ec9b4-9f92-4f8e-a67a-7cc597379e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2192c31-2666-457c-b904-dd3de9f51d5f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61f089a-362d-4de9-a7a4-3fce1e0b1a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ecaf88-e75c-4803-a706-49a7c82bd85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de015e6-89fa-4678-b8ad-73976dfb8ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba36f8d-21db-4f8b-91fa-58ae2a9ce647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20189e1b-430a-48cc-a58b-d236c7ca5131",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb050e1-607c-4852-bdcb-16ee1995f53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435de55b-75f9-469f-b470-7b12f10bbba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6465f66-a07d-4bb1-91c2-02077d707e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fda9538-df60-4a0f-be73-be588cbfd756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f6bce5-99d4-4ca8-b29a-79cf8c093868",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a1ff36-1759-4343-b029-d5c4098d1d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a730405-1235-4e41-9286-f2e16e3281dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1994a4cd-6a70-48ea-8486-42d9625d5e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a6505b-b425-4569-85c8-0a704ab6817a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd4734b-4508-496e-8968-226968228232",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fbc5af-4d2b-4bcc-8c87-3858772a853d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dd79b0d-8faf-4eca-b9e8-a23b8d09adbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7d8f83-75e2-4c9c-a359-17fde8297e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce4dc5e-4137-4357-b628-be134372dc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce971f3-8950-4e39-95b2-70932adfa759",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9500f171-ce57-4d7c-9fa6-fc9ddfdd55cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdb5ee57-b0a2-4741-a84a-7e335ff28450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60989266-69a5-4fcc-bdfd-4f12132ede8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d055cd14-3a64-4eca-b736-e4abee1ff91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911821ba-7a20-4beb-b900-07f20746327e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9935159c-14e2-435b-8a62-54a987f0a586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd9e161-1985-4cce-a86d-62a64a609fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe57620-daf6-4be1-a2dd-876de1a3e2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68fe6681-83b6-4d42-8f02-6d2f414ad9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c3d2d1-b2ae-4592-86f7-d3148cd09e93",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc0e492-7dad-4b7b-a895-0e7afd360281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80b8c6b6-dac1-4fcb-b1f7-ca874b731bb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f0a365d-c4e9-45b3-a5ee-bf456d06a4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6851f022-4661-4f15-95ec-2b454ea9b365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf2819f-4da4-4760-8406-3450cc44edca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4231da9f-6cec-44e7-8970-3c938a5d86ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f187a87-4c35-4aa2-bab3-c6cf88b571d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217ac9e5-a9ac-407c-8e41-17eb409fba30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e1436fa-ba9c-466f-917b-1cbdc92d1969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ba1f94-1110-4e47-b953-65ea32541663",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697937df-eaa0-4e29-9b59-a5b77ec057c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23952696-c353-4a3e-bf55-53ce7aeffc6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b35b30-259d-4810-b5cc-0f58503b4237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8cb9da8-cab1-4d6e-b92b-8b1589e51d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454c2bf5-dec3-4926-a09f-7545706d19d1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f8a1ba-28ce-464e-b39d-291c1a012be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ec4b17-7b67-44b4-bf05-96a20d92da33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d179bcbc-be0a-4cac-be42-1e3441ca787a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a367c446-7eb9-4c3b-97d4-316b164431b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7ca2fa-cfe5-4d5c-9167-85bbfe5a7bd8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63874af6-4716-4be8-836f-7f334f3b5c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d4c869-a459-4a2b-9cdc-8786d1eb8f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb514d2e-2a4d-4cbd-bef9-9a83a57421ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ec09f4-ad26-4fb6-9956-700cad51ae10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a25a59-7c75-496a-ad0a-d0900917ed81",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0367cdd0-02eb-4491-b1cb-324324de2cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3331f8e5-c63d-4e71-87d4-18cbd908e740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e491b9-2a53-4686-893d-30ad202c9507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0a265d-48d5-4d17-8280-d20ea2c6119e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b3f1fd-4bf3-44f2-b100-b476d4920d36",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa75e456-93ff-49f8-9226-43227dd623b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b485eb3-661e-4cd7-b1da-5247d1245113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc55cb7-327f-477c-98c5-0f174ad04364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d5a69b-d055-4961-bc1a-36c2d33c34da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c566a1cd-304a-4809-a0c3-605dbbe6a66b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513867dd-95cb-4e17-9a11-faf2e73c8675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac02d5a-3c28-466e-9525-e1fd386fb1c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f53751-0cc1-480c-94d9-c433324ab5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605e566b-5513-44d7-8b1f-5468bf2ef64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50581b60-6593-45a0-b9f5-dd591f66289c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425010ea-8cf8-43c3-b895-6047f71a6b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a1cea3-7389-4e20-931e-794ea850286b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc62b3a4-f69d-4c7c-8bb1-fb4df6c6bdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c47413-5342-4bb0-a6dd-ef7e0f8ecb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39869bb4-02ac-4b7d-803c-93fc09e6043c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b9b86b-990a-4da8-9469-fc6607fd1386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4568b335-a836-4c1c-8a2e-a01ada16536a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210b44bf-b091-4860-9804-500358149eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd60d2b-16c6-4e46-8a7f-d82c0d78d0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c64ad1-0614-4695-beec-0943c3bac9bd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "628462ff-30c2-44cb-9d04-ef67ccb485bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7356e178-905c-4388-8673-6170faf0f8d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99747cce-a1de-4705-8585-bcce2ce13dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d69e8f2f-ed78-4b91-bc15-7a736de2dc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6b5741-0183-4433-b5e7-c56582966b64",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa7dcd9-b44d-4f24-b5c3-f00756deda60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe29d001-067e-40d9-a9df-6954e5ecb00f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9678c37a-920b-4b92-882b-0d7521f918ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9292d1f-c1c6-4bb4-8804-152f21d231a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd0e77d-f016-4fe5-8d62-8a17693ecdc1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0bcc39-3cab-41eb-8301-ec915f8279a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72059a9d-3c94-4a8a-b696-81b25a6cacb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb06ade-0c85-4881-a777-fa9437c13813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd658a8-9a27-420e-b8f1-e6d8f72c9a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6eb1b9-e92f-4342-a0e0-34ab042d3ea4",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a505a7b-e65e-4291-8a7d-75aa42b1b87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9cc6c8b-819d-4738-bc19-c2ef52fc52f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5de05b-3cef-4793-96eb-975483578ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4ff5a0-99e0-4bc8-9238-2ff3f33aa52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a957af-91f6-4392-be96-8f2ee8ecdcb2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c55dc66-459e-4149-b844-ad987268de95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f88b76-acb2-4e75-ab7d-157eda230be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fb00a7-51d6-497f-aa75-42d9326ff5f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a28f97-72ef-4c57-a88d-867723332f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "006ddd2d-43dd-4538-a793-510ee61abfa7",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b371681-49d4-4e28-87c4-b5f069659769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26453ecd-0d35-4ad6-93a7-0c0136a5ca11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe35e32-fa5d-412f-a848-273a6e22cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6b9ebc-8b2d-4969-a1ed-23f47c0f95e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43977198-8a0d-48cc-a618-2eb1658b9dac",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01545605-07a6-41ca-afc4-3604a083860e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd165aad-3dc7-4800-974e-ae9d6b54161d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74b5b45-7486-4ee7-b2c6-c3c5bf0e241f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82957736-5709-492c-9800-0528a99ff888"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d198f8e-51d0-449c-98c4-67582999f4c9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd564209-55f2-4699-ae44-c60b1432d1d4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a854e60-553c-46a8-bbb6-1475f920d66d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3e6a8b10-5ce2-49bb-8f68-b5d16fcbb26a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad264a1-cf02-4e0d-918e-3f54592c42ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71359611-1319-43ea-9b8c-4aa71b8667ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c377ceab-49f5-43af-9961-15d43a66cc53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58a87b4b-1297-45a4-830f-d2efc370523f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5169bfc4-989f-4f7d-8df2-97dcd5f3d3f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd1877ea-fd77-493d-b974-ac92a9e07b7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09ce8f9c-7254-48e2-b1d4-eb6b8a2a741f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0b4610cb-acb4-4c6c-9320-618913271b28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b89fdc41-ef2a-400a-8dfe-6378264823e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b1b019a2-1459-46bc-91c2-a00341e8fe60"
            }
          }
        ]
      },
      {
        "id": "211d78ab-ec1f-441a-90a9-87bf53fc8bc6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "654e7dcc-8494-44e5-992b-ca54864ad47b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e46e270-dec7-46aa-bda3-11be1cdb6de0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1cab19a8-2ab5-4094-8ee2-ca23af70dcd2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eeaad19-9509-4efd-bf0b-226ac2680d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae8290d-c77a-4551-be94-406aa79e0def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef739d42-d640-4486-bf64-b0f9345faff5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fa0472-50d8-4dd4-b055-6213be8cccbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636ddc61-a393-4405-bb1c-0da8399e6eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "570aeda3-e6c3-4901-bbc3-d546bfbadf8c",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024506b3-c926-4eb0-9df4-2de393f5c9ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2eb94da-2db2-4429-9359-647022480657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9532a991-0545-49c1-baee-4b18bb262953",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e699f570-fd5a-44b8-bfd7-9619985c7cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8493133c-6746-408d-83e7-7966df487264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df982b46-000b-421a-9516-42b643391db4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f4c1b0-47be-4429-b2a1-f1352425251c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f12ffc3-df23-4c27-9644-4e0eb76931ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08cbbdb-8b21-406c-8cae-cb126226e292",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457f3455-d8d2-4990-8910-f240111ec28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89fbba8-19d2-4493-a399-a3b39de69f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60629bd0-6544-40dc-9def-52db9a8e2b18",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e7ce46-2ffd-4d11-9179-18f39b7a2c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f47e6d-84b8-4058-a4f8-e671052ea091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c175d8df-cb87-4254-8d63-2713b327c96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "742dda8d-604f-4fa3-832b-cf892ccab26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1068aa1-96f0-45e0-9ea4-7608b3d1891d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f13fad6-c7e0-48fa-87fa-767ddd18ba37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60dec2e6-a4e7-4680-b2ee-7a34b30e8925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1e63f7-d432-455a-b6a8-bb040b1f49e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ef2a9c-0638-4298-a8d9-d8b4ec4050cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0bab0b-4d15-4112-9372-eef4a0f187ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a07515-0be3-4aff-ab6d-169649199e1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "460a2a39-4dde-43e8-9004-2ef3920acaf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71b3b54-da1d-4aaf-a223-20f2d189f9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "856e2571-2b7a-4033-b300-611c3fc5d80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b3e70f-e093-4639-80ca-12c47740116c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450b2b5e-c277-423f-acb6-e8409cab9987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b5a9d4-bbac-477b-a2a9-7a6476dd99e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bb5dfc-ba2a-4faf-a91a-8134221054e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169bcde3-c75e-4a80-99b0-2f49fa232cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f2d4992-b04b-42e4-a405-bcb2e4a21046",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f3a030-ce6c-4678-91ce-fc5f37f2999b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc145636-8257-46f2-861c-90272dbbe842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16d6c46-cb65-4fa5-abce-7c12e62a1c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d182ee-8b49-4053-9444-6780be32a582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f127d3f4-f50b-4b68-8ea8-531f196c7ca0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67afe569-5440-44d4-bed9-e0bdccec2b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff076e5-f1f1-4532-b996-018688614d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceba6d9b-d5c0-4c89-9b6c-a0384cdf5203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2a04de-b694-4e6f-9d09-41e87a8c84df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052f9d3e-82b3-4bd2-8e6e-8d774d0f1ed0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde0643c-474e-4eab-acd8-563709bf4e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c164972-a0b3-455d-a8b6-0aff60d9bd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7eced6-34b0-4455-83b4-62d53c40a642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f9406a-8275-451c-87ed-5b81dba48b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af484e7a-617e-41f2-927e-aff53a12b27a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895bc0e2-fe7f-46d5-ab8a-1447d1aeacc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67f003d6-f1d6-48ad-bf1d-e508cedce7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a33b89a-979f-4119-917f-3741c2a99308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a15b90-a4e0-4217-a5bc-7b52a3e704dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8098f5-45c5-4ad5-bf68-fa4ff10bdcfe",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d884563d-b44a-4feb-bfdf-8cbb82212ae3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e38c482-593a-4e37-b1c5-d841a06532a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf8d0df-0db2-4663-b062-7f865f76c132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9c5a9a-f438-40f0-8343-22155ccb27da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e0d659-ac5f-45cb-a998-adc8e1306dba",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "261ce2c7-400e-45a8-8e80-7e081e4213f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "851376b3-121c-4dd8-865a-255d2a497fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428c42ad-806d-4330-a295-15312c76cee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4970d4d-781c-459f-a135-b3722693cf32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40850d3a-cc0c-47a4-b6ad-e84258de99ee",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cefc1c-47c0-48ce-9451-c7bfb7b9c578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca21875-03a0-4d41-a82d-db73c5db21e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db0c115-9b30-4634-9898-8f8940343841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93fe061-2d64-4d32-83db-fa31893b0bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576c993-cd2e-4ece-ae6f-ed1a0e989afb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55de7d02-b2c0-424f-aa29-fbd492063399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc03345-0aff-44b2-a757-846c21049abd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb46198-61b5-4dff-8da1-61bfb45ebd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854e6b09-4045-40c7-b16f-a3c26ae9cd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6234d40b-c1dd-4347-a189-4c86fbccea5d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9361da69-e9d4-4557-a9e0-73348dc9df39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555960c1-24e5-4d2c-ac3a-398667a5557c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6639c521-3c4e-4ffe-a5ff-d2ae9d4edd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb732f5-84d5-4c91-bd31-e1b36ab9b168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c94537-f076-4cea-bc4a-52d5834b29d3",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdf8bbe-9d93-44d1-8c72-6d68d545772f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25c461c-ccb7-4c30-ac48-45cdff5bb31a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69bc874b-b76f-49e5-8baa-82685bf6e9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033dd16e-e206-44a7-b00b-8b550066844c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d099598-8d50-4eb8-a493-8e15f3092c29",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7760b6a3-82be-40a4-ae25-db23cd60de5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b50c644d-3157-484a-9ae3-e65cc78a7c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92be4c73-b9b5-4cb7-9c4e-252254e13ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ad2c74-464e-49b9-857c-f77ee2d52335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcee3d0-4063-4465-93f1-f804c5d8e200",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b735ce-880f-4c07-9b07-cf627bd634e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e558296-e83f-4491-890c-392b364239bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c07f086-412a-4d6c-beb6-d156c29c1b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68401080-0288-4e17-8f3a-14dca531607a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9f184b-ed48-47e0-8360-4bf07f8d9ae6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83ddb7a-7474-441e-9923-8f0c4d403322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0d453d-fc07-4ec5-9cd7-2e3ef3bf5e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a6f0cf-2112-4c84-9662-964e0f8936c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46adb82b-76fb-43ca-88e0-8f706e75f0fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0d0f1e6-7ed5-47e3-9e74-f5704fb0a85f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d988584a-de1e-42fc-8a58-df9177321c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d0663ea-3df6-48ec-88cd-d125af899c40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05f5223-d0d8-4d52-8cb6-7294e658f5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c77db3d-6028-4e4f-b791-b41e89687540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afbc0768-49fc-426a-9310-13b09424e3ae",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93db14e8-6f37-42ec-8805-feff9947e65c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c8d15ad-2223-4cfa-8469-7ef63bdef288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40af23d-647d-4b86-9d07-f0c6b6ec51fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5304601a-7095-4f2b-8c3b-6ce4bb72a409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbc002d-42ee-444d-8eb4-68021131f213",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0740d001-7872-4928-8574-bf167faa2961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "516f8bac-81bb-4a4b-b668-c50faaea3e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db1923b-ee27-4864-86af-c4f1bc4d07f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2996c74-0f10-43e9-8a47-2c52f4b09fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "793dc3c9-58fc-4ad3-b041-394af5cdf663",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c5ee56-1dd4-4e80-bf2f-320d0b0558f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbcb278a-8360-481f-9271-798efc26d095"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe0bd22-3744-466d-b143-535e250c5728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0001209f-9d41-4726-8c5f-a5e353dc16cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb015101-f9b6-41c7-b7f8-aa927ab7aa71",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac316732-080b-4b22-b58a-538db8644db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b4d703-464f-4a4b-8b6d-f1e29a545138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a25794f-9489-4543-b40e-c1ca88439b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e003ee0-b31c-4d42-b6b1-e71d586b3acd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee09d2be-6a13-475f-8716-17eb14efdcf7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fadb5f8-9d5d-4401-a4e8-58eea6795f5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc989949-2312-4dbc-ae55-149433905300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b1bbd1-ddce-4a53-a17b-9be2bbf24bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64ecea28-3bdd-41d0-aca6-eae011d7d08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec09609-3099-4a11-b0db-faca9896841c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f63f2b7d-c1cd-493e-a482-2ee2b040e9f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b248cd32-0302-4da7-ab06-593103d7a401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f590aebe-19fc-48d8-8bfa-7dc196c0325e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ee4055-845c-46a2-873d-262f6098640b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9edc1317-fb39-4043-a5d0-e48706815cbe",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "face8cca-c4ff-45e7-a3ff-cca80233e50c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4f51b0d-a3f2-46b4-8f3d-4b5b8695db53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4984fbd8-d9c0-4582-b27a-96890ab15fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3a35be-52f6-4cec-9256-5a9dd6f2b8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5bb25c-af42-49b6-a6ee-6ca767088a93",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e222ac90-9509-4f75-a4ca-b3d885af6ea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b05986a-e089-4342-b86f-2a0dd40f0af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467d8409-c83e-40b3-96c2-3dd6609b57ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09bff920-09bb-41a7-be77-9b9af352f3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3dc66de-1ec5-4e9e-8c0a-ccf338925674",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3813d81-0d2c-437b-b77a-e4a50a8ecaf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4335198e-eb19-45ce-a01d-ad5ee698ea46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b6b658-0c01-463e-95b8-60af96bf0f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bd659fd-d705-47c0-a020-d1782343a055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae83365-8415-423c-9737-8e0a6daf9e76",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f199dbe-76dd-4eb0-a556-379b5607efda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d115dd8-9a45-49df-a7c1-62552d331641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c6408e-096d-4f5e-944c-7036ce02a17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3d9071-e1f6-4dcb-b9de-9d58cb40b76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5dcf2e-cf05-48c7-95e6-f2eb5abb5cef",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3560159-c50c-44f6-a10e-1c466d9d79b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ad8cdf-7b8e-4a09-aca5-1f1e9c6a42d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7319d2-8b48-40ce-8eee-5ca8510ed6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a75fa6-44a8-43ca-b0ea-9fd505b46c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843e0931-51df-4332-939c-b22c11c6b501",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836a5559-a679-4a35-aab6-c9a47db98ffd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e4ff93-2b18-49b7-b9a3-34c4ead90c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15529150-5923-4413-af1f-bd91ca0143ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe74cceb-0c12-4baf-b5b2-ae4d2821bab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822504f-650f-4eac-aea1-c528a52280db",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cb1e98-f8e7-4d2b-8bf2-764f9a516a97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf2ac78-df68-434b-9933-977d17401ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb45a245-c150-4650-b93e-ce74cd403947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7116e4fe-858a-4803-a31a-4fcca0e96d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3572dbd-5ee1-41f0-9746-7cce2c66c2f8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e71a900-3a52-4c86-b962-599d7e9cfe88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72680a4-be8e-4bc4-a34a-31ee79fd7c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d59189-1a4d-4cde-81e2-ed0fa8fbb0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e9cfdae-d30a-47af-b1b0-f4d0e54b4720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf2f5d3-b405-4d1f-9298-ef9b5a0e67e9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eee8fb-573f-4a0e-a342-0b8380086171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0713cb-2eb5-4248-a210-1cb2bb920e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91fbe794-57dc-4f8f-83bc-a71e5ea6a266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbf4734-1bc6-4084-b040-ef5adfb02d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db51d4d5-4d52-47ce-b04b-71a01b33cb8b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fe57aa-1126-47a8-8e79-0087737cbf0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ad01ec-a649-440c-8b78-b20ca7f4dfe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceec67e0-8c1d-4b94-b2f7-8f484e053a04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411a9917-e2ea-44ef-9bc1-6900eec9553d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f00437-0b42-477e-bf4c-eb29d0eedb27",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac76b89-578f-4f6a-a77e-0840cf906c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53487ca1-238c-45cb-a985-9c33fb4b7f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37578956-574c-4ea9-9fe8-6a783d1ddebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "955d5faa-83f6-48cd-a11d-649c163de8b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c24ad736-128e-44b6-9dd5-f16d68f958f3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6384430b-4e5a-4842-9a85-da731c1e3d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6b8070-f9af-4a02-b57c-93ea3bf0a522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3676c2bc-34a4-4a71-b4a9-b4a5a89d372e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1250d488-efc8-4f51-ab35-2cd5d484e362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024e451b-827f-4210-b58a-d188eb3c77ff",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e40ffc-a04c-4d53-921b-e26c0bde7f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5a6ae5-2b7f-4ec9-acb9-f1a7c4212016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64feb42c-ae7f-49f3-b869-9a515608feac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0030b87b-019e-438a-837e-2c3aeecd1b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09339df4-2db6-467e-aebc-f8a3fa8bc20c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c88b5da-0b47-4ef0-9c9f-57428b015294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729f67e4-bdd8-4cbf-9de0-5071327625af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ea03b-803c-4a9f-a7a9-f32539341529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06f56c0-a0f8-4b1b-a782-9973e1d20afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24149afc-95dd-4f0e-856b-da1c4da951a4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebd2cb5-8d73-41d7-bd3c-68768f788c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de3b8ff-14c5-40bd-9d4b-539875529523"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258af978-2c5b-430a-bde3-0398882583ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aef640a-697f-4bd3-b0d6-bf5838a9fbf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eba4177-ffc4-4af1-9543-c3f2aa907126",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7eb044a-4168-4993-a586-a70cfae72577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cf83c3-16cd-4f4f-88f6-be5a1a008302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d939b63b-690c-4ca2-96c6-1d38a71c65df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bb5780-96e5-4187-949c-38eb644b77ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37af2615-db57-42d6-ac9d-bf849009311f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7379b030-8fc1-4a18-a4ac-931a0ae805e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c181e166-1871-4fe4-838f-e7cb6d30fc68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52eb46b-cad2-4030-bc41-bcb94bae97a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b72021-3c6a-4317-af49-3537da56ab6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fa7d07-ead4-49ba-ba94-72fc7fca8064",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6db56c8-1b07-4744-86d1-01ec3b3ad755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e403e69-51ad-4310-934b-c86cf09349b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3aa92e6-ab8f-4585-b0b1-c991744a9dbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973df749-c8f9-4e68-8ea3-a69159055dad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7ab371-1169-443e-b575-aee2a6787ef3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c812bef-4cb6-4840-a3d9-1c86457f2aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7434c36-a110-4dfa-b70d-d6f89363e8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1894e898-0b66-443b-904f-ee2ba37c364b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9160ee26-1091-4def-bca0-b2154a01267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037553cf-a884-4955-b9e1-2315cdb2485c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1981ca-8cc0-4d57-a317-35134ec96e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17c389c-7dfe-499f-8ffd-f912a22c3955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6f93ec-0dd7-4b75-8b5e-c689a8b19a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd90d6cb-64bd-40cf-9891-f06dd1765da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271d15ae-fe43-4ff3-8145-f7be5cb34aba",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd11645-7df2-44b9-ab03-6a848fe8a023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8de933d5-f9ed-4422-a8b0-73c2528c43eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0114c81b-3c88-46eb-ae90-b1eab2e58316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40dde32e-d35b-4ba3-87ee-f3f3e18d2ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586fc9d7-0ab3-4c64-b817-483e64c67d9d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0c230d-9675-407f-a4b8-70fec4c7a763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01de661-a329-46b0-9d63-c7a1822055ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16cd9d1e-40c2-418f-930b-61a0953ae980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92028b92-7a39-466f-83cf-a17b697ba975"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347ed4dd-6500-407a-958c-e7fe877df8db",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5a99b7-ff28-4970-889b-be70271a4ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b08d0d0-5b71-4d92-8bd5-493d5bc3f852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d93b53-8de4-40be-b7e1-d24d00def99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd6501ae-da1b-4325-aee7-c1192e073f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd86ff7-6854-4bab-b982-c6b7c8c5cb93",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afae97c-5970-4571-b3ae-b349cee823ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bac6e1-ce9e-4b2d-bd68-04a69fc174b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e9e83a-07ac-49cf-a1e5-40755414887c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12497df-a955-4f73-9931-efcd1f29d5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e11925-f643-4ca4-b95b-909d0508a7ea",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b91825d-0512-4e9e-b8fc-f1521764db98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a43fc04-4401-419e-a6be-a60b155bffa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cf5c41-17e1-47d7-8b21-8f09a92f874a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6479f5e-750a-4337-9636-0379e55d494f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb78b9a-7f28-4ccd-9a64-894d13e2fb2f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f19f800-f07a-4502-ac6c-966133663073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c2aa81-5444-43bd-9f14-4b799a45893f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "002161e5-4aac-4454-a534-e61819c65492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2016e16-9c74-45f7-84c7-60e3e4898228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e97e84c-00b0-4316-9511-68b95649af5f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1f119b-98e4-450d-80fb-c6185145ba8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e55c8b-1587-486f-8519-26ee3dc5eef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d95098-6f1b-4969-bc4c-659ffcf053d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7392daca-8397-4016-941c-5bb54fcd4cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d65799f-e76a-4f5d-94cc-601d43de667b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e99ce4-b921-4ee5-b259-63c29d4ddcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae65dfc-3eeb-4719-867a-0023ed6d30f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d348811d-7902-4686-8438-349adf50ebfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b14a79f-97e6-4d0f-8b5e-37cb06a388c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb70bd7-e48e-41aa-846f-0ecf430cbc28",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b6aa73-c07e-49ad-8e27-8016494f824c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1dbe59-1868-4083-8025-38e8dbc78c91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea26f28-e038-45ab-9211-cea6a7d85ca6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "846b1332-d915-49ad-9a2b-99f0562da7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537164b9-a310-4092-96fc-20478dc331d9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8a4e60-0c99-416b-9541-24e5bbab1ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efa9d16-8924-4e94-8711-9002de18eecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e577cff-f582-4f48-a88f-9bd7562e028a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1139172b-87a6-4029-af39-f4f7f60ba94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1191c68d-f8e4-409b-abd5-bdfe9f208701",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab5f99d-9dca-4b4a-8353-7526d332bf49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb8781c5-ed8d-4c3b-a808-cd1dc6f60373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e958b380-ab7b-4d99-a8cd-41c2ddb4e369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506976ec-ebdc-449e-aa45-52f4ba2b7a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b882efa-e714-4482-b921-4c7f68cc2665",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6e68a9-d112-4bb2-a8ed-3371a3a52f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65cf76b2-ab60-44b9-b479-7ea30c2ae332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b44b0b-30fe-461f-b3e2-025d77202f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3a6bfa-aeea-4105-96ba-068532a494bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0a42c-5fe2-4db6-99a7-f7c19ba829db",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a96fd29-bcda-4df1-9c6d-f090566842b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed1ed73e-512c-49e6-a9bc-b9f66cfa0be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e49474-666f-433a-8724-7bb93b3165c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19891719-8e67-41db-ade8-a6c8acd1337e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0e408a-3122-423e-a6d2-bd5a859adf24",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d47269-cf58-4fcd-ae1f-520a17a7ef4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba4ede1d-e289-4824-9f90-f81e64236f0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12dd22fd-f71c-44a5-ad65-9d39f6df02b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5e2554-8d82-4909-9d0c-eb82baaeecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67e185b-1d9c-4560-b58b-7742e06bf30e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160c88de-1e9a-4f9a-8636-fb83b73b134c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eb06a86-5d7f-4b21-aede-c64299e58995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3852bae7-4b31-4b2a-ae50-cbcaeb355e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25608ff9-ae01-4b86-b794-cc84df4364ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8a6388-aa86-4962-9757-51a9290593dc",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a875b155-0399-4190-b6b9-6a16160be3d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b3520d-3e33-4a08-9023-b3562acc3082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3063c63c-662d-4d94-bb1d-7901ba633a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b342804-2549-43a6-91e4-206e27d3da3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32471a5-60bb-4459-b009-53e2ccdffbc0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342e4216-cde5-4ffa-9623-93b72abc9e81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8694b3b0-83e1-4d28-91a2-afe1c87daf6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74aedfb8-1e7d-44a9-aff1-222a1d6d369d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935ea489-c103-4759-905a-a2338cddc820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdfc0e7-2e76-4f03-acef-880ae3734b11",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377766a5-bd85-4431-9fd6-8eb36af98040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98375566-3c9c-4a5f-b151-8c2a189264ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d9990b5-f8b3-4763-925e-f9e9faac1cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc2147b-02d3-404e-aa6c-2c1c083bf8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b727919c-af39-4cba-8c1c-f8107a1ba256",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b28e5c-d4e2-4003-bab7-309e612d2b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "214156fb-39c3-4b47-994b-0860c3e3ef7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea113a67-73f6-4f72-8b03-b355a2e324a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec9ca8f-1b80-4138-8d5e-e3171e6ac8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0c8920-8b34-4d25-979f-cd341ea15a1e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c89586-0014-4746-9a85-8a269d7310ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2c5382-0441-4113-945c-4ea580b8caf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57956874-f500-475f-8351-837623dea1dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586ffe8c-c940-4c5d-b13a-8d128a58b9c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a21c262a-3b1e-4870-bef0-d09134af229c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbe1d75-df3e-48f8-bf0a-cbed619ab410",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f666144f-de2b-4813-be72-fa816f614113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef08e11-c5c0-4e73-a779-662a0de6065e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8dc9862-ad60-489a-a187-96fb8dde6810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9f5573-9339-4308-a123-50f9765ca6df",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92cdcd4c-658e-4964-85b1-5c2f4158f893",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e81a05e-fc48-41ad-a531-8b3c02ae9f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "befb63ad-5894-4191-9d74-871d76a7612d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac87096-2b36-4d58-b3d2-2e2942182492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42121715-b5df-4b6e-ae44-76b6dad4c76f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fd2f76-12ba-45df-9de1-3602189c0f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9237a65b-5240-4bd5-9f37-a50158f34dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0417c5-9b70-4a6d-b0cb-f549e6d0114b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b69122d-4e4e-40c3-b9f1-36e7100d219c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4034e2b-d0ee-4a3b-ba68-b1be52372683",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce039044-484a-4154-a22a-378de74ed3b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7ee4556-f19b-4517-bc6e-100563faaae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8f3351-bcec-4008-9196-2623f4404b46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad85c10-829c-49d9-9df1-2d08ead97d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f248a8-0100-4f46-93d1-eaf2ace9a13a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e97dcd-7fd4-4338-8b6a-8d4bffe19a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b5af522-8669-4a5f-8dd5-563a8ea81f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed2bf4f-a59b-4630-a62d-0fa9db370933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9790be00-c2cf-4642-8034-59677f3d27be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6554c198-ab2b-44fe-b195-1439447081ab",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fab8aa-6065-4072-83dd-a43245fca18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc88d96e-96dd-4583-97e8-67c829fa87da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f82328c-8fd9-400e-b301-ed03c4f71377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20c20554-adcb-4a53-ba83-3069e4d542d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3398ce83-329b-45b3-bbae-06ec12d28f1f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2849a5a-2f0b-4a5d-9b34-6d008cec6d4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3412d6b3-0da1-42b7-902b-0ce859c5230d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e288152a-c55c-47f5-bac2-4c81450c8a79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ef0216-854b-48e3-9cc0-0fa044cba037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f37a97-38ce-41b6-9957-6baee9b3e3e9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8802362e-5f86-40d3-a6b3-519348b7a42b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d45af7-4b12-4d7f-94a5-4b7bb5d6dd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ed461a4-37ed-49ae-8550-3422a54b5290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9470384e-9b89-47ca-a105-6ca35a6e7bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0798a6b2-04bd-4c30-b4e5-11c0af4c4242",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ef2466-01cd-417e-8e47-c041cbc70306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0e03421-d69a-49ce-989a-1c765d7131a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35081b6e-ee9d-426f-b91d-b4d47e818a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4833ae1-1a5a-4485-b3be-9bd954ef88fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2d689c-5484-49cc-98b9-f449418f912c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0211b2cd-ca9b-4c79-95f5-955b7e72402a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85a30a6b-5d68-4231-bd9f-bca8f910b152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e013f61-8163-4e2a-9290-7e89d703c204",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299ef973-d817-4a1a-884b-bce08480cea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6c0126-2b92-4fc3-8abd-0dc9dfc73afb",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055139db-dc61-455e-a305-d08605e271a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acd9ca8b-08b7-4828-b934-0b63cf677a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a7689f-d65a-43e5-a9ee-9baed3b93caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cf8537-36c8-4a1a-a393-81a113623825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d07542-d0a2-4d5f-a193-d13d017ad1ea",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ad1fc5-b8e5-445a-9ea6-d7a143098d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "456bae47-dd62-46a6-98d5-1c82f1150b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb47539-229a-4541-8875-99defbda8a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b247d18-1e55-402b-ae60-e7f1eee4661b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab09484-943c-42f0-bea4-e0ef618755b1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d45c6bc-5b56-4563-913d-91a34638ff64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3667eac2-559e-4c02-acb5-86aaa42ac111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fa7e91b-3e01-4be5-843d-d61929d2e7cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c4a6210-45ff-4132-8112-b5cadf792d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca481727-8cbf-4b87-a226-aa73d0d5b892",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846544ca-9fb5-4067-bf95-e31092839e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d14ce793-1355-48cf-8f1d-3d7550710501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0f4c8c-5be3-4761-97a8-535fc6dd68f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9638cd75-a374-46cc-831a-2998d9e43e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488eba1a-6c73-400c-aba6-8d0c6aa4b496",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1eb2f1-9ab0-492c-9c41-50a3e63b9475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a68258b-b27b-4be3-8df3-fe5f1c498a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d52b9d-f14a-4f24-b2a5-bfec7ac6a9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89dd433d-bbf9-4f46-8a24-0f6ae935f6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726cdfed-32fd-4119-9228-947cf24a5bcf",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0649f58c-0e81-43c4-b78b-ad57f35a4eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad55cb8-7997-4faa-96fa-a10955e2ed60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2b863d-f5e8-46e6-ab81-e16ecd124d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46973109-08d2-4f68-9c91-4c3dba47c673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2912789a-d4ce-46b8-96b6-9532d5e34138",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dfbda9-c595-4416-aa33-5a45b2886ed3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d578df8-f0e5-4c58-b86a-11f01a1624bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "878e5179-50b0-4b95-bee5-fe6be1fd3056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12bb284-61fa-48d2-b7a0-78a9881d01bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b85b5fd-2e55-4cbb-b394-57ded1a8a7c6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7fa6b25-0fe0-429d-8e13-aaeef0ed3144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6dc9877-75ac-44bc-8046-b3af0450c684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7d8c18-73cc-4e19-a794-5bf13ad0ac16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c733863a-1a40-487e-8193-1bc701d26410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca622e3-0179-4e75-a57e-07160e772846",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123b811a-0ff2-45a8-a5e8-2ad8fa145a9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eec1d98b-fa6b-410f-9622-841fac1e2245"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263e6bea-a6eb-4ce9-afa8-6f6a5542b8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d7b813-ddbf-494e-a57d-844880df7082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c332ee30-dd00-4076-b688-6659cbaefcd7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad09867-e349-4343-9519-2bcdbd3cd392",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b752b5c-6540-42b8-8d43-aefc97feb103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091e6fce-a84f-4c9e-970c-4948b54c68e8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716e06c3-67b7-48ad-af3e-34417b1574f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230ae884-72c1-4a02-a141-74f669458616",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b786a2b4-dc6e-4dd9-97d1-e2f1598ed47f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b61098-6b66-4868-a1fb-8373810dbc49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36c0790-f8a6-4884-bb00-bc01ecc1c9c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cedd33e-8aa3-4e78-bac3-d671e7dbc7b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda6f32c-4048-4736-a253-13ef2a582172",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545f5602-5f85-46b8-849c-d769a28bd9e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e9b3ef4-7a62-460e-a387-b3acca6a7101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "746a91ba-bd5a-4261-b682-991fca78e079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a26b9ef-f608-4963-b359-b1051e46e3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8c04af-1747-48cd-acaa-40cf5c9551c6",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d278fc5-07a8-4fd2-af22-856b672756b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120a58b7-338c-4c74-9e34-8d57deec65e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ee5958-bc5b-4c40-a5c8-038bd2bd34d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "074a1319-6dca-42bc-92fb-8bf3af5f8e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12763b46-015f-4313-9277-519e0a19655d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0736f253-f6c6-4f66-b1f3-06bb3f83f312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c21f8247-e48d-4619-9ab9-33d7fa7d8717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ead9e94-9c2d-40cf-975f-5f1a16de2e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da783a3-79f2-4948-a86a-11201520b204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f3fd4f-bf1c-42b7-8a02-d0e7c5587bdc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00ab568-26a6-4213-b474-795c5cccfb19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620ef7d3-2fde-43da-9b0a-6f908b77ff12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d781ac-f2d8-4e49-9d8f-6b0f525f92f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058cd792-458c-4d34-831d-8fc1bf229e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30dbabdd-1332-4ece-96ac-aeabf904b719",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfbcf02-f107-427f-a684-60226e060a89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5887f09f-3bbb-47b9-aa18-009d91284e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c406915d-851b-4ea9-bbea-34674e52aa26",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "898435d6-0ad3-46e5-8dc5-bee893e21630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279a9be9-0a5a-4935-a2c4-319d46a88547",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad20cae-4d2e-43fc-9456-c551ce0a10f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e35154f-d3ed-41bf-bd0d-cbbda0e5cb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a888837-0d50-4bcd-9807-c6f53bc00938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81ed31e-2b34-4481-b1ba-e5aeb7d16fd3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84288e1a-6f0a-4ffb-899e-19ec9ca7d270",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85a13532-ebdb-4c42-99c6-a8b97ab7d9c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "69838c76-1c6c-400a-bea9-b0964276f810",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7afbdfa-7687-4883-9449-05cf2c5fd0bd"
                    }
                  }
                ]
              },
              {
                "id": "ef087876-ce38-4666-b0f6-54ec6bd203af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c93a61be-d2ad-4616-9f06-1bc55ea2255a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b08068c-aa86-4210-82ec-f241ed3e5a74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "01eabe5e-9fda-4d07-8fa5-46a9e4f3f7cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e962cf69-1a8a-4446-8a00-e0d90abdec79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ea973b8-ddf7-4e49-9bfe-fd1f2b1a4b65"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82570cd8-66a2-4dd7-a09d-4153469fbb3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "310cae23-3668-45aa-b5c1-12d6e7878325"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61e010ce-9a9c-41e3-b776-ee7530274ef6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff65ccd7-caca-45df-95d6-7f074dd2d33b"
                    }
                  }
                ]
              },
              {
                "id": "a9835699-ea24-4d35-aaa3-30606e33f97b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4b183648-ef08-4c30-84b2-d62620ae6eb5",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c1d7461-b0b0-4cd0-953e-8c913f424c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a4bc953b-9616-44d8-8fcc-8cfc0dbf66a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c9722e-07b6-4075-81ae-1c02bfe9bab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88e8d988-2522-42f3-955c-527f16f52186"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "713cd92f-b0db-4e55-8ccf-0c896150175b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b509dc2-52f7-4b0a-be93-8ba1ab26ccc3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "562318c7-78e3-4e39-8de2-e09079fe93d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3133fa7e-b2fa-4928-8c30-0b7998372703"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfcf3a26-540f-4a06-b5a5-4b0eb6a0e573",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "858af54a-3cd3-4484-8f15-965b23e93f86"
                    }
                  }
                ]
              },
              {
                "id": "e3771080-b4b0-4842-9bb2-18538a772aea",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e071084-cf16-4774-846b-bb50966bbe30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0859a5f6-e87f-4ea7-ad9f-2f136c256f6b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "682a6a17-2d1f-4b0d-92e6-75ec85e08550",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "604bc863-1efd-4be3-b5ce-575f28b5fb20"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5515e70c-b65e-4847-b48f-fa88e30cfaca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "55095c3c-9fbf-4e45-b585-c12076586011"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f37d30d-4835-46e4-a52a-b5dbb5cbce4c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92814820-9584-47a2-9462-c60298467ddf"
            }
          }
        ]
      },
      {
        "id": "1bd40ff2-219d-47fa-80be-e4033cfc4079",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "43afeddf-841b-4ab6-bebe-f0ec47bc4607",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32317430-dbaf-401b-8bf1-c20d0564fffc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c154cc4-dce6-4a40-82b6-84582ab3b0d5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e68c49-9905-4ac2-a11b-3931970b1c7c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "eb7191ec-cf3a-4f48-b50d-028c09ca9f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f8d5df-0cfc-40b0-990c-ab77a8a4a57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc5a17f4-ac99-462f-b8e5-0fbe39f32d6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df23319e-1be7-42cf-9758-9b7cc901d089",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1ade5326-a236-44af-ab81-db43796f09ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9260d442-f64a-4d07-a6dd-1491b1bd5335",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40ca3563-6256-4657-9391-ba795ae639f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccd343aa-b0f5-42ea-8fd9-320b57379fbd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "64459a5c-7bba-43c7-a640-d8f8402cb67a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eb781e8-96aa-453e-9368-9b426789462b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5f4dfdc3-1700-4cea-a51a-47b4241afd7a"
            }
          }
        ]
      },
      {
        "id": "b2b540b0-489c-462e-b9e3-fb801dd0fee7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a0eafa7a-faff-4239-9bac-bbdd952dcee4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e0becc9-cb06-4600-af28-3a8fd73751e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca6302f4-748b-4f88-b0c0-7a6688ca4496",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69d10a0-6763-405f-bf9b-707cf69b7f27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81fdf4b3-514d-401c-a97f-37f71978bd49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be42b95-2e13-4781-895e-52a4dace8a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca577099-9a3c-4475-bfc6-6786d6a554df"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8cf50bc7-6e6a-42fd-9984-f10b250e19e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ebc6cee-2626-4d54-89ba-1b247251d642"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "afc78444-213e-46ca-8497-a30c61d78085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ca868b7-ed60-436e-b662-de97d1530a33"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "77d47486-6971-4e0d-a04d-757514cbc33e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5bd5c144-f571-4971-9fa4-d25478f0a224"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a78a84f4-dd93-4255-ade6-f68bfd8a5bcd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0514d3cc-be1f-4611-ab32-f66c9bef0011"
            }
          }
        ]
      },
      {
        "id": "e9c9999b-bfeb-4219-aa4f-e74fa2b05955",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "117fe6b5-3cf5-458a-af07-c7b7371854a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f4aae47b-5470-4982-baa2-b8837a652172",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ecc9ea8-8aef-4ddf-a7c2-67d8c2bea561",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4b2e332-ce52-411a-a57f-6098654c5847",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02c755b9-038a-49b4-aebb-8650696878c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860396aa-c43b-438d-a128-f881c2b9a3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f8be068-d6a8-4ccc-a9bf-6690ba08106f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0500366c-3a21-46e9-903e-c54c1e00d9f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8ee5d86-45b9-4d74-9646-6fae8dbb9df2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c9d5adb-3280-4c8c-867b-3e78e81063fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "607a1d84-b3da-401b-b03e-a48e0447405d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a765f3a9-bf17-47ae-ae4c-3c80f86f816b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8ba81de7-f2e7-4319-a852-6cc760996295"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd844e32-7441-4620-96db-9c619b87c405",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54d5d5dc-e21f-42f0-bcb9-04d10bb1f344"
            }
          }
        ]
      },
      {
        "id": "7b78a29d-87e1-46f3-996a-861986c2001c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89ac5c8f-eb33-448f-8319-3b59efe8b1b7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1388a38-0754-4a4d-9ea0-bd9ed1ba7461",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f14d2398-6383-4dea-9839-46c64ef2aa6b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c3d7972d-b124-44e9-baf8-4a8a52ad22a0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "877af4b4-3b82-41c0-908a-e27352498c27",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.42456140350875,
      "responseMin": 5,
      "responseMax": 679,
      "responseSd": 75.78620964381356,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702427767698,
      "completed": 1702427808656
    },
    "executions": [
      {
        "id": "3edaa679-65ba-4411-90c8-1db042cc0108",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45501468-7bb4-4aa6-b52e-e431ff27b65e",
          "httpRequestId": "fef4e886-de33-4be1-86ee-d337427c0fc6"
        },
        "item": {
          "id": "3edaa679-65ba-4411-90c8-1db042cc0108",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a2424fb6-a501-466b-9a4b-9674dbcfffbd",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "29aaa1ea-3f95-418a-9f79-ce77bc3be451",
        "cursor": {
          "ref": "141d98c5-2a96-4546-8501-0de42701dbb7",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1edfbd41-692e-40ce-8b40-2bef2bb4d0db"
        },
        "item": {
          "id": "29aaa1ea-3f95-418a-9f79-ce77bc3be451",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ad34a863-d66d-457f-b367-e774ee43684d",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "558c68d2-2324-4b41-a9fc-f89eedc1808c",
        "cursor": {
          "ref": "d9880e55-044e-4966-8e8a-cffb498e06ea",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6e8a0d9f-57cd-4d80-b41e-7ec6ea9fe6bb"
        },
        "item": {
          "id": "558c68d2-2324-4b41-a9fc-f89eedc1808c",
          "name": "did_json"
        },
        "response": {
          "id": "6f40fdc4-24cc-4b1d-b707-feb4a73216ca",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43d612f-7a06-4251-9d94-e8b4e66680bd",
        "cursor": {
          "ref": "bf62e206-872b-44e6-a91e-b12963659649",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5fd7b504-1413-456f-bbb4-d9bce1582cfb"
        },
        "item": {
          "id": "c43d612f-7a06-4251-9d94-e8b4e66680bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "ecd2f3eb-2070-4458-a4c5-fb453363cd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43d612f-7a06-4251-9d94-e8b4e66680bd",
        "cursor": {
          "ref": "bf62e206-872b-44e6-a91e-b12963659649",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5fd7b504-1413-456f-bbb4-d9bce1582cfb"
        },
        "item": {
          "id": "c43d612f-7a06-4251-9d94-e8b4e66680bd",
          "name": "did:invalid"
        },
        "response": {
          "id": "ecd2f3eb-2070-4458-a4c5-fb453363cd7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee5c85a-fd3e-4413-9042-4127d4a14ee5",
        "cursor": {
          "ref": "d500ae58-85d7-4364-9013-2393aeff397b",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "60bdf243-23a0-41de-87bd-eeaf1cda3357"
        },
        "item": {
          "id": "6ee5c85a-fd3e-4413-9042-4127d4a14ee5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e8ed9234-8dae-4688-bbb0-0a857c376261",
          "status": "Not Found",
          "code": 404,
          "responseTime": 149,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6345093d-4cd1-4e81-88bb-30745fe49434",
        "cursor": {
          "ref": "b7fea72e-155e-4470-867a-8bc1657558e5",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8f56626e-b39c-4890-9c02-f017b27f45a7"
        },
        "item": {
          "id": "6345093d-4cd1-4e81-88bb-30745fe49434",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a6f46500-5dea-46e0-99ae-effaabc09f2e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 102,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4284cd41-f901-4d86-8ede-e48fb010b85f",
        "cursor": {
          "ref": "a95f2033-e3e7-43c1-958f-c77d81618648",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9267bc73-08b3-43cd-80c7-a081548735b6"
        },
        "item": {
          "id": "4284cd41-f901-4d86-8ede-e48fb010b85f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "939a24da-b9de-4fff-9450-81cafdb707da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adf41f1-3423-48fb-9d10-9984c77c7a53",
        "cursor": {
          "ref": "3c1a0fe9-cf60-4a4a-8e33-b686a53deb59",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3d92e8bf-de4e-4b45-9e69-4b8fcd807e7e"
        },
        "item": {
          "id": "9adf41f1-3423-48fb-9d10-9984c77c7a53",
          "name": "identifiers"
        },
        "response": {
          "id": "77fc12cf-b528-466f-9262-300ac4c5d937",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26028b2d-ef4d-453a-a58e-75540d64e395",
        "cursor": {
          "ref": "c25f9b0b-3552-440e-947a-de4003dc958a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f5d18765-4bba-48a2-94b2-d9b0a3c97eaa"
        },
        "item": {
          "id": "26028b2d-ef4d-453a-a58e-75540d64e395",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fe049a39-0000-4423-805e-05cbfe6846a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29085e04-a5d5-4ff7-8e1b-41bbc4e1eba9",
        "cursor": {
          "ref": "e0f0322a-0342-4143-becc-5155d6aba6ca",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8349a8cd-0a45-4461-8f5d-5460ce85f98f"
        },
        "item": {
          "id": "29085e04-a5d5-4ff7-8e1b-41bbc4e1eba9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c082a85b-65ab-4c03-a117-608bed9d4447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b703f3d-6518-4e0b-a258-135b70e10850",
        "cursor": {
          "ref": "ce37e3e5-40ef-40ee-ace1-3b7075398eaa",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "23886f1b-dbda-4a95-922a-c2c80a4480e5"
        },
        "item": {
          "id": "8b703f3d-6518-4e0b-a258-135b70e10850",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "53e420b0-9c29-4ed9-98f3-7cf633da8928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cde77b8-8f43-4d7e-856b-c4a92fa8f491",
        "cursor": {
          "ref": "a8268bae-c9dd-43b6-8258-f60c45547b76",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0d6c2737-27b8-4de7-a539-bdb45b6f6bc5"
        },
        "item": {
          "id": "9cde77b8-8f43-4d7e-856b-c4a92fa8f491",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "073ae0a9-e3c7-41da-a310-865cc28e496b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fc4e15-c1df-45e9-bf99-624b97268888",
        "cursor": {
          "ref": "15c941a4-654f-44cc-af22-4b1ae5e3bd73",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b929cfcf-b3f9-43dd-be6d-d8405335a059"
        },
        "item": {
          "id": "90fc4e15-c1df-45e9-bf99-624b97268888",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0f5e68ef-9ce3-44a4-9073-91e374e58272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "520ada13-8726-4762-a824-303b36e46111",
        "cursor": {
          "ref": "473838b6-4333-4918-8d18-9fd70117dc66",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "34b6292b-d0df-4a35-81b8-81c02d90667a"
        },
        "item": {
          "id": "520ada13-8726-4762-a824-303b36e46111",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5e13ae9e-a930-4fe8-ac55-69c0a4016afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2c3d56-c742-4505-8f6a-a2b401b80b24",
        "cursor": {
          "ref": "36687a91-a693-4cef-9f9a-b7c7947dbb19",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "23170587-e065-4afe-89b0-35f7e25b04d1"
        },
        "item": {
          "id": "ac2c3d56-c742-4505-8f6a-a2b401b80b24",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a2b4013c-dd02-45f8-9227-e65747ac5ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1691c753-1fea-4049-af6e-a3cdc0ae6276",
        "cursor": {
          "ref": "94f2d5fc-f5a9-48ff-93d4-2a38d9b99f9d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bb4519c4-1f76-449f-be0b-862f49275e9c"
        },
        "item": {
          "id": "1691c753-1fea-4049-af6e-a3cdc0ae6276",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "375b0e92-ea99-419b-9554-9d92cec8c41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b65f3c-9de5-4f5c-85c9-ac4f81a90eb4",
        "cursor": {
          "ref": "3b670f7a-a9e2-4cf3-a10a-e51c3425efd4",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bc399b2a-797e-4f8e-84cf-c56850916cfb"
        },
        "item": {
          "id": "c7b65f3c-9de5-4f5c-85c9-ac4f81a90eb4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "34fde9fa-4e5d-46a9-b1f6-fe6d55b6748f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64dd025e-ea94-4cfd-ac52-d266769f2038",
        "cursor": {
          "ref": "e6f18eaa-3886-4ae9-bd9a-07fd97d1b40a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "92fd614a-d66c-4340-8f16-97defb4a30af"
        },
        "item": {
          "id": "64dd025e-ea94-4cfd-ac52-d266769f2038",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1c4fc02f-1d71-4f16-898a-c9d13da2ea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4142cb8-92ec-4f01-81c7-7c33f437d449",
        "cursor": {
          "ref": "bb16f45e-b45a-4c4c-acec-2496ad8ad217",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57516765-83bc-41a7-915c-ed23e653bfdc"
        },
        "item": {
          "id": "a4142cb8-92ec-4f01-81c7-7c33f437d449",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "224900d9-3761-4867-b6d5-4d9e82f70acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4483fae6-7e43-4dd6-8d1f-34b42d27d788",
        "cursor": {
          "ref": "465ad357-2721-40c8-ad4a-64c66945dbed",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "12be17be-7cdb-4d63-b3e8-5f40c19315f5"
        },
        "item": {
          "id": "4483fae6-7e43-4dd6-8d1f-34b42d27d788",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "919103c2-a00c-46ff-a615-dd98fa988041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb0c2ec-7660-4842-b688-1fc87232917e",
        "cursor": {
          "ref": "9ead1556-d2fa-41e6-b7db-6ed2b0bdfdd7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9388ed55-8ceb-4ec4-b997-4793b72385f4"
        },
        "item": {
          "id": "2fb0c2ec-7660-4842-b688-1fc87232917e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b154406d-acb8-4adc-8cd8-0cb2f5e98b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79009184-3df8-489b-8c62-5d8ccb0b8ca8",
        "cursor": {
          "ref": "34ace581-0f63-4fd3-8564-1ea1eda0cc1e",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "74a9b94c-ecf3-437d-82b6-95438602f7a8"
        },
        "item": {
          "id": "79009184-3df8-489b-8c62-5d8ccb0b8ca8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f5849dfe-42fd-4a96-9289-746264dd436c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42fdf6b-5ee9-473b-b15c-1348e767079a",
        "cursor": {
          "ref": "73fbb9c0-8a43-4189-9469-a8241d634c93",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e5b81f81-285c-41fd-b776-f82c45fe730b"
        },
        "item": {
          "id": "c42fdf6b-5ee9-473b-b15c-1348e767079a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "63f63f0d-cb20-46c7-a257-3919b7a84dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9d950e-62a5-4293-9349-dd442b5dfa15",
        "cursor": {
          "ref": "0e64241b-a07e-4e64-b410-48b57c568475",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "834b27c3-552b-4145-b56a-4d9d1004c670"
        },
        "item": {
          "id": "2a9d950e-62a5-4293-9349-dd442b5dfa15",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c7d0611a-d7a8-4488-874e-d827fb93d369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e178ece5-53e1-4a59-a3f8-a47c7701f7f5",
        "cursor": {
          "ref": "af251341-547d-47a0-8a0d-062fceef3f67",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "684617c2-77c6-40b2-ba7c-810f82b7225f"
        },
        "item": {
          "id": "e178ece5-53e1-4a59-a3f8-a47c7701f7f5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6119d947-87e9-4396-8dbd-4bd66716c654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba33514e-327a-423e-8dcd-b2c273f120ea",
        "cursor": {
          "ref": "6effa5bb-63fe-4032-a6a9-78c1e9dbb5f3",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "58864ddf-bbe4-449b-98af-1aec05bf34df"
        },
        "item": {
          "id": "ba33514e-327a-423e-8dcd-b2c273f120ea",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "bc7915a1-751d-4909-8621-f00aca2c025f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed462daa-7de5-4ac9-8aa2-83307643cc5a",
        "cursor": {
          "ref": "4fb69d5e-9a29-4420-8c13-bc9f11c86ffb",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6b8b3b28-bdf9-44b8-bb22-2246cf6d0057"
        },
        "item": {
          "id": "ed462daa-7de5-4ac9-8aa2-83307643cc5a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "78c5e6d1-1bac-40c6-85b3-8a184ffd4a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87acf03c-7638-4380-a54e-144577a65ef3",
        "cursor": {
          "ref": "668f746b-983c-4020-a88f-277d0c5e2ab8",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "03d8dd21-66bf-4189-8050-b15a586c41ad"
        },
        "item": {
          "id": "87acf03c-7638-4380-a54e-144577a65ef3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4109ea5e-f0bc-485e-99fe-b695e472af4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c7305b-e0f8-4962-853b-cefc9ccf13c8",
        "cursor": {
          "ref": "d1989430-3596-4537-bc61-ad7a2c816529",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "14771571-a078-4862-8382-a4fab01f0313"
        },
        "item": {
          "id": "a1c7305b-e0f8-4962-853b-cefc9ccf13c8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "72047243-6245-478a-adb9-f12f70b81206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee144aa-93c4-48b7-af79-3b470f8f4382",
        "cursor": {
          "ref": "e211d298-cbc2-4cd2-9583-bab0e4e389c0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4da3effe-6e30-473d-8325-1e673a4ce468"
        },
        "item": {
          "id": "3ee144aa-93c4-48b7-af79-3b470f8f4382",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f06a35b5-5a0a-4ffd-aff3-81ddf1e98a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abae37bf-4d87-40f1-9a23-fc49b259c90d",
        "cursor": {
          "ref": "8785c63c-ea6e-42a2-874a-b0eb752b75de",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "35c38baf-f7eb-4cb1-9cdb-b19640da6439"
        },
        "item": {
          "id": "abae37bf-4d87-40f1-9a23-fc49b259c90d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "be78a6a1-35d6-4dd2-8365-33abcb13aa01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f8b61a-d28a-4707-b1f9-5d2e0a0de498",
        "cursor": {
          "ref": "e7bb6672-1173-45b2-8965-aca6e87c5c3c",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9763511d-2c1a-4385-9b2e-3f153b8b25c2"
        },
        "item": {
          "id": "24f8b61a-d28a-4707-b1f9-5d2e0a0de498",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d370c92c-b5d9-4fbe-9ea7-fa86bf2466f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6609780-7190-4e5e-a821-2e88c13befb2",
        "cursor": {
          "ref": "d6d4e66a-e71c-405d-8b73-477e2f2188ed",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "14296a64-e129-46ec-bda3-9319fb7951a4"
        },
        "item": {
          "id": "e6609780-7190-4e5e-a821-2e88c13befb2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d885649-9783-44ae-be81-da44c2b29acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b80b27d-17fc-4e17-8231-c38a568c7b38",
        "cursor": {
          "ref": "e0b292b9-1337-4f01-950b-254a6e565805",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e32df890-e811-4c28-8198-df056a06b31c"
        },
        "item": {
          "id": "6b80b27d-17fc-4e17-8231-c38a568c7b38",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "24d25477-ee53-4682-be5a-cd30bfe9e607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6628f07b-7558-40cc-9b66-052723a938e4",
        "cursor": {
          "ref": "9481d31f-b9e2-4cfc-a5e9-4d684352d7a5",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "afbe9855-0f83-467f-bfff-10b52bc4c5e7"
        },
        "item": {
          "id": "6628f07b-7558-40cc-9b66-052723a938e4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a31d6b9c-1b34-4f4e-9eaa-ec9b69ef48bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e71a78c-fd55-4553-8dc4-ac8289c74c41",
        "cursor": {
          "ref": "b9bcdb1c-ca03-40de-bf9c-9e7bff3b6b4d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6f4942e7-8f40-46fe-9447-2cdbd2823a16"
        },
        "item": {
          "id": "8e71a78c-fd55-4553-8dc4-ac8289c74c41",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "95f78e33-d9f0-4e1a-885f-0e8998a27b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f4f9a3-c04e-4e16-a58d-4546980bb86d",
        "cursor": {
          "ref": "35a90dce-3687-4bf5-ab7a-915d4b05ede4",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "065ccaae-bd63-4c26-9111-a46997921199"
        },
        "item": {
          "id": "a9f4f9a3-c04e-4e16-a58d-4546980bb86d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "13631586-02d0-45bf-a83c-19eb62a5e720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a570fda3-3bcb-45fa-a302-a0655028b381",
        "cursor": {
          "ref": "6a520af3-ca9a-4686-82eb-cf14211c31f5",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "87df792c-06fb-41e5-b362-7942745f564e"
        },
        "item": {
          "id": "a570fda3-3bcb-45fa-a302-a0655028b381",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "96c66326-00c6-4752-94aa-2235966a3d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca1dc99-f11b-4a34-8f2b-86d90362a00f",
        "cursor": {
          "ref": "01425c56-1e68-42a6-9ee7-a850e3ad39e9",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "75e83288-33d5-4e9d-822a-95b937dffa32"
        },
        "item": {
          "id": "6ca1dc99-f11b-4a34-8f2b-86d90362a00f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "00eb78d0-a9a8-4232-97ff-bd5c5d4541c2",
          "status": "Created",
          "code": 201,
          "responseTime": 679,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f5df4c91-9c23-498c-b549-395144ee71df",
        "cursor": {
          "ref": "1ed38332-c0ba-46ca-9e94-66ccd27d0b07",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "24e061c4-31bc-45a7-b955-20becfff3b71"
        },
        "item": {
          "id": "f5df4c91-9c23-498c-b549-395144ee71df",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e5536d2f-818c-4793-8801-107395c476ec",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7803d0ee-564e-49f5-96a5-f47e8cb9f96c",
        "cursor": {
          "ref": "ecbcc753-6e59-4b80-a746-3d859249a0bd",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "412321c5-0777-45e0-9ffa-6456d2310c2d"
        },
        "item": {
          "id": "7803d0ee-564e-49f5-96a5-f47e8cb9f96c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "476d7dbd-cde8-4149-a750-aba034d1b043",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "de3ea892-97ea-4ff8-ba3a-fcf5b174ad24",
        "cursor": {
          "ref": "b08a9c12-7dda-4981-8957-3b510ae6a46b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5890d234-dc8a-4855-b0dd-c7c63b4d4ff4"
        },
        "item": {
          "id": "de3ea892-97ea-4ff8-ba3a-fcf5b174ad24",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8a19fe7b-fbc3-44da-87c0-4c969aa4914b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cda5af1-86fc-499d-a266-88b5463a66a7",
        "cursor": {
          "ref": "dee1f9ee-db61-487b-b56a-5b0433ef8d4e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "bdd667fb-18d7-41a0-8939-6573108e1a15"
        },
        "item": {
          "id": "4cda5af1-86fc-499d-a266-88b5463a66a7",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "12c2bce7-4b56-490b-a458-7963e9c53c0d",
          "status": "Created",
          "code": 201,
          "responseTime": 327,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8e235946-b0fc-4291-a7b7-90d08467fe44",
        "cursor": {
          "ref": "f6e3cda4-e95c-40dd-933f-317776ee06b5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d166b592-a409-4a27-a458-82b4e56fcf46"
        },
        "item": {
          "id": "8e235946-b0fc-4291-a7b7-90d08467fe44",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "24c4bfe2-aa1b-446b-a346-fcd2e9d522d1",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0050acd9-291e-4fe4-9e37-8cf6713061af",
        "cursor": {
          "ref": "3c2015c3-7012-4d4a-ab56-03de8bf8f0e2",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1ac0b87c-3fd4-4293-8203-559b416858b1"
        },
        "item": {
          "id": "0050acd9-291e-4fe4-9e37-8cf6713061af",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bfd7f19f-95b1-4be8-9a96-b8a0ec0f188a",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0b1b2c19-4b40-4c5c-a69b-ae835153dcda",
        "cursor": {
          "ref": "af97c8e1-181c-425c-8ccc-3e3e2e2fbb75",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0c8e0130-6b9e-4e8f-bb60-5ce85692f289"
        },
        "item": {
          "id": "0b1b2c19-4b40-4c5c-a69b-ae835153dcda",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9ff2351e-78da-40a1-903b-400a3c18cc4e",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ba65352e-bf0a-4993-9ba2-3751349bb6e3",
        "cursor": {
          "ref": "2a6c73dd-da13-4034-a76e-4c7ce98e91e4",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a703e383-13c5-4852-be51-9d7735c472a4"
        },
        "item": {
          "id": "ba65352e-bf0a-4993-9ba2-3751349bb6e3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "24e9fd7c-55ca-457a-8b22-6fb27b71f7b1",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6ae1a876-eaaa-43b1-b630-1c1b1230a656",
        "cursor": {
          "ref": "6a3f54b4-9c67-4725-84ab-ea64966e833a",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "60d5280c-fa11-4559-b131-06b0652b03bd"
        },
        "item": {
          "id": "6ae1a876-eaaa-43b1-b630-1c1b1230a656",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5690a7d5-8cc1-48e7-af1a-cf4994d32db1",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c336648f-3422-4040-825c-2aae7ce47e60",
        "cursor": {
          "ref": "ac4af510-8178-40e7-bd72-e36c1e2ddbc5",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a1aa3f5a-337b-436a-aef1-cd5bdf630ffc"
        },
        "item": {
          "id": "c336648f-3422-4040-825c-2aae7ce47e60",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "890fcef8-c13b-4412-adef-0227c70b84e9",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a7d49a78-f272-4d8f-8bf9-884e3fe8634b",
        "cursor": {
          "ref": "38aec9bf-2dbf-47dd-9e67-4b686190f943",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d34067c1-d91e-46cb-91cf-92dd692849a0"
        },
        "item": {
          "id": "a7d49a78-f272-4d8f-8bf9-884e3fe8634b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "93e3f9d0-c28f-4e57-9d46-d88ffdd2b6d1",
          "status": "Created",
          "code": 201,
          "responseTime": 367,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c5a43d6a-61bb-4854-ab65-1ed1c9e35b1d",
        "cursor": {
          "ref": "0b508a59-4de5-4653-bdde-fa9370d15b0e",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5b44ea9b-359a-4a04-a2b6-7278172310ec"
        },
        "item": {
          "id": "c5a43d6a-61bb-4854-ab65-1ed1c9e35b1d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "97e52e2a-0f14-4a75-b19a-0579da82fdef",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4cdaa597-1d7e-446e-b789-35abd6386f5a",
        "cursor": {
          "ref": "098a45f5-248d-46a7-8536-b8522fa0f2a7",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "95b5f8e7-2039-4e79-8b5b-395975e5a3dd"
        },
        "item": {
          "id": "4cdaa597-1d7e-446e-b789-35abd6386f5a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "566d3fdd-3aac-475c-ac9a-fa655af98a7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5ba289-a140-46c8-8ce3-a5311b24d863",
        "cursor": {
          "ref": "04741ca4-8abc-486a-9900-86c5bbf267e2",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "84dd0371-40cc-44c5-9f09-e93cb6bc36b3"
        },
        "item": {
          "id": "df5ba289-a140-46c8-8ce3-a5311b24d863",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fa16dc71-2787-4da1-973f-6593697a69d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19405d9c-f7fe-4530-a15a-8cf23dd7c596",
        "cursor": {
          "ref": "6825a3b1-8b7f-4399-aadd-492039209382",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c4e9b3a3-589b-4a12-9b5f-e9f9c634f7af"
        },
        "item": {
          "id": "19405d9c-f7fe-4530-a15a-8cf23dd7c596",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "95112771-3115-4354-89c9-16e2f80e5cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e48faba-6e79-4936-b830-a36a8a7b6788",
        "cursor": {
          "ref": "dafba14c-702b-41e3-8af3-fdad0bad9b06",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b2c799db-7387-47b5-9618-68efcc1d09cd"
        },
        "item": {
          "id": "7e48faba-6e79-4936-b830-a36a8a7b6788",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3ce6bffd-a39d-4695-b015-a8ff76318c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0edc639-1f02-47a1-87cf-5a8d85b58655",
        "cursor": {
          "ref": "470cd714-5c39-4c0a-9ba1-a7c3c116eb8e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "26444eaa-a568-443c-9e79-c1562440a807"
        },
        "item": {
          "id": "d0edc639-1f02-47a1-87cf-5a8d85b58655",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "843dce7a-8b01-471c-9178-5f6217980ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f816af-520b-4103-9bd2-abb2e323de68",
        "cursor": {
          "ref": "3b3061c0-8066-4631-94d9-269f3fc10dac",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a6a1717d-3852-491f-b89a-a30eb71608d1"
        },
        "item": {
          "id": "a8f816af-520b-4103-9bd2-abb2e323de68",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dd8a2cd1-f44b-44ad-9a10-557fd1fd0d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce6a864f-865c-4d50-b9de-df036098479b",
        "cursor": {
          "ref": "38c861e5-cd76-45e0-a93e-fa1a74c525d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fda52dab-0dc7-49e2-a0c3-cd275d452803"
        },
        "item": {
          "id": "ce6a864f-865c-4d50-b9de-df036098479b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "94b2796b-39a3-4507-8703-8d1105bb7fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ff4e00-5d5b-4104-b0d8-01406da1c69a",
        "cursor": {
          "ref": "5277d35e-a2f4-4ab2-b450-614dcb0bc25a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4c600dbe-900c-4cf6-97e9-119f3a0a0cd1"
        },
        "item": {
          "id": "c8ff4e00-5d5b-4104-b0d8-01406da1c69a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a349b2e2-4fc7-4736-a816-3923d6c66b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ba41e0-f54e-462c-bef6-c47b4d5284a8",
        "cursor": {
          "ref": "2679bcad-63c1-4111-8d57-5e80a1a3f7f2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "adebe75c-79bb-4763-8a2b-d68652af3e2f"
        },
        "item": {
          "id": "60ba41e0-f54e-462c-bef6-c47b4d5284a8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c83c45d7-3ad1-4cb5-9694-c64bdd4300d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a06fa5-9e4c-4f77-8d36-4f872dfeaa2e",
        "cursor": {
          "ref": "18c82426-7369-4cfb-9b96-5374efd24730",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80ea75e5-c9cd-4287-9e16-8e6f6e9a3eba"
        },
        "item": {
          "id": "58a06fa5-9e4c-4f77-8d36-4f872dfeaa2e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "29eee16c-4491-43cd-9cdc-684c388629de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5cb5744-ef3f-4e4d-87ed-61ca7f39e7c5",
        "cursor": {
          "ref": "d098b7cf-7c76-4338-8b47-e3e5ffa52aac",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "61275649-c057-461b-809e-50ec5ab5b165"
        },
        "item": {
          "id": "f5cb5744-ef3f-4e4d-87ed-61ca7f39e7c5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ad8a6560-e30a-4c4a-a82e-91db38d2e2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79986f88-0c30-4eef-a61e-e179b08c21f3",
        "cursor": {
          "ref": "a5b2617e-2a6d-4c85-8153-640bd719efb1",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "74ad84e9-3acf-450f-86df-69da19b2c6aa"
        },
        "item": {
          "id": "79986f88-0c30-4eef-a61e-e179b08c21f3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "fc307c08-f20a-43c1-80bd-23f9a214cfc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b92649-4e39-44c0-8d84-57f78d24794e",
        "cursor": {
          "ref": "88d19e82-9660-43eb-851c-bcb1023fa66d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f76e5d87-75ac-4e3d-ad7e-6e3c7e7c5acb"
        },
        "item": {
          "id": "b1b92649-4e39-44c0-8d84-57f78d24794e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "fb054e09-9fbd-4656-8978-c43bd0d124ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebc94234-abff-4456-9365-d0ef9c9844af",
        "cursor": {
          "ref": "0e5e2ffd-48a4-417f-8732-daa8195e1f47",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "966940dc-f375-42d0-a748-1a86505c64a9"
        },
        "item": {
          "id": "ebc94234-abff-4456-9365-d0ef9c9844af",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c7d40e81-514f-4ea7-9286-a32316ba05e7",
          "status": "Created",
          "code": 201,
          "responseTime": 418,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b66ec8c4-c508-4f7d-99cf-4282a1494cef",
        "cursor": {
          "ref": "fc04a686-3563-4665-a58d-304d21b58da7",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3d08db02-8dec-47d0-9dee-127faf014869"
        },
        "item": {
          "id": "b66ec8c4-c508-4f7d-99cf-4282a1494cef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "34609cce-8649-4f0e-8de7-9d334321d77d",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "383ae6a2-7b2f-4101-ad8e-dec1f0e12067",
        "cursor": {
          "ref": "47a9afdd-19e8-4ee1-a44b-726901c8bf35",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c74e0cca-2a41-406d-8646-44a98a114acc"
        },
        "item": {
          "id": "383ae6a2-7b2f-4101-ad8e-dec1f0e12067",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d9f0cd1d-0ec7-487b-9a90-94e0ad8109d6",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "c0108317-2d47-49f8-865c-45295e5f2f7f",
        "cursor": {
          "ref": "0d679802-ff9d-4dfe-8da7-66258784ed67",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "da4c54ae-c48a-4167-b230-b22a85743e77"
        },
        "item": {
          "id": "c0108317-2d47-49f8-865c-45295e5f2f7f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "92f8c4e1-6c99-40df-8c42-2fb40e9f5a57",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "10c948f9-aa3e-4f72-a10e-4a4c8ad726be",
        "cursor": {
          "ref": "d2d154c2-88f4-4d9f-ad67-17b74549c00d",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "86fea48c-17a7-4b72-bd3b-3a11f0703d83"
        },
        "item": {
          "id": "10c948f9-aa3e-4f72-a10e-4a4c8ad726be",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "628a9ac0-0b86-4e17-aa03-6929b5b37887",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cee463cc-0e26-4dc2-a14a-91809375972f",
        "cursor": {
          "ref": "a18a3679-77ee-48f1-9d3a-c492e46ce1a2",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e7ff7066-23f2-47f6-9883-c648e4fdce5c"
        },
        "item": {
          "id": "cee463cc-0e26-4dc2-a14a-91809375972f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d7a0de6a-1f9f-4cc4-acfc-caa271060ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0127c4bc-1b77-404a-b563-920166529e0d",
        "cursor": {
          "ref": "29813ff3-f399-458b-acf9-4c48e79b5879",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "12760b68-1176-4a36-b664-84547af8aa07"
        },
        "item": {
          "id": "0127c4bc-1b77-404a-b563-920166529e0d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "13f7ec3e-dee8-47c2-b732-938c11b5e836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a340fe16-5825-4711-a7b1-461856121fa1",
        "cursor": {
          "ref": "df7e3022-48fc-40f0-a2b9-01006b8128e9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5a960e48-b6f2-4da0-826d-b1aecc745ac2"
        },
        "item": {
          "id": "a340fe16-5825-4711-a7b1-461856121fa1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1113b175-1ae9-4202-951f-9b1d5d0ed9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6235ed2a-e84f-4924-bbd3-40902f877c62",
        "cursor": {
          "ref": "096f52ce-2911-41f5-8c7c-367027839722",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "12224bf9-c786-485f-b81e-55ecc1bc128d"
        },
        "item": {
          "id": "6235ed2a-e84f-4924-bbd3-40902f877c62",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d51ac2a9-2e2a-4b64-a2c4-e1820330dc8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2cd62bb-0718-4323-86c5-5dc9645bee56",
        "cursor": {
          "ref": "62dca68d-7cdc-42c9-b3f7-099d90318d56",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e30a5d40-bb4e-4297-ab02-eae4b1f6cdef"
        },
        "item": {
          "id": "f2cd62bb-0718-4323-86c5-5dc9645bee56",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "937f6fac-34db-41d2-aa44-398a16d3e8c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693584c8-8170-4692-a7a4-a25a6f12d810",
        "cursor": {
          "ref": "d1fbb088-c62c-4ba3-82df-b9eef8211fac",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f736f6bd-7f43-485c-a018-f4aaba027ff8"
        },
        "item": {
          "id": "693584c8-8170-4692-a7a4-a25a6f12d810",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6502294b-c3fe-42d5-89ed-f99113ca6083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf920102-7fe6-4989-9c69-ff81a07c50c6",
        "cursor": {
          "ref": "929cbe39-cbef-4d3b-a35c-9fde38df221e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e96932f-1f73-414e-aecc-331b7beebd7c"
        },
        "item": {
          "id": "cf920102-7fe6-4989-9c69-ff81a07c50c6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "40caa7c7-3c64-420b-aa26-07b017ace628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00c065ce-dac8-400c-80fd-ddd1f0cb05c8",
        "cursor": {
          "ref": "d7f52dad-c8b9-4a61-9f4d-e7b1e10829eb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "67007158-1126-46a4-975a-93c82ee8c1db"
        },
        "item": {
          "id": "00c065ce-dac8-400c-80fd-ddd1f0cb05c8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "060300c0-9a1f-4d15-b25d-6e493b513088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ed02ce-3c3b-459d-8072-298d9f445d8d",
        "cursor": {
          "ref": "7e5fc1c5-5f7b-420d-9dcb-0b59d4d9b56c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9b5009da-dd86-4eff-8e11-1c3de3e67a42"
        },
        "item": {
          "id": "81ed02ce-3c3b-459d-8072-298d9f445d8d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4e5d92a7-16d6-4d66-9f2b-eeccc806b13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c245e074-e1db-405e-8259-2685d658ef89",
        "cursor": {
          "ref": "b8501970-fcb1-4aad-b79b-ded3869c7a9a",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "77d95efe-7d10-42fa-842b-9160f059598d"
        },
        "item": {
          "id": "c245e074-e1db-405e-8259-2685d658ef89",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c7b0d655-0b1f-4cf8-ace1-8456f5ddaa5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a645f2-64b5-41e7-8233-cd4de88438c4",
        "cursor": {
          "ref": "97757ce9-f391-4ce3-bd18-b6b5afc81ee9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "504e5711-be4d-4c3c-a403-a2746e5491fd"
        },
        "item": {
          "id": "34a645f2-64b5-41e7-8233-cd4de88438c4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bd22d608-e01c-48be-9308-ac3e7feca0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b2b09e-ea8b-4aae-8089-ca6e8090a944",
        "cursor": {
          "ref": "82444a29-ce3a-4933-b2ba-df59e346f8d3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "712fe4ee-78c6-4fd5-807e-8248411d1f38"
        },
        "item": {
          "id": "74b2b09e-ea8b-4aae-8089-ca6e8090a944",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "da7c054b-805e-4207-9dd5-88308a9f570b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65873fb6-3fd8-49f4-a052-36a31e7176a0",
        "cursor": {
          "ref": "a445f521-1dc2-4a63-9214-a013d1f99925",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0084e748-7c69-44ba-890e-ffd0e9cbd955"
        },
        "item": {
          "id": "65873fb6-3fd8-49f4-a052-36a31e7176a0",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "98e79477-56b3-439e-a0fe-ec0770101f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70231fe-609a-4031-93a5-a7beb15a3566",
        "cursor": {
          "ref": "08957307-bb91-45a8-a28b-10d5794a9738",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "80aec04b-84e2-47cb-8821-addb4ca60d33"
        },
        "item": {
          "id": "a70231fe-609a-4031-93a5-a7beb15a3566",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "07da5525-1854-4be7-b407-0dd1d19540e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1b7432-bc41-42dc-9f8e-123ba71c65d0",
        "cursor": {
          "ref": "e6921fcf-4b0e-481e-a41f-356b8094f07d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "35e8b615-234b-4399-ac70-06f19b3939e8"
        },
        "item": {
          "id": "bd1b7432-bc41-42dc-9f8e-123ba71c65d0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f8eb58d3-e6dd-4b29-82dd-f2d98c232d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eac188-417b-45c8-9fc9-d788aa9e3339",
        "cursor": {
          "ref": "eaf4a624-6054-4994-b6f4-d50904feb85f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "74eff657-5673-414a-b65a-636c6b5ad4ca"
        },
        "item": {
          "id": "67eac188-417b-45c8-9fc9-d788aa9e3339",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fa9ff9af-6073-460e-989a-e892557f9402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed4ce0e-3413-4520-8a1e-c060a0f7a936",
        "cursor": {
          "ref": "abc03293-1c94-46a9-ab99-bbd83ee2c875",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c9f66344-59e7-4641-8842-df2f1750fd77"
        },
        "item": {
          "id": "1ed4ce0e-3413-4520-8a1e-c060a0f7a936",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d43fcf18-0193-48a9-b329-8ff3f559c2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499e0c6c-7cf2-4bb7-80f3-776d86df993f",
        "cursor": {
          "ref": "dd4f4b56-f424-458a-9be2-f69b06638cf4",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "79553dd6-ec43-408a-b644-2fba96d5fd8b"
        },
        "item": {
          "id": "499e0c6c-7cf2-4bb7-80f3-776d86df993f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8fec6cdf-e5d2-46a5-b109-4d0fb54f5701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af7c8143-8378-4e2b-b16f-9db0baade640",
        "cursor": {
          "ref": "a71f9761-2584-48cb-8100-0ea2bf45a90a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f5b836ad-9540-4c64-8000-f555dc246095"
        },
        "item": {
          "id": "af7c8143-8378-4e2b-b16f-9db0baade640",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7b4d6ee4-2f4b-497e-9922-89e128b9a0bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24681e4-2326-4e80-81ce-fadf9ebc32f6",
        "cursor": {
          "ref": "d423c102-0fe6-442a-866d-e2a6e50dc02f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3db01f2b-43a4-4f5a-9f7a-9c0820ed6baa"
        },
        "item": {
          "id": "e24681e4-2326-4e80-81ce-fadf9ebc32f6",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2acdec3e-9849-4e54-b169-9e094c5af040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018a7bb9-ed10-4254-90cc-c4d446f00c5c",
        "cursor": {
          "ref": "9e596ace-2038-40e1-99cb-e0f48e30a239",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "6a0625ab-7b4f-4a8c-9802-75be723dfeeb"
        },
        "item": {
          "id": "018a7bb9-ed10-4254-90cc-c4d446f00c5c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6432380f-0801-4a5d-9fba-ad51c9bc1062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bd687c-fb0a-4464-977d-6d90ca53dc23",
        "cursor": {
          "ref": "aae629e0-9250-4767-816f-753e2f135753",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5183e38f-5ce6-4856-8021-077781507cf3"
        },
        "item": {
          "id": "83bd687c-fb0a-4464-977d-6d90ca53dc23",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f13dabeb-58d3-4b76-922c-c4b8247ab7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea32e18c-f81f-43f5-b008-71c5f39dbca0",
        "cursor": {
          "ref": "760a2a59-84c6-41e3-93cc-744b93ded1d5",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "dafc77fc-b55a-4458-91ad-a1a71ac66947"
        },
        "item": {
          "id": "ea32e18c-f81f-43f5-b008-71c5f39dbca0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a5bd76d6-6af2-4a64-90e7-c8fdfbcbbd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e91f8e21-e099-47df-bd73-61f0a05562c5",
        "cursor": {
          "ref": "1d662437-da49-4215-b624-9dd7d1397589",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ca978171-8640-4580-8faf-e633642f9f13"
        },
        "item": {
          "id": "e91f8e21-e099-47df-bd73-61f0a05562c5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0e601ad9-d57f-4a42-a50e-e61abfee0044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6213c007-fa52-418e-98d5-86f2f1298545",
        "cursor": {
          "ref": "90fe2975-e22f-47e0-ba54-9b73dd6fa115",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f3f2c80d-2b0a-4bd4-a357-0c06dfa88455"
        },
        "item": {
          "id": "6213c007-fa52-418e-98d5-86f2f1298545",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fa0b6c61-de00-4a69-b564-a403a6697297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0cb84c-7c32-4200-bac7-699a01e7f332",
        "cursor": {
          "ref": "fe0cb7f2-30d4-4816-9e75-690146b3d74b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6979efbe-9d48-4173-b344-6926f6eb8f81"
        },
        "item": {
          "id": "8c0cb84c-7c32-4200-bac7-699a01e7f332",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4502a448-099d-450d-87e2-3ba22a047630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2bb4f7-1b11-4049-8c12-d142ebbb9309",
        "cursor": {
          "ref": "55a31fb0-c429-4113-82ed-a610e1683e3f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9cec7bd0-a440-4a38-9d4d-32c433d62f0a"
        },
        "item": {
          "id": "7e2bb4f7-1b11-4049-8c12-d142ebbb9309",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d51b5ac3-6763-4816-9da3-b28fe66ce69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e042ba-8c12-4402-bbfb-39eba8134383",
        "cursor": {
          "ref": "9252bc15-b75d-41dc-a889-1a18c62e01dc",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9f4088f3-483d-45e6-9c1f-d5a72ba4c08d"
        },
        "item": {
          "id": "02e042ba-8c12-4402-bbfb-39eba8134383",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1fb8303c-dc41-4391-aaa7-dfd15de7ea2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c90e2a-1459-4603-8754-1c7bc6696715",
        "cursor": {
          "ref": "3394e8ff-5b63-4253-8599-be929f0039ed",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1cefb887-520d-4576-859e-5141c354eda4"
        },
        "item": {
          "id": "97c90e2a-1459-4603-8754-1c7bc6696715",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "93a5314b-c247-4dd8-8c84-21bd14485aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b7f47b-757f-40d2-952d-edf415e2cea0",
        "cursor": {
          "ref": "b4088c5b-6a72-4b44-9500-37f273397a36",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d149caee-8176-4b43-b5b9-3c4e05a23a70"
        },
        "item": {
          "id": "96b7f47b-757f-40d2-952d-edf415e2cea0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bdbc4b76-baed-4237-a456-dbf360f45978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21590b6-e1cc-49b2-866f-f5580a7e1011",
        "cursor": {
          "ref": "06972935-33aa-42a6-8e4c-6a4f243d75e6",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c0559fec-7404-4dfa-9c81-1a526a1165a7"
        },
        "item": {
          "id": "e21590b6-e1cc-49b2-866f-f5580a7e1011",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "05f88a58-b98f-44e5-8d75-a499d0ddd65d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81878246-78c5-4189-b556-2fc624dc01c2",
        "cursor": {
          "ref": "1e0e972d-70c6-4ddc-8c34-d9a6fddcec9b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e9e1d96d-70b1-4ec1-ad32-9c2b0539c51c"
        },
        "item": {
          "id": "81878246-78c5-4189-b556-2fc624dc01c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8195fc7a-8662-4de6-ba36-468907bf6140",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c618c479-c80d-4a17-a946-23f3906c2285",
        "cursor": {
          "ref": "5230d715-a52f-42cb-a947-3b9e308861a2",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65f585b3-a344-4fe6-93e4-a0ce5d4225bf"
        },
        "item": {
          "id": "c618c479-c80d-4a17-a946-23f3906c2285",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "72ae2368-2d04-4704-bceb-e2cd09e9bd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "b6c02299-18b9-4fbe-97b5-9f6897553840",
        "cursor": {
          "ref": "bdc0cfe6-9b47-4e2f-a09b-b25bb8575097",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5cc17260-0e2b-46bf-b059-52ecb78c01b6"
        },
        "item": {
          "id": "b6c02299-18b9-4fbe-97b5-9f6897553840",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f32b772-39e0-427b-b181-e85eec63f275",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f307ab80-b601-40eb-a5c2-fcd7c0617152",
        "cursor": {
          "ref": "334357ea-6f56-4f3f-98f8-7aad08cc6b98",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a12b93d3-fbb1-4229-8fb8-61f1e3156d43"
        },
        "item": {
          "id": "f307ab80-b601-40eb-a5c2-fcd7c0617152",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e2e25b5d-2f99-4737-bb16-8f57e96901cb",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2434ab5d-5d9e-44e0-ae6a-5d496b073ffe",
        "cursor": {
          "ref": "c5779471-5747-47dd-912b-447fdcacb614",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a8b03982-e9aa-479b-bc91-eabe9659ee4e"
        },
        "item": {
          "id": "2434ab5d-5d9e-44e0-ae6a-5d496b073ffe",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "273e9860-67fc-42bb-87e5-a39f539828cb",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b441821-ed39-4d70-960e-74ed81043706",
        "cursor": {
          "ref": "7c1b5aae-2407-4d81-b89d-7fcc144085aa",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "53c45270-ef71-463e-af7a-1464edfaf684"
        },
        "item": {
          "id": "3b441821-ed39-4d70-960e-74ed81043706",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "295db6f8-9741-46e6-88fa-a0300fa98f1c",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feaa8dc-b17b-4dba-9f49-aca91491f6fd",
        "cursor": {
          "ref": "360cb58f-a754-4aff-a279-767934998dde",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "75d46d6d-b9bc-4488-92eb-58c73957f832"
        },
        "item": {
          "id": "9feaa8dc-b17b-4dba-9f49-aca91491f6fd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5dbc7d02-58d8-4708-9392-04f00492c871",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-13T00:36:26.522Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-13T00:36:26.522Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "354ed942-6c81-487d-8914-18b798d93967",
        "cursor": {
          "ref": "f5cb9f1b-f23e-4602-a49f-85f48bb55027",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "81b55e27-4eca-499e-816d-a1075b51de33"
        },
        "item": {
          "id": "354ed942-6c81-487d-8914-18b798d93967",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0d01136a-9c52-4be5-b396-7a5d21cb49ef",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1eb27b-309f-4fed-becc-dac7430f74fc",
        "cursor": {
          "ref": "79f5884e-01cd-4f09-bc93-b869e0505f4a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0f21a6f1-f8da-41f2-9cb5-317bacb9a344"
        },
        "item": {
          "id": "7d1eb27b-309f-4fed-becc-dac7430f74fc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "52c33ca2-4676-422a-83b8-fb112cca2771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92b931e-bd0b-479b-9631-3c92248c9c43",
        "cursor": {
          "ref": "f0aaef4c-b76f-4334-b720-4b770e0cf14d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bc30b024-7cbf-4580-97ad-7f899c95a952"
        },
        "item": {
          "id": "e92b931e-bd0b-479b-9631-3c92248c9c43",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e5b68eac-396c-49ad-a117-d904f2acc8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73e9a41-3dca-4408-86d3-9fd1dbbb456f",
        "cursor": {
          "ref": "a0f69ab6-55f3-47e0-88ec-b682f7abe594",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ced87e33-6bd9-473b-a516-ff9d894acf92"
        },
        "item": {
          "id": "d73e9a41-3dca-4408-86d3-9fd1dbbb456f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "665be9ef-e928-4430-8c55-40b85ae1c783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f240a2f-4234-47f2-80a9-75c5d25937f9",
        "cursor": {
          "ref": "ec8f32fd-e1e2-47c1-997c-f75438342dcf",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "f97a6d0a-12c6-4046-96b3-170d9d0c72ec"
        },
        "item": {
          "id": "8f240a2f-4234-47f2-80a9-75c5d25937f9",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "56476474-9132-4fde-a523-98c92b09d353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd48baf-b233-404a-ad34-5c52cfc37648",
        "cursor": {
          "ref": "eeb1f1ea-6a40-4841-a373-00750204e8b1",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7103c3a5-11b4-4b36-9528-5ff317eb620d"
        },
        "item": {
          "id": "afd48baf-b233-404a-ad34-5c52cfc37648",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "61297821-6cfa-45fb-afb9-892ce5eb1438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3736b552-a708-4c90-a4db-d27582375740",
        "cursor": {
          "ref": "24f1bfa8-e1bf-4eb3-ab8c-ddad7dce9bc9",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e39df88f-ace9-4323-b779-a2430896b3a5"
        },
        "item": {
          "id": "3736b552-a708-4c90-a4db-d27582375740",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4251b678-32d2-4d15-8df2-8bf59ccd0963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a1e7f3-017e-4a17-922e-6339437ec278",
        "cursor": {
          "ref": "b6028556-84e2-49a2-906c-90108fcfbe7f",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "637522cb-59fe-41a8-90e9-5130ee3c18f1"
        },
        "item": {
          "id": "86a1e7f3-017e-4a17-922e-6339437ec278",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "44739e70-ea7f-4117-b5cb-9caa789a7276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc20a97-e3cf-4944-9963-f7447f28ce20",
        "cursor": {
          "ref": "179d144e-9f2c-4d29-a270-e89c1f45fce3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8dbfdd70-baf5-4805-9791-1e3a9bcedba4"
        },
        "item": {
          "id": "8bc20a97-e3cf-4944-9963-f7447f28ce20",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "02af1103-cbb3-4755-a053-a86dd5480ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d77013-b378-45a9-9561-242db137a62e",
        "cursor": {
          "ref": "4d6a48fd-5993-4916-ba46-df4a88504a92",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b86d4eee-a9f7-4f43-8393-df708e93bb27"
        },
        "item": {
          "id": "f0d77013-b378-45a9-9561-242db137a62e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "49749694-e9da-4ca4-8b3b-c826b5309312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263b16cb-e07f-4d09-af4e-c131b3cb8458",
        "cursor": {
          "ref": "4eafe1d3-eacf-4c7a-8689-e477315b6687",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3282f084-2aa8-4317-888b-dc50ed92d617"
        },
        "item": {
          "id": "263b16cb-e07f-4d09-af4e-c131b3cb8458",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "589746f4-cc3e-4821-9e83-458bed4d2cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bd569c-74a6-443a-8610-35e8ac1affd5",
        "cursor": {
          "ref": "9bae00b4-6236-4960-8579-718b3559997b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "39421c61-f294-4fcc-91c2-36b36d57e478"
        },
        "item": {
          "id": "63bd569c-74a6-443a-8610-35e8ac1affd5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1b28b72f-7d0a-4b1d-a7d3-1e3e87a067b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cbd2b1-3a4e-4ad8-9f48-8b4afff70fd5",
        "cursor": {
          "ref": "716dc139-3392-44b4-8911-350f0b2ab23d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7eb98634-3d8a-4ac7-b410-bfc9fc2a5129"
        },
        "item": {
          "id": "f4cbd2b1-3a4e-4ad8-9f48-8b4afff70fd5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "35c1c5d3-fd24-4b5b-aefa-a036a16bb8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6d89a6-f751-47c3-9134-d5951920b4ef",
        "cursor": {
          "ref": "51f14ae0-27ad-4946-b82d-b2889d0fe6cb",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0121fa62-e116-489e-88aa-9e002794f7b3"
        },
        "item": {
          "id": "2c6d89a6-f751-47c3-9134-d5951920b4ef",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4aa9220d-eabe-4d9c-a1df-aa0511081f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4fa3d1-cfe7-4149-9aff-1015af8bedb2",
        "cursor": {
          "ref": "959bd079-587b-4352-b143-5953abb62fdf",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3400d057-87bd-4f06-979e-bfd50b81e5e2"
        },
        "item": {
          "id": "5c4fa3d1-cfe7-4149-9aff-1015af8bedb2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "225ca40b-e1e4-4fae-9110-e2cde8e3e5e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce66a503-25e4-4130-8183-75d952c83cfc",
        "cursor": {
          "ref": "1bd1a7c1-e8cf-46f2-9f1d-59d4ca3e2e84",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3aa37191-19ce-4ccd-a0b9-55d0ccd4e0ac"
        },
        "item": {
          "id": "ce66a503-25e4-4130-8183-75d952c83cfc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b585dc38-1481-4cdf-a058-9e1d1e05b242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4144438d-1c99-4528-ab6b-fab799ce7045",
        "cursor": {
          "ref": "5c8ad4e7-02cf-4af3-b0a6-49fe498cc71b",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "397d4525-27fa-4a7f-966d-453fff306f72"
        },
        "item": {
          "id": "4144438d-1c99-4528-ab6b-fab799ce7045",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6a930804-47d1-4244-b132-19d368850ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5702491-4395-4015-a6b9-8293962f733b",
        "cursor": {
          "ref": "784b8c9d-d81d-471b-9225-1f09f5fcebea",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0e0f2d2b-fc1a-4569-9491-82b20f134ea3"
        },
        "item": {
          "id": "f5702491-4395-4015-a6b9-8293962f733b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "64e83278-b473-4755-b001-083260f9588a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5da0e2-2240-4d1a-ac3d-a17c762eec7e",
        "cursor": {
          "ref": "ed3e20d6-d66c-4408-b5d5-8528aca14a0f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "eb3f525a-b4bb-4aa9-bf81-599e482d068e"
        },
        "item": {
          "id": "ba5da0e2-2240-4d1a-ac3d-a17c762eec7e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "548e07d7-42b1-421b-9ed1-a01304a634a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29622825-a515-440b-9d8d-3bbe29428f23",
        "cursor": {
          "ref": "808f9b86-2deb-4289-acdb-e035a32803a6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4eb21e81-6d65-4ff9-a309-89d9df680ddc"
        },
        "item": {
          "id": "29622825-a515-440b-9d8d-3bbe29428f23",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "81bcd7c9-2533-415c-93a8-4abd3de0602f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7caefb0d-5284-4eaf-b9b7-ede4f62aa05b",
        "cursor": {
          "ref": "e01b044b-a12f-463c-ab36-2ef5403404d3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "82f4cb2b-a2c0-4913-9d9d-aec928a0dcdf"
        },
        "item": {
          "id": "7caefb0d-5284-4eaf-b9b7-ede4f62aa05b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eb12f289-8d23-46de-8b81-d7eb75d69097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a22f4b5-8d4e-4838-9449-1c7127cd2ce4",
        "cursor": {
          "ref": "f6361f69-c479-42d6-b06c-5bd3d8add610",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "30dc99e2-828a-4156-8a2e-78d4e88fd814"
        },
        "item": {
          "id": "0a22f4b5-8d4e-4838-9449-1c7127cd2ce4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f0ca36c0-acec-4f93-8ab3-6e23a641995d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9680b3d-5f94-4582-839b-2d7549a23fde",
        "cursor": {
          "ref": "acb7c478-d654-485c-98f3-3f5d00a9b593",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ef90efcc-6ef7-4cf5-bde9-7fb234878904"
        },
        "item": {
          "id": "a9680b3d-5f94-4582-839b-2d7549a23fde",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c3e0e4d8-b002-4a57-a566-f2dda41445e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4d1411-6731-4980-ab92-bd130d251435",
        "cursor": {
          "ref": "d54df751-810d-44a9-8ff0-9ef54ff4ff05",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "62272fba-df60-4ea5-897c-946527591202"
        },
        "item": {
          "id": "be4d1411-6731-4980-ab92-bd130d251435",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "77cd34ed-5b16-4cd9-9ef8-668c253cf41f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d948abe-e63b-433c-b02e-5003dd93eb2b",
        "cursor": {
          "ref": "45e682bd-81bb-4c53-83eb-ba982d3ac34d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "dccadba5-6a18-4108-bfc1-cd548c35149f"
        },
        "item": {
          "id": "2d948abe-e63b-433c-b02e-5003dd93eb2b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a84a3f95-99cd-424b-9e1f-1fa4dc96e549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e19ab76-33b1-4246-bdcb-c1f5f49d29ba",
        "cursor": {
          "ref": "cc8d26c7-7782-46a4-b2d2-31b143dbcda7",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9a4cddd8-b8a6-4f4c-94a9-f91f3d5974f1"
        },
        "item": {
          "id": "1e19ab76-33b1-4246-bdcb-c1f5f49d29ba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "36834dd2-187c-4c6d-a17a-6b5c88f274c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725e00d2-3068-42a0-a32f-2552a4474433",
        "cursor": {
          "ref": "6dfc7a47-f1df-4299-823a-d416b3387047",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d4373587-f926-471d-81eb-b5eb5a830501"
        },
        "item": {
          "id": "725e00d2-3068-42a0-a32f-2552a4474433",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "33457a84-79fc-464a-8ea5-d0c0410f5639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1ba86a-9580-4b12-88fd-06e6dc8c7be5",
        "cursor": {
          "ref": "d1916fe5-6f21-4ad4-bc65-a94adcfeda35",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "49598314-bd55-4828-a77a-087f6e23466d"
        },
        "item": {
          "id": "7b1ba86a-9580-4b12-88fd-06e6dc8c7be5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "74d760ce-565e-49c2-bfc0-17bcaa11b61b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdbba76-220f-4a7e-9129-814ed0375dd3",
        "cursor": {
          "ref": "86796868-9857-4b79-b6e6-460b51ab795e",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b61c3c5a-8e5b-4520-8d51-5ee08c9365b6"
        },
        "item": {
          "id": "8fdbba76-220f-4a7e-9129-814ed0375dd3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8cdad7c4-9f3e-462b-915a-55f87a34d7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5526f7-f9a0-42ea-bea7-2bfeb4b25e3e",
        "cursor": {
          "ref": "358581ae-be28-4c42-bbf1-791a67cf423e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "83a71d87-60dd-4b13-9dc8-42fb51dc922b"
        },
        "item": {
          "id": "6a5526f7-f9a0-42ea-bea7-2bfeb4b25e3e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5e837651-79e1-4956-a830-378a46a91bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cac8a9f-d850-4292-8803-bbb6317c5f3c",
        "cursor": {
          "ref": "6fc6842c-c435-4c43-ae58-d9fd881138a3",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "20236b3f-b1a7-447d-9b3c-a31ab49b0ffa"
        },
        "item": {
          "id": "5cac8a9f-d850-4292-8803-bbb6317c5f3c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bdc5a85b-a621-4100-98a5-18de85a83f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111d3dfa-eb8d-478e-b923-e1bc8dc7df13",
        "cursor": {
          "ref": "2abec89d-7937-4c8e-98fa-0c9138b7d0d9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "810dc39b-4a16-4e52-b300-ad69f4839a26"
        },
        "item": {
          "id": "111d3dfa-eb8d-478e-b923-e1bc8dc7df13",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fb7d774d-ade0-42ec-a4b6-f9e2ded3ebf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8ae850-0096-4112-ae94-169f7b64141c",
        "cursor": {
          "ref": "e381d979-1775-4190-b71f-5dae769ce05f",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fdbc1ccb-7962-4d89-ac40-cc1dcbbd008e"
        },
        "item": {
          "id": "5f8ae850-0096-4112-ae94-169f7b64141c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ec002091-c29b-45b0-895f-9afd3879a9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b0b38b-82bd-4f2c-ba0e-c793098c4626",
        "cursor": {
          "ref": "2e2538dc-f427-4cc9-915e-ee6c9ca9a99b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d6ca2022-ea72-422e-9cfb-25d47169dd22"
        },
        "item": {
          "id": "88b0b38b-82bd-4f2c-ba0e-c793098c4626",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "390ef6b4-8e79-406b-a787-d5dff7c81f4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcff5a0f-5546-4b1b-99f7-8d1d3a6c0b95",
        "cursor": {
          "ref": "c91c84d8-ef00-40a0-a3d2-f7305ee9659a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bd0d0b51-dfd1-4f0b-804d-9f01e89699c0"
        },
        "item": {
          "id": "fcff5a0f-5546-4b1b-99f7-8d1d3a6c0b95",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "75edf1e4-ec1a-446d-bee9-9d5a80f13a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5a35a7-0c0a-4a5e-9ae3-cce03b03c5e4",
        "cursor": {
          "ref": "4e2ad156-1a46-4ac6-8ed0-9c995f3e5f3b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "b0fbb3a2-c5cb-44cb-bd30-bfe5b583c42f"
        },
        "item": {
          "id": "4d5a35a7-0c0a-4a5e-9ae3-cce03b03c5e4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "06ff2cec-33a5-41a0-a1bb-85cf319c0752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6abfdef-7c00-4642-9539-3cba755bc8c8",
        "cursor": {
          "ref": "05ee0aad-f6ef-47bb-9ff3-0334aaba5159",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "fc134d59-768f-4e7f-a51a-394dd71db052"
        },
        "item": {
          "id": "c6abfdef-7c00-4642-9539-3cba755bc8c8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "108a604d-59e8-4770-8b60-a71f30cbcf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c60754-9955-44e2-816a-3bfad4a5a423",
        "cursor": {
          "ref": "683ee16d-9be5-4a80-ae85-82a6ef171cbc",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "cd05f69e-a602-4aa0-9424-12d79236be62"
        },
        "item": {
          "id": "30c60754-9955-44e2-816a-3bfad4a5a423",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e971757c-fc38-47ec-8b7a-8a89ba6cbde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea5ac7d-0ee5-4339-9104-71fc9ea6f8c3",
        "cursor": {
          "ref": "0b17ae39-ce35-4594-b6f4-a51808aae5d3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "5c93fb7c-447b-4982-8846-82b7a59047dc"
        },
        "item": {
          "id": "0ea5ac7d-0ee5-4339-9104-71fc9ea6f8c3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "22cc41a5-3771-4664-8d42-8894dc2f203f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db09747-6062-464d-8c73-c37ddd24500e",
        "cursor": {
          "ref": "062a1c13-a79a-46ab-8312-b168d445ac6e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9102484a-31c0-404a-a49c-9e1b03ecb711"
        },
        "item": {
          "id": "6db09747-6062-464d-8c73-c37ddd24500e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c219bb1d-3222-45c8-bca6-ac7f9e2a380b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b75118d-17f0-4750-8397-a966aba1f1ac",
        "cursor": {
          "ref": "affdf0fc-230d-44d3-a945-7bfe3029f7ce",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0b807e2c-7e81-4387-a159-f5b24800aea9"
        },
        "item": {
          "id": "3b75118d-17f0-4750-8397-a966aba1f1ac",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0271392e-9792-4aa2-9866-ba88ba855ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3bb47c-245a-4862-b279-fa8a0d19c392",
        "cursor": {
          "ref": "8f7b8305-070d-48ea-a3c6-eb4973dc786a",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1c7546e4-4567-4792-81e2-ef52d828812a"
        },
        "item": {
          "id": "ef3bb47c-245a-4862-b279-fa8a0d19c392",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "02ac98a9-879f-4637-8bc2-14686c94e08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e033e76-74dd-4b8b-9673-4c6a711368c7",
        "cursor": {
          "ref": "bbb815fc-1f3e-4a1f-9560-0005c9bcfdd3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "07c09a09-6601-4b49-8ff5-669cb8d2201a"
        },
        "item": {
          "id": "7e033e76-74dd-4b8b-9673-4c6a711368c7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "91a67eac-cbee-4804-a3fb-43a235457172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9b32bb-f5d1-480e-b199-9a299e17b249",
        "cursor": {
          "ref": "e2885cad-2155-446f-89ce-1659b514e401",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "67399362-94ec-4498-8967-7d65b2387377"
        },
        "item": {
          "id": "ec9b32bb-f5d1-480e-b199-9a299e17b249",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1bab04fd-1eaf-4644-8679-4242563f8659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e006869-983e-4624-ba1e-9a3c4d401e38",
        "cursor": {
          "ref": "e844de1a-d1d2-444b-bdc9-99fe4b2b9efb",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7fbedb02-c0d0-4ab1-aedc-8768c0eb3e83"
        },
        "item": {
          "id": "6e006869-983e-4624-ba1e-9a3c4d401e38",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dd82ee0a-607a-4274-bd12-6d263ae4101c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31277e4-e618-4469-95d6-a7d5be335e4e",
        "cursor": {
          "ref": "f9d734a1-0a1e-4acf-b365-e37c7b242ba7",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "689cf841-3fda-4089-9b16-ff084636ffb3"
        },
        "item": {
          "id": "b31277e4-e618-4469-95d6-a7d5be335e4e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0c54b4be-d370-484c-8f3d-27d20690c99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe7cba4-90de-4e21-b574-26f4626ec15a",
        "cursor": {
          "ref": "60af3ff7-d845-41ce-bc03-3c6806433af0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7dfdd8ee-c44c-4db2-abf4-b71e957d2e4a"
        },
        "item": {
          "id": "dfe7cba4-90de-4e21-b574-26f4626ec15a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "00ed48e8-1cc4-44f7-9c7f-004578ac186e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2657b4-44c4-443e-959b-7cf40ab5f992",
        "cursor": {
          "ref": "ed6c3dd1-07f5-4913-b473-01efcfad228d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "35c7990e-ef15-409a-bfb0-1ae98240d8aa"
        },
        "item": {
          "id": "bf2657b4-44c4-443e-959b-7cf40ab5f992",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f4ee7b30-b9d5-4ce2-9463-a7aa7941a990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2192c31-2666-457c-b904-dd3de9f51d5f",
        "cursor": {
          "ref": "2f162e0a-a744-4804-9fc2-8b5445eb1be1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "159ac4fa-71bf-43c0-afb6-9fbde5c3dcbd"
        },
        "item": {
          "id": "e2192c31-2666-457c-b904-dd3de9f51d5f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "19eadc03-f8b6-4a2a-ab8a-40b5433abc59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20189e1b-430a-48cc-a58b-d236c7ca5131",
        "cursor": {
          "ref": "58137a67-820c-41a9-b914-4490ef015f30",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b7ad0cd8-bb58-428f-9a3d-e8cef59f900c"
        },
        "item": {
          "id": "20189e1b-430a-48cc-a58b-d236c7ca5131",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4b06d76c-7097-4b06-9bca-b0990ce695af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f6bce5-99d4-4ca8-b29a-79cf8c093868",
        "cursor": {
          "ref": "dabd5f7a-731a-4aa7-b87a-044ec8e7af8d",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c0595ecc-3d29-4615-9226-8ebb18bf264a"
        },
        "item": {
          "id": "40f6bce5-99d4-4ca8-b29a-79cf8c093868",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0603883f-9c86-4cbe-8e89-f1c24cb281f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd4734b-4508-496e-8968-226968228232",
        "cursor": {
          "ref": "1764e604-5f33-461a-a3a8-b91f26c1c29b",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "234fb430-df3d-4827-84cb-2d75dd93951d"
        },
        "item": {
          "id": "0bd4734b-4508-496e-8968-226968228232",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fddedd15-d2bc-4de0-9cc8-eb16be01fe09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce971f3-8950-4e39-95b2-70932adfa759",
        "cursor": {
          "ref": "9d9ec4dd-0e57-4e19-968d-5b4b872378e3",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5e9c0696-aef5-4b6d-85e7-f2de294f11d8"
        },
        "item": {
          "id": "fce971f3-8950-4e39-95b2-70932adfa759",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c40b5a9c-6bc9-49dd-a60b-371e7898eb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911821ba-7a20-4beb-b900-07f20746327e",
        "cursor": {
          "ref": "ece3a065-1096-4816-9cf3-180be6800bc7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "2a783586-66dd-435d-837c-0b838d58e777"
        },
        "item": {
          "id": "911821ba-7a20-4beb-b900-07f20746327e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "debc9151-e4b7-4fc5-8968-2c537a805a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c3d2d1-b2ae-4592-86f7-d3148cd09e93",
        "cursor": {
          "ref": "d1477073-8e85-46d3-a00b-7dae48a84384",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "80e18551-e087-4344-9318-abe83c624f0e"
        },
        "item": {
          "id": "35c3d2d1-b2ae-4592-86f7-d3148cd09e93",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dd0c50d6-fba4-4633-a275-c01398c82313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf2819f-4da4-4760-8406-3450cc44edca",
        "cursor": {
          "ref": "d39bbad1-ff0a-42e5-9028-1028878511fc",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4e4f1c2a-2dde-4491-af8d-733f71fc0935"
        },
        "item": {
          "id": "6bf2819f-4da4-4760-8406-3450cc44edca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a60f17a7-e0e4-4b2d-9659-5c94f489d013",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ba1f94-1110-4e47-b953-65ea32541663",
        "cursor": {
          "ref": "9b9f5f79-63a7-4d49-89fc-7bcc4dd61613",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4a179c24-a817-442c-8070-a57f74024924"
        },
        "item": {
          "id": "12ba1f94-1110-4e47-b953-65ea32541663",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f97f0934-ee0c-441d-875e-4f52e966fc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454c2bf5-dec3-4926-a09f-7545706d19d1",
        "cursor": {
          "ref": "b2b90997-8d9f-4302-b848-6c748331d931",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "958b0d17-be53-40e5-adde-976166b7ecfa"
        },
        "item": {
          "id": "454c2bf5-dec3-4926-a09f-7545706d19d1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "563d6bf5-10a4-46cf-b756-cd2f115e07b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7ca2fa-cfe5-4d5c-9167-85bbfe5a7bd8",
        "cursor": {
          "ref": "4ebf3313-9a02-442c-93ce-8bbcd0ded84c",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7fcfe9c7-2bd0-44c6-b224-100785c7a2e8"
        },
        "item": {
          "id": "0a7ca2fa-cfe5-4d5c-9167-85bbfe5a7bd8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "01d71408-4cfc-4044-8eeb-03b789ddda4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a25a59-7c75-496a-ad0a-d0900917ed81",
        "cursor": {
          "ref": "4f922f36-8237-44b0-82d3-bc450aaba47a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "733d0cc3-d795-4729-a092-b4e93f932a26"
        },
        "item": {
          "id": "b6a25a59-7c75-496a-ad0a-d0900917ed81",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9d1722f3-9181-495e-9105-e3ebdee7b913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b3f1fd-4bf3-44f2-b100-b476d4920d36",
        "cursor": {
          "ref": "a89af4e9-5cbd-48d0-b8a3-85a310e60ddb",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f5cee06d-0582-45fe-8a40-936933fd83f7"
        },
        "item": {
          "id": "76b3f1fd-4bf3-44f2-b100-b476d4920d36",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ab7bcc92-30fa-435c-be92-4ea76145dee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c566a1cd-304a-4809-a0c3-605dbbe6a66b",
        "cursor": {
          "ref": "00983c97-4627-4bee-9991-64ff859063af",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ec4344f1-81e7-4a83-9bcf-9c7c29b216e4"
        },
        "item": {
          "id": "c566a1cd-304a-4809-a0c3-605dbbe6a66b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3b99305c-fcec-49e0-a47a-1f148e99ea46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50581b60-6593-45a0-b9f5-dd591f66289c",
        "cursor": {
          "ref": "3ab571f3-c371-4118-a993-71be98823c07",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4d4a3c29-0bbb-427b-83fe-7d17ba92cb81"
        },
        "item": {
          "id": "50581b60-6593-45a0-b9f5-dd591f66289c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "951905a1-d86e-420d-84b3-50e928910cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39869bb4-02ac-4b7d-803c-93fc09e6043c",
        "cursor": {
          "ref": "9a9086ec-bf8a-47b0-a868-b6bed5df1359",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a85d16f3-77d0-42ba-a73e-3e3615a0727f"
        },
        "item": {
          "id": "39869bb4-02ac-4b7d-803c-93fc09e6043c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a13a8b9d-df8d-4c1c-acf9-3267e57783f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c64ad1-0614-4695-beec-0943c3bac9bd",
        "cursor": {
          "ref": "f926a445-9091-48d5-9e31-9fb2e6c464f5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9a408242-4db6-4777-b034-6d76976383c0"
        },
        "item": {
          "id": "16c64ad1-0614-4695-beec-0943c3bac9bd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "771aa788-d3ba-4743-8d85-3baee8b9bada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6b5741-0183-4433-b5e7-c56582966b64",
        "cursor": {
          "ref": "8601ff02-d533-4cf8-8481-a90714ac5316",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e4065ed0-5a1b-4305-afe3-f3fac3da10ed"
        },
        "item": {
          "id": "1a6b5741-0183-4433-b5e7-c56582966b64",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "02f508ed-d003-4c9a-9b85-96b7917ccb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd0e77d-f016-4fe5-8d62-8a17693ecdc1",
        "cursor": {
          "ref": "a096008c-191b-4e39-ad85-fb06efe6c505",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "31d35f36-94c4-4c38-8404-63a87a542a3d"
        },
        "item": {
          "id": "7dd0e77d-f016-4fe5-8d62-8a17693ecdc1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c9460575-dde9-431f-b190-deffc7c16ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6eb1b9-e92f-4342-a0e0-34ab042d3ea4",
        "cursor": {
          "ref": "723f993d-bba9-428c-9135-c4f8aac4e423",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c349b91-4e3e-4206-80c5-1451ed475fed"
        },
        "item": {
          "id": "8c6eb1b9-e92f-4342-a0e0-34ab042d3ea4",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2bff1f83-729e-4471-b5c5-57c27921147d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a957af-91f6-4392-be96-8f2ee8ecdcb2",
        "cursor": {
          "ref": "0cfcdaa7-41b2-4778-a156-d5e94b77717d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b0df7321-3eae-4b95-8453-62c71b3a4692"
        },
        "item": {
          "id": "d5a957af-91f6-4392-be96-8f2ee8ecdcb2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "86c54936-1e20-4db1-8cc8-45af986b149b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "006ddd2d-43dd-4538-a793-510ee61abfa7",
        "cursor": {
          "ref": "d90ce404-583b-46c2-8d27-9832b9ea8860",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "13bb3ff6-ad71-4b30-8cab-08f5b101be18"
        },
        "item": {
          "id": "006ddd2d-43dd-4538-a793-510ee61abfa7",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "32e0b83a-4ee6-4d06-94aa-6b701db15b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43977198-8a0d-48cc-a618-2eb1658b9dac",
        "cursor": {
          "ref": "16d48ac3-ac26-47e2-9533-6241068a03af",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9f455992-1b3b-4f08-b50a-90086eefc24b"
        },
        "item": {
          "id": "43977198-8a0d-48cc-a618-2eb1658b9dac",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8d6d7f3d-f897-4fa2-893b-7c0e230567d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd564209-55f2-4699-ae44-c60b1432d1d4",
        "cursor": {
          "ref": "82b3be0d-af8f-4eff-adf8-02d1cb02f5ac",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "35c35136-b8c6-4952-9f25-508723272cd2"
        },
        "item": {
          "id": "dd564209-55f2-4699-ae44-c60b1432d1d4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "68044a5b-3079-4a14-ba97-9304248954cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cab19a8-2ab5-4094-8ee2-ca23af70dcd2",
        "cursor": {
          "ref": "04a80741-f6df-4a6e-86a5-51774fa210c9",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c85a1ca7-f69c-4d7d-9e1c-6c950c5af33b"
        },
        "item": {
          "id": "1cab19a8-2ab5-4094-8ee2-ca23af70dcd2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ea4e58a7-bc21-47c0-bfe0-22b05fbad55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef739d42-d640-4486-bf64-b0f9345faff5",
        "cursor": {
          "ref": "3abe5457-7510-4f13-b8ac-35547f68a6ad",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "98ddfc60-1474-4330-8b21-05a4b3132d7f"
        },
        "item": {
          "id": "ef739d42-d640-4486-bf64-b0f9345faff5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7a38335f-bc30-4b9b-91d2-d8ff187180c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "570aeda3-e6c3-4901-bbc3-d546bfbadf8c",
        "cursor": {
          "ref": "0befba93-9ce8-4ed2-9512-7473e7ee0597",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4f7d9c5e-f092-408d-a651-1656c8ad33ff"
        },
        "item": {
          "id": "570aeda3-e6c3-4901-bbc3-d546bfbadf8c",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bc79decc-3a21-41e9-9601-b79e60282ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9532a991-0545-49c1-baee-4b18bb262953",
        "cursor": {
          "ref": "4019fe61-7a9e-4e44-a11b-cba77ff93c25",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fc4c9996-8c1d-4cd5-983e-9e66f3159575"
        },
        "item": {
          "id": "9532a991-0545-49c1-baee-4b18bb262953",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d9a1e688-64f2-4f02-8d73-d1a2393599d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df982b46-000b-421a-9516-42b643391db4",
        "cursor": {
          "ref": "4e18b9d0-c2ab-43cd-b050-3f24dacfcaf4",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e2d4fa2d-ac5e-4681-9a8c-db1280d74c33"
        },
        "item": {
          "id": "df982b46-000b-421a-9516-42b643391db4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e9d1e504-2c0c-44b4-b214-40e6e38c4538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08cbbdb-8b21-406c-8cae-cb126226e292",
        "cursor": {
          "ref": "31bdabb2-3c75-4d36-a13b-c345b706be93",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1d369555-7e33-4fbd-9e2a-17aadce273a0"
        },
        "item": {
          "id": "e08cbbdb-8b21-406c-8cae-cb126226e292",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ca52f71e-4b6c-41ed-9f81-c8380d7b686b",
          "status": "OK",
          "code": 200,
          "responseTime": 281,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "60629bd0-6544-40dc-9def-52db9a8e2b18",
        "cursor": {
          "ref": "86c9060b-9ede-4550-a0e8-78beb7236b73",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e69db490-a92c-4eeb-a2d5-2a6c6994049c"
        },
        "item": {
          "id": "60629bd0-6544-40dc-9def-52db9a8e2b18",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "77f29d45-2aaf-48bd-ba2c-baeb5f00a01d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1068aa1-96f0-45e0-9ea4-7608b3d1891d",
        "cursor": {
          "ref": "434bc7dc-83a7-4f7a-99db-15b1b45f0e65",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2bd7fa47-e740-4a82-94b7-e81b31585859"
        },
        "item": {
          "id": "a1068aa1-96f0-45e0-9ea4-7608b3d1891d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2c9e4de1-b989-4b75-afca-769cb8275f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0bab0b-4d15-4112-9372-eef4a0f187ff",
        "cursor": {
          "ref": "46c6e549-748d-4f25-ad43-b55e9ad6543a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d5eb4577-7fea-4dad-a201-14329f1ff97b"
        },
        "item": {
          "id": "7f0bab0b-4d15-4112-9372-eef4a0f187ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c1bdde53-29fb-44c4-8cb4-223fafae6be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b3e70f-e093-4639-80ca-12c47740116c",
        "cursor": {
          "ref": "8c2d99c1-ddfc-423e-be1f-10f565c0f39f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fef79046-aecc-49d4-bdf6-098fd1e55f24"
        },
        "item": {
          "id": "46b3e70f-e093-4639-80ca-12c47740116c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fdc8176e-395a-4f19-98fd-a12116a486a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f2d4992-b04b-42e4-a405-bcb2e4a21046",
        "cursor": {
          "ref": "57626922-502b-40c0-8903-f4504c367982",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dc31e62c-5660-4614-b668-2e4a9219a1e7"
        },
        "item": {
          "id": "6f2d4992-b04b-42e4-a405-bcb2e4a21046",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0ae3e058-5acd-4328-bdc8-c4f1a8ba5d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f127d3f4-f50b-4b68-8ea8-531f196c7ca0",
        "cursor": {
          "ref": "37c7d370-bc4a-4fe6-bf95-cda5d10b2fd3",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "83f664d8-4146-40f2-a492-b52d46df6e6f"
        },
        "item": {
          "id": "f127d3f4-f50b-4b68-8ea8-531f196c7ca0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "93c1e82c-0633-440b-a757-c505ae281508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052f9d3e-82b3-4bd2-8e6e-8d774d0f1ed0",
        "cursor": {
          "ref": "1443fa26-52d6-41d6-bdb7-e0bfb691242c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0cdc7fa3-e36a-46c7-ad27-4e6f21150ed3"
        },
        "item": {
          "id": "052f9d3e-82b3-4bd2-8e6e-8d774d0f1ed0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f87e1982-372c-4f26-af82-bda2157c3e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af484e7a-617e-41f2-927e-aff53a12b27a",
        "cursor": {
          "ref": "9c621a1f-584c-4ab9-b03f-2d3a0aae7325",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6cee3b27-5306-4be1-a778-78fc17df399b"
        },
        "item": {
          "id": "af484e7a-617e-41f2-927e-aff53a12b27a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1a6f2266-873e-47f4-a034-5c2d250f4612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8098f5-45c5-4ad5-bf68-fa4ff10bdcfe",
        "cursor": {
          "ref": "2803b9bd-5de4-4353-bd87-256fa35ce993",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c1ae94df-2bbf-4943-a3f6-b8af073fcbb2"
        },
        "item": {
          "id": "6a8098f5-45c5-4ad5-bf68-fa4ff10bdcfe",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f4c74e96-6fd5-4923-95da-c93cda0687a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e0d659-ac5f-45cb-a998-adc8e1306dba",
        "cursor": {
          "ref": "bc56f38e-9ef2-479e-9ba2-1a178de2c76d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4b193322-4845-4ced-99bc-94043330643d"
        },
        "item": {
          "id": "f1e0d659-ac5f-45cb-a998-adc8e1306dba",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fcc3b4bc-bf77-4a3a-8429-6bdc96869b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40850d3a-cc0c-47a4-b6ad-e84258de99ee",
        "cursor": {
          "ref": "498ff63b-dcd4-443b-b167-f5a3f5535954",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "94a5e614-21fc-4dba-8c99-91bc8b1ad83a"
        },
        "item": {
          "id": "40850d3a-cc0c-47a4-b6ad-e84258de99ee",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "41897171-9fe4-47b9-bf14-e467c87d65c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576c993-cd2e-4ece-ae6f-ed1a0e989afb",
        "cursor": {
          "ref": "e2760627-73b4-4fdd-9636-6a80c51fdf0c",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b72be354-6700-491b-8024-6e42f90a6258"
        },
        "item": {
          "id": "1576c993-cd2e-4ece-ae6f-ed1a0e989afb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4ed4fee7-8a08-4dac-834c-86ea9d40a176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6234d40b-c1dd-4347-a189-4c86fbccea5d",
        "cursor": {
          "ref": "4677847c-e50a-445c-9239-fb09c8a91afb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "71e4d2e1-60f1-4e4e-8cf1-ae79b705044a"
        },
        "item": {
          "id": "6234d40b-c1dd-4347-a189-4c86fbccea5d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "16e3fcfa-7a51-4d5f-a619-db8ff24a404e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c94537-f076-4cea-bc4a-52d5834b29d3",
        "cursor": {
          "ref": "ed125819-deb1-41c1-985d-0d06d4fa0ce1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "338ca41c-5aa9-42db-948d-a5b7c6cceee9"
        },
        "item": {
          "id": "c0c94537-f076-4cea-bc4a-52d5834b29d3",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e346a760-c0d9-4496-b977-3d03be20bace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d099598-8d50-4eb8-a493-8e15f3092c29",
        "cursor": {
          "ref": "afe3272a-be69-46d1-b741-c9962b8457af",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fd1521fe-a8fe-4979-8bdc-6766638a36d3"
        },
        "item": {
          "id": "9d099598-8d50-4eb8-a493-8e15f3092c29",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f261cc21-066a-4116-8c0a-20281d4bc5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcee3d0-4063-4465-93f1-f804c5d8e200",
        "cursor": {
          "ref": "caa1968a-ff52-4abb-8e1b-aa821dab3814",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "de0d5d3b-ed51-48f8-ae71-e740274cad3e"
        },
        "item": {
          "id": "2bcee3d0-4063-4465-93f1-f804c5d8e200",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "43d05b5c-860e-4593-8ebf-5f43e626f0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba9f184b-ed48-47e0-8360-4bf07f8d9ae6",
        "cursor": {
          "ref": "212dd92a-0825-4922-9e4a-b349b6b4e76e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d49f7dce-9af8-4988-941e-ccc26e27e59a"
        },
        "item": {
          "id": "ba9f184b-ed48-47e0-8360-4bf07f8d9ae6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f8cde7dd-88da-4140-8d4e-927b7b5f84d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0d0f1e6-7ed5-47e3-9e74-f5704fb0a85f",
        "cursor": {
          "ref": "85b5d21d-7027-4061-b28e-c10a725820ff",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5189db28-a678-4ecb-970e-92cdafb98a1c"
        },
        "item": {
          "id": "b0d0f1e6-7ed5-47e3-9e74-f5704fb0a85f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5b3f690b-165f-4835-8f64-28298c2a0655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afbc0768-49fc-426a-9310-13b09424e3ae",
        "cursor": {
          "ref": "829e84d3-2fc3-4f45-9abf-b4966a74586d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7d90046b-ebf5-4db2-91ca-f81aedda6649"
        },
        "item": {
          "id": "afbc0768-49fc-426a-9310-13b09424e3ae",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "211cb5de-adc9-4ae0-aa91-bed6ac36bfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfbc002d-42ee-444d-8eb4-68021131f213",
        "cursor": {
          "ref": "4e32d0cf-2304-4acb-aa99-8977ea38a46f",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c42d1f91-420f-4e0c-8805-4430cf76bd57"
        },
        "item": {
          "id": "bfbc002d-42ee-444d-8eb4-68021131f213",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2596ca7b-458e-4793-a648-ec42fa8fa0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "793dc3c9-58fc-4ad3-b041-394af5cdf663",
        "cursor": {
          "ref": "557ce5df-7a70-4553-8e13-34478163c424",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fd69b824-5d24-46cb-a78f-bbc26d17b777"
        },
        "item": {
          "id": "793dc3c9-58fc-4ad3-b041-394af5cdf663",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3e9ffbc2-c2ab-491d-ab00-1a89138fae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb015101-f9b6-41c7-b7f8-aa927ab7aa71",
        "cursor": {
          "ref": "61899bdd-562d-4d9f-88ce-876a4b79990b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f85b91b9-9697-4caf-b59a-f24b2cdd7943"
        },
        "item": {
          "id": "cb015101-f9b6-41c7-b7f8-aa927ab7aa71",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "28383244-f0f3-4d40-8361-ad26db5699e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee09d2be-6a13-475f-8716-17eb14efdcf7",
        "cursor": {
          "ref": "04189b4b-8289-4b97-9971-e7f672f27b76",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "04098fb7-9c73-43f4-893a-1dd3c975df00"
        },
        "item": {
          "id": "ee09d2be-6a13-475f-8716-17eb14efdcf7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ed59114b-7543-4b82-a586-480d13b11a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec09609-3099-4a11-b0db-faca9896841c",
        "cursor": {
          "ref": "810c6438-2676-48b0-9346-d260211ec91e",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8ada92d4-72ab-425c-a21b-dc6ac5c7bbba"
        },
        "item": {
          "id": "2ec09609-3099-4a11-b0db-faca9896841c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3f49075e-0809-43c1-977f-86f7ccb8cfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edc1317-fb39-4043-a5d0-e48706815cbe",
        "cursor": {
          "ref": "ae97d514-f716-4ea8-8d77-4100503ad542",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d4f2c457-00c9-4b5f-9a95-73210f9bb0d7"
        },
        "item": {
          "id": "9edc1317-fb39-4043-a5d0-e48706815cbe",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "481dd444-7961-4b33-a5fb-1ab83b29f242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5bb25c-af42-49b6-a6ee-6ca767088a93",
        "cursor": {
          "ref": "c78aa432-ec61-4829-9645-44b94ad8796b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "380fe551-9fa6-4b18-bf61-4fdc2aae4d14"
        },
        "item": {
          "id": "8b5bb25c-af42-49b6-a6ee-6ca767088a93",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6c0e1bc4-f07c-4e28-b34b-6d82340ec48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3dc66de-1ec5-4e9e-8c0a-ccf338925674",
        "cursor": {
          "ref": "24b84a31-6c7e-4fcd-9406-8582e9596997",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ddcbfaf9-f34a-4aed-9a86-665c40f682d3"
        },
        "item": {
          "id": "b3dc66de-1ec5-4e9e-8c0a-ccf338925674",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c46ed878-5838-4d19-8a0d-53efa14d9bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae83365-8415-423c-9737-8e0a6daf9e76",
        "cursor": {
          "ref": "a81f10a5-1ada-430f-bde2-ae9adba115fa",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4d3de9f5-895b-492f-99de-28ecbbf1f28b"
        },
        "item": {
          "id": "1ae83365-8415-423c-9737-8e0a6daf9e76",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1f4bffd4-63d7-40ed-aa41-64a3c51e79a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5dcf2e-cf05-48c7-95e6-f2eb5abb5cef",
        "cursor": {
          "ref": "88753602-4aed-4b11-ac82-efb933f4b7f8",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7b456e10-037c-4a8c-9d71-92af160dcb75"
        },
        "item": {
          "id": "ca5dcf2e-cf05-48c7-95e6-f2eb5abb5cef",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f8355448-4003-4a66-b31f-c97ca22c7aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843e0931-51df-4332-939c-b22c11c6b501",
        "cursor": {
          "ref": "58f1443b-b3c9-4c5a-968b-a06c0bc9c976",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "410f6620-8585-4377-8f26-4fbf1f0b3094"
        },
        "item": {
          "id": "843e0931-51df-4332-939c-b22c11c6b501",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "229f4edb-294a-4cd2-bba4-8bf38ea99da8",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3822504f-650f-4eac-aea1-c528a52280db",
        "cursor": {
          "ref": "18c99cf9-b385-4bdf-a7d4-2c60d2fc9296",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "242883be-8167-4f52-9e6a-73ea6f578fb7"
        },
        "item": {
          "id": "3822504f-650f-4eac-aea1-c528a52280db",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "18b89a52-4ebd-4e67-9711-2e60d0088a7d",
          "status": "OK",
          "code": 200,
          "responseTime": 155,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b3572dbd-5ee1-41f0-9746-7cce2c66c2f8",
        "cursor": {
          "ref": "5883e9f7-af7c-4501-b531-f3ff6cbf46c1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3b1dc53f-de25-440c-8301-9ac44a0c3c36"
        },
        "item": {
          "id": "b3572dbd-5ee1-41f0-9746-7cce2c66c2f8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0aacb8ec-2d7d-4bed-b973-f1ecadfc11bd",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bbf2f5d3-b405-4d1f-9298-ef9b5a0e67e9",
        "cursor": {
          "ref": "b57155f9-e449-4de3-89b7-92746337f53e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5462f09d-31f0-47cb-b5a0-d32f7d9c1b8c"
        },
        "item": {
          "id": "bbf2f5d3-b405-4d1f-9298-ef9b5a0e67e9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c6354587-2693-41a7-aaa8-91e8194325b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db51d4d5-4d52-47ce-b04b-71a01b33cb8b",
        "cursor": {
          "ref": "4e2781b8-0f8f-4fc0-bce9-602309d435f7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "999352a9-c43a-4e43-a0b0-39d41c7a9f91"
        },
        "item": {
          "id": "db51d4d5-4d52-47ce-b04b-71a01b33cb8b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c7a24ea3-5699-4939-ba02-1b6f829d3c57",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "09f00437-0b42-477e-bf4c-eb29d0eedb27",
        "cursor": {
          "ref": "0bb88e8c-e130-4d75-b059-17f7b24c9d6f",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2cb037bd-56c5-4416-a3df-85819d825f72"
        },
        "item": {
          "id": "09f00437-0b42-477e-bf4c-eb29d0eedb27",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3d8604e4-7051-4b0f-89c6-b87e88aa36d0",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "c24ad736-128e-44b6-9dd5-f16d68f958f3",
        "cursor": {
          "ref": "9d610183-8f85-4d1b-9b09-bf82c9882cd5",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "218b4298-1246-4ced-a2f4-f6247722473d"
        },
        "item": {
          "id": "c24ad736-128e-44b6-9dd5-f16d68f958f3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e339c0d5-53d8-4829-930c-6f9106c7d88b",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "024e451b-827f-4210-b58a-d188eb3c77ff",
        "cursor": {
          "ref": "9c4986ee-1dc1-433f-96c0-dd89a97533df",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c66ce18d-f486-4eac-a083-4a3b427562d9"
        },
        "item": {
          "id": "024e451b-827f-4210-b58a-d188eb3c77ff",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "066e0343-1b01-41a2-b6cf-8527e2ba8bb1",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "09339df4-2db6-467e-aebc-f8a3fa8bc20c",
        "cursor": {
          "ref": "40cbb946-83ab-413d-ab50-f398b6f658c9",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8ade339e-0a15-4ba7-8ff0-87739aee469c"
        },
        "item": {
          "id": "09339df4-2db6-467e-aebc-f8a3fa8bc20c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c969eaa0-0692-4f67-afb1-696c2edb2ee3",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "24149afc-95dd-4f0e-856b-da1c4da951a4",
        "cursor": {
          "ref": "98284bd3-4add-47a8-96fc-e31b204496d0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3d387d7a-2154-4914-939a-c89eebe13219"
        },
        "item": {
          "id": "24149afc-95dd-4f0e-856b-da1c4da951a4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "244f3c48-2e0d-4764-a626-bb6b98be1555",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7eba4177-ffc4-4af1-9543-c3f2aa907126",
        "cursor": {
          "ref": "4bec0793-6a12-484e-9880-be90877a8e1d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fac72c0a-5338-46c6-92a3-0227b090365a"
        },
        "item": {
          "id": "7eba4177-ffc4-4af1-9543-c3f2aa907126",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad24cb8d-05ec-446e-9d54-7a865859db66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37af2615-db57-42d6-ac9d-bf849009311f",
        "cursor": {
          "ref": "15d42c33-f1f7-4673-8d7d-a2716781dc84",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "c6fb3d6e-649e-4e91-a103-8b42938d7d35"
        },
        "item": {
          "id": "37af2615-db57-42d6-ac9d-bf849009311f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d6e19536-8aef-427c-ae33-f9c1fe736592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3fa7d07-ead4-49ba-ba94-72fc7fca8064",
        "cursor": {
          "ref": "a1eae121-4c88-4c10-8748-7f9e13444496",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f54b0b37-1d66-4de1-9343-535fcf86831e"
        },
        "item": {
          "id": "f3fa7d07-ead4-49ba-ba94-72fc7fca8064",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "47005e6b-7439-4e36-9c1b-22d5f2a3ae32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e7ab371-1169-443e-b575-aee2a6787ef3",
        "cursor": {
          "ref": "7629f1cf-fd96-4b0f-bd73-bebd7d98e1dc",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "87af7d11-66ae-4ee1-bb92-c824e62d1f2c"
        },
        "item": {
          "id": "6e7ab371-1169-443e-b575-aee2a6787ef3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bf4521b8-5f8d-4138-af84-a1895ff0f76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037553cf-a884-4955-b9e1-2315cdb2485c",
        "cursor": {
          "ref": "4aacba57-3a22-445e-8684-695234f0041d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "56152cc7-4dd9-40a9-8234-45a443533a1d"
        },
        "item": {
          "id": "037553cf-a884-4955-b9e1-2315cdb2485c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "75cca407-ffa2-4d53-b1a4-7e52f6f0db9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271d15ae-fe43-4ff3-8145-f7be5cb34aba",
        "cursor": {
          "ref": "e2b1e901-175a-44cd-bbfd-f10e3e17249f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dd87d5c5-f84c-459e-b707-101a657975e4"
        },
        "item": {
          "id": "271d15ae-fe43-4ff3-8145-f7be5cb34aba",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6d0acfcb-f8ba-4b34-9494-55cc6f5e0e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586fc9d7-0ab3-4c64-b817-483e64c67d9d",
        "cursor": {
          "ref": "010151f4-cd7a-45ed-988c-73101580d33b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "745b878f-c744-44ef-88df-aecd87011b19"
        },
        "item": {
          "id": "586fc9d7-0ab3-4c64-b817-483e64c67d9d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b4b76e4e-dbe1-42fb-bae5-a039cd761eeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347ed4dd-6500-407a-958c-e7fe877df8db",
        "cursor": {
          "ref": "436cdaf6-d305-48f0-a044-106518d996ee",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c6504c3a-a932-410e-97e4-4df9dbb6757b"
        },
        "item": {
          "id": "347ed4dd-6500-407a-958c-e7fe877df8db",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d99513f2-d65d-4239-b057-08fa7b905d19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd86ff7-6854-4bab-b982-c6b7c8c5cb93",
        "cursor": {
          "ref": "35b164b1-707a-4f43-8ff9-e6c2e59f7df0",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b0fa0e4f-a07a-47f1-8e9d-cdab504f46df"
        },
        "item": {
          "id": "4cd86ff7-6854-4bab-b982-c6b7c8c5cb93",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8285e82b-9121-42ea-9370-23bcb80a0050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e11925-f643-4ca4-b95b-909d0508a7ea",
        "cursor": {
          "ref": "817a824c-daf6-402f-8f40-a162ea22b2ce",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "84113f04-93c7-42ca-b341-4f6cbdb2e4bd"
        },
        "item": {
          "id": "84e11925-f643-4ca4-b95b-909d0508a7ea",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "be40b85a-2b35-4e7e-a652-5d8bae0faa76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb78b9a-7f28-4ccd-9a64-894d13e2fb2f",
        "cursor": {
          "ref": "a5bbb968-e7dc-4898-9c70-2dfa2365257c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "334fef55-1663-46f1-a2fd-9777becf040b"
        },
        "item": {
          "id": "acb78b9a-7f28-4ccd-9a64-894d13e2fb2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "789e7d6a-826d-4096-b1b2-78fa64159844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e97e84c-00b0-4316-9511-68b95649af5f",
        "cursor": {
          "ref": "4886c4db-6a02-42cf-81e6-1580d6387c4a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d4ad71fd-ec73-48a6-a997-f84f6baf4d56"
        },
        "item": {
          "id": "3e97e84c-00b0-4316-9511-68b95649af5f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "710a658b-7248-4754-a4f9-c4b7a75153af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d65799f-e76a-4f5d-94cc-601d43de667b",
        "cursor": {
          "ref": "db76727d-c68c-45d4-b645-d54063e31687",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f7e1edf-8220-46a4-afff-9c78118ea5eb"
        },
        "item": {
          "id": "6d65799f-e76a-4f5d-94cc-601d43de667b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "64025a4b-8a9b-46c7-838b-1ead63889c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb70bd7-e48e-41aa-846f-0ecf430cbc28",
        "cursor": {
          "ref": "1185cbdc-62ed-4ff5-b277-e05fcc80a5c5",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4fd70140-5d30-4554-85e9-a1b6624941ec"
        },
        "item": {
          "id": "dfb70bd7-e48e-41aa-846f-0ecf430cbc28",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c1211212-8d8e-48f7-b936-a73dae0b1975",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "537164b9-a310-4092-96fc-20478dc331d9",
        "cursor": {
          "ref": "5fc0cae5-0278-4ddd-b4d8-eee223419c49",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "906816bd-8d8e-4af0-b05b-d4d1b9a043ec"
        },
        "item": {
          "id": "537164b9-a310-4092-96fc-20478dc331d9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9f9af2ab-e40b-4458-81d0-86c4a3115288",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1191c68d-f8e4-409b-abd5-bdfe9f208701",
        "cursor": {
          "ref": "3eec5518-450c-40f6-8330-f74b9e79de1d",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d06ad228-da6d-450c-8415-ece2f872e9eb"
        },
        "item": {
          "id": "1191c68d-f8e4-409b-abd5-bdfe9f208701",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "bcb81d6b-5fd0-49c8-8fd9-fe7dec1e53c9",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0b882efa-e714-4482-b921-4c7f68cc2665",
        "cursor": {
          "ref": "bb083e55-52a0-4f5a-ae29-647107c8ee8b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "180de8f4-a8e3-49f1-9513-a5252acad508"
        },
        "item": {
          "id": "0b882efa-e714-4482-b921-4c7f68cc2665",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "37aa8301-1e96-43f3-b78a-8b6a155f7aaf",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d8f0a42c-5fe2-4db6-99a7-f7c19ba829db",
        "cursor": {
          "ref": "2d1f02db-2dd6-4277-aa70-b03c98b4d852",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b3b6d782-a943-491b-8a9f-3bd480c2386d"
        },
        "item": {
          "id": "d8f0a42c-5fe2-4db6-99a7-f7c19ba829db",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3a5276d6-3694-4437-a779-d6c4352dbfaf",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4c0e408a-3122-423e-a6d2-bd5a859adf24",
        "cursor": {
          "ref": "85115b20-5fbb-4450-8881-b927a47d6216",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "13b2b7af-3eb1-4c07-86b9-9ed090919e03"
        },
        "item": {
          "id": "4c0e408a-3122-423e-a6d2-bd5a859adf24",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7e964d99-c093-4352-8cb1-ac106c3c3009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67e185b-1d9c-4560-b58b-7742e06bf30e",
        "cursor": {
          "ref": "07f0453f-10ab-4b0f-90e6-48355be2a531",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "be9600cd-1d71-4942-aeb9-afcf28f67007"
        },
        "item": {
          "id": "e67e185b-1d9c-4560-b58b-7742e06bf30e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a35210d1-a088-4617-9862-fb4136fa164d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8a6388-aa86-4962-9757-51a9290593dc",
        "cursor": {
          "ref": "ca03ea00-c1d5-4258-885c-140c85f20016",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0fac8999-b20c-4a07-add5-7e286794fa01"
        },
        "item": {
          "id": "9a8a6388-aa86-4962-9757-51a9290593dc",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e186aa71-ffce-497e-a632-6a99936c888e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32471a5-60bb-4459-b009-53e2ccdffbc0",
        "cursor": {
          "ref": "fafa207c-f879-4357-89a8-f53537bef80b",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "178faf6d-9e9a-44d7-94c1-ae413b20bec6"
        },
        "item": {
          "id": "c32471a5-60bb-4459-b009-53e2ccdffbc0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9f2797b1-ecff-4264-afd8-38bf3dc43501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afdfc0e7-2e76-4f03-acef-880ae3734b11",
        "cursor": {
          "ref": "710224d7-e436-4cf3-a43d-a31e40c0dfd5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "42499b3c-5b7f-4f4c-9fc6-fc3c00d228bb"
        },
        "item": {
          "id": "afdfc0e7-2e76-4f03-acef-880ae3734b11",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "abd96177-f286-4fbb-ac14-c06738ea393a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b727919c-af39-4cba-8c1c-f8107a1ba256",
        "cursor": {
          "ref": "61ee16f7-0dc3-40de-84c4-25c61c03d882",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "31cd736c-1407-44dd-a169-19855a9ee0ed"
        },
        "item": {
          "id": "b727919c-af39-4cba-8c1c-f8107a1ba256",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "65c1fd73-46e0-444c-8ade-290ffe852c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0c8920-8b34-4d25-979f-cd341ea15a1e",
        "cursor": {
          "ref": "83ddd364-4cb9-4a76-b70c-9d651fff17b6",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "78109dee-7bb4-438f-93e3-2742e933e87e"
        },
        "item": {
          "id": "5a0c8920-8b34-4d25-979f-cd341ea15a1e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "25656f80-e840-4c42-81c5-f736339f60c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a21c262a-3b1e-4870-bef0-d09134af229c",
        "cursor": {
          "ref": "df68287e-9fed-4ecc-9f04-bc9c3bf537a2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "768aadf6-422c-42d1-a551-520d859ca645"
        },
        "item": {
          "id": "a21c262a-3b1e-4870-bef0-d09134af229c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0cb5f37d-e101-40bc-b670-f811c1701a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9f5573-9339-4308-a123-50f9765ca6df",
        "cursor": {
          "ref": "b470847c-5266-4e7c-912f-030b2da78b6b",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9574fb01-3c0d-45bb-962a-d4bfd872e102"
        },
        "item": {
          "id": "ce9f5573-9339-4308-a123-50f9765ca6df",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2d58f10a-d7ef-4b07-a3d1-f2b27b335bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42121715-b5df-4b6e-ae44-76b6dad4c76f",
        "cursor": {
          "ref": "77da8283-75d3-4bc2-b7f5-ad241204ab25",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "db4d64a5-6122-44a7-b525-ed427e995dec"
        },
        "item": {
          "id": "42121715-b5df-4b6e-ae44-76b6dad4c76f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c41cf592-7eb8-4a9a-89fe-4823d549a840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4034e2b-d0ee-4a3b-ba68-b1be52372683",
        "cursor": {
          "ref": "b9a775c1-9931-41c6-988e-bdcabdfbe7de",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ac1d5b4f-ec59-460b-bfb9-8a4c409ab2a1"
        },
        "item": {
          "id": "e4034e2b-d0ee-4a3b-ba68-b1be52372683",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cfde47e3-2199-4ef8-a9f5-485a23b0b0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f248a8-0100-4f46-93d1-eaf2ace9a13a",
        "cursor": {
          "ref": "0884fcf1-c2c2-427f-8ae5-1934c2694a59",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5cf769ae-3c2a-4a7f-b5e3-ab06041e1ba6"
        },
        "item": {
          "id": "b1f248a8-0100-4f46-93d1-eaf2ace9a13a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "76df45e7-829f-456a-82d5-329208a0f32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6554c198-ab2b-44fe-b195-1439447081ab",
        "cursor": {
          "ref": "05fa7807-c815-4a8e-a119-3467cb5115d6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b029b169-80c9-4922-b4c3-0e91231bec63"
        },
        "item": {
          "id": "6554c198-ab2b-44fe-b195-1439447081ab",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "77fe498f-bb3d-425b-8fbc-4f24f38ef297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3398ce83-329b-45b3-bbae-06ec12d28f1f",
        "cursor": {
          "ref": "0f64a201-22de-438f-bbef-be5ce21cf8cc",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "fb334f48-3ce0-4ef5-a66a-6c60c2cafff0"
        },
        "item": {
          "id": "3398ce83-329b-45b3-bbae-06ec12d28f1f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d2ec8329-ea5b-48b5-80a6-9cfb4fe11c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f37a97-38ce-41b6-9957-6baee9b3e3e9",
        "cursor": {
          "ref": "b048f256-abab-492d-abfe-acb9a13b4781",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "60c0c491-3a04-4774-932e-61793df06c96"
        },
        "item": {
          "id": "30f37a97-38ce-41b6-9957-6baee9b3e3e9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0166c527-8c18-4dad-9e99-3299eb75b314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0798a6b2-04bd-4c30-b4e5-11c0af4c4242",
        "cursor": {
          "ref": "e806228f-4138-4172-aa14-73bdef6b8106",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9423e8f4-be2d-48db-916d-0680c183e6c8"
        },
        "item": {
          "id": "0798a6b2-04bd-4c30-b4e5-11c0af4c4242",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "1e7b63e7-44a4-4dfb-901b-8e0c4a9e5813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2d689c-5484-49cc-98b9-f449418f912c",
        "cursor": {
          "ref": "e5c77485-faa2-4003-8878-f6564c20b436",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8312ca2c-434b-4164-827e-1fae366ec98b"
        },
        "item": {
          "id": "4a2d689c-5484-49cc-98b9-f449418f912c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e969f2c0-03fa-4720-b36f-b0b205ff372e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6c0126-2b92-4fc3-8abd-0dc9dfc73afb",
        "cursor": {
          "ref": "81a28bcb-40d0-474c-ba2a-bd447f49f5ab",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "85af83d3-6f7b-4782-a11c-21f843d8d302"
        },
        "item": {
          "id": "8e6c0126-2b92-4fc3-8abd-0dc9dfc73afb",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0b85c7b2-d440-472a-91a2-1c5713dc1804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d07542-d0a2-4d5f-a193-d13d017ad1ea",
        "cursor": {
          "ref": "d4cc12c2-4442-4ed1-abf0-3c88cec4a12f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "54983f5d-3b53-47c2-b026-725867b9abc4"
        },
        "item": {
          "id": "96d07542-d0a2-4d5f-a193-d13d017ad1ea",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d34541c8-ea85-4ccc-ac9c-cb100b679834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab09484-943c-42f0-bea4-e0ef618755b1",
        "cursor": {
          "ref": "d3c713f9-c34d-46e1-b097-6bfbcb011f19",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b6a20802-a60e-4c26-a6de-fb88a982b633"
        },
        "item": {
          "id": "7ab09484-943c-42f0-bea4-e0ef618755b1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9ddd54b7-e8a2-474d-ae0b-f4a1508d5e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca481727-8cbf-4b87-a226-aa73d0d5b892",
        "cursor": {
          "ref": "594a75d6-323a-46ff-aa4c-409c866067b3",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "7e9e267d-aff2-471a-87e2-e3aa330c8984"
        },
        "item": {
          "id": "ca481727-8cbf-4b87-a226-aa73d0d5b892",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "3eb8aa7c-fa29-4eee-88e6-99f4964a3182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488eba1a-6c73-400c-aba6-8d0c6aa4b496",
        "cursor": {
          "ref": "24446773-010a-4124-898b-37e6d927c5fe",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "27758638-4cdb-4d94-89dc-f53fd2423d6f"
        },
        "item": {
          "id": "488eba1a-6c73-400c-aba6-8d0c6aa4b496",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4f258c74-e012-42ca-9c53-4890f84e4d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726cdfed-32fd-4119-9228-947cf24a5bcf",
        "cursor": {
          "ref": "5396a4d0-0c09-47df-b3da-3150b7c523ee",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d61645e4-97ea-4a71-a34d-864d3dd7b5bf"
        },
        "item": {
          "id": "726cdfed-32fd-4119-9228-947cf24a5bcf",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "56d98a03-86f8-478d-b3f9-4a0b742751d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2912789a-d4ce-46b8-96b6-9532d5e34138",
        "cursor": {
          "ref": "1db29998-1e1c-4ec9-98a4-0c50509f981e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "4b289c4a-b865-4764-a270-f471f32f5b89"
        },
        "item": {
          "id": "2912789a-d4ce-46b8-96b6-9532d5e34138",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "953a19cb-3806-4b6e-ab61-e76aae2e8332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b85b5fd-2e55-4cbb-b394-57ded1a8a7c6",
        "cursor": {
          "ref": "a6326a41-7159-43ee-a716-a8c4fc764551",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d965b53c-8ce9-403b-a091-a0de87c22092"
        },
        "item": {
          "id": "2b85b5fd-2e55-4cbb-b394-57ded1a8a7c6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2b448ae9-ef04-4609-92b6-cc1687702439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca622e3-0179-4e75-a57e-07160e772846",
        "cursor": {
          "ref": "cdac8316-5da2-4212-a369-2258ca70cfcf",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "37502381-c9cf-4d23-b8da-4d4639d76628"
        },
        "item": {
          "id": "8ca622e3-0179-4e75-a57e-07160e772846",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f5970e0d-1196-4752-ab25-5eb2f76739d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c332ee30-dd00-4076-b688-6659cbaefcd7",
        "cursor": {
          "ref": "34243759-ada3-4ac9-af54-dc351a345bb3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "95d532a1-c242-43f7-a92b-23f0f4b22b55"
        },
        "item": {
          "id": "c332ee30-dd00-4076-b688-6659cbaefcd7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b3129cf9-9ed8-4acf-accc-643c6a3694fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230ae884-72c1-4a02-a141-74f669458616",
        "cursor": {
          "ref": "001530c5-2b17-4404-8964-289d0db915fe",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "ae3c58cb-fd3c-49c2-86c6-110bd5aea681"
        },
        "item": {
          "id": "230ae884-72c1-4a02-a141-74f669458616",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0a315ea9-4c45-45c5-9bc7-4501a4aa2a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda6f32c-4048-4736-a253-13ef2a582172",
        "cursor": {
          "ref": "68970dc6-1176-43ef-9346-bdcb634a48e0",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c1354170-bc3f-423b-a2cd-a76741cfe826"
        },
        "item": {
          "id": "dda6f32c-4048-4736-a253-13ef2a582172",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d291abf8-beef-4f89-b7b1-82cb6262e40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8c04af-1747-48cd-acaa-40cf5c9551c6",
        "cursor": {
          "ref": "2c061200-adca-4bb6-b3bd-b694e913e7cc",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8b20b004-4d84-4c2b-91fd-0e7fcca016c8"
        },
        "item": {
          "id": "1b8c04af-1747-48cd-acaa-40cf5c9551c6",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "98a86483-3e8c-498a-8a87-7c13cc43134b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12763b46-015f-4313-9277-519e0a19655d",
        "cursor": {
          "ref": "a28cb147-7108-4fe0-841d-1a02596c89a3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7580b702-e865-44db-8dcc-f1fbbed29e75"
        },
        "item": {
          "id": "12763b46-015f-4313-9277-519e0a19655d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f4ee6fd6-9328-4f66-86cb-7802c66baf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f3fd4f-bf1c-42b7-8a02-d0e7c5587bdc",
        "cursor": {
          "ref": "e1b95147-e0e5-4bb3-80bb-5062ae08d0f0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6f8ef628-4ea6-4aad-81ee-e18b2ead1782"
        },
        "item": {
          "id": "c6f3fd4f-bf1c-42b7-8a02-d0e7c5587bdc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ff3a122a-c6cc-4fc5-a064-314e97d41876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30dbabdd-1332-4ece-96ac-aeabf904b719",
        "cursor": {
          "ref": "b675409f-750d-4d4f-95f2-a44039e88c70",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cfcf2ae2-fa49-402b-8287-80d3e6013d61"
        },
        "item": {
          "id": "30dbabdd-1332-4ece-96ac-aeabf904b719",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "41412f79-e48f-491a-9653-718718e20a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279a9be9-0a5a-4935-a2c4-319d46a88547",
        "cursor": {
          "ref": "19e4b5a3-763c-492a-8d24-b55499232e99",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "b45503ef-8f0a-4799-bff3-b169c6217716"
        },
        "item": {
          "id": "279a9be9-0a5a-4935-a2c4-319d46a88547",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "34d7274f-34d6-49ea-ae4e-d9363df59b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93a61be-d2ad-4616-9f06-1bc55ea2255a",
        "cursor": {
          "ref": "e52ff3f6-81c6-4e98-aef5-52fdbb08be00",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0d36d4c1-1d35-4c3f-9546-5965968f677e"
        },
        "item": {
          "id": "c93a61be-d2ad-4616-9f06-1bc55ea2255a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3308a0b3-bbc5-4b29-a4d7-d90e75e61131",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b183648-ef08-4c30-84b2-d62620ae6eb5",
        "cursor": {
          "ref": "d217f52a-4f23-4db9-98bd-b5746b043ab8",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1c8521b0-ac5f-49af-9147-8588b89bad9a"
        },
        "item": {
          "id": "4b183648-ef08-4c30-84b2-d62620ae6eb5",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d9f73a87-46cc-4205-9dad-987ee87c225a",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4b509dc2-52f7-4b0a-be93-8ba1ab26ccc3",
        "cursor": {
          "ref": "c10defaf-2443-4488-855a-a6ee76788fce",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b76cda3b-772b-481e-ac13-2dae4321eeda"
        },
        "item": {
          "id": "4b509dc2-52f7-4b0a-be93-8ba1ab26ccc3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6326d6b5-3532-4a76-b44e-9acf7b721b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3771080-b4b0-4842-9bb2-18538a772aea",
        "cursor": {
          "ref": "445cf236-ae38-406c-b711-301e158cd6e7",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "43bc02fe-e686-4231-90a7-ba09bfbf9685"
        },
        "item": {
          "id": "e3771080-b4b0-4842-9bb2-18538a772aea",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4bee0f6a-8198-43ef-b764-028be5e63d08",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c154cc4-dce6-4a40-82b6-84582ab3b0d5",
        "cursor": {
          "ref": "132bc628-615f-42c2-ac2a-a928ab9c2c08",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1f9b7049-5265-4221-9a2d-c49e5ae92f93"
        },
        "item": {
          "id": "6c154cc4-dce6-4a40-82b6-84582ab3b0d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29105200-3707-4130-966a-13f8661f6abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c154cc4-dce6-4a40-82b6-84582ab3b0d5",
        "cursor": {
          "ref": "132bc628-615f-42c2-ac2a-a928ab9c2c08",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1f9b7049-5265-4221-9a2d-c49e5ae92f93"
        },
        "item": {
          "id": "6c154cc4-dce6-4a40-82b6-84582ab3b0d5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "29105200-3707-4130-966a-13f8661f6abc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca6302f4-748b-4f88-b0c0-7a6688ca4496",
        "cursor": {
          "ref": "f64a764f-fd5e-4dc8-b4cd-c5d41a078282",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b1cac645-462e-475e-8979-8d9abf1033d6"
        },
        "item": {
          "id": "ca6302f4-748b-4f88-b0c0-7a6688ca4496",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2a9d2024-0594-46c7-9ecf-672061a70785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ecc9ea8-8aef-4ddf-a7c2-67d8c2bea561",
        "cursor": {
          "ref": "b51f63ef-5c80-456c-885b-a2c53b1246f9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "4bb50ac7-a5e2-4c9a-b903-13a31a58a7a8"
        },
        "item": {
          "id": "0ecc9ea8-8aef-4ddf-a7c2-67d8c2bea561",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "762e8167-f90e-4bf3-a5a2-2d09b38c8821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}