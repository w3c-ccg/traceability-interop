{
  "collection": {
    "info": {
      "_postman_id": "faa02ea8-9433-45af-b9a7-893a98130da9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "10a3f506-6d9b-4a49-a5d5-0b0538508e9b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ba6bdda6-51f5-40de-bada-94ad3e988e70",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5244c0d-4086-44ca-b1e9-15eb106dcb2f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "43918e05-7451-40c9-bdc4-57f254098a36"
                }
              }
            ]
          },
          {
            "id": "ef0cae4d-0b39-4b89-b031-937f72486766",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "42ea1b2d-8bdf-4c4c-b57f-9e7573274b5e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ed01fa99-3616-4f34-9ada-6b4028646651"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0e870eec-4baf-4e74-b733-efc6307c0a14",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "612a7e2c-63f3-43fc-b462-68315e32b9fc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b8626b76-f62a-4eea-bf3d-2cff093251a6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71644858-e891-434a-862a-9cbb59ac550e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0050dd27-eaa3-4971-9789-4d19c40079a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9ec16f0f-7305-462c-83d5-7b59ac2172a1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2822253c-0553-4a90-ae87-1af16fe99525"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "01cab08e-8efd-49bd-8aad-95c3069e6b7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94f82294-cbc0-4a68-9753-945555dd49f0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75b44bad-0a9b-42c3-ab66-91ffd90f8175",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "591ab63b-0f29-44fb-9552-2f3e673a91ca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ffaaea0-100f-4d6c-9db0-908458a17e7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c293a4be-0131-437e-9347-6802dc45d29c"
            }
          }
        ]
      },
      {
        "id": "143eaafc-c9c3-4bb1-ade2-6ffe5443760f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "700d435e-2fca-4bf1-b214-dae9386a06de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95f5bd08-48fb-4c66-9419-bc2fd735cfa4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "06d14301-5989-4a2c-9583-29258700ab52",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afa26b7-df33-468b-9a8b-c3f698c7b660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0db94f67-99d4-4daa-8eb1-03440d6eba7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c9faf8-3a4d-411e-bdad-dd7e550381bf",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2642c00-9d4d-47f2-9863-17d75ead7e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ac398189-8a1e-4f59-aba4-17bd3c5009f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4700b083-bb8f-4c90-af20-f41a7550ce6b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511f31f6-534d-4c34-b13f-ceab15637cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66e7d43c-9310-4024-9d5f-1deb7b1554df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "09c23e6a-4115-43e3-b95b-789be3a04d45",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "818d628f-99c4-400f-b0c5-876c5afef1a6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7004f109-5d95-45e4-a370-e2c1f1d9a2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b4a4dc6-4ac6-4df7-841c-2743399c8a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35adee8-39ac-4d32-b064-9083f3ae4890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa448ca0-f200-433b-9864-b809ca38b04f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "93f16398-74d7-4c5e-8a84-f06eddb59bf5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1aeeadb8-8515-4693-9d33-ed161bb6fb2d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93e1ef5f-7ab6-4765-a859-a3bb36cbaa71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a04fd668-9d9a-4ca9-89b3-a2455c5c2b26"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4fa2722-6820-47d0-bfbb-9a4eff6b64d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8f80fa7d-a851-44e7-84f7-323bb3f16fa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12eb833d-1a2d-43c3-a9ac-8844863a8b05",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fd7b252-d99e-433b-a44c-3cc3f09fbcb7"
            }
          }
        ]
      },
      {
        "id": "ccb36e25-e612-420c-af52-f7e73ff81898",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "26c4e4b0-96e3-49db-80b4-492a403e2966",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d89f6961-8c2a-421f-a363-952fde89d2ca",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ad05918c-549b-4490-b0f3-85a9b304ce12",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c350e4-a7f8-4d82-93bd-767203a0a639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0564f2b7-7102-44d5-afd7-4c82728d7881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee441b01-141b-4469-94c9-37ec918b4bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c857c550-d2f6-4b54-84c8-709c623a3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd3cb30-c31a-4f8c-9a7a-fa37e7dc36b2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2067ad4-20e6-442e-841f-bbe2f1e71db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2fc97d-9968-488d-a667-e177c79b9ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad89030d-c5ae-4d35-988e-c957b94012ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aebe85eb-c8b9-43e2-a8f9-a14623b3fa71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde0e8e3-ebb4-47ba-81a4-00c8e8b164cc",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db3008a-b34f-4629-9ed1-852f4393b5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27661b77-c22c-4a52-a92d-9c5e7af2f53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f81d4f2-a070-4ffa-9e05-f2c0cc16a4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac5bb4a3-e639-46d5-8686-03dfd26fe16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb422e25-1b58-4d7c-abd6-067a08bb9be9",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06f48c9-72c0-4d5d-a736-5a3ec9099937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76dcd1c2-865b-4534-a677-1ad6d83250fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5366f216-86d5-44c6-9dbc-f9fb9f13b8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f4dd82e-fa4a-45cb-b5ff-d6a947bab5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470ac8dc-dd3a-41a3-989f-30b16804935f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec36275-6301-43c7-be8e-8678cad7c43b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b6b7e2-ec8a-4aea-b165-94a09dd28fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6537154a-dec4-4b97-a339-4ffa49031c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "609f87ba-9949-4976-ba64-fa15837ffa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638010e4-5897-43a7-8a5f-5e00fb5c4a55",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c50157-f0ca-40bb-ad09-93179dcb5242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dfd6513-065b-4c21-8b4c-5b65f2acac6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e78170b-7f9e-4892-a038-5158bafcfeac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00a3f362-638e-4a2c-b6f0-ebc29f56dbec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e046a217-bdb9-4b0c-8576-26ff03a11de2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb04ecb-f38f-4441-8ad3-0d375b8fdca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4348665c-3c47-48d4-8297-6bbd4b801c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f84b9a4-fffd-43d3-a9fe-adf5f3dcfec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "686de440-8848-49d1-981f-45be2ae318eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825a56fb-8505-4ba8-a825-333a221cb0c7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c838414f-b0bc-486c-aaf7-f75d2b41ecc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a16c73-92b9-4023-a86e-81b9c52f8085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b16333-9d81-4fcf-a663-331a37b8f191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc37ff4d-be75-4d99-9e90-39b509450f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70873eb-b7ed-492f-9423-a0946d351bad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30338e4-35eb-4af1-b9bf-f2391d5ff21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "926510c6-cac7-4309-b1b4-10faf9fa115b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753e205c-011e-4b7c-9213-432b3e055282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fcf1ff2-a7fe-4935-a1d0-55343271d5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fb2ac1-fd66-494c-9f72-fda385cdb442",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce2aded-b48c-496c-9150-74bffeeb1f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635cb728-c23e-484f-aef4-2e8ff12f130c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07677d53-a842-413c-81d2-afbde1f04cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed90323f-0eec-4374-8324-66c0cf2fd760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304f7cdd-9f04-4b76-b305-840a5c7c0e92",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e395e1db-3bcd-4247-b6e7-00a3676a0869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de9bd42d-5b2c-4cd1-9fb1-70ac1ec9327f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3a0e80-842d-4c01-8e0d-73f5178f101d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5d16a65-08f3-4f2a-8bea-f73f60e71a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0adffa-db67-486a-888e-e00de4c4fc15",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d895911-b198-496b-8a1f-f444b46bc596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cdea8a0-c252-44da-b58e-b72e69bffb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d577fc0c-6130-4ab9-a6e6-67b6a2c8cc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "13b1fc2e-4a9d-440f-86a0-6574f38584c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1512c151-7cd4-497e-93d5-ab57879a717f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196ea207-bfdc-489a-b7ad-bc557e7d620f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fdb9fce-ecd1-4a1f-b8c7-48747c18f157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0e9f6a-679a-4735-8e87-016d0308a4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "920ab3da-d756-4466-b9b7-4fa8080afb9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff251f3b-5adb-461c-bea2-349fa3efda55",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bcf5ce-2fe4-4374-b77a-ee59c4ba5a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16109310-b814-436e-8436-0970b4261bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2cc5b2-8217-4be2-a5c5-6997810055b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac4a189-bc76-4d9c-a41a-8fafc6b3334c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3930bf9-a5f0-47eb-8394-b567b3bd6a68",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11140c68-b70e-4fce-86bc-5b140e72631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79d9b66-fa21-4bd0-be60-c1e78d1b9a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a053cf2d-df2b-4314-8727-677080a69e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf31b7eb-e560-4160-bbe7-e89f131fa891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0cb99e-7b3a-47a1-820b-3988a448e0db",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef69913-9916-4920-beee-a3a9a8fedf90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "763b817d-283d-4f50-8ebe-8cf79f25432a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a57c7ca-5602-46e2-941a-b810a63e3fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9e68632a-8234-4285-9ae9-e502443e2e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1dc9e1-32cb-4e54-819e-3edb876fa400",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba155ad-30f9-45cc-9a86-ad2ac3cbc27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8735249-4b6c-4958-bbb3-183d2aa5acc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84684ff9-6312-4862-96bd-79f59d65ee1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4b25be9d-6cc1-40b8-adc6-39d68ede39f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7895c1eb-f4ba-4d15-b541-f40273920023",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abcb9c3-8344-44ce-9dc2-4d2643321e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dab4186-3bd4-4d3d-a191-d16e68f2f193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0992d353-33c2-4cb3-b4c3-2cdea31a8446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "44f49ef7-c9d2-4619-8788-dcce256c93d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddac395-8ce1-41a0-b11a-d262879592dd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab13b3f4-710c-4cbc-9ce2-03194b897f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffb4425e-d379-41ea-9afa-e77a03a51bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e061f413-818e-44e8-80ba-c6b850068b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f722a6b9-2255-4eab-bfbe-08bd07e20659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fbcffe-7e11-401c-8cab-3a7163ffed45",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00026686-3d2b-4272-8f48-c09d6744174d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de1706f-636b-418d-9e26-d402f92b7549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bf6a05-4ccf-4ad8-9ec4-f26d5c231f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0205a0dc-c65f-4e0a-a996-541e93069f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0746a23-c8ec-417e-ac45-6dacb1b1abe8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81118d12-4c25-45a9-af53-7fdfe593dd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077b391e-3852-4b24-843d-d5ba6d4fa3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f889ad7-2abc-46a5-bb3a-a0236defc1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f202854-2fe1-46b2-9388-ac054b40b6af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1dd530b-4aa4-4fe5-83e6-8291e1d397f3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9786e1-3115-4eea-bf25-f45624d7cd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da0f020-9eb1-4d77-afe2-f2333ab886cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d343b595-1be2-4778-9b0d-cd66fbbe4d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2829c687-a14c-44d0-b293-6e17c802ec49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc23293-3d5f-4b47-a429-a326c8160698",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2121c898-9a41-4eed-9284-c471f06a54a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f22468-5861-4816-9006-b9f9151d42d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3323632-298e-4981-8567-ccc8b99e971e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7c0ff5-9311-4a04-af33-9538201a4b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd14acb-1e35-4428-b3cd-135d41558620",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9222e746-d91e-454d-8929-70acdd3a65e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236e433d-98dc-4cc6-ac83-623c02599b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a01fd33-96f5-4017-a779-77598de1034d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "172edfe0-26cf-4c26-935f-7f34559971bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d5c668-fc02-4d5e-b79c-edc68c4fbac7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36cb81a0-ffa5-4aa2-8568-f1a62e3b241f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1369dc-ca27-413f-89af-b0813ba25b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69229165-483c-49ad-95a7-e5d6397b7826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1209854c-7790-4acd-9e27-64eeb6ceadee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33303bce-9ccc-44af-83ae-fc338fb571a4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361870df-94ca-4046-a819-02b8c3d3346a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada8ec47-b199-498d-bc1d-4b71c103634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c062d3e3-05f3-4cfb-a476-7ec5fe16b230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "71d849fa-b992-49db-a1ce-59b960c6346c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3590be8-c56f-4dc4-89b6-015a5a738713",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207892e6-6576-4b41-8978-b6a60e1fb7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe6d45c-9cfb-4574-bea8-684064bf0482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a325568-58e6-45a7-b1ef-d6213bd0785c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31bd1fd3-1a94-47b4-b36c-72a33bf3cb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5cf7ed-7eea-4c41-ab1b-e3a486f7df16",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e8d090-81c8-4293-9afc-31215ea5606f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44ee712-486a-4ed6-b767-5770a0b57a33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6af583b-5aaa-4f42-b1c0-fe4a93cbf2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c72f44d-70ec-4f56-a61b-8b45b4f98eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de06faf-23f1-4c9f-a887-29d6dcfec389",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a61b10-24d6-4f3e-b4d7-853140537f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fa2ca33-11bc-45cd-8fcb-57baf6319718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e86452-d3c8-4b0a-957f-0f5dcd49e79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6b98ff-17f2-40e4-8622-94001c78e8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ae6b76-718e-4fec-9a24-7e5eecfc25b0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984786a4-c369-4e35-9850-664d95dd5acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f875bf75-d8d0-4c80-b576-445af2401d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8467d088-5433-4135-8b49-ddd0559d1ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a549c44-fe1f-4f3e-9c96-f29c49744401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89d4bb9-2707-49aa-baff-2ed9bc0b324e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746b74cc-36d5-481c-98de-333f0aaa5882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d35d20-ff39-4602-942f-6242764d71f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74828276-64c9-461b-ae36-528b4adf1bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3047eca3-865d-4bf3-97cb-ec887040731e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2d6cbe-b7c5-4d48-a6cf-08e9d1a775e5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5adb67-f1cc-40d4-8f11-d056d7601dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bd1200-8257-4bf9-b877-f52a6a36f7ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34c33c7-473f-453d-b92e-0dedf513c478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0878e360-5ed1-4079-844f-52ce7ff6eee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d946070-ab95-4176-b85c-c0f08072cc30",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f4ff41-1de1-4ea4-a6d6-beaa3d6b532f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7a971d-2c3e-4d6c-8e48-144ec1461aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275dccab-8fa5-48c9-b0d5-7891815e7245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "650a20cf-d2de-4883-98b0-a3f929005c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640aa81f-261a-489d-868c-d165f80002d2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5b8c47-1a80-4fab-b277-4cbc992be0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab41f76a-885a-4f67-bac6-903873bbf2a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdd6415-4819-40dc-b154-0f3b284c82ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1c6e73-c6e4-4301-b057-07ec1c70f7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e87224-a77e-4592-abba-1fe1959ca6f3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1ef1b5-638f-4d8e-a1bc-6d660d9b59c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790d6e66-3c0b-427f-89dd-49a88f9a54b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68eb040-09b4-4624-b5d4-b326985a7cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7433fcc9-bca4-4b19-b798-e30358cc128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d584f7ba-b327-40d3-b39b-5f1564567746",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea4df53-498f-4706-b1f9-4d01870a7e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7ce91e7-acc1-4717-8882-3976ca149de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d005ce26-54b9-44c6-846e-82a004a7109a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7db61a-c340-413a-a5ac-c47829a3fb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b372b3c-221c-4659-b15d-fd7574bd0bc5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1def30c4-9e60-4644-82c6-2cd99b59b885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1656f2b1-8b01-4808-8594-9aa6315ff694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0535ac3-5699-4193-8d40-31b602720bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8040f929-f763-49fd-8d53-2fa9f244e2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20f7ec4-976d-43da-98bd-6385431306dc",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd2453e-3ed6-4e9a-857e-e136ec83792d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56f4898b-fa08-47fe-a36d-aab9c70565e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d527d25-e158-49d6-b9be-6afa703a3ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bda7b73-a4e1-4ac0-a4a5-bde6f9e1d05a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8359c58e-f7cc-4aad-a599-0dfa394df4f6",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b733fe0-6221-40ba-b69a-9cb0a749aa0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c535de58-a00d-46b5-968f-6669e6197bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9593f3a-d82b-497d-be14-a0e7af35c8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b1013d-3a16-499f-93c9-cb5b5c640c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aeafc5-5988-43de-ba7c-d62281a1f4bd",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e37877-2304-4699-a3ce-db98da041e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "512d12ea-d662-42f4-ab79-2762f5542d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c06dddc-4f78-47eb-8b39-27467bc0a0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa513b69-4b1a-4222-a05a-7a08bac7f018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79074487-a7b9-4f59-927f-f683b7f649cd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48150850-58b0-41ee-9158-8399693b38d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea36a420-4b4e-4d84-97ec-5d6c6ba4b8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3646be-c4c9-4879-9d83-0df6f4cef57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e0b312-7179-4b23-83e0-2a4e1296cdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e41bde5c-cb6c-407b-b5a5-317442a05f31",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864cab77-4595-4b27-9842-f6a404dfbb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37daa1b2-a067-43b1-97ba-68fcc6393455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f40534-5316-4e9b-bb21-7d9921639595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0547c8-e019-45e3-a9f7-a794be9f535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0227206-11a2-444c-a2e6-fad0947abf54",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36257c02-efdb-4421-80c8-fa264dc101ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f9ca15-34d1-4f3b-9c1d-8db64450bace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b08fc5c-1a8f-4b52-a1a4-b38e1cc1665e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "81f5ad6e-1eef-4708-b621-75c1ef7b29f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a27174-431d-4ad7-a262-ee662bd9b951",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ef6472-382e-4ed0-a88d-30d9071ed288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "138442c6-e2b0-447d-815d-4978e7093185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e84d92-55ec-4f64-9ac3-f84cc4a77e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "76d13a4a-163d-4b62-ab25-de4414a33576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d3c6b74-67aa-445d-936d-a002d2132c04",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aa5b15-c0ca-4ba9-af14-ac0476a0b427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a767f3aa-0553-420b-b826-e4bdb1231893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4599c55-4759-4272-a7f4-479400ff3aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69495d60-fa57-4b7b-a2af-8e749f8fe374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c218622-d066-46dd-8b14-d9d8a22e5d9b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e959fbf6-cb3c-4932-8526-29c4d035e1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d02de06-fa7c-4534-92dd-760baddf8a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad5ddbe-6f78-455e-a329-a78230d9d0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3472e859-029c-4374-9346-80390b6e553e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e08874-0606-4f5e-9563-2bc6a1ef8a52",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3255494f-da36-4826-bd2e-00f4e306863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a27c056-fe83-4b52-b688-b07bf44eee04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ec21af-10be-4814-b631-be0397cb4e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96a3e3d8-5dae-44ff-aebb-8e1f59cde61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc96dc4-15e1-480a-9920-5cbbdbd2282e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcde9547-209a-4762-ba4d-07e8b2d45a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af4b9095-4fcd-42a1-bb8c-28a724ab7954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5943e3b-bfec-4b5b-ba92-3f7d91c2f660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e766c2-937a-4b97-9168-d8bf5fce0131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d578aeb-11f0-4811-adde-a62ae4f26842",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf240f-c4b0-45c7-a1a8-79a2243847ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec803b16-abb4-42dd-a4c1-4b4ea28adf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fab0a9-131f-4adc-8a40-e10ef3db6ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4984c529-9710-4761-9866-deefa4c6985d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d9597d-2e96-4085-a8dc-c8cd233f3c57",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d1acd2-7d73-4c70-9b8f-11cfaf03bbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a43c51a2-b228-4630-8b98-34f8592a2c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423bb1e9-cea3-426e-b8e0-af1a5c642248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5978b8b1-9545-466b-ba20-abe0ea12ab57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6740cabe-f849-4bb2-ba0c-a6c011715b4f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954aec0f-6190-4677-8495-bebf844a7e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6335c82-0ff8-4896-9a04-d5e4da0b2f81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c890ab0-043c-4006-b197-ee15c6abb065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccec5fb6-d042-4456-953c-c019226f65a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51243572-6d93-4dcf-9996-5f8b15e50d91",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194fa96a-0011-4541-92d1-772561dc3dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f615d4-8259-4b86-be85-ff0c95cb2ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c98a1d-1f6c-470b-a047-3d5158cc8165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcbb5f4-283e-4f5f-825b-f860152341a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5290e544-226b-49fa-b65d-8924697de4e9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c252f8-2aa1-4880-827a-f555c41edca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42140fdf-60e1-4b7b-a664-ded579d0f6e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112540cc-fa55-4994-83e1-34a110b3d92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd3104a-0265-470f-a29a-e2e4c16feae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983ee5b1-3ada-4085-9b6a-8721983cebaa",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5e366e-22f2-408d-a670-6fc48e511a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071d87f0-11c0-475f-a248-5fbb2a4af764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92ea82e-9677-48d9-ad1b-9b1482007f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aba61ce-8fa5-431b-8b45-e4b37773f2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e0e2678-8769-4261-9323-9e0193fede31",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569cd739-03e2-448b-93a2-dfe51510e377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c875d01f-63e9-4c5a-bd6e-e7ee96169eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe53949-38b2-4fcc-9c8a-12ac0e14053d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4de0d9ed-2e61-4e42-b367-9a00dd018c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd266b5-6469-4b1d-9cb7-95a6c14cc19f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "960a2148-949c-4f30-9803-fc336c176ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541d3019-bef6-4fa9-87a6-dcd8b04b699d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7518a1-1f9a-46a3-a80a-c9bcb7bb28f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5afe0954-45e1-4c21-b88d-0273941e6ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983c5d6e-6d49-4df0-89a8-d27c4217ae39",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6383ae7-ceee-476f-b9f6-41b1de927688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f69f930-1266-43f7-81e1-668ab7dd33ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4688ed4-30ab-43ff-a250-5bcd3cbec2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8516444a-ddc5-4b93-a16b-6ea4cd955423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590c520e-a158-4e1c-836c-f80b5348aea9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcf7efb-9d2a-4e35-be24-572b4d07227f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9bdfb0-cd67-4b64-8fe3-914b87b7fed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa81d58c-0144-4adc-b8ba-bbd0bf902c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5750096-b692-47d5-8c08-51ef1af400b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84569bde-99b2-486a-ae84-32de59b454fb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69dbbe01-6e00-4c71-89ec-fb3d24cc34d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04da8c5e-2d97-4a5d-a7b0-5da3e0f3989a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fdb0fa-db5f-43b8-b95e-aa2d8a3e2a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5817f23a-95b1-4422-af52-95c38ed72635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e54178d-b618-41ee-a8bf-820a2f12e0d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a06d46e-f221-4244-9d65-fd01764d39b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55835a96-a3a5-4aff-972b-9287b5b7853f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc03836-76bb-4ec9-9c39-22b5e0116f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e257848-5cc0-4659-8e56-c4e3a648d826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590802f0-a592-45f8-a9a9-7b36de302c21",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d152409-cbfe-4984-bf0c-488574c6c56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d4d45b-68ef-47dd-b941-e17221ccf016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067027cc-7ece-4a48-914f-a224c90aed63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a37852-a0ff-44b5-9d09-270c9a6ae16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f9ab22-5137-44a5-893e-bc0457c22cf2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbfc8d5-f72a-49e6-a2a9-381ec7d0466e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac479649-1583-46f3-a225-8c5793fd4874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af4a287-cf52-4b8a-b42a-56e4a0348a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca3ef5b-f738-4d0c-8fa7-f5fd44fad6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce162ac-b829-4374-8f8f-debd28e657f8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192ab58c-b622-431f-8b6a-3c9ecccfbef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae104430-8cd2-451d-b3af-5f480fd15752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af39d58c-7fbe-45e2-be66-a8fc5612b1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa854e7-e4d7-414f-aa85-2663d8ff42fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d848b865-7e6b-4a76-90c8-eb8e6da4b6b9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a71ae27-6acb-4032-9ddc-d32dd737cb99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd91668c-d227-45ed-a5c5-f9f17d57cc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943e96fa-d7ab-4675-8020-5926405b7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "854a7836-694c-4cdb-9547-d5d570cb2d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d632af1-adce-4859-9cab-e70077b7edf0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da2c35b-6a20-474d-a42e-238700eacfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516654b0-94b1-4009-bce2-1e680f7684ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c969198-c29d-4c03-8741-a2b531d4a11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ef213c-7bf5-46d2-a16a-1a0b27824b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d40a48-f3d3-40aa-a57d-11978d8726e0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c377249e-968f-4309-8e0b-e071136b6bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1a2794-6fb7-4bbc-ac32-b81e45348389"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1149c8-7c68-4f05-8c45-d2e57ddc86ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e31390a0-0da7-4ba3-8806-9ab75cc55dcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfbd4bd-25e7-4ec3-aac9-2d01cb139448",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fa79cd-cebb-4c79-a7f7-da435feb0073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c176942-bf79-4ce6-af02-31e23cbf7c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5406ce6-bb19-4db4-afee-752d94a843e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12d03e3f-eb72-43ba-8f4d-ff9241f7af01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec3b4c13-dc8c-4563-9efa-47fa93b6a35a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9263230d-a03d-4eb7-8f54-41f0589e4a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fd2164d-107c-4bf2-a11f-cacf82a7f808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f05125-b7de-423a-ac07-799e037bb637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4cee202-b2e2-479d-a0ed-f209f605d98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359e7e4e-12b0-43f5-a6ff-c04c9f028be3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "765a03e3-d196-4283-acd9-353e914fd2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a96d36b-9323-4052-bcbf-61d16f1821f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0beab55f-2a39-4181-8b5a-3ff6386ef38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ffd81f-c144-496e-94e7-e915d4b4dbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0306f26b-5e97-414c-bbcd-9a7fbdb16bd8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e149401d-b3fb-447f-bf45-5e9d097eb2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801459d4-d500-4c2a-a0cc-f54455f899fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb89927d-e21d-4480-8a06-1f09ff13813e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df069e72-0780-4d53-8b6f-095a36744087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cfdb4a-fee8-4780-8741-becb5934ff27",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c8ae30-f6cc-4ccf-bf7c-495dd5c1baa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf2fb1b-410a-455d-9920-b0f1d86639e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f570a1-245c-48c0-9e32-806facf14da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99f20017-cdd2-46dc-ad67-22ac21a3ced3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cb357f-7e8c-4667-8138-c7de040aabab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b1838b-b364-4921-b085-b046e2c853a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab22c738-a94b-4bf7-8017-da19c7c50bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5571451-072d-43c3-a46b-6e74c6aa6ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0548be83-fda8-4bc7-9b09-9b21db8c8acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5371c526-f8b2-4f40-8a7c-3e4e4119c66f",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086c722a-4828-4a7d-83c6-c43a78143577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c47026-777f-4c98-8208-5f722ec066be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a42fea-d4de-4434-8790-e30ed2e05a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "467420df-1e4d-4a8f-a64f-c5bf54ee6190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaad6b50-3518-4e9a-a7f3-687608249d1b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e16746-4b00-443f-aeca-374e7593fed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0dace7-4108-4556-9a65-a1b44518febd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8be41d9-8fd4-477b-bccf-827fd67b5df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd16c1ce-27c5-44d1-a1fa-de34ec2baa39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca94c31-2961-4d49-bb34-6d539033f3b7",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0399ed-1300-4696-8147-85f699d52483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be626ee-99ff-442e-b43f-e68009359928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0f4925-9c02-49fa-936a-06ec373247af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52c2f7a1-01a9-4cf7-8fea-d44c5515a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7d51f3-7e16-4456-b6d0-a9add506bb65",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "317fb211-c84f-43f8-8111-74b2ed9925b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05963039-9aec-4c15-bdfe-0037b2e63f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7f7cc2-b553-40b0-8b7a-1bb89f15e25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31fdbcc0-0d52-4673-b5fc-d87d6ccd24fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f1d3ec-b856-4d47-b314-7364b5798f29",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc037790-d40e-48a1-b73d-5ee8a5ce71d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dcfe152-8b7a-456e-b19c-3b6700652155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b81908f-19cd-43fe-8397-dfc83ef8dbfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "649887bb-ff87-424c-b77e-8f878e22a30d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70bfdb51-c5a4-46de-8cd0-2f09813c1aea",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3797bd40-380d-4381-9be9-351e54920f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93c307d-02c6-42e3-a462-d58b5cc838df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9036e799-e77a-46f8-b965-c7e2f90464e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb585693-114b-4c90-8577-36cbdaa052bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a1e17c-c326-4c11-86cc-c6513355cbeb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b666a8cd-87ec-408d-af94-f6f7b3b1266f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a24092-05e5-475e-bc31-3fdbf3711136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd22a36-a427-4817-9268-26133ab58f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4742f0c4-9e54-48e5-a8ca-e9aa854df4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33ea1a9-4da9-4537-9cd3-0780c585fe7a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19fd6f7-1c59-4479-9fb2-36f7cd41962c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51376675-99b2-4166-92c8-12acc34ece53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f07036-6a29-4c28-8f89-161604a10d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a525f574-6ba0-434b-b6b9-a5b4bc5595c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e2533b-1061-40fc-abb2-707d7d08cf04",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11868578-00f4-4dcd-9f20-e4211a8a7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a1f2db-2829-4783-b8ce-e09d1686d387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51db516d-3955-4342-9e3c-ccc52945b290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f11b2be5-81dc-4c69-9a78-aef98c9161f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03019687-4a67-4adb-a693-0ab33ed92a59",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2d236c-925f-47c9-8765-838c79729edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36050770-d6fd-46e9-a7e3-242b70f9b25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab9c707-1ea2-4b84-b3a4-d54cc771dc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cec2e957-77e8-40d3-afd7-952614816832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cf2462-5b31-4368-8b3c-6bb8c8922260",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2efc91ef-4495-485c-9294-f5931c7531c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8465ef2f-9aa2-415d-9dd8-533400a273b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef937e20-b203-4b36-80f6-c855883ce372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "58800d33-32e2-408c-9fe5-74236d9e1ab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f644d0ff-1e20-458d-8003-615fd17b487e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d466ed1d-9f9a-4f33-b1e7-c1f4559121eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b2e3ad-296d-4154-ac58-2141a38ee383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab2dcf7-e7ad-452a-b814-7bc6c4671038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba79952e-a1f8-4500-ab1d-c0ba96d8d68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c575120-0141-45fc-9d8d-d5670c963917",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1792b474-c4a1-4201-9cb9-3e7e1ab2fc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e080ee7b-1522-4ac7-99ce-7e227d3dda07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b787ea9-602f-4624-ab95-8b756db4f0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "637ae3ce-4a71-4504-b7df-530e5f833cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be602daa-e4db-4a0c-bde2-d2f50c8015b4",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053a351a-fff8-4cf6-bb19-cd88db8b6354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761346fb-043a-40f9-8983-62a85208851f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124b3619-1527-4cf8-8a77-db245691cb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86466e7d-4da5-4943-8bb8-3fb7870a36f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579e33ec-af9b-4a01-b4b3-03c674e1b664",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a719707-3d7e-4767-a4f6-3b15ab1c66fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96804755-dd90-4330-b6e8-e484d23852dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b20b6a7-0d47-451e-b282-3e7914987d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec48e8c6-f962-4434-8766-a9fd3844084e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60ffcbe-0d76-4979-a3bb-fc20fba094a1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf33ce54-7239-4be5-91b0-b4f16c74493e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fc13cdb-00a8-4f8a-9573-fc62ed92d01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35aa8d8-1ff7-4b82-84ca-f3ceb5f71aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "36088079-c39a-407a-b847-c44c30d2e68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "900b010f-d946-4b97-ab19-f8cfcb2a4de4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f8ceef-0ac3-49c7-86d8-ac91eb15d49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2c3b83-fa03-4de6-b961-8e9a01f2a4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade77f1d-cbbf-4298-a464-2f13aeed8c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "26c3a7ad-ef7c-445e-9d9e-71cdce768d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f03d79-2530-4263-bb5b-36bfad9f8ee2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124a4e71-3b7c-4e77-b0f0-ddd222b90df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be419b52-84be-4888-b782-b98c799132d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d84ef23-4aec-4d1d-b95e-208df9c00f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "cba80c94-e36d-4197-8c7d-a647b9d0ebac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2d01b2-b8c5-4490-851e-c098a4cb55c8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3f270f-6343-4b80-9229-e94dcf882c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae6f1e0-3969-4d68-b6d6-ee1525d51d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37075d4-f70c-4642-b750-0f1430c399dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "423fe7f6-4b8c-4bcd-95d8-7433d15a0f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a95db9-0a24-4bd3-9754-c03cdeba6bda",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260e0d05-d103-4dbc-a5dd-064e4a0eda52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fe4ece5d-105c-4420-b931-9521e5762450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11d5dac-3b0e-4a63-bac8-ccaf91d4395c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5dee16-e087-481c-b678-b0202aff77a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9eb1cdb4-17a5-4cfd-a2d4-2c0efb419744",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a75ff69c-03dc-4b8b-bfee-c508c59f4563",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953a3b7c-84bd-4061-a37b-ae3b82a924b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9327504a-c042-44d9-8891-052c98eda0e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc601bae-6c35-43b3-84bc-57da31edcdb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ac72418-d012-4a41-9b09-e35185f77c46"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10878ffa-9d89-4019-be7a-cfb3d97b482a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1442c154-f9d8-4119-8878-887272f3f55d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7788fcaf-3557-4bb5-a599-d717e1f782f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "859ca610-3fb6-4cb8-84d3-ad85e9a078ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3d8b712-5959-41e4-bf60-89217cab0ece",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1301f0d8-f622-4214-98e8-0f29f2a548d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af858fee-b2fd-4539-81d8-372413b75d15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bfa3831-1284-4378-b378-890b4d124560"
                }
              }
            ]
          },
          {
            "id": "db7a93fe-3680-4e32-8132-bb2055bd2236",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ace48ee-14bb-45c5-bb91-c06d7aa1126d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76e3ea99-f3c8-4374-8c2b-9e9d32c45280",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "837fec02-7252-442f-a764-a96b4ec29d52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cf643d8-e064-40c6-bc17-43b8335f3c97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d7f463c9-5119-4c1c-b27f-d24ab67ce3d0"
                    }
                  }
                ]
              },
              {
                "id": "ab5b8a79-f201-48ae-8f54-9f6986638454",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85b926bf-46f8-49e2-a285-1ba41bfe39b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c63ffb6-ece1-43a0-a817-4736a2dd7e88"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6b67abf-9fa4-4fcd-a5e1-c4a69c464604",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bf21ea27-5105-4bf0-b48b-29f0df21b574"
                    }
                  }
                ]
              },
              {
                "id": "1bba6d7f-173a-4ce8-885a-d0f56d5e47ae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f1ddaa30-1d26-4c6c-a573-7eb3dcf0fe98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aee461ed-eaa1-4529-b073-d30773f959e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65535821-67a3-4f5c-b807-a265fa366857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd8574bc-4cce-4da0-81af-ba53034c8516"
                    }
                  }
                ]
              },
              {
                "id": "d88300cc-e9e0-4290-8f9e-1899afc7f879",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "854ad369-0bbf-48e1-844b-bc90da389309",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d11473eb-d833-4606-8e9b-b1598cc338be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1acdbfde-4132-46e9-af2e-cd8baf0b9ba3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c392945d-9bf4-43dd-8274-bc5f6f43ff33"
                    }
                  }
                ]
              },
              {
                "id": "1f548f7e-6b0c-4958-b990-428fd1c1be80",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "407de8c3-3490-45f5-a711-c0bc0cb59e81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03b74a1f-9f0f-49b6-86f2-eae1d3dc8cf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "539a11a1-65ab-477d-a38e-1b7485e1739d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bee7a348-afc3-4e1d-8d9f-24f617ad8a9c"
                    }
                  }
                ]
              },
              {
                "id": "5eb5ef15-6baa-48eb-afc9-4ddf05981e55",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8060f26a-f0c3-4480-8690-35c0160e0367",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8630fd51-c325-458f-910d-e9d779b77850"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f0eb37a-8308-482c-96d7-19e07c9d1763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0bd77c07-29bb-4c02-ba2e-0b807c3368ea"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9cfbf3dc-56ad-4535-9af0-220168ebddf5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc33e271-a837-406c-94e0-b82b5001bed5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "af9554a5-823f-447e-8ae6-58b9117855fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d5716cb-48cc-4e68-a31e-e0b1c946a175"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cc0f474-0b14-4fb5-a3f2-3ba77f91819f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "02190fe5-54c7-4387-91e2-3b687a1be8cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "087d3a5b-924d-479b-b258-12b3c0212c66",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f366e972-4b21-4c0f-ba98-dd47b15ffe34"
            }
          }
        ]
      },
      {
        "id": "a125ad37-3cdb-4bc1-ae1d-6a079e492f57",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1ec77e53-5bbf-4520-8750-1e4b7f777ed7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c645d94-0e35-46fb-864c-8d63b7b6f022",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5eef3dc7-a792-4720-b646-8c14befefb24",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e581593-a52f-4fc1-86cb-67d6f9f06aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a35180-f2e7-4aee-a8a4-6fae9861d150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02814fb5-a746-48e3-9fed-b166724e6ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "919ba535-3204-4ff8-83fc-cffeeb204052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758d6511-b069-4d18-abb0-0461cfcdf46e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d664b21-3933-44ce-ae10-78022d4c8834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a22eca0-c666-4062-8090-9425a8bb4e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ec0da7-729e-4115-8e38-62a2c59de4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba9db55-1dc0-4fc2-a21c-8d0e96c069a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e4c4ac-930a-4482-ad58-4124eefa5f2f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97a128ed-db8d-49de-9a04-d77159961dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686ef7ef-03f5-4a7c-85d7-77f3a9e6806a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526a020e-c7fd-4a61-a3cb-7aadc65fffd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8516cd5-e7b3-44a9-a4b3-3678c867803b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f40df9-5e8f-43c2-a684-c664794c1756",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf2db84e-c5da-40dd-8dd8-657f7f487b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1063b44-6f1e-4b2e-b8f1-a9a2e3d9b924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c1ac4d-8f2b-4fdd-9d45-02e8be443375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72dc3c4d-492a-476b-b5e3-50bab8671e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd46ea2-ee57-4dfd-b5b7-d3f15d4d884b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d601ec-60e8-4229-82cf-892347a73ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c3b865-46b8-4388-8507-fb95cc022360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d2c355-18b2-4d54-a001-3136d281b26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec8dae7-cfa1-4914-909f-6e5e6d9f6e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84f9082-b571-47e1-a6ff-2e870d9951a2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74aaeb51-ab94-477c-9d3b-6f4094996779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "313a7d05-9678-4527-beb4-132028c0ca74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01c09e3-90d4-4792-ac6b-5c720aaef6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f778741-afa3-4350-9ec9-ab1bd1d47b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c48b58d-9186-4d73-a298-044f2a278753",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59ab601-052f-46e5-bce6-e7b2d5b58dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671b7775-10ec-4e9c-860e-2db80289fcec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5458c207-a6bb-4fc0-aaf6-0de47489190f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56cf971-5468-4356-bc02-601dba727b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf98979-ed22-4f99-8e0c-24c59e87bf62",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c790cd8-364e-4f03-bedb-bbeb3eacd55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6592441e-450e-4598-a79f-ecf03e0c0212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ac416f-aa5f-445a-a55a-6cc87a346be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd1d8d31-c705-42e7-bfe5-538e563d5e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b60afa93-a6a6-432d-8f11-5a903e8a74aa",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c998660-9e15-41e2-b0de-cd8af640f7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d157c1b-3807-452c-9cc3-84a87d60aebe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957f3952-f255-4b3f-b1ee-62d8bd4b11fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14b4c323-7dc4-4469-8024-4b8522cfa0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032ed5e9-09db-4f48-bf6b-d73839d4f406",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6627986c-6b43-48f6-90b8-d20268626160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de306195-ad61-498d-bb15-f480f0558d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97617c12-5f46-44e0-a367-8b4189808479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "767f7aed-3801-4640-80e2-7fc6f9103c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e28861a-12a9-4c7c-a255-530b12da9fb8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02c4e71-28ec-4ec9-96de-f4d14bed81d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "016582a1-d21e-4681-b8af-dbc4c363d3ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919b4f8d-e6a6-4f23-beef-2978d618a4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a4fb44-4b67-4ef6-a3f6-7b1524faf489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a703fafe-6fb4-4323-93ba-a0f51cb0a2af",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dac30c8-b328-4341-be9a-48ecebc50175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b296b90f-a25a-46a4-b1f8-a09cb54ae182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e99c7e1-d665-48ce-8777-74cfa5f2acdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "be986297-28ba-4f87-a3ff-db69c6742586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68385270-71bf-4636-b2c0-b02056295fc8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31ab114-0fcc-492d-9532-b90544faa811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1c363d-c97f-4b67-a528-dd52fe1d789e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e3d2dd-e76f-45f5-b0c9-97de1ac349cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "603fd7a8-42fc-442c-934b-48376c82f7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0b62b2-af9c-4579-b75c-9f7073fc851e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ed1f3b4-4d02-4813-9154-dfffc006ca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bf1763-aab6-4a78-b779-e37031502c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61646f39-11c4-43f6-a4a0-548a736839a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59c2512-e6c9-4823-a2d3-444ff73eac55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bebd938-84e2-4506-8397-ea92764dcefd",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f64b8c40-4be6-469c-9c25-9e8b11329924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89a07b4-b74b-4318-868e-a82c301d3b76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f99890d-91d5-480d-a20a-a05d21847003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "025745f3-e844-4b03-8e0d-6b9a85041a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ad1f6b-7eaf-4277-a445-009e4eb7c75e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247864b6-be2e-4bc0-857c-1dcae27281de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8cd188-479a-4b88-b85d-b291ec7ad6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fc3132-9849-4327-9a31-9d6a40782a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "761d9f12-e0a7-4bd8-a66e-a5c4dd23c289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf82833-4d4d-45ab-9a1e-cebecaa65002",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea400420-a9c7-45b4-99c8-ec9621990b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04149b5b-e7ba-43c3-b508-20c4180f3db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9403c347-f64a-460d-bb46-aa90e969fa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "49cb925c-9c96-403f-83e6-ceada96f5421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75a888d-19ca-4ac0-a93e-78f56d17ba56",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0d00b0-ada5-4ed1-8816-c5b48c6fe44d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c56cf2-445c-4d8c-8b75-e568a9eb7ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dbcaf01-ad59-47f0-9806-86bc42f5ee0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b5f071-e0dd-475b-87da-23003229fe95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71de0cee-9db7-4a52-a906-195accc08d86",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5038304c-e2bf-49fa-9752-a80bac9a279a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a798f37d-cc09-491f-9954-b5955446fc07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeea234-6f35-4eb0-b4b0-cb4162fb6a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b26624-665f-4a01-9fbb-e430785cee92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4396f03d-17a5-482b-bc02-301ab7eeb5bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba06d8f5-0e92-4636-8789-8ca1744c7c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b138dbd2-92a9-4c8b-86d7-4b32cb9fecd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca2576f-7b46-43cf-839c-14c4cccccee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c214bd9-5f9d-4b9c-a3da-3f2c6534f1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb944ac-6522-453d-ab00-d1ac3462cf88",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f99451-e8cf-484b-ad4a-1bf2f8dc50b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b02f3f-5330-4fa6-b1e1-3d4bfbc46eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf58da6e-a2a5-4eda-a14a-fa7d128392b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7289c93b-28fc-43dc-98e3-2b7583dd4e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c58259-b451-4cd3-aadd-fa575a44c07f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7a62d8-6475-437a-a289-7f6dedcf8da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279d3743-3475-4d75-8efa-2cf44b1f5839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7765002d-f54a-47a7-a885-ebc93be1b9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21af29ea-62bc-477b-b623-492e7cdea77f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ea08ac-af1b-4e1e-addb-6261fadad766",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf3dd0b-8b9d-488e-83a2-b21fb5cd0b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5699d16-d372-4f5e-8fa6-3d34d81ed4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1f2625-285b-4096-89a8-10b39c7d976e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3711b6cb-fbd1-4d57-98c2-92e8cc8b3ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b8f266-f9c3-420c-9499-580d60056426",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8119b1-b340-41b4-a88e-d9c484e6c560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a146691-3b14-4b54-969a-95599877f263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aa4e53-1434-485f-a03e-3b88d7928924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1742a343-238c-4132-a439-26182309426e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b8617f-b0dd-4435-8986-8ddc954879e8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89098d11-7736-4b28-bf7c-1e0a59f6c085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "495d839a-a9c3-4e46-8327-41e82203b394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ff29ae-dd82-43cc-8ff6-4a492a5d3693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52ac6f9d-6941-477f-afc8-2e49dd4da418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e159ed-514e-40a9-9ba0-5cccb780287b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c220da8-d515-4681-8601-ab0a13bdc8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1923ab-5aab-4abb-b49f-af150477a062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c63d804-33e6-4a58-8c01-198cc79d4c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f565a87-bc2e-44f7-ab13-b6b707071352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fbc119-a15a-4a83-8f12-da15aeeddb46",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2a1cb1-6368-4bd5-84bd-02bf80714170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa26b1f9-4ade-446d-9a50-a994fee1389a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565da622-7b25-461c-874b-9b2a93d384a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf739c29-437e-464c-8ff7-745f0d788526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52cfa0bd-4043-4e5c-b1ec-dfaa08632ddf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec8f0c8-b8d3-485e-8857-9cc09fa3e145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aebd713d-04e6-45e0-a8c9-0b49fdaa8253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98540554-f8aa-4264-88d0-9b9d6751f64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b54887-f287-4526-aee1-3006ac6c3726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff5fd20-8b06-4b5c-81ad-bf13e916bb1f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad566e06-2653-4dd6-a57c-95c37660dfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aceae7e-4349-4853-9ef8-c7595ccc191c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a452c2-470c-44da-b6fa-6f2b1fa1d3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c68afaef-8a7c-495f-b082-784607e4c0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b11a3d-36f3-45b6-9adf-1a5923716f1d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b6df11-17e7-4123-a7b1-3aed81806fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92581fd5-7641-4a2e-ba58-2558b1e30a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b707a7-7889-4f71-961b-4e3930747a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00273bc8-b726-4e60-9fc5-04ae37e984e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce593b63-0490-4c8c-bdc8-7e70bcc03282",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab2d636-cc8f-47bf-b7a7-e24a416e3da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15b85a3-3e58-420b-bd75-4d59c87d3465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "623d1f35-e513-42da-987e-6b28c714d7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb908c6-ccc7-4d55-a206-9f2ebfc13c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3da325-72ca-41d9-95c6-9672dbd190a8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89e5713-99bc-4fff-9d26-b8393b7611b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9a3790-b36f-441b-aaae-23729d00682b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee66a7f7-ebb8-42e4-af30-7d70226dbd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76e6ad74-95e4-4189-9520-d5e78976db9a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9700de77-e9a5-41b5-840e-b8877d608ea8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8806343-7915-41c1-a834-59b163ac94d5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6f198e-c636-4732-89b7-9db8e56c6741",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "606c1a69-8424-4745-a0d9-6109a51296b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce0163d4-ad8b-4d52-b288-16d12228c5b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d331c07-a010-43a7-8a1e-da25bd7b9bd5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fe89582-05d5-4f1c-ad92-9368740c68aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47329328-ce0f-4233-9fc5-be528f8eeb41"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22c42a6c-ae2e-40e1-be3a-e002ca6c6d86",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba0dd367-88da-4df0-ac49-9b3b0b94d732"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a81292f-a39f-4efa-9241-c3e50a799e63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "43bb2330-75c8-424e-9a01-98f2fe48afa9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f5b60fd-b5f3-49dc-a21c-e107c722860b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b2ba81b-8591-44c4-aac8-911644206bdc"
            }
          }
        ]
      },
      {
        "id": "e3582a8e-6b88-418a-b0d2-2438d36fb8f8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "86d0158e-1429-4d73-8dd3-a5463bcff6c8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b9a64e8-c69e-4a0a-be05-609a06e7a064",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57d01533-08a1-4df2-a045-451edd9a5dcc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee047628-e9e8-4aa1-85bd-c4244793dba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73b1dc5-1d3e-40b6-a592-50f3f0ea787c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2db93c-e587-44c9-8049-5f95177a4a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "24da5fad-33ce-4070-9c0b-72c439c84c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cfc3de8-056d-47b0-930b-6f9a688b1790",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fa80f3-b690-49c1-a431-a2d3c4708cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc929ab-4ffc-4f0d-aa20-7b2f00a3bb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b35755-1aa1-48cd-9801-c0f99ed37efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d170b8a-4e28-4d7f-80c4-ba5138bb9c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3a788fb-b272-4fcc-8c21-e37519ecbd27",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6ac41d-edee-4fe1-a9de-f7b40968e4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0c5729-7420-472d-9a4d-a89dee54d657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dab5735-35ed-4fca-b5a8-f91cdda489cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43333da9-5d34-4335-8105-5e64d7b24d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a7d687-525d-44a4-972e-6c15c4bbd13f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9459b54b-b3f3-455d-b220-ad3beebd41c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95780099-105f-437a-96af-b0fa515bceb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577f587f-1800-4ee5-ae95-e2eb62ebe46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e23883a0-8fc2-46ea-8b84-aca16014fc86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c51e3a4-c1d8-4caa-bd4f-1869f591c270",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de8e20a-753d-4d5d-afd8-9953bcd2cd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c442009-e57c-468a-bd41-d1f089b40cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51d4daf9-376b-4947-968e-d744966bcfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e775bd0b-48f2-4a40-8e7e-696802e7677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2147df5-7814-4144-b919-e17eda982580",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a480e8-eb82-4a0f-b809-bf09431c31cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694de6dc-41b7-47fa-87b9-a92d6e04f2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dcbf73-a6f7-452b-b0fd-fb1b93472db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd19d10-c242-4334-8036-32e261f60d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac58235-c77c-41ef-95ed-533b9f487dff",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1521f5c5-91e8-4074-a3c8-530bfee1196a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd9b7b4c-ebfb-45ea-b71d-f1940cf2f1ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e044b4-2728-4ba9-a340-7c386c6cacb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc759b9d-31bf-4de6-8430-015c0e15952a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075e2a6c-0b4a-4ee9-8502-cdfac7667024",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1682ce1a-4d0b-4c71-8851-a8a40ac22438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ccf70a-e7ba-4bb7-b89d-9ba15e0561d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50966a37-47df-489d-9f37-98a6c26f3810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38b7268a-904c-4342-89e3-b33661d83b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b109169b-b035-4e05-9e1b-d128014e6b3e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cc91b0-a02d-4418-9187-d20dbc852457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d922fbff-1483-4112-bc40-1c8928c0c62a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6de5590-1f97-4b17-a23d-911b0329c5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7dc0259-a0d0-40f3-bc28-9797c471aeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8c44f5-8b7c-48fe-a473-3e9ca29adb2c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e647a60-f65d-4f0f-b482-59d395f87d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c844c4d1-40e2-4f55-a782-cc7fcc56ed9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c7fd03-e7d3-4570-b83e-14fb8a9a2aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e556c4c2-a535-492c-a7f5-0381158d7d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7923e50-5b58-4216-ba63-99354fe54585",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d430966f-6545-46a8-b279-a7be86315e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aba6dbb-9bf1-4660-8924-910437727b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae582136-3754-419f-a03e-49e2e1b401fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7e40dbc5-6e02-4713-a7f9-17d3d1ea6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e927579-c349-4164-a300-ff2983fceace",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e437eb5-aeda-4d66-821f-f453eb22854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54dc539d-a5f7-45d3-8f8c-d8182a535abd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a840560-67ab-4c5f-aacd-af3c11d7cb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1c5fb0-73d0-4cbe-b8e4-cde9b117ef6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b9e93b-5335-4e64-bfd9-4ff8189a59c8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47bbd11-b121-4b26-8183-4f4458752517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b3029e8-d46f-4afe-8711-7b995bdb7248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ad163e-678c-4e5a-bf88-c908eb1e1d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b6a273-d686-4a5c-bc72-c6c6a40f8147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a812a600-5c50-42ab-8d24-d84b9ac8228b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5e1838-9f4c-4f84-bd31-dc7d1cb115ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4ed5c0-8026-4418-abd1-3622697c3984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb12bd5-922b-41a9-9cc7-dd5f23af721d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a164c2fb-6055-48ee-9f6c-63d53ff5dc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec90a8c8-86a6-4540-8bd2-49b5d09cccc7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce05ef32-a89d-42b9-af58-98eed6e3e3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6633ec68-1691-4605-8f1e-0ed196ac8c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bd96ef-a6cf-4080-82a7-0cce16272214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9497511-b12f-4b77-ba3e-bc2785032a4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294c7d6f-dc43-404e-b0fe-43016e8a4a06",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c0a8e-5ad2-49a1-b98e-f29311e46887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fa4b50-117f-4f36-87d5-d110e56f67af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c283738-6a97-4224-a141-770eb6f5ff69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "34a01c9b-eeb5-4280-a45f-6b70593dd62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6e5aea-4fae-4ec0-8b9f-0820a6e144be",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a99f2e09-dc8d-49d8-aac5-bf8d5b3efac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a6d5bb-7c53-4ece-b8b4-d7feef12f905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3995b7b0-4088-47ac-aaab-4906c810d6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d62e1d45-0f34-4805-9d89-3b8c9c9c8443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dbce0d-775e-443e-821b-cce298c81d11",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f8840a-f49a-4d82-b586-89e11952f975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ff6de4-9dd6-4b32-9011-16b584650a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2103a217-91b9-4d0d-bb46-458d070b0038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "14c7e09d-6317-4ba2-b25c-b77f5fa07968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029d67f1-7ca4-4bc9-a10e-c70b6d8295d1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eac8b37-d4c9-490a-aed6-6b74ce06a9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b608be62-9523-47e2-ab82-0ab5c2acd4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dbaed30-75bc-4c5d-be73-5413faf92ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44a48847-cab3-4eeb-bb71-a49e8fd9a268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1984a414-9524-4446-a45f-61848e2349c8",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6dd15e-261d-4380-a22a-6b15a6bf1d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d94a245-0470-4044-a4a2-51880c0cf649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede70f48-e4c1-4113-8aaf-16877c223829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ee2231b-6126-4b11-acba-3214c9cd91fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60231ee-418c-468d-8824-5a2d0ba9fa30",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97aa2173-9597-4f71-8a3d-fe17970f0307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228bbdf6-3bfc-407e-a170-819a710df594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7009666d-30a0-4989-b268-5ae0fb43f62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e45290e-0d53-457d-b45a-f9207ed85293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f72318e-cf79-45cc-8481-6edb5f0f901d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ca6993-b9a7-467d-b599-6bc197cf51f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3460100-ac85-4498-b580-6886ecc88d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7598183a-3c4f-45a4-8a75-64f82080ee9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ffb964a-f96a-4286-8550-a281a9eb221f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c613b5-daa7-4cb4-9930-008ac008374d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d44d405-e3ff-4a9f-9104-498ca626b825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d432df7d-6af0-40c2-9f6d-ef999d86a62f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb3dd86-b95c-46c6-afc5-dd71a8abddc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bce3695-0ff7-44f6-bdf1-2351ac15ee32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e4b442-31e1-4478-8497-80e8a97fe401",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165aef97-93db-4154-a765-98151862749b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221e8794-edf9-4459-83d3-e2fdfb666a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea0f65c-06e4-467b-86df-0e44efd6b78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14482d86-2526-4e99-903d-244f710f9c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdd30f8-32e2-4972-9856-5346c8ac8833",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db915e9a-d837-42ee-bf05-f34cbdc1ec2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3ad197-7666-466c-bdf4-ad4bb9237c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49af1574-af49-4d7c-bb2f-c6c1aef7bc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25e9fbac-0dd3-4e72-8806-bea8743a75d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9769319-3039-4093-8eb6-25e8e271023a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcd4f55-4c5b-48e4-a13b-b2a774aa144a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03eb2e8-fce5-45ec-819e-11ae6d0fd539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef87726-0391-4055-bcef-f468ef61f079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9b7bfa3-39af-4e01-829e-7417eb505d7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63e1189-ff88-4106-8cce-98801fc4b1db",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fbe883-54e1-4144-aa50-682e259bea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e37818f-cfb1-4d87-bdf0-b4d3b5e5c17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b56cefc-fecf-49b5-b397-fb0679731d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "598f2bb6-e89b-4366-9c8c-44a51486d910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe7259d-b914-4637-9c37-956ea51819fd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf8bd85-55d7-48f0-83a2-650195b4b19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e427e8e-971f-423e-b544-86b13af7f5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8db33f9f-868d-48d6-8e7e-62843d097f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aef0210-c22d-4f04-8504-95289688c6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd9413f3-f7ba-4fcb-a385-b378b3259d28",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a66ca0-e1c4-48b8-adba-6f6cc3da0202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "895688ae-3f46-40c6-80bb-2446bda7c1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad9587d-219b-4c06-aed0-8df6cb3a2c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e0385e7-2ea3-465f-bec4-cb6ea936c7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6d8017-bdc8-4564-91d5-3e4faecb6e68",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a88586-e1e4-463c-b003-163a01fe3cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b3d24e-c6d8-4bdb-9204-4d37fc1392af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4121411-5e4b-4c3f-b10f-5cee3861d4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b153bf59-4bd2-4688-b169-7b2acf60ac0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d66073-f76d-4716-afb6-891f611aedc8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebee79f7-7839-4143-8a1f-2495c0e217b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09340f97-d393-4643-bf9f-69ac7b81c31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e92be28-3e7e-4468-943c-0c54babc5159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b567c7c-21e8-4234-8911-88a868f9110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfb1eea-e9de-4105-ba5f-0f8a99ce39ad",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe7411d-b9ae-4ff6-b7f9-b27623d93d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "901174eb-afcc-4ac8-99ba-6504a4dec5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8fbcc8-33bb-443c-9b24-5f57d21abb98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c1f75ac-28d1-4cb1-8abb-54bb23734233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21bdc39e-55bf-4714-ab30-0473a49568e3",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16741397-f3a5-4853-98c5-4961b84260d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4102430c-2879-43e6-8105-217232d6eb91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae4afda-b4e4-42c9-9451-75f16954affa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6355c96b-e0f7-4381-a43e-e907248c303f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15193e90-5d42-429c-86f3-dcffea30560e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee961fb3-e0a2-4880-b267-70d78fd52cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf8c40b-0da8-46f7-bcb0-ec324d593b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27c5953-7375-44a9-964f-c3a06b8a0b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bea17f6f-314a-4142-8d32-28926ca8a6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133f7aae-0a43-49c3-adc3-d892e3943ecb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d161d2-6783-4f6f-9f64-ad5584928db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b37ffc33-b263-4975-a183-52a41b0e89d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13459db9-01ef-49d2-9b7f-bea98b70bad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "904263a0-0ad0-4156-a794-2d9ffe2e4c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c36200e-73aa-4d6a-b06a-91a8c6722886",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42531e52-f573-449c-b15e-fd6455e982ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf16daec-6488-4b26-8903-8eb6374629db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada33600-7638-4ed0-b597-4b7d1842f937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83fb211-256c-449e-af4c-3583f5edd1c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f6cb7f-56fb-4d5c-8ab8-2d571f300698",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995debc9-36c5-4922-87a3-c85618cc43fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9960586f-8521-4d74-9b76-e0ec66e76e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61bcaa3-fab2-4b49-a32a-9542cbafc071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98f8922-ef12-41a3-82f3-c91be64e818c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "46d53bcd-f5c5-4e69-a296-b927a050a964",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12d22219-4f3d-44ac-a86a-cceb919af002",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fcfdcf-dfa0-4709-89b4-05de5d233834",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ede0530c-3b7f-406c-8e1d-0ac8e0a621d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21f20ab-6f47-4edd-9f47-6726bf33f439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ca26b34-79ae-4b2d-b4f3-57b196687ac6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0e6104a-f3d9-4733-bbf1-30de967f3407",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90d180bd-cc20-43ad-b539-a2ce58fac5a7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dee35e49-db2f-4688-a59c-df001dc20e60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55587493-55d5-4cc5-84b9-f8a071ef1c02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6aec505d-0a31-4bbe-b8e2-618d31293549",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f3fce788-8030-4254-a8b7-9f893ab23ae8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1bde18b7-2133-42a5-8afd-1734a72f4fc6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca5045c7-46f1-4d04-aa06-ab6053a78b12"
            }
          }
        ]
      },
      {
        "id": "2ad0cd35-886d-428f-80ca-4820d1b1f954",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1df1b603-da36-4bdb-a794-7967e71816fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f58a30d6-2f40-432f-be89-3827a71f54e9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0a37a6a5-17e8-44f2-b9bd-8abcc3332a35",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be43d9b4-f002-4076-921b-67b6e91aed61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71dec747-92d4-4c60-bf12-9dd94c55795d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9946c0a5-3b09-484d-bf4c-0bc5b831d514",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "261512c3-1b79-4329-8390-7922280a61f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b76a20e4-8b21-402b-aba1-82e0b3af6188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a41ccd-40c7-4f4a-b59f-c0dcb32a29a3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb4021f-394a-4387-81b2-0b296a83456d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91c2d25-9341-4659-8d2c-1ae1e83f9206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daea7808-8b6b-4f6f-bc9c-4e56f18a2a23",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767c0294-0296-4c78-9333-1bb48d478b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7850bc9a-be2c-4818-98d8-e2dd3bd56345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b084704b-7535-4bcb-a20c-4b3c0129baa7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de80c15b-20f4-42f4-bb0d-d57347ed0cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250ff9a4-ca3f-43b4-a931-c59e3d395a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e079d8-9440-4bc2-9f36-b9c891d142df",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dc9208-e31e-45cd-aceb-0afe4f121854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a360e8cf-3702-458b-b53c-f7e1835278cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d596fec-b2b0-4f1e-980b-2e2f1d19d129",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706fe7ac-ff51-403a-9f34-eaa56127ed9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6375786-a1e1-4b46-80a8-5d712001df29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4facbe58-b1c7-40d8-9e11-2109e4b79cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89473e73-e20c-4155-95f1-4007f635baab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94be207e-8e7f-44bb-ae80-b06beba50c41",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aac12d6-adc9-43bc-ae3f-d0758200bb87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a864b58-073e-4102-b54b-d152ff4f4195"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c8b0f9-5e3e-4057-a8a5-25c4297b50ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46b0a14-c78f-4af1-a470-6a49fe312956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d7d262-33c4-4a44-bbf7-5320759216fd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "366913e2-e66f-4515-a63b-e8dbed41ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34964f20-113e-4ddb-b212-a1ada1e111b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a70d7d-8bd7-4f4b-9490-384b6b580c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac798da1-5a04-48dc-9751-e1eda8961ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef3ba9ec-0ccb-467e-a219-c570b2a0b208",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1da94f2-ed82-4ac7-a9cc-af852582c103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3825e330-91ec-4e1a-8a5c-0235434513e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00c047-b29a-46a8-8a41-c9e8cde6b3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7d4564-6d3d-4db5-a128-dacc6ed66bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3d9214-bc96-4010-a561-a42d4e3e4d6c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bef9c7-9056-46d9-9055-9c7433cb0363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc195a1d-e48a-443e-8cec-88495db8793b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc1b6e1-aafa-4949-af8d-94ac6c49e4f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416d73c0-5976-40c7-b6d3-6909c803b15e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca1856-99fd-448d-b8f8-c7889ae71490",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19071243-d1b2-44cd-88ce-1d2e5d8c85f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddcf0a6-4785-48f4-8a90-68fc998a4d59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cdbe4e-bb0e-4fdf-b22b-ebdc4c89452c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a578b4cb-6bf3-4ebd-babb-67e43e6090a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea87ee2a-05bd-453a-94ba-0c62e3a18d9c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deec2710-f700-44cc-8440-ae79e91fcf09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad4623cd-570a-429b-b3e4-fc4f0816fe65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943a882b-5d0f-4445-9827-c61ca8a3a307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9b8922-30dc-4fbd-86ea-6c0ebac84d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53556e46-19c5-4e28-a08a-ed56444285a6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df291caa-88a2-4b54-863d-09e17712b7af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37033492-e781-451d-a1ec-92610684574c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06994f1-bfe2-4fc5-aced-1be415f15910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7102c3-2857-4db1-b840-9668eff5eed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caf646a-167f-49d6-9efe-41b63df9d8e3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f42c895-1b85-4f26-8419-0b24669b1581",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e208d5c0-2618-42e6-a9d9-ffb205d2eefe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a19246-783c-4fbe-b62b-47099c238286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f812c4f-0776-45c0-a35a-dafd05b81306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0a4295-ece8-4376-ac2f-b35597695581",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcdfb741-c12c-4576-bcc6-dd833ab6b780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90569b59-51ed-4490-845e-fb688573fe9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04862db-afae-4663-807b-7fb11daabfea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eae0617-d588-4cc0-8bef-cc6260427d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356df45c-2864-46d4-82b8-fea7ec33074c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fe35c1-43c5-41cf-8fbb-4a75c2c17a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fa96cf-5b08-4341-9671-64e6f11682b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b361cde7-603c-414f-8f16-99c54400ebce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab9a57f-3aeb-4511-961d-8c37ae35a652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64223a6c-ba9f-4c15-9125-f5aaa792e137",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5505e9f0-71b1-45a3-ac4c-f0f88be01d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07858e1-8eca-4878-a0a3-fdd76054c03e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6acc51e-9585-4165-b67f-d730f7c71d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "660a462f-7354-4bfa-af55-76dff894acd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034338e7-d6e0-4c7e-9180-f361090cc97b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e9b9d5-bb90-4aa1-8863-037f42f3e379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242a07a5-e969-47f2-93e7-f3f36fa17cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2575726f-4462-4451-800c-ba86c820fca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc5253b-9303-4cfe-95db-d6da5a76c1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "176f1f19-7aaf-42b1-ae27-02b2930d1f13",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e0fdb4-65b5-4099-bbec-fc951891990c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e41e3ed-a31a-48e3-9754-2c9501427677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405cfd50-03de-42dc-81c9-fea580036f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4186cff-f3e6-4c72-b9f9-ff9df6502b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c2d384-390a-445e-b743-89106f9db2f0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920d67b4-f6e4-4caa-abaf-b6224e698eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0270fd35-493d-4656-aafb-d196c6336a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d03f3ab3-034e-45bd-a019-3384af776a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7104ae7-43f2-4031-ad0f-59263173832c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b6c238-570b-438a-8f00-af6ed85e908c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f31036-21e3-4bfd-b5bb-01274f8bb35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17753463-9701-406a-ba86-74160832de86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b299ead1-b68c-4bbb-9c6e-5104460709e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a5260ac-73de-4b51-bb6f-161ef334c978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d1265d-c9de-4318-8b05-0fee1ce8fb2f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaad4b4-acd2-4551-968a-514504e28bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a728c7-741f-494c-a8b4-e8bbe4a6f803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc39e921-f2e7-42ba-b1dd-91688ec50053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da37f670-13fb-4791-839e-9b71cea845f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34452372-45ff-47d7-b30a-87656b704e20",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b620c5ac-51dd-41fd-a46a-3466344af9d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04c4fccc-0b7e-4b27-a2ea-fdd4f825b912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8a7b47-9961-48aa-b991-ebda68b25d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710a1fad-ab1a-4d89-81bf-53f8261ee954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300d1f88-e58e-48d6-9b10-c0c943d6ae13",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d9ddfa-e72c-4765-937b-723643db1278",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d341165d-2bff-4081-9ffa-f1d91f09a15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932acf1c-03d0-444e-8621-cb5dce822cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db93583c-71e1-4c53-8cb4-6f5a054f3ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef29e71d-7a5a-4c8f-b54a-61862e9adcd8",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e95cab8-1ebb-4656-83a8-aa8a8a25e726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "119a1cc3-0b8b-44d0-bf9e-b200cfe08ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc1f4a4-68f2-48e8-914e-d3492b8b17fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e4796c7-8035-45fd-b6ec-2e24d91d4f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe598bf-c458-44b5-b37a-fde3f9aa83f6",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec51c0f3-6fda-48bf-9575-f5750a449e66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd05fdd-226c-4bab-9266-df1817666193"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8d9dd3-be85-4a77-8ff6-0e151ddf9888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98bf070-4c7c-4e5d-a1ef-baf450c0bf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703912ef-3c68-4575-b789-f2ddb7d827ff",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293c4e6-9ab5-4f0e-99c4-9961fcd29faa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca80eed-eeb5-41bc-b5a4-721e9d0d7f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3c8b20-88cb-41ba-be67-b6ef2d0d14c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "518e3ed6-3ec9-441c-b8cf-466e2c217093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deeaa53e-65ce-43b8-9f11-7dcb59680dc6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd2bf73-97fe-460c-bdcb-bd3214068ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d560bd4a-0d40-441b-8a92-282fb10ab248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f588b7c-96d2-4994-bb71-9b2485ee148d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a7459ce-c485-4945-92d6-b967b9367526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2579bedd-43eb-4c68-b0b5-9396fcbf4c01",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150653b5-c48c-49ae-8611-7789d3722356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0250c902-a21a-4d2b-a23d-2368aa6a4044"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7cb240-9805-45c3-a555-1b3eab4e8742",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67178a79-2bfe-4f1d-8ff8-fb7248a18f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908648b5-2093-44e1-a19f-7c08f379d954",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac49476-e118-48f9-aa9c-4c9680dd1f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357f6db2-a3aa-4fdc-89b5-05a972cbcfe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de08f84-34a4-424a-971b-d68c3c5daf1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f852b0-41b6-451e-876d-8ff001b850bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc66a11-c276-4de7-9f54-1a3db37b664c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1bcfcc-0e85-437a-8333-f39deda2c2ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f6b7ea-d05a-4917-8912-b8fb93585f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4175c81-65d0-4cd9-8262-bbbde3b5f7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a010f3c-08e7-4c98-8fca-58c892d7331f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59696dd4-783a-40af-a1ae-d617d3d7d2b7",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1336e0f-6440-468c-acd6-da9e3cf21a81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de4cf103-a723-4274-aada-2b1ae6585036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e527b476-608b-4799-a3c3-be9fdcd8cce5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55efa30f-da30-497b-9274-5567fabbf47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1593fe8e-f4f4-405c-9097-6f4c5c8775bf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9656797e-1908-4a3a-8dc6-2a93bab2216b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75924d9-d0ee-435a-8fbc-088e1929bfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a6678e-6de0-460c-a80f-af3d01eeff12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094d27bb-55ba-4b17-8545-f3cf6fc0ee12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261ed783-a47b-4de3-9eb5-1427b35b4643",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f19bbb-055b-4eaf-8909-6f22f351fb48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9942f1d-14ae-4e00-95d7-017e73293764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baaad15-f4e2-4ed5-9834-847c395833e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc2d482-762c-4842-b0d2-381f9abe8fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d790b5b6-74c6-4475-85b4-ff796d1f9de1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569a787a-b4e7-425b-a050-75eeade3ebde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3705c135-1119-4515-bc06-682f3ec7e500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129a6729-e043-49a9-a469-a97a09d950df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f37a0f64-2fa5-418e-98e4-48cea3cde349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebea4e9-26ac-4114-b1a2-c1089ad8475e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ebd71f-9eac-4668-bda8-aa94702ae36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805d44e9-d85e-4536-b7a4-b8c4f1dd3dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adde4ba0-07b7-46f9-9ad8-7c047fd1f4f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2169b9-0625-4487-b874-7e2bd10c81dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a803d558-71ac-44af-8adc-74ad95794f1d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d2c926-f290-4f4a-81ed-02b890ec1df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a009fe-34a6-4fb2-b8b2-94c23dc12173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "526ca205-cb57-41bb-be85-e52564756ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83c8d32-5cc2-47c3-a549-3c7c2487fee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e59268e1-bd26-4053-aaa5-d7b2005241c9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc907c0e-f4a7-4e3e-aec9-a98fed06a221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6846f87d-bb23-4e6d-9e19-0f637a3b02c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133beeba-ec5f-4fb4-940b-83404dd0f84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93644b3f-ee08-428b-b3d0-94dcf32be5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2fd457-6645-4606-a3ad-e49a1394b2dc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6473e2-a306-477e-ae39-dad719865c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02086db1-7603-43a6-9bba-826bdf814b02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78addac-214a-4b29-9221-e19671f3346e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53661db-6acc-4e52-8052-6ad25767cc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feaaf6d6-f892-4eab-af89-dab4051a59a1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe8871b-6c3d-4c61-ba06-217c9e3b58a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1008df14-ac3b-4544-ae58-22e9d2d882f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d6a938-0a7c-46a3-865a-16afc998aff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63445350-4e41-42c1-8675-e24b37aaf9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce8e43d0-067a-4470-8cfa-6222c3481c7c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a60576-5f3e-4b12-ba26-b13ce061e5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8c38ec-acdb-47a4-9cf3-0988ff5dc456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0245e523-05a7-4202-a6b7-a19605b5561b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b4493d0-5890-49d9-ae40-5d2055f0e376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd9971b-f332-4cc8-8408-d690784980cc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69eae37-ed15-4abe-b18d-dedf4ecb441b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1631051c-ea30-42fb-b59c-9f3f7e79d737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150401bc-84cf-47f7-ad5d-8ac6a55cefa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bc5219-abdc-43de-956c-2459ef46d509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a88ca7-1e6a-4f14-8d2f-9b17aa2ed5bb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30295722-cbdc-4c14-84f6-3c0807963f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dab0793-3320-4ebc-ab03-c064ec8b59b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f024d3bb-cc69-45c3-8b94-b6154b1d8c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcdae56-b3ea-420b-b7ed-6f0f3752ecaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8792ff6d-ab9d-4990-a197-458a6de57fa1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0757e0-35be-4845-848d-4247ae3e40ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64c03801-08bd-4a83-bc9e-c448f51f8cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7dd856-4fa1-4c65-be3c-c4b514b4cc06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06ea542-1a3a-452a-9a27-4eddfd27446f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d95d4a-d1ac-490d-abff-20620b9d54e2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f090b977-d411-4437-8651-1526b4455e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "785a90ba-83ac-4558-81db-b737c2cbd8d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee0ed79-7f8b-4e29-ae2b-f6864db153cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8aa16a5-1ffe-451e-9137-113174ae5839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6784e4d3-289d-4f11-be1a-064129def1d9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6271ee62-5f19-4adf-aa02-cf7f09654b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331cb3a8-bbce-45bb-8532-4ebb7952af14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f428cb8c-51b7-43c1-8480-71e06cd7bf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7bd773-11ba-4830-bf76-0ae420bd6e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba88071-1103-4281-8b44-3c6f8faa9f23",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f582f98-38f8-435c-99ea-86c65c1c22ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd985a88-2c5b-4273-8512-7a1c6ea34895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319c915b-e3d5-475f-afda-40aa0326d57f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5de27d-fba7-4ba7-91c3-6d818ac3dddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130aab19-5e54-4297-bdb5-c247a400be2f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf8e210-e2c2-4936-b507-8fd3c28751c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c168036-32ff-40e0-9595-fb66ba66132c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddf46f3-ff4f-4ef7-bacc-f5d628e4e47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b1471b-76cd-4dda-b07d-052c9188f71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7bf2ce-e0ff-4909-baa8-445b55161e6b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706df491-d547-4ac0-b03b-57a73867dc6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ebae89-b5db-4f80-8a17-eb1c5606eccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9521d5-bbfc-4db7-abc0-c0dccf048ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a8aae9-cc63-4c34-aba7-36f66d5ea8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789bc4d3-b4c6-491e-a507-4766d3da0127",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfae9577-0b7b-4ee3-bea9-417838f388d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a60f87f9-26c6-4819-8477-87ab2fd6ca6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec9ab6a-e48f-4397-aa89-a19e4c9f9569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffc6c3f-ba34-40b7-bce6-7826461d844c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5303da6a-6bfd-4814-881f-d648a04d88a3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad27c7b9-b523-4489-9582-a3aa9b03e3f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90feb35e-841c-42f2-8eb2-e7d5be23f134"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35714162-8e71-42fd-a07b-77ada3cc1520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd3cd6d4-a708-4ec2-8fa2-0f22e3926362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f30bb4-74f9-48f1-a4ed-070acdfb3394",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3586cf3-38d7-48df-a679-029e5e691451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a815ae06-224c-4c8d-ae92-de3e9360ea34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431343a8-bbb0-477a-a89d-e1fb5ea1d74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b112c5-608b-4648-922e-b60bc5271a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3b127e-04f6-4229-9d94-04625b130649",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eded9ac9-003d-4f4c-911e-d91c75ba8d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "191bbeaa-a86e-44ca-9a53-2fe6a239cb19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd2deac-b636-4613-afb4-2aa880fd5c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b667c49a-31be-45b4-99e2-8659e812124c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab91289f-1418-4aa8-a254-9d4f9a520fe8",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068bce28-ebb5-4fd5-ba38-264e6218943f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68c1866d-a623-47b8-993d-800a833a799c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b552662-8608-4a2f-980e-24cf69edee51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb1420df-d513-4d01-a505-fb2f22a71fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57889bcb-c743-4108-995c-f4a36d5ba83b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211ebeb8-ec06-4b01-a483-48ba8ca62b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6c06f3-c7f0-473b-a7eb-6090a6d43dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84c79af-d618-4902-a824-b8f7e19ce47f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1f0d07-9e2c-46ec-8f07-144e79cbb31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e9856c-a7b2-4fda-b3ff-47c46568af2a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506376ed-1262-4a1a-8812-3557a40b10ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc855779-0c09-46ff-81bf-13c3cc2ba496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50543ae7-c46c-4d4f-bef7-cc807d49a5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689180de-91ef-4977-b57e-987dd56c0758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7232ef4-56f1-434a-9564-5e7550c70306",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db558a5-c7b1-4d02-805b-fed679d09e59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdef9d5-1812-47e2-b02e-43d2504b453b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdf8d21e-6a60-4094-b24b-045818ba8ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156efc61-2f21-4b62-a6a7-041e1927cb00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c32bbc-8185-4331-bfca-96ebbb39f62a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d606982c-fd28-442d-9d29-7e165e4e813b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8036a675-d26b-4894-b0a3-9cf443be358e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f887e1-06cf-41cf-9c98-aeb0f8aa346f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbbb6794-2ec2-4e0c-b9ed-1e0bd05626de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dc530c-08a6-40a4-ac20-9a3f71de16ea",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09800a2-82b5-4d46-8c65-4cb4de6107e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23b993dd-d36d-4af0-a9df-c596f8cbf7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05b0ce8-f754-4dc6-a136-7e48352f7295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991c7366-5d91-4e9e-9ea5-2a7a47cd79a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3d2185-34e3-4dca-a2c5-db2cfcdabcd8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f4dcc5-9414-4372-beb7-d7845cde278b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40126171-7475-4398-9a7a-e07d3e5fc3b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90622ba-f224-458d-9d37-70e5069ec08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7661e351-5328-4ef0-b99e-b012cb8ce561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e614c3-0b5b-42f9-9a9b-95b7b79333e6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8f78a4-8c06-4da2-8483-ee4840ff714b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc2af1e-db9c-406c-8451-a2bfe50b00b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c17bc7-cdaa-4997-9867-82dd6bc3b80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0639800-a829-4874-98eb-13a2bb990a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492fa927-d968-4f51-9d0f-9df6c35c1335",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b901515-1b91-4e14-8bc2-12b7f0424a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc1fc4f-96a3-4c24-86c3-2578e903bd2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1edc3688-ba50-40da-965e-9844b44c8ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9276fb8a-837f-4536-8edd-3d9919761a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b729fc93-0d8b-433b-a888-94db5e0ab853",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77f4100-6c17-4340-90b9-fb4271a289f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf442cb-c6f3-4c21-9191-4fda59c2530d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c429d-a055-43c8-9748-6f91583633e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a8246cb-46fd-4507-8f39-50385cb76ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06e637a-b437-4b15-9d02-10ccff8c24b5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f38dcec-bc08-4b84-a85e-6426a3c05fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d1fba2c-13ba-4025-953d-b53410d6abb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a131a5c1-5474-4358-a61f-ef64c405a25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "940a816b-096b-44d8-a5e5-ed7880697b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e27b65-7cc6-4ef6-aa01-7377d183bd4f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28acfbaa-2a8a-4d8e-948c-9a44569618e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30384d4b-098d-4293-a1aa-779a08c9f767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399cd6b5-dfb4-4a4b-9d23-1b5322e24691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02112a21-1faa-4046-92d4-c4218ec1256c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f1fe15-f112-4875-adaa-74d564a66c84",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fb886d-d33c-4663-944c-e85e07a311a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbbd856-21e2-4be7-a25a-bb7b9378bbf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06867324-9ddc-480f-bc92-71fdb20eb401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2017f539-f789-4f9e-9b59-6c18e2565876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b85ca6b-f93f-4613-85d6-f7c33fcd4ef8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e677fcc8-f1fc-4312-b3b7-ca428caf86df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebe9004e-a589-4451-bd6e-2a08eaf87f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b5f1b7-dafa-47d7-9aef-8201621bde92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d807a34-2e54-4871-a318-c7e4713944c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5dd5ec-179d-4751-8580-0a4640513636",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed73f26-70f7-4289-8041-df5d8b9cd795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fc13440-c0a7-4b67-8783-25d5d72a4073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aed6c32-080c-471d-8699-f35572eff952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5566a069-b510-40a9-9bd3-11a51b710a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f29701-f5ce-4e32-8cf2-b38ef10dce05",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678b4d45-5ae4-45dd-833d-7e65d2298404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcf0118c-17be-4268-89a2-61080a7bfbb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "629096e2-16c3-4cd3-9151-90c6b7ed8922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfce1f11-1ab0-4db5-9e9b-da4645a58e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3d191c-eb78-4b36-8011-ebce8bf8a378",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfc830f-30c9-4656-bf37-734e8c3d4088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be8c96d8-9fe1-4457-b364-652ed27a75e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f95829-482e-4b10-b6b9-0b41d8db1a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e50a16-3172-4b8a-a64b-753895a85a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ced6ec-62b9-4924-ad88-08b90ddc348b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defb0f7f-4a29-4a13-8b98-d43cf73fc173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "495bc8e0-39a1-486f-ac4f-a83fd61b7241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adc45c9-f78e-4748-9cf9-3bceb43cbddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b742af5e-dfde-4f9f-ba38-3b4664d2a7b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4a7d5a-4017-4f0b-818a-8c1c5b8f78f8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78dbac4-7120-4710-9bb8-c8b82faa3f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e87f454-96b7-48ff-86a2-b3ec1d7b0ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc210b0-f216-427f-be98-ccd1a9382041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ed5740-4b62-41d7-a32c-30bf5e0e248d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a19563-5a6e-40fd-ab70-14ff17d5f3ae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946ac861-6280-4f0e-8571-dd667aa325a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e78d069-2129-42eb-8a43-62b0fd51f978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea12a505-8e9d-4cb2-9d82-4c891e54e57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f88dcd-c0f9-474b-add7-0cb468d5ad73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6768dc-8526-4226-9a98-7eaea3ddefb6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60466ab-7a45-4282-85f1-8030c0886ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbe3897a-6f9e-4e24-a942-7adc48a45e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b26694e-cb0d-45a7-82b9-d8ed4c21f738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e6297e-66f8-4c5c-acf5-bc3f16031c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d54d9f9-67fc-4a2f-b388-24ce30819f6f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7840b6f2-eef4-4490-bef4-5e1ad72a5d74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52b927f-67a9-417a-a9ef-89bf3f64df18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908ead3-71cf-4aac-9d57-82e0ae50261d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c202784-9542-4f03-811d-8671f73bd5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b93ca5-d59e-4cbd-a7d9-8ea2703ef2a2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd4dec4-30a5-4c15-b2f4-3e56410b92b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4512c1-6d09-4a75-843c-7161ad91039e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27b109c8-04b7-49ac-b806-6239396db135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd26054-a988-4117-a85f-7ea1b641b326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfc564e-aa99-419f-9150-92396eb2d2f8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89be858c-1033-48d3-bf3e-f94d8ae977fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f90ea48-aae4-4030-803d-9a9370eaef8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54ccc82-ee72-43b1-ac08-f3788d433bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c7f44a-cc41-4898-885c-14fb0bb30f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a5c2e4-4a11-4367-b37a-7d714d2bb742",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e2dfb9-91f3-4a3d-9406-43b084caa8e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd73ad69-64ac-4a2e-b3f9-5190c8b8e7e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2561055d-c137-4932-a19f-a662c8b79bcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0533c45a-aa00-4654-9e10-afa6a096339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f607fb6-7246-4e5e-b834-cb3f95e0af17",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68cf726-4558-4927-b10d-418e52c0114d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b03a40c-fde5-4171-9b5c-6cf0448fe442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19801711-35ef-4b1b-8351-fe777262b6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ece8182-49dc-41ca-8b30-40419a548832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7e837e-1375-41aa-92ac-6b8bf2e51d5d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab04685-16d8-46b0-9dc0-ccca40eb9b35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0da11989-9357-4b05-83be-adc29c4c13cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e6bfca-d38f-45e3-bb56-ccc0d5fc751c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0cde59-5dbc-437b-bc92-b8ebad23d079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a781dbd-42a2-4794-b5de-cbcde0d1fcb2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8682e2f-36d7-4ab4-b223-fbbe1a23b804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a85c6bd-ef98-4abc-8ce4-175bfbee7d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cd12a1-53ff-4a41-8f3d-eab89b19f4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523d4c82-3faf-4339-8a93-eb9a043b558c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd58765f-671c-4525-9494-2e8aa43e9ef6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b310d0-6f04-42e6-ac68-b424bcf83686",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd5156f1-93d8-45aa-a1de-343c85e4470a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea5f6eb-5444-4a30-99ca-14594f8afb7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6199069d-99e1-49c4-8584-364a6ed115a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c594badd-013f-4f8e-a559-b0124ea08bc5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c26c66-6e51-48c6-aefc-5858cdf581cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1a4da1f-d952-4653-8b13-02871237b174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c5f1f59-59be-414e-9cb0-7481fbc0a854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "005fc478-a219-4e34-8ec9-a6351ec96b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f183ebac-d4da-4cb1-a6f6-08a0fd6d4a44",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c03e35-0783-4a85-ab85-b90dded50500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfb43724-3594-4431-9ea6-95915a096051"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d6d6c8-c17f-4ec2-b53f-d25917f319f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463dba5a-882b-4f6f-bef9-fbd4d9f0d0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab72662-5e3d-41b1-a81d-5ef1c260a210",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fe1977-8640-4040-97b2-64fb2f5ccb90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b72cfa3e-57ac-4a0b-ba8c-2f1d39da9c4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1110a4e1-4be1-48e0-9f68-a98cf35c9707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8aba612-9cdd-4143-937d-4c5ea1bb71dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254b36c6-8cae-4fde-8698-ea86b49c8e91",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070eec10-1890-4a61-8ed8-05af9325b4b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c01fea6e-b937-4db7-8991-c04e3b883b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa4b0c4-a82e-444d-9756-c331186ac2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbd0617-8a9e-4f71-badb-2c9ec7ebb146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ade4a256-c740-4230-be4d-e8f9b56fcf4a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93380500-de31-40df-b6c6-70a38c206e20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dd971aa-4a88-496c-8302-ea5d49a41ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3801f7-4165-4b25-8bb3-493d3b298c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b831f2-2b5e-4088-b4d3-8a609657848b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e85fc8c-a8fd-4717-ae39-1757d2a48924",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d74269-e6ad-40b4-b8ae-358095349378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd45533-cdef-4619-9c2f-7952a5a3e855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c623595e-1dd6-409c-a6d6-faaed07e2c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3879318f-de63-4e0a-a418-6d7a0e366d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e680a5c8-4d6f-4fa5-80ce-a8705f233b32",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc89ec2-359e-4a43-aa6f-88eb7cdb6290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e54af8-6931-4f67-9fcf-9d9424788b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b689f4-1792-448d-a445-3a6b03fc2f2f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7459f90-696d-4275-ad69-c5a4517c8caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a36866-7fcc-47d4-8c12-5bf0f244557e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9495ddec-1612-4a75-9a94-90b2e94021b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b9badb-a933-4dcf-8485-cda5e0fd87e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e0cae2-3186-4662-9784-c3b895ea1ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2489da6f-e06f-4ce4-8e43-4226c5f00f5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70ade0f-9c9e-43d3-9081-286a3541861e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048392e7-2a6e-4bbc-9f0f-d05e8530f46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c550b4a1-0c5f-4c1b-8342-ea04d41c1213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b4540-c662-4cd9-a7bf-7b2d9e6093ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68272841-6f81-433f-8ed9-4cb99259f765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059b0ae7-90b1-4d8f-9ba4-f347e2e87d68",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551b0254-66c4-4653-8b70-8ae52a67c3c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8da7f0-2d3f-42a4-b3c3-20f6085f22c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc380af9-74d3-4dda-a000-1cbaf2894f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f4ff2af-f8a9-4aab-9c6c-1b8cb316f8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9801e08b-5626-4181-b339-dcad31464ef1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7a55b-96df-4d6e-9631-750757f3b204",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7caff117-0ad0-4d75-9928-917f6d74a947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510defad-4544-4846-9586-83db305aa6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cda340-b426-4078-87a3-1159512cd68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7239ea-041c-4449-aa27-1009f1b1b1dd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e986715b-b1b4-4413-b960-793ae02c327e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f79e83b-d183-4784-9100-ad91215fc005"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "610ea6e2-84a5-466c-97aa-bf11b774c97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69abf3db-ecba-4ff8-8e42-cc49ee8e1593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401b2db5-46dd-47c7-831b-88e9431cfc56",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b169cf-2429-4575-b753-0f01adc581b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ce2958-f4ac-4ac0-a405-db4121d951f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b8b88c-3320-4865-85bc-33e3388923d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f86606-9601-4dd9-83c5-1764d9b06cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26965cd9-adb4-46a6-8866-8f85d70eba39",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b867bee-a623-4948-8af9-fe464a998923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "958fd930-9c57-48e5-b53d-681c5b9ea0d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afafd78b-9a5c-4eb7-b92b-a713946f69b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1c5817-88ac-464a-8de8-8e04cae8c07d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63bb3bcf-3d2e-4b0b-9db1-0c93e8aa96ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e84c5a73-647d-47b0-b9a8-0f84f4d351f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "047fad94-f165-48b5-9cc2-ada2cfe20e25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77c37d04-afe9-4201-960f-8b1584e57c44"
                    }
                  }
                ]
              },
              {
                "id": "33f1c2d0-5ee1-417b-8709-2135d64a674e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29dcdb52-b93c-4853-905d-1f0e48ba6575",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6586ad33-6713-406c-9fa0-615a9a020cb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3957194d-e406-45e1-a4ec-843e55f32cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f60d6f-e6c7-47b8-a141-740d9879c7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b93b405b-3cf1-4eb4-80e0-d467430882be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e9e360e4-cf57-4e3a-bb45-832bf0572214",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c93b43f-0c35-46fc-a5ec-428a002effa9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a87c2064-0120-42d2-bc21-de814f8c10d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cd5a76a-20b7-472a-a292-b084574b8a4c"
                    }
                  }
                ]
              },
              {
                "id": "044a7893-80dd-4670-9841-d6d2fb51363b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "44bea86c-8029-48a7-baec-a32673e832d4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73463720-6f9a-4964-851c-41404b83db05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "bd42e78c-0e69-4786-8429-05533336b6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c54ff1-527a-4441-80fb-58ecd44b5dd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84f827f-d7cd-47c7-9f87-9b57a4fc1315"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74f271b5-46e4-4611-83d0-09ccfa18d0cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22ac6b12-7381-41b4-9d32-91adefb87baa",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "88f700d5-5fbb-4550-a2c1-454a6f861e1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dfe950e8-6b41-47a6-a61b-21af42fc5e27"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2dd03a0a-2982-408f-b8f9-5dfd36369392",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "111adcb8-1eaa-4338-8f99-78d334d3bd1a"
                    }
                  }
                ]
              },
              {
                "id": "ee82c953-4c55-4bdf-b2dd-2f0d949c71e9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "972d178c-0f93-439e-acdb-a93a2cf6edf3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cc01da93-9627-4859-856b-dc70c2489721"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6d8418c-70f0-44ae-b44e-2c9bf0e6e212",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fbbd1b8-f76d-41c4-9d17-0fdc9a6684b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f639f4e-0c93-4cb3-9595-cbd9e1f8b462",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c32dc4a6-532d-49ee-904e-99f20c3b1573"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5fb67c3-940c-49ca-bd6b-3a3bb39b5946",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1f013da5-61b4-4911-a343-05b20943b87d"
            }
          }
        ]
      },
      {
        "id": "e3042a1c-36d5-4a2d-83da-824ba464cad9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "77efe9cf-d027-4790-a2ce-18b671793b3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f358863-487c-4e42-9c47-0c0e53bec754",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "08fc409e-3a7d-472b-9873-7cc3d8eebc0d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c16ee5-434c-4372-a4f0-8ceb2a6b6a63",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "69089e0a-ec3f-4959-9917-1e04d771ff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d34eb15-16e4-47f0-87bf-4687b08c6044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d5663d6-6f5e-441f-a636-adf7d8d69c19"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff5bf700-6bf8-43fb-b1f7-a277e87a85ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a50e336c-251c-4e0f-8435-abef34f5cd30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8144bb8b-46e7-40ec-b203-3c0cc1a48e4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6159836-dfa7-4360-a2e5-55bd85b41a65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0964bfac-5e42-4da4-8ed4-c1e00e59e687",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "df971fd4-212a-4507-b108-f77c96a09cc2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04ef182e-0b79-4fdd-974c-357bf9d372af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27e83805-5202-4785-aa4d-d31fafdffe83"
            }
          }
        ]
      },
      {
        "id": "273dd928-4207-47ef-a08c-3783506a9fbc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c8ea21de-84ab-43fa-bc7d-162cf409a8e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6ff2b1f-d1c4-449a-9cd4-a50b7993b8ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f41f4d1f-c802-4df2-9f15-6b28e6062562",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a4ccb9-296b-43b1-9403-6dd3861a8d36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93b9fd2f-999a-4f3d-a32f-e5cad79ab29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8537cc6-6e99-4493-a1a3-a1a1b914e8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dfc234e1-6c20-4655-ae44-facf212e5733"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b5d1975-6ad5-4155-bd15-25adedb32448",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5361a623-7ee2-490f-a310-84a7771d3aed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef36d97a-321a-499c-aae0-2e92eeb17dea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e396a377-e347-4c0c-adce-10af432a8ab6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34f169f4-0a13-458e-b651-9de3150f1162",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ee2083b0-4da0-4d26-989e-913f82b049c0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d544d356-bfc3-4757-a985-8ddd04447f70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddb5f536-1bf3-4f77-bcb9-fbd3e41effcd"
            }
          }
        ]
      },
      {
        "id": "cce62f26-ff15-4a4e-8799-f428075f1114",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "7c8bfd15-fecc-47a0-86ec-53063adf8dd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ed09c21-7086-428a-9128-e54b71fd9ef3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9514222-4fe9-4e18-b29f-cdaa152348b1",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5103d351-f0fe-42ec-9900-b086183ba229",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c4357ca-185e-47e9-ad16-f56326c3b428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e91fa3-b5bb-4f11-9b90-5e59402cde4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "985cb8bd-1fe5-447f-9e05-136082481c2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d98f0d73-7e86-47ec-a5c3-f956199ba722",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79842c62-0b2d-4256-bfcf-f42db68a58cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "325c06b0-d3fb-4510-802b-923ca9955e6b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb6befd3-26e4-4e81-9b45-7578852199e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6f5f53a-0945-4d66-b7b0-c21635f53769",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "08a0c250-092e-4726-8810-6e0e2b39e125"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0565236-9dae-40f9-b154-c25f8440ad6c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b702075c-53dc-4788-b6f7-d363cfd0a333"
            }
          }
        ]
      },
      {
        "id": "dcc7e5c7-fa60-4861-bdd1-56814d50d22c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eea9e089-c76b-4b12-88e7-82e52a2cac83",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2c9050c-802a-4c5c-a066-67135efd8e09",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "441beb8a-776b-4cf4-ba7d-a090bba09b6e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "887af43b-9e09-4b2a-a820-965a4f7700f1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "353a3d64-7016-4b77-ac43-290565c4d88a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 45
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 104.85211267605634,
      "responseMin": 10,
      "responseMax": 1746,
      "responseSd": 256.9395431488988,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1692318684530,
      "completed": 1692318726569
    },
    "executions": [
      {
        "id": "ba6bdda6-51f5-40de-bada-94ad3e988e70",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "05d965f2-2a52-4f51-bb24-41666e2f88e3",
          "httpRequestId": "ad8fe7e4-90b0-43e2-98e2-f1c5decbfacb"
        },
        "item": {
          "id": "ba6bdda6-51f5-40de-bada-94ad3e988e70",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "006785cb-b140-47e7-9457-f736aef3c923",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "ef0cae4d-0b39-4b89-b031-937f72486766",
        "cursor": {
          "ref": "689a54e9-314a-480e-b23a-57d81ac67d40",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6ed59848-0adc-4275-8b58-5304181d0c94"
        },
        "item": {
          "id": "ef0cae4d-0b39-4b89-b031-937f72486766",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "83e4d39e-21e9-4170-9f84-80532c63df1a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b8626b76-f62a-4eea-bf3d-2cff093251a6",
        "cursor": {
          "ref": "ca6c57df-edd3-4a97-904b-65eedc8fc0a6",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2b3b0008-d06f-4c3f-8793-d80e6fc64074"
        },
        "item": {
          "id": "b8626b76-f62a-4eea-bf3d-2cff093251a6",
          "name": "did_json"
        },
        "response": {
          "id": "b662617a-4282-443f-baea-ae33c131f6e9",
          "status": "OK",
          "code": 200,
          "responseTime": 331,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d14301-5989-4a2c-9583-29258700ab52",
        "cursor": {
          "ref": "43a164e3-fd32-419d-8746-8a18827d5917",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75d66c5d-3695-4826-94cb-df12aec9eee9"
        },
        "item": {
          "id": "06d14301-5989-4a2c-9583-29258700ab52",
          "name": "did:invalid"
        },
        "response": {
          "id": "a82039f1-e170-4d8d-8742-aa3cc1c8f2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d14301-5989-4a2c-9583-29258700ab52",
        "cursor": {
          "ref": "43a164e3-fd32-419d-8746-8a18827d5917",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75d66c5d-3695-4826-94cb-df12aec9eee9"
        },
        "item": {
          "id": "06d14301-5989-4a2c-9583-29258700ab52",
          "name": "did:invalid"
        },
        "response": {
          "id": "a82039f1-e170-4d8d-8742-aa3cc1c8f2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c9faf8-3a4d-411e-bdad-dd7e550381bf",
        "cursor": {
          "ref": "3d0ff35f-4b17-40f6-a062-b173c6e25faa",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fc402c24-3b30-4f8b-8b79-d026b5414e80"
        },
        "item": {
          "id": "84c9faf8-3a4d-411e-bdad-dd7e550381bf",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d6f34861-7021-4664-8e64-6f4ed0dea8d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 108,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4700b083-bb8f-4c90-af20-f41a7550ce6b",
        "cursor": {
          "ref": "ad5f32b1-b0cd-40c9-a0a4-1ff2a4d9e2a8",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6ad485ae-b6c6-4b1e-a6bb-45ac82d3d127"
        },
        "item": {
          "id": "4700b083-bb8f-4c90-af20-f41a7550ce6b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "83a38435-a1e5-47c9-80b3-63641e1b3443",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818d628f-99c4-400f-b0c5-876c5afef1a6",
        "cursor": {
          "ref": "34c137ae-07f4-4c85-90bc-34d70216a037",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53fe834c-6977-4725-88c3-b242354089bd"
        },
        "item": {
          "id": "818d628f-99c4-400f-b0c5-876c5afef1a6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c804cb7f-c968-442e-a5af-02e004a5cd42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aeeadb8-8515-4693-9d33-ed161bb6fb2d",
        "cursor": {
          "ref": "95a646a9-b0f1-41c8-b7f9-2f897ee824bc",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f39f4a5e-bd9f-453e-bc62-b96c07edf40a"
        },
        "item": {
          "id": "1aeeadb8-8515-4693-9d33-ed161bb6fb2d",
          "name": "identifiers"
        },
        "response": {
          "id": "1c7e74d7-0865-4dd7-a2cf-fde6a2a72e1e",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad05918c-549b-4490-b0f3-85a9b304ce12",
        "cursor": {
          "ref": "2e04ab29-96a8-46f1-b5d7-37ffc384018a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "68f17b79-6fa7-4040-9c4d-1bb8493bde54"
        },
        "item": {
          "id": "ad05918c-549b-4490-b0f3-85a9b304ce12",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee6d8a8d-4ada-4050-a51a-733c63a4f5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd3cb30-c31a-4f8c-9a7a-fa37e7dc36b2",
        "cursor": {
          "ref": "d113e172-363b-4b02-9cee-f9580235adb5",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9747a0bd-4530-4bd4-abd2-ac8b7b85841e"
        },
        "item": {
          "id": "afd3cb30-c31a-4f8c-9a7a-fa37e7dc36b2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6ba85064-57f4-42e9-ac99-8f28359d35a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bde0e8e3-ebb4-47ba-81a4-00c8e8b164cc",
        "cursor": {
          "ref": "a213da20-3d91-4f08-a5a2-8cb3481396a8",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dbafe71f-fdc3-4da9-8ad3-2a1aa455c01e"
        },
        "item": {
          "id": "bde0e8e3-ebb4-47ba-81a4-00c8e8b164cc",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ab3c495c-40f9-4085-a19f-bc2aaaab4d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb422e25-1b58-4d7c-abd6-067a08bb9be9",
        "cursor": {
          "ref": "a8c6391e-5a18-4dbe-ad87-7cc37679eb57",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e707dc85-f08e-4528-b3fb-9f7099abf690"
        },
        "item": {
          "id": "cb422e25-1b58-4d7c-abd6-067a08bb9be9",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d58cdd24-057e-4c80-aa7a-f77cf25230b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470ac8dc-dd3a-41a3-989f-30b16804935f",
        "cursor": {
          "ref": "4e1d6edd-85d1-4942-b5d8-ea4f97a2c5d9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4bbe9c82-efce-4bc6-af0c-6c75f1f1ce35"
        },
        "item": {
          "id": "470ac8dc-dd3a-41a3-989f-30b16804935f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d51aa6ef-c5be-4b6c-9632-8e5ac824f0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638010e4-5897-43a7-8a5f-5e00fb5c4a55",
        "cursor": {
          "ref": "63f4757f-29fb-4e77-9830-caa5cbcb61a3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "cb49bb34-689b-48a5-a994-54da0a4f59c8"
        },
        "item": {
          "id": "638010e4-5897-43a7-8a5f-5e00fb5c4a55",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3c57eba6-2e1c-4c5d-8ea4-2e22560f5f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e046a217-bdb9-4b0c-8576-26ff03a11de2",
        "cursor": {
          "ref": "61a97731-c5e2-4fd1-8874-19d241228f3a",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ca00815c-e425-49cc-af38-3009364d69c8"
        },
        "item": {
          "id": "e046a217-bdb9-4b0c-8576-26ff03a11de2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0bf824a6-a82c-42a7-8af2-a8327ccc84c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825a56fb-8505-4ba8-a825-333a221cb0c7",
        "cursor": {
          "ref": "dae2cc18-d11d-4876-afa8-964e979211e7",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ae8fbfe1-0f69-4d1c-b997-60ab9f3c5afd"
        },
        "item": {
          "id": "825a56fb-8505-4ba8-a825-333a221cb0c7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "baa044ef-0325-4e1e-8eb6-598fd7abedd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70873eb-b7ed-492f-9423-a0946d351bad",
        "cursor": {
          "ref": "3512d7cf-e545-425e-b8fc-1a26fd448528",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "91118db2-933c-432b-a707-8a27d5111a3e"
        },
        "item": {
          "id": "b70873eb-b7ed-492f-9423-a0946d351bad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "80307930-1025-45b3-a80d-8eda40769044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fb2ac1-fd66-494c-9f72-fda385cdb442",
        "cursor": {
          "ref": "5db29182-e7fe-4236-b84f-d4b05ba9c5a4",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8024083-4c7c-4753-9ddf-6316896e039d"
        },
        "item": {
          "id": "94fb2ac1-fd66-494c-9f72-fda385cdb442",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d80105fc-6a3e-42e0-b373-9cb1c5dfbf5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304f7cdd-9f04-4b76-b305-840a5c7c0e92",
        "cursor": {
          "ref": "2f9a2f92-a612-4707-8329-92a68b8b9e98",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "40d46fa9-f905-460c-b03e-cf16200f5d80"
        },
        "item": {
          "id": "304f7cdd-9f04-4b76-b305-840a5c7c0e92",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b1bdd10c-4d23-439a-86a2-1d3452843905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0adffa-db67-486a-888e-e00de4c4fc15",
        "cursor": {
          "ref": "d9ce2df6-305e-494f-b0c8-86157c6afc65",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ef3bd6ee-d507-4cbe-a6c7-1d1dade1c644"
        },
        "item": {
          "id": "ca0adffa-db67-486a-888e-e00de4c4fc15",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "794c1f3b-520b-47b9-bc7f-8c4a229af4b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1512c151-7cd4-497e-93d5-ab57879a717f",
        "cursor": {
          "ref": "bae170b9-347b-4273-8983-7559c600aeed",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "34d730f4-2771-4f7e-94b1-be0cb6be6ad2"
        },
        "item": {
          "id": "1512c151-7cd4-497e-93d5-ab57879a717f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5b9b49be-5efd-4cb8-a766-48e732100efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff251f3b-5adb-461c-bea2-349fa3efda55",
        "cursor": {
          "ref": "53bcf24d-f55f-463c-bbe7-6954dc8e30e7",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f7ee5e6a-3152-4a3a-8b51-d57dc7ac867e"
        },
        "item": {
          "id": "ff251f3b-5adb-461c-bea2-349fa3efda55",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6c7245f1-054e-4ec2-9c70-70a2061417c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3930bf9-a5f0-47eb-8394-b567b3bd6a68",
        "cursor": {
          "ref": "a147a916-71dc-49d0-a8d1-40723c157c6d",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1417e233-c472-4da6-8628-0b098be4ed39"
        },
        "item": {
          "id": "c3930bf9-a5f0-47eb-8394-b567b3bd6a68",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1ce69506-9bee-4913-ad1d-424c9dc894f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0cb99e-7b3a-47a1-820b-3988a448e0db",
        "cursor": {
          "ref": "e0e85491-d546-4ded-b03a-3751f436c13c",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2bbd160d-c8d3-4059-8b93-a72c50dc6728"
        },
        "item": {
          "id": "7c0cb99e-7b3a-47a1-820b-3988a448e0db",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "33d1189b-cb74-49be-9b31-f347b975c3e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1dc9e1-32cb-4e54-819e-3edb876fa400",
        "cursor": {
          "ref": "d6604288-6b46-4bac-b361-f8c207d21d65",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "93b07054-1e0a-4c2c-ad18-ec4f1fb878bb"
        },
        "item": {
          "id": "8e1dc9e1-32cb-4e54-819e-3edb876fa400",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e92a0e9c-63f5-415e-b837-593f72f90d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7895c1eb-f4ba-4d15-b541-f40273920023",
        "cursor": {
          "ref": "f3c85c4a-542f-4064-8ba6-4930650966b5",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cccb9f24-307f-4bae-a02c-b3ec83cbf11c"
        },
        "item": {
          "id": "7895c1eb-f4ba-4d15-b541-f40273920023",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fe27521d-2328-45c9-8f3d-6bd4f77c1d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddac395-8ce1-41a0-b11a-d262879592dd",
        "cursor": {
          "ref": "d2bedb01-75fb-49de-bdcd-6fcbc96cec2a",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "47d19408-023a-4844-80e1-b93c3d2fff80"
        },
        "item": {
          "id": "6ddac395-8ce1-41a0-b11a-d262879592dd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "60f52292-436c-4c5c-aea7-db36afc27502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fbcffe-7e11-401c-8cab-3a7163ffed45",
        "cursor": {
          "ref": "ca457e16-7b72-4241-abe5-1afd3d094426",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "90ad1235-2e7e-4cf3-a77f-22e8f81322d3"
        },
        "item": {
          "id": "72fbcffe-7e11-401c-8cab-3a7163ffed45",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d8f49b0d-0fd5-4185-b629-533462463ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0746a23-c8ec-417e-ac45-6dacb1b1abe8",
        "cursor": {
          "ref": "2cf7b6fb-021f-4a54-babf-73b3964dbe92",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "dff1c7bb-2e43-4413-a231-479878d06878"
        },
        "item": {
          "id": "f0746a23-c8ec-417e-ac45-6dacb1b1abe8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "caefab85-7626-490e-9139-f90d20574d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1dd530b-4aa4-4fe5-83e6-8291e1d397f3",
        "cursor": {
          "ref": "bd0fb73d-31b6-4259-8076-c9356507482a",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8592680b-2b00-492e-b009-06dbdc57cd0c"
        },
        "item": {
          "id": "a1dd530b-4aa4-4fe5-83e6-8291e1d397f3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "568996d4-d43f-476a-bb22-0aae42e5c1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc23293-3d5f-4b47-a429-a326c8160698",
        "cursor": {
          "ref": "664f6bdc-549c-40d5-81df-7468719b687a",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "82ff592c-690a-4129-84d2-174fd3df54e8"
        },
        "item": {
          "id": "fdc23293-3d5f-4b47-a429-a326c8160698",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dbd9223a-b5f8-4ce8-b44e-c5b9d6e6916a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd14acb-1e35-4428-b3cd-135d41558620",
        "cursor": {
          "ref": "8efbf6cd-bccd-4eaa-bf8e-a46d8ec4008e",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5b597629-cf11-42c2-942d-a0ba4fa4ef21"
        },
        "item": {
          "id": "6fd14acb-1e35-4428-b3cd-135d41558620",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "529e5355-6227-4411-a3ef-e5c2d1f714e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0d5c668-fc02-4d5e-b79c-edc68c4fbac7",
        "cursor": {
          "ref": "5a5c3c81-c8dc-4c5f-a2a9-2caa5162015a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fe00c72a-bf5a-44af-b691-a9e415cc6fce"
        },
        "item": {
          "id": "e0d5c668-fc02-4d5e-b79c-edc68c4fbac7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9abf1d0f-eaf0-4d40-8e88-b3937bb20268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33303bce-9ccc-44af-83ae-fc338fb571a4",
        "cursor": {
          "ref": "777bc349-f44b-43eb-a0af-699d7e6b8b27",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a7afbe5c-6093-4b8d-af73-5a5e88175099"
        },
        "item": {
          "id": "33303bce-9ccc-44af-83ae-fc338fb571a4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e5cd2e31-39f3-4719-927f-36331cab9255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3590be8-c56f-4dc4-89b6-015a5a738713",
        "cursor": {
          "ref": "a26a23dd-2318-421f-b34c-5abd1d0697fb",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "07e2814b-baed-4bec-9bec-1e9e69b1bcff"
        },
        "item": {
          "id": "d3590be8-c56f-4dc4-89b6-015a5a738713",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bc48788f-310d-420f-975e-eeae18bc6c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5cf7ed-7eea-4c41-ab1b-e3a486f7df16",
        "cursor": {
          "ref": "0e20986d-5ca3-4fec-a6a2-f6e3623fd950",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "aaf53b81-f6ae-47ab-962a-779431eb6f32"
        },
        "item": {
          "id": "8c5cf7ed-7eea-4c41-ab1b-e3a486f7df16",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "204ed705-30f3-4a7c-9d3d-795a0c1fa123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de06faf-23f1-4c9f-a887-29d6dcfec389",
        "cursor": {
          "ref": "4dbc888d-e618-477a-89df-470edce3b674",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f3edd7c6-28ae-4325-ae63-f2685e9bcc1f"
        },
        "item": {
          "id": "2de06faf-23f1-4c9f-a887-29d6dcfec389",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ce34caa0-20f6-4180-af37-bdbd712079b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 165,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ae6b76-718e-4fec-9a24-7e5eecfc25b0",
        "cursor": {
          "ref": "4110dda7-9f97-43fd-8791-58aa7bad093d",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a7e14c6f-b3e8-4c02-9c61-069ad67faf24"
        },
        "item": {
          "id": "a2ae6b76-718e-4fec-9a24-7e5eecfc25b0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "983da150-9b16-4cbb-a461-c8607282d06a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89d4bb9-2707-49aa-baff-2ed9bc0b324e",
        "cursor": {
          "ref": "51c89726-5eb6-48b4-95b7-2f64476b3bd7",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2d4a2a61-945a-4edf-a14d-cf1bbf41e913"
        },
        "item": {
          "id": "f89d4bb9-2707-49aa-baff-2ed9bc0b324e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0d2da462-114e-418a-a477-95ceafed9bd5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6d2d6cbe-b7c5-4d48-a6cf-08e9d1a775e5",
        "cursor": {
          "ref": "279c0622-9087-4c2c-a3f8-772f714b02dd",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9204bf91-a4dc-4076-b61f-008f36ac85df"
        },
        "item": {
          "id": "6d2d6cbe-b7c5-4d48-a6cf-08e9d1a775e5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9720e014-d515-4c1b-9454-f462dee93844",
          "status": "Created",
          "code": 201,
          "responseTime": 1746,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2d946070-ab95-4176-b85c-c0f08072cc30",
        "cursor": {
          "ref": "36bb5467-96bc-49b5-a618-8ea698937ec2",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "497913c1-a63b-40ab-aee3-df00e28662ab"
        },
        "item": {
          "id": "2d946070-ab95-4176-b85c-c0f08072cc30",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "79e1f620-e450-4a03-99fa-96f1f8b6ccaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "640aa81f-261a-489d-868c-d165f80002d2",
        "cursor": {
          "ref": "dc71a694-710b-4112-94c8-e8dbe5140951",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "ab197f7c-e646-4035-9c83-0ac73a42444b"
        },
        "item": {
          "id": "640aa81f-261a-489d-868c-d165f80002d2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "960266a5-e2ae-41f8-ac69-1bcc9a7daa2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e87224-a77e-4592-abba-1fe1959ca6f3",
        "cursor": {
          "ref": "86439bc6-c037-4df0-8839-75122bd1b0a7",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c022eff7-3074-4329-a2a0-f332aacddec3"
        },
        "item": {
          "id": "a8e87224-a77e-4592-abba-1fe1959ca6f3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "87fb2ff2-3a0b-428d-b6ee-98a7a07bc9de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d584f7ba-b327-40d3-b39b-5f1564567746",
        "cursor": {
          "ref": "b0e730eb-e3d4-4180-8ddf-0321da2ab728",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e6fc9b2c-d2b9-46bd-9752-ae8734db705d"
        },
        "item": {
          "id": "d584f7ba-b327-40d3-b39b-5f1564567746",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "20112b2e-853b-47d9-a24d-1dca4671f2e4",
          "status": "Created",
          "code": 201,
          "responseTime": 1397,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7b372b3c-221c-4659-b15d-fd7574bd0bc5",
        "cursor": {
          "ref": "f2513402-795f-42e5-8eb5-f85f622ee42e",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4519fb27-c414-40e2-b9c4-faafe2df00fb"
        },
        "item": {
          "id": "7b372b3c-221c-4659-b15d-fd7574bd0bc5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a289165e-bc82-4944-b086-a3e903f2d7f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a20f7ec4-976d-43da-98bd-6385431306dc",
        "cursor": {
          "ref": "3b56da64-6923-4054-bfa9-12d0f95067a3",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "70696411-e120-464e-a99d-a51ef6c13a7a"
        },
        "item": {
          "id": "a20f7ec4-976d-43da-98bd-6385431306dc",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "de12eb04-107c-4b35-b871-4a9caf424089",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1049,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "8359c58e-f7cc-4aad-a599-0dfa394df4f6",
        "cursor": {
          "ref": "fcef1fdb-58e9-44aa-9857-121354a3f38c",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e916fa56-a34e-4b23-9f4f-68b27e20ec96"
        },
        "item": {
          "id": "8359c58e-f7cc-4aad-a599-0dfa394df4f6",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6b01c541-87ae-4e91-bf34-a186cc97edf9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "14aeafc5-5988-43de-ba7c-d62281a1f4bd",
        "cursor": {
          "ref": "8671ee97-4806-4188-940b-30c1f54989a9",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "dccb9f81-d4b9-4bc7-bfe6-5bc313d94e60"
        },
        "item": {
          "id": "14aeafc5-5988-43de-ba7c-d62281a1f4bd",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a6907ea4-061e-4abf-8ea2-0a14263610ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "79074487-a7b9-4f59-927f-f683b7f649cd",
        "cursor": {
          "ref": "c88cd475-b000-4951-b990-cad8fafb4e36",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "04465d78-aea6-4954-a711-b8ca122e18e6"
        },
        "item": {
          "id": "79074487-a7b9-4f59-927f-f683b7f649cd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3920ee11-da4e-408c-bca0-fffe9978d40c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e41bde5c-cb6c-407b-b5a5-317442a05f31",
        "cursor": {
          "ref": "7e25dcf6-732f-4e0d-b03d-180656fee753",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1078b818-ed94-43ec-ae63-6c440f138af5"
        },
        "item": {
          "id": "e41bde5c-cb6c-407b-b5a5-317442a05f31",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "87a833c0-c0f8-4d87-8e7f-8e4cd6f94e0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d0227206-11a2-444c-a2e6-fad0947abf54",
        "cursor": {
          "ref": "4f8a6812-42aa-4673-bca8-1604256dda5e",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ff79448b-340d-46fb-acae-b9efae92dfc9"
        },
        "item": {
          "id": "d0227206-11a2-444c-a2e6-fad0947abf54",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "148ddee1-d311-4480-beb8-e98741f0b6ca",
          "status": "Created",
          "code": 201,
          "responseTime": 1242,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "06a27174-431d-4ad7-a262-ee662bd9b951",
        "cursor": {
          "ref": "1b70b3a0-13db-443a-8a79-81eead767d93",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a6f7dd03-1587-4e1d-8219-9a6a948876fc"
        },
        "item": {
          "id": "06a27174-431d-4ad7-a262-ee662bd9b951",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1b2d77f8-e3a3-482c-829b-dcea003338dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d3c6b74-67aa-445d-936d-a002d2132c04",
        "cursor": {
          "ref": "f8798bff-ac55-4e68-bf3d-ad64b2074922",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "834ab60c-16cd-4084-aefe-50da23c5eb0c"
        },
        "item": {
          "id": "1d3c6b74-67aa-445d-936d-a002d2132c04",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c46db110-9e40-499c-adcd-0c20b3799d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c218622-d066-46dd-8b14-d9d8a22e5d9b",
        "cursor": {
          "ref": "186d6c03-95e3-467f-bdc0-052bb2104452",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "97b445ca-daf0-4e70-8977-1c214bec3543"
        },
        "item": {
          "id": "8c218622-d066-46dd-8b14-d9d8a22e5d9b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "49c3267e-3761-4adf-ae29-7040782023cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e08874-0606-4f5e-9563-2bc6a1ef8a52",
        "cursor": {
          "ref": "e1f4dab4-3c22-4fd9-9a30-5d42a494b144",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b202d04d-38d8-4c88-a59a-c55e937f80a0"
        },
        "item": {
          "id": "56e08874-0606-4f5e-9563-2bc6a1ef8a52",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "16ef776e-26c5-40f9-86b4-ddbd6f1340c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc96dc4-15e1-480a-9920-5cbbdbd2282e",
        "cursor": {
          "ref": "30182a42-4f67-4da0-8019-492af852d8e7",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "270106c5-0f54-48a3-9588-caff66eaf917"
        },
        "item": {
          "id": "5bc96dc4-15e1-480a-9920-5cbbdbd2282e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6a1c166f-61df-4380-afa7-9215e8163cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d578aeb-11f0-4811-adde-a62ae4f26842",
        "cursor": {
          "ref": "c589cb40-b6ec-4478-a43c-a8747ff89310",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "261ce451-2726-44c1-b4c0-ce8c56a85e8a"
        },
        "item": {
          "id": "6d578aeb-11f0-4811-adde-a62ae4f26842",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6b25b8e8-327a-44bf-8196-e062746c515e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d9597d-2e96-4085-a8dc-c8cd233f3c57",
        "cursor": {
          "ref": "5e72778f-83bc-4d97-8afa-c185b380a7e4",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "06a4a235-e5ea-4afe-b215-74ddcc44958e"
        },
        "item": {
          "id": "b6d9597d-2e96-4085-a8dc-c8cd233f3c57",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4c362076-7da6-480a-9426-c95b7bfca25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6740cabe-f849-4bb2-ba0c-a6c011715b4f",
        "cursor": {
          "ref": "ba4149be-93dd-4d9b-86e9-96beea992720",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8a3fe51b-f7de-411f-b06a-8bb2dd792280"
        },
        "item": {
          "id": "6740cabe-f849-4bb2-ba0c-a6c011715b4f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "027ce6c3-5b73-470a-9176-9cd67455ffd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51243572-6d93-4dcf-9996-5f8b15e50d91",
        "cursor": {
          "ref": "896d0444-6f6b-4e8a-bd4f-3de3098dcca6",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0aa39f52-ec53-45e6-9c66-10427e640d25"
        },
        "item": {
          "id": "51243572-6d93-4dcf-9996-5f8b15e50d91",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "dd9b6ce4-db2f-44a5-a6bb-c76fc41adb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5290e544-226b-49fa-b65d-8924697de4e9",
        "cursor": {
          "ref": "4eccb323-7940-46aa-824a-97ce3a3669ef",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "65041424-954c-4c01-8182-f2817e26f001"
        },
        "item": {
          "id": "5290e544-226b-49fa-b65d-8924697de4e9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4fd70303-6e2d-4a29-bf44-7faab5540f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983ee5b1-3ada-4085-9b6a-8721983cebaa",
        "cursor": {
          "ref": "f4b5bd8e-663d-4032-89b9-722e7aaf55e8",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c4ef6004-c01d-42db-aac2-16542ade7154"
        },
        "item": {
          "id": "983ee5b1-3ada-4085-9b6a-8721983cebaa",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ae2e91f1-b747-45ff-afd1-2eebae64b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0e2678-8769-4261-9323-9e0193fede31",
        "cursor": {
          "ref": "7b597a52-fc17-4b6a-a98c-c4b5a7e41950",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "524f1599-857e-4f5a-af77-0f87d2b61d28"
        },
        "item": {
          "id": "3e0e2678-8769-4261-9323-9e0193fede31",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "af94f1b0-8ff7-4b6f-8a9d-0e9a23282c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd266b5-6469-4b1d-9cb7-95a6c14cc19f",
        "cursor": {
          "ref": "677bb463-f9e6-4d7d-ba20-c47016376847",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1d602556-b2b4-4da3-a418-140183f77c9c"
        },
        "item": {
          "id": "ebd266b5-6469-4b1d-9cb7-95a6c14cc19f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8ae10310-e66e-441d-8dd2-5abe464c36b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983c5d6e-6d49-4df0-89a8-d27c4217ae39",
        "cursor": {
          "ref": "105e9020-6e0b-40d4-ad00-82e0cf6fcd54",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "76c2edf1-d6fa-4048-9aa0-063fb4ed27fe"
        },
        "item": {
          "id": "983c5d6e-6d49-4df0-89a8-d27c4217ae39",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d5b81a87-1872-4075-a622-de5cbcc0d4ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 947,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "590c520e-a158-4e1c-836c-f80b5348aea9",
        "cursor": {
          "ref": "4838d69b-dae4-4e24-91b6-13339d70ced5",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "68140450-467c-44aa-ab3e-261f44f72f90"
        },
        "item": {
          "id": "590c520e-a158-4e1c-836c-f80b5348aea9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ffc0a94a-7b04-47bd-a5f9-a0b1a694fd22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1026,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "84569bde-99b2-486a-ae84-32de59b454fb",
        "cursor": {
          "ref": "58147cc0-cd30-4578-81bf-f6e8d49878ac",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b2a574d9-2af2-480c-99f9-6182b995d685"
        },
        "item": {
          "id": "84569bde-99b2-486a-ae84-32de59b454fb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d7c12871-113c-4581-839a-412055c6fc85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0e54178d-b618-41ee-a8bf-820a2f12e0d5",
        "cursor": {
          "ref": "7512b51f-7ef8-410a-9ce2-6f369ae3475a",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bbcd0114-a462-492e-89b8-d11924d71aed"
        },
        "item": {
          "id": "0e54178d-b618-41ee-a8bf-820a2f12e0d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1d938c53-7029-46f8-960e-762d86f21971",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 931,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "590802f0-a592-45f8-a9a9-7b36de302c21",
        "cursor": {
          "ref": "9ab7299a-0762-4003-ab25-1824ea261856",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f14da26d-f349-43fe-9eaf-05e814a20dd9"
        },
        "item": {
          "id": "590802f0-a592-45f8-a9a9-7b36de302c21",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "070102c4-21e8-47d7-bcaf-ddb538718a47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "35f9ab22-5137-44a5-893e-bc0457c22cf2",
        "cursor": {
          "ref": "4d80a842-047e-4afa-911b-d3244a2f8031",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b7bf81cf-5334-4f42-b27a-f180c7d8d3bb"
        },
        "item": {
          "id": "35f9ab22-5137-44a5-893e-bc0457c22cf2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "183d17d5-0b68-47e3-8346-931ec8933913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce162ac-b829-4374-8f8f-debd28e657f8",
        "cursor": {
          "ref": "16ed495c-986b-4545-8cae-c2f20da56cfb",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "505a4e6d-cd66-4403-baa7-248b3143e125"
        },
        "item": {
          "id": "6ce162ac-b829-4374-8f8f-debd28e657f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f88cd4e9-505a-4925-ada4-44eead977d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d848b865-7e6b-4a76-90c8-eb8e6da4b6b9",
        "cursor": {
          "ref": "a13071db-84b4-48f3-a6d0-be27778dfce9",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4a371829-7f86-40fa-aa4e-f87ddde43b66"
        },
        "item": {
          "id": "d848b865-7e6b-4a76-90c8-eb8e6da4b6b9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bcdf8123-d03d-4e32-94be-acce81c51c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d632af1-adce-4859-9cab-e70077b7edf0",
        "cursor": {
          "ref": "45f891c0-dc34-4abe-afe0-de5a40d3701d",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7c50ce46-93d7-4195-9f5d-cb976070a7c7"
        },
        "item": {
          "id": "2d632af1-adce-4859-9cab-e70077b7edf0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "52c3f3d5-094d-4235-9397-8c6728a402c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d40a48-f3d3-40aa-a57d-11978d8726e0",
        "cursor": {
          "ref": "27ad1a6b-95f5-4652-a4e9-66f8d92b05d6",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b3a76ba3-0162-48b6-9164-c8e538850df8"
        },
        "item": {
          "id": "34d40a48-f3d3-40aa-a57d-11978d8726e0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "38717201-c6c5-4b65-81ef-44efeef4a6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfbd4bd-25e7-4ec3-aac9-2d01cb139448",
        "cursor": {
          "ref": "19f4672f-827d-473d-8a30-d87498e72c0c",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6ba09459-6d9a-42ca-b202-f0b8559832e7"
        },
        "item": {
          "id": "7cfbd4bd-25e7-4ec3-aac9-2d01cb139448",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "736741c3-7cf8-488a-ab4a-80bee623b3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec3b4c13-dc8c-4563-9efa-47fa93b6a35a",
        "cursor": {
          "ref": "83a070ad-5705-4028-82a0-09156bbba9ae",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "362f1c5d-4dcd-4858-857a-2eb96b3579dc"
        },
        "item": {
          "id": "ec3b4c13-dc8c-4563-9efa-47fa93b6a35a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "00ca2b15-bb34-491a-817b-9b3e93d95589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359e7e4e-12b0-43f5-a6ff-c04c9f028be3",
        "cursor": {
          "ref": "272d00bd-2641-4bbf-a16f-4104e33465b8",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3de4a96f-2086-42fb-a256-d6d3a56a8ed8"
        },
        "item": {
          "id": "359e7e4e-12b0-43f5-a6ff-c04c9f028be3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "236ec903-86d4-4660-aceb-0816fcf1ff39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0306f26b-5e97-414c-bbcd-9a7fbdb16bd8",
        "cursor": {
          "ref": "b752c4b0-ec05-4d73-af5d-e880693d2a2a",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "13aa40c0-628b-44e9-bf5a-ae32f1d90372"
        },
        "item": {
          "id": "0306f26b-5e97-414c-bbcd-9a7fbdb16bd8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "42755ba5-8fb7-4b6c-b57b-e398275dd07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3cfdb4a-fee8-4780-8741-becb5934ff27",
        "cursor": {
          "ref": "0713bd58-f9a4-4ac4-8890-8dda4ca8b9b4",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "94901eb5-a3ae-4013-b4c0-8be99ae6e478"
        },
        "item": {
          "id": "c3cfdb4a-fee8-4780-8741-becb5934ff27",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f9f4d1b6-fc76-4067-9ca1-9dc41d685238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cb357f-7e8c-4667-8138-c7de040aabab",
        "cursor": {
          "ref": "aa13d819-ae74-4e54-8dab-a0eacb84b7f3",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "80b9adad-1039-499d-9864-e3a6ff905d2d"
        },
        "item": {
          "id": "e7cb357f-7e8c-4667-8138-c7de040aabab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bdd411b6-815b-45da-8619-99ab34798bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5371c526-f8b2-4f40-8a7c-3e4e4119c66f",
        "cursor": {
          "ref": "4c51f1f4-8c0a-4feb-9f3a-423dbb36e17a",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5c1d26d1-b15a-4bdd-b6ac-ce7df19f17fe"
        },
        "item": {
          "id": "5371c526-f8b2-4f40-8a7c-3e4e4119c66f",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "45547141-2279-42eb-9b22-931834a51f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaad6b50-3518-4e9a-a7f3-687608249d1b",
        "cursor": {
          "ref": "3fcd83fa-5284-4229-b344-7614439db800",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d357edb8-86f3-4b68-b42d-8610ef829b7b"
        },
        "item": {
          "id": "aaad6b50-3518-4e9a-a7f3-687608249d1b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "39cabac7-7b5b-4a08-82b1-70a197097c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca94c31-2961-4d49-bb34-6d539033f3b7",
        "cursor": {
          "ref": "ba3e9535-661a-4902-8c36-01bc6bc803c6",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ea3aabaa-3972-4c4b-bfa3-d19ab01e376c"
        },
        "item": {
          "id": "8ca94c31-2961-4d49-bb34-6d539033f3b7",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "13b8d676-ce03-47fb-bcf4-a400cead81ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7d51f3-7e16-4456-b6d0-a9add506bb65",
        "cursor": {
          "ref": "9e918d16-6720-4592-8964-818d0e8b1549",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b058930d-4c0a-42d5-9eca-253f2a154b40"
        },
        "item": {
          "id": "8c7d51f3-7e16-4456-b6d0-a9add506bb65",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2f352bd1-cd48-4ac6-b305-32b493308fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f1d3ec-b856-4d47-b314-7364b5798f29",
        "cursor": {
          "ref": "2e56dd1f-66d1-449e-bc9c-b4551680ac67",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "34eef82e-0632-42e8-b26e-5dafff3b78e8"
        },
        "item": {
          "id": "21f1d3ec-b856-4d47-b314-7364b5798f29",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "9624ed23-7b96-4193-afd6-6ffda4122c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bfdb51-c5a4-46de-8cd0-2f09813c1aea",
        "cursor": {
          "ref": "78983a65-70dd-4d06-8baf-67aca0a58043",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b4a5f5c5-0988-407f-b29f-5705c10efeca"
        },
        "item": {
          "id": "70bfdb51-c5a4-46de-8cd0-2f09813c1aea",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2f0acb22-5344-4ff2-b3dc-a6bb03a92896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a1e17c-c326-4c11-86cc-c6513355cbeb",
        "cursor": {
          "ref": "16b6d644-c595-4928-af5f-8fdc7f7a6206",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ba0230bd-337f-4f1a-9068-136e768380d9"
        },
        "item": {
          "id": "94a1e17c-c326-4c11-86cc-c6513355cbeb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1273f717-4213-4713-92d3-c3c2aed238e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33ea1a9-4da9-4537-9cd3-0780c585fe7a",
        "cursor": {
          "ref": "7938d5a4-00aa-4ae2-893e-03d53351ac46",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "158f1ce0-cbee-4a0b-8f1f-359156d29e74"
        },
        "item": {
          "id": "b33ea1a9-4da9-4537-9cd3-0780c585fe7a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8991eedb-13fd-4b68-a318-692e9f0634c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e2533b-1061-40fc-abb2-707d7d08cf04",
        "cursor": {
          "ref": "2804c83e-b309-444d-b324-d3d91872f2cf",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fbd2e0b7-cac9-4087-a8bf-1e2e8f3f3bf3"
        },
        "item": {
          "id": "88e2533b-1061-40fc-abb2-707d7d08cf04",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "18602782-4229-4bfc-ba3d-422713a6331b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03019687-4a67-4adb-a693-0ab33ed92a59",
        "cursor": {
          "ref": "d8b58e0d-5dc0-41c1-a035-21e9871dc51f",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f2391291-3a02-4c7c-9487-70962e5a9830"
        },
        "item": {
          "id": "03019687-4a67-4adb-a693-0ab33ed92a59",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8adb3139-8524-4e2e-9d66-719704be3352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cf2462-5b31-4368-8b3c-6bb8c8922260",
        "cursor": {
          "ref": "e81fdde2-27ef-4592-a69b-00a01550125f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c10fd632-4d4b-467f-9698-060175291a94"
        },
        "item": {
          "id": "f0cf2462-5b31-4368-8b3c-6bb8c8922260",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6a4ffe04-c934-4159-b303-73ad6924e5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f644d0ff-1e20-458d-8003-615fd17b487e",
        "cursor": {
          "ref": "3de7e3ef-67ef-4a0c-8919-33177274a62d",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "152176c9-4e25-4ab6-a7e6-c6fde216c56f"
        },
        "item": {
          "id": "f644d0ff-1e20-458d-8003-615fd17b487e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e597eac2-153d-42a3-a88d-6c9ffb83e530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c575120-0141-45fc-9d8d-d5670c963917",
        "cursor": {
          "ref": "786e20c7-d2f3-43fa-b0da-07ac569f46c2",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "42493e3a-0f61-403a-8222-6508cbd612e2"
        },
        "item": {
          "id": "5c575120-0141-45fc-9d8d-d5670c963917",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9513f971-ebfe-45af-bec3-d24836dd3c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be602daa-e4db-4a0c-bde2-d2f50c8015b4",
        "cursor": {
          "ref": "e7339d1d-3ec7-4ba7-985b-2a12b990fa97",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dfee01f7-d7c9-4bc0-9eab-4215a33372ef"
        },
        "item": {
          "id": "be602daa-e4db-4a0c-bde2-d2f50c8015b4",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "98d8aada-5239-4189-bb7e-0b3ac7e92b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579e33ec-af9b-4a01-b4b3-03c674e1b664",
        "cursor": {
          "ref": "7042af6e-f4f8-4b99-9b88-5d4dc7f8c23f",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "84bbd0c7-1346-4f6c-81ac-0fdd17aff660"
        },
        "item": {
          "id": "579e33ec-af9b-4a01-b4b3-03c674e1b664",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cffda8b6-c2b6-4c1d-8ed4-5dd9a7bbfdd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60ffcbe-0d76-4979-a3bb-fc20fba094a1",
        "cursor": {
          "ref": "ceecdd08-b337-4fcb-819e-1a990492032a",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "448f6ca8-1e38-42da-bbe4-36dd299fb66e"
        },
        "item": {
          "id": "d60ffcbe-0d76-4979-a3bb-fc20fba094a1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "01197db8-0f13-42a8-a968-3f3e55722b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "900b010f-d946-4b97-ab19-f8cfcb2a4de4",
        "cursor": {
          "ref": "d706fbab-28cf-4e65-92f5-e2ad604b1d35",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e8262513-f241-468e-9ca9-eea24d0b5bf3"
        },
        "item": {
          "id": "900b010f-d946-4b97-ab19-f8cfcb2a4de4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f6085eab-33e9-4c2f-b303-a5b690fc3b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f03d79-2530-4263-bb5b-36bfad9f8ee2",
        "cursor": {
          "ref": "5e1407f7-7c0e-4c52-966d-a2848336ed7e",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "96682d16-811b-4b5c-84b3-f857e0b61efa"
        },
        "item": {
          "id": "02f03d79-2530-4263-bb5b-36bfad9f8ee2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3f4ebf59-5771-47de-9bb5-416dcf95af7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2d01b2-b8c5-4490-851e-c098a4cb55c8",
        "cursor": {
          "ref": "52646b8f-6a6c-4006-9fc2-078e4c02d877",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d74ce922-b4ba-47c4-bdd7-c76cf2caa02a"
        },
        "item": {
          "id": "fa2d01b2-b8c5-4490-851e-c098a4cb55c8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3d01b7ae-6d65-41d7-a35a-46e428b94e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a95db9-0a24-4bd3-9754-c03cdeba6bda",
        "cursor": {
          "ref": "83300fbc-deba-4da9-ac32-907b7a228643",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "70bd4541-766b-4998-b1c6-cc93d39ececa"
        },
        "item": {
          "id": "01a95db9-0a24-4bd3-9754-c03cdeba6bda",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7062b751-b5af-4f10-9f84-59c7ac9feb21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75ff69c-03dc-4b8b-bfee-c508c59f4563",
        "cursor": {
          "ref": "477847ca-2a70-4ef3-b548-cda7ed360921",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1062bebc-3bc1-4e3e-9b4f-d098930866d4"
        },
        "item": {
          "id": "a75ff69c-03dc-4b8b-bfee-c508c59f4563",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "94855ea3-cf76-46f5-b03d-3c244ff55639",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ace48ee-14bb-45c5-bb91-c06d7aa1126d",
        "cursor": {
          "ref": "3d1f0955-c4bf-45a0-96ad-b54a8f197cce",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b8b2e99c-11d9-41b7-9bc8-6e8902212318"
        },
        "item": {
          "id": "0ace48ee-14bb-45c5-bb91-c06d7aa1126d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "79c70f77-cc39-420d-b545-fb7832af6d36",
          "status": "Created",
          "code": 201,
          "responseTime": 1316,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5b8a79-f201-48ae-8f54-9f6986638454",
        "cursor": {
          "ref": "6613d3b9-4868-44b9-b333-346280d94946",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c12b13ca-ab28-44b2-aae6-36fc0b640c01"
        },
        "item": {
          "id": "ab5b8a79-f201-48ae-8f54-9f6986638454",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d844f0ce-51f3-41f2-b249-49d87d88d929",
          "status": "Created",
          "code": 201,
          "responseTime": 1403,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bba6d7f-173a-4ce8-885a-d0f56d5e47ae",
        "cursor": {
          "ref": "d7eeb48a-116d-452a-a0b9-155e54eb1714",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "202450e0-2b21-48ea-a549-5a7dcc400840"
        },
        "item": {
          "id": "1bba6d7f-173a-4ce8-885a-d0f56d5e47ae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "17670796-49c3-4f8d-aa94-9b063f4b1d9a",
          "status": "Created",
          "code": 201,
          "responseTime": 1284,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88300cc-e9e0-4290-8f9e-1899afc7f879",
        "cursor": {
          "ref": "b8fa610a-a2ec-4864-8687-686b6a785818",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8f087c1e-a852-4d14-b998-e917e7db3f41"
        },
        "item": {
          "id": "d88300cc-e9e0-4290-8f9e-1899afc7f879",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f2e5f689-0b00-46aa-b8dd-d37d8a426598",
          "status": "Created",
          "code": 201,
          "responseTime": 1312,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f548f7e-6b0c-4958-b990-428fd1c1be80",
        "cursor": {
          "ref": "beb82278-2905-4a0d-9918-97bdf7f7136d",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "59c8a1d1-42e8-45e0-bd47-d013c1b2fefc"
        },
        "item": {
          "id": "1f548f7e-6b0c-4958-b990-428fd1c1be80",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3738baf2-8d4c-4575-a05e-b0caf592c696",
          "status": "Created",
          "code": 201,
          "responseTime": 1254,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb5ef15-6baa-48eb-afc9-4ddf05981e55",
        "cursor": {
          "ref": "4a36fe80-b055-4a6f-8763-ada4c0ff320a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6150a0f3-b665-4215-a55e-18775f30158d"
        },
        "item": {
          "id": "5eb5ef15-6baa-48eb-afc9-4ddf05981e55",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a00dd3f8-355f-4fc5-b283-21a7a5da2f1b",
          "status": "Created",
          "code": 201,
          "responseTime": 1404,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eef3dc7-a792-4720-b646-8c14befefb24",
        "cursor": {
          "ref": "f237ffbc-1a65-46a3-ae82-ff086a1e640b",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "90c7eb6b-95c7-4331-92a6-db8045e6461a"
        },
        "item": {
          "id": "5eef3dc7-a792-4720-b646-8c14befefb24",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9601ad88-408c-44af-8023-f6c6256c12f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "758d6511-b069-4d18-abb0-0461cfcdf46e",
        "cursor": {
          "ref": "dd2b23b7-22b7-4c9a-bfd4-e6e00e4da1ce",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "565bae0b-3ad9-465d-83b1-13493e1b9d88"
        },
        "item": {
          "id": "758d6511-b069-4d18-abb0-0461cfcdf46e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ceb978eb-a2c4-4682-9311-a55d24d4c51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e4c4ac-930a-4482-ad58-4124eefa5f2f",
        "cursor": {
          "ref": "8d90ac09-e17c-498d-b1fd-cdbd50373151",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5138596d-d0b6-4032-bef9-e34159ff063d"
        },
        "item": {
          "id": "68e4c4ac-930a-4482-ad58-4124eefa5f2f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "72e7c435-f336-402e-9da2-62460c5e5b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64f40df9-5e8f-43c2-a684-c664794c1756",
        "cursor": {
          "ref": "be447133-ec54-4fbc-bfb7-a3fa8d5fb64d",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88c46f5d-3cb4-42a8-a021-11df2dc8551a"
        },
        "item": {
          "id": "64f40df9-5e8f-43c2-a684-c664794c1756",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1057c5ec-b849-4076-addc-7b12475276dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd46ea2-ee57-4dfd-b5b7-d3f15d4d884b",
        "cursor": {
          "ref": "b170a3c0-3c5d-4a68-9ce3-0f60ff89e2a0",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "07a91a7d-72d0-4a3e-a118-20ab98a3a72d"
        },
        "item": {
          "id": "7dd46ea2-ee57-4dfd-b5b7-d3f15d4d884b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b342b5dc-ebb5-4452-bb0d-d49cb452b5ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84f9082-b571-47e1-a6ff-2e870d9951a2",
        "cursor": {
          "ref": "d5b7ba7a-34d9-40e7-9283-6182d7f0e070",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "011b83b7-56e9-4bd6-9cc5-cf6a2f1585be"
        },
        "item": {
          "id": "e84f9082-b571-47e1-a6ff-2e870d9951a2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7624dc27-8f17-48f5-aa52-2901dcd8c041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c48b58d-9186-4d73-a298-044f2a278753",
        "cursor": {
          "ref": "43384b08-f264-46f6-891b-bebe03c9caf4",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "749ad3da-aac9-426c-b26b-0694ba05a2eb"
        },
        "item": {
          "id": "8c48b58d-9186-4d73-a298-044f2a278753",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "69375d06-a724-45b1-9136-f0cae361d707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf98979-ed22-4f99-8e0c-24c59e87bf62",
        "cursor": {
          "ref": "8147d1fc-1838-4640-a05f-234b16142255",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "887ebf8e-7821-485b-bc94-a2b51007f6ce"
        },
        "item": {
          "id": "5cf98979-ed22-4f99-8e0c-24c59e87bf62",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e508cece-8365-41f2-bc8a-99569d29d8c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b60afa93-a6a6-432d-8f11-5a903e8a74aa",
        "cursor": {
          "ref": "a36ea374-2958-489f-8b9d-988af9a77e96",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6f9ca926-9fcd-47eb-975c-b1a58ef410fe"
        },
        "item": {
          "id": "b60afa93-a6a6-432d-8f11-5a903e8a74aa",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "66c9e3ab-9fc3-4ed5-9d71-ee84cbc8cda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032ed5e9-09db-4f48-bf6b-d73839d4f406",
        "cursor": {
          "ref": "2659f160-5e0d-4fa6-9dc7-e0c7cc4bd15d",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f50f589e-6662-4aa0-acd7-753442188d8a"
        },
        "item": {
          "id": "032ed5e9-09db-4f48-bf6b-d73839d4f406",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6b0bca03-157d-4bab-9421-3fb51b4ea1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e28861a-12a9-4c7c-a255-530b12da9fb8",
        "cursor": {
          "ref": "414aef8e-96c6-4b88-8089-0cea8620685d",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "729f68f9-eff3-45e0-be1b-8afa00732522"
        },
        "item": {
          "id": "2e28861a-12a9-4c7c-a255-530b12da9fb8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "74d8a199-758c-43cc-aa2e-4b14613684fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a703fafe-6fb4-4323-93ba-a0f51cb0a2af",
        "cursor": {
          "ref": "a7627eb3-5e35-40c9-b3f0-4a7b704a73af",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9063ea52-9c8c-46b7-97ac-47294e1c9bfd"
        },
        "item": {
          "id": "a703fafe-6fb4-4323-93ba-a0f51cb0a2af",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1b303886-73f3-4345-a2da-7612aea0584f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68385270-71bf-4636-b2c0-b02056295fc8",
        "cursor": {
          "ref": "26b93864-74ed-4956-8fcd-077855cee7ce",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3ddedc4d-dba7-4a5f-bc98-c1e1dd6e2289"
        },
        "item": {
          "id": "68385270-71bf-4636-b2c0-b02056295fc8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a3fb19fa-7deb-4073-8b74-457f45cfd90a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0b62b2-af9c-4579-b75c-9f7073fc851e",
        "cursor": {
          "ref": "1557a431-f5a5-4e36-8409-3b51c7a3f655",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "38af8cfc-a283-4e6d-9206-90cc9f6e13c0"
        },
        "item": {
          "id": "ef0b62b2-af9c-4579-b75c-9f7073fc851e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6a1fe90d-8c56-4428-877a-bcc20266ff44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bebd938-84e2-4506-8397-ea92764dcefd",
        "cursor": {
          "ref": "59c0dfe9-7d2a-41b8-9b2a-85d19a673e62",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a1287ebd-00ab-4ff3-9d24-47bd7d710ac7"
        },
        "item": {
          "id": "4bebd938-84e2-4506-8397-ea92764dcefd",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "eb2a9f32-4c55-4d9a-80f0-cdbd84d60510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ad1f6b-7eaf-4277-a445-009e4eb7c75e",
        "cursor": {
          "ref": "5d4041fe-2bda-48cc-8625-6de4def2d6f8",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4870c45e-1220-4f37-8fc2-de72e8107c53"
        },
        "item": {
          "id": "66ad1f6b-7eaf-4277-a445-009e4eb7c75e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1f4d9273-1b11-4ea8-8915-184f68d6977d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf82833-4d4d-45ab-9a1e-cebecaa65002",
        "cursor": {
          "ref": "a2bd88bc-5e0c-4109-80ad-571b22bc0140",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6c139f62-3725-4c86-b547-0b6aeb68a8eb"
        },
        "item": {
          "id": "fcf82833-4d4d-45ab-9a1e-cebecaa65002",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d5d5b675-7e84-4496-9db5-dbd2eb3ed6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75a888d-19ca-4ac0-a93e-78f56d17ba56",
        "cursor": {
          "ref": "881fa50d-83f4-489e-8e01-16cf724b5d2c",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bc5d7df6-01c9-45bc-b0b9-a1523b557376"
        },
        "item": {
          "id": "d75a888d-19ca-4ac0-a93e-78f56d17ba56",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b1915328-07bd-4d6c-8c6e-18363e286eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71de0cee-9db7-4a52-a906-195accc08d86",
        "cursor": {
          "ref": "d88cc228-05ea-4d15-b1b1-75e8eec87002",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5b37f6e4-bf68-4150-9476-fad38eab7531"
        },
        "item": {
          "id": "71de0cee-9db7-4a52-a906-195accc08d86",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "456f42aa-414c-48de-a5ee-831d71c23907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4396f03d-17a5-482b-bc02-301ab7eeb5bd",
        "cursor": {
          "ref": "f921e121-698a-49be-8d8b-eca644191ccd",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2c467dbe-9644-4642-a25b-a7d5e31a46a4"
        },
        "item": {
          "id": "4396f03d-17a5-482b-bc02-301ab7eeb5bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "89cfc58a-1386-42e1-a914-6746ff8fd149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb944ac-6522-453d-ab00-d1ac3462cf88",
        "cursor": {
          "ref": "62b5aa4e-c8f5-4b37-adde-94b1df0cfd93",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "519ac71f-d29b-490f-8eaa-339a1f4bf631"
        },
        "item": {
          "id": "0eb944ac-6522-453d-ab00-d1ac3462cf88",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4edbe73a-654d-4e1c-9557-d1021c65dfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c58259-b451-4cd3-aadd-fa575a44c07f",
        "cursor": {
          "ref": "9742f8da-c0b9-4d55-8bad-6c47cdf59682",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2b812db8-d35d-4418-86b6-45aa6d012537"
        },
        "item": {
          "id": "d0c58259-b451-4cd3-aadd-fa575a44c07f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f1518dd8-4dbc-42b4-b0b5-8f344283bd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ea08ac-af1b-4e1e-addb-6261fadad766",
        "cursor": {
          "ref": "6629f4cf-3623-41d5-ac2b-71346a9ed939",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "35c538fc-e66a-42dc-9213-d863a7c1ced7"
        },
        "item": {
          "id": "e4ea08ac-af1b-4e1e-addb-6261fadad766",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "151183a0-aecf-4506-a51f-95a0d61aff40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b8f266-f9c3-420c-9499-580d60056426",
        "cursor": {
          "ref": "f58b5054-8752-4f17-9f64-11e127e43d96",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4238bc81-b151-44f7-a57e-3e76d38962f9"
        },
        "item": {
          "id": "28b8f266-f9c3-420c-9499-580d60056426",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b3075bd0-7072-419e-a53d-46f9466660a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b8617f-b0dd-4435-8986-8ddc954879e8",
        "cursor": {
          "ref": "11c4ee50-fc4c-4f80-8752-45169e9a3423",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "924cecf1-7e69-42a8-b621-53338b089e72"
        },
        "item": {
          "id": "82b8617f-b0dd-4435-8986-8ddc954879e8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e43e9614-9b45-41ed-8065-7909a1c822bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7e159ed-514e-40a9-9ba0-5cccb780287b",
        "cursor": {
          "ref": "239420c3-f596-4cc5-a69b-2aadd0649a51",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c32e9867-39c0-4e0d-adb3-e4f90d9be8fa"
        },
        "item": {
          "id": "e7e159ed-514e-40a9-9ba0-5cccb780287b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "66941684-d92c-4f69-9c8f-5e1f80374e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fbc119-a15a-4a83-8f12-da15aeeddb46",
        "cursor": {
          "ref": "0234d892-fb39-413e-8a63-5e9826169ae7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "021b8c16-4d5d-49a9-896c-9c0410c47b39"
        },
        "item": {
          "id": "c2fbc119-a15a-4a83-8f12-da15aeeddb46",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4d931768-b571-4fb9-aa9d-8d22102fca55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52cfa0bd-4043-4e5c-b1ec-dfaa08632ddf",
        "cursor": {
          "ref": "bb5223c1-4558-430f-bdf9-17f0d768d9d0",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0d898e98-3c81-4fcf-9b7a-e722e6c8dc2d"
        },
        "item": {
          "id": "52cfa0bd-4043-4e5c-b1ec-dfaa08632ddf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4d269ced-f6fe-40f0-8bc2-99631280d231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff5fd20-8b06-4b5c-81ad-bf13e916bb1f",
        "cursor": {
          "ref": "a08c82d1-57c5-4867-9b8c-239f0eeee68d",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "90c254e6-a2d8-4905-bde4-930227a91cc4"
        },
        "item": {
          "id": "6ff5fd20-8b06-4b5c-81ad-bf13e916bb1f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2588299c-15b5-4747-b159-e5bedb6086c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b11a3d-36f3-45b6-9adf-1a5923716f1d",
        "cursor": {
          "ref": "74ef6566-b110-49e4-b66a-e50524b47493",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a28e9208-4ec5-4cb8-8881-79fc968c3bef"
        },
        "item": {
          "id": "10b11a3d-36f3-45b6-9adf-1a5923716f1d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d432e4b2-6410-4a1d-b4b5-5825239f8d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce593b63-0490-4c8c-bdc8-7e70bcc03282",
        "cursor": {
          "ref": "feceefd8-1d5f-425c-afbe-f412aa4722a2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2e9679af-845d-4508-8854-2c61001c7389"
        },
        "item": {
          "id": "ce593b63-0490-4c8c-bdc8-7e70bcc03282",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "70af8f58-07b0-421f-ada1-0cda9a2dc3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3da325-72ca-41d9-95c6-9672dbd190a8",
        "cursor": {
          "ref": "867c38d4-0cba-4af2-aa81-dd4ee69a3d4f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "417b2b3d-5af1-4c4b-ad90-c0a1a3271351"
        },
        "item": {
          "id": "7b3da325-72ca-41d9-95c6-9672dbd190a8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "66ba3b87-909f-4c18-aa7e-c909cbf3d77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8806343-7915-41c1-a834-59b163ac94d5",
        "cursor": {
          "ref": "3250455b-6f17-4a3a-97c2-14e43f2e4fb7",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8ab0f107-b9a5-470f-89a8-9dcd1316d552"
        },
        "item": {
          "id": "d8806343-7915-41c1-a834-59b163ac94d5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "efd7d062-c7f0-4300-999f-c2c1eb25ee0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d01533-08a1-4df2-a045-451edd9a5dcc",
        "cursor": {
          "ref": "7ec66c63-1383-4043-b974-96a02c58e805",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "819a8265-1e1f-4113-b7af-7f7ea776c40c"
        },
        "item": {
          "id": "57d01533-08a1-4df2-a045-451edd9a5dcc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2abbe89d-0938-4b92-bfc6-0839274b2699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cfc3de8-056d-47b0-930b-6f9a688b1790",
        "cursor": {
          "ref": "b9eb33f2-cc59-467b-92c7-134753816352",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a400a334-b513-4c70-88e9-5d1d62f07627"
        },
        "item": {
          "id": "0cfc3de8-056d-47b0-930b-6f9a688b1790",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6be6af40-f45a-4394-8adb-d2545da8bc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a788fb-b272-4fcc-8c21-e37519ecbd27",
        "cursor": {
          "ref": "693ee5da-48b0-44dd-b063-421312354249",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "19087eea-ec80-4aca-a43e-8b0a754e33cc"
        },
        "item": {
          "id": "a3a788fb-b272-4fcc-8c21-e37519ecbd27",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b379f430-ad27-4cc1-a577-2fc234e12d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a7d687-525d-44a4-972e-6c15c4bbd13f",
        "cursor": {
          "ref": "032c790f-034e-4705-81be-2a2db9c27980",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "feaf3882-3279-45fc-9362-8b5f0415422a"
        },
        "item": {
          "id": "b9a7d687-525d-44a4-972e-6c15c4bbd13f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d6233a7b-8d36-47ac-b499-75504570e7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c51e3a4-c1d8-4caa-bd4f-1869f591c270",
        "cursor": {
          "ref": "1ecc1250-5119-4c96-afea-b948d17ff8e8",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5bafe390-a473-4fb6-985f-8fe2aa4a766e"
        },
        "item": {
          "id": "0c51e3a4-c1d8-4caa-bd4f-1869f591c270",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1d64bb11-0c2e-4959-8eb3-2d183a54ae63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2147df5-7814-4144-b919-e17eda982580",
        "cursor": {
          "ref": "b128b44d-d05a-4590-b68c-599db6e8e2ca",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "51508a07-e016-477a-9eee-961daa491de6"
        },
        "item": {
          "id": "b2147df5-7814-4144-b919-e17eda982580",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cdbec767-11b8-48a9-a270-3edfad2b6655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac58235-c77c-41ef-95ed-533b9f487dff",
        "cursor": {
          "ref": "624f0d8d-e5e5-4ea7-9c4a-bddd2c057007",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5eca6261-bf44-41e2-816a-61e1f4ed9652"
        },
        "item": {
          "id": "3ac58235-c77c-41ef-95ed-533b9f487dff",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9b4f985b-5def-4e01-bda5-8fa6b37550ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075e2a6c-0b4a-4ee9-8502-cdfac7667024",
        "cursor": {
          "ref": "7deae5f6-a1bc-42ff-a990-c22446a096ef",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b2aa54a8-0231-47de-b691-55803e4e483d"
        },
        "item": {
          "id": "075e2a6c-0b4a-4ee9-8502-cdfac7667024",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ddbd3bd4-4377-47b6-954b-2b58f0dc5ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b109169b-b035-4e05-9e1b-d128014e6b3e",
        "cursor": {
          "ref": "f1b084fb-deba-4fed-a55b-db7d3a1c73d1",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "91901d99-4a33-4e3c-b909-4870e8ac4a6c"
        },
        "item": {
          "id": "b109169b-b035-4e05-9e1b-d128014e6b3e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "daebfb15-3fce-4429-a749-468dac950fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8c44f5-8b7c-48fe-a473-3e9ca29adb2c",
        "cursor": {
          "ref": "8d91d72a-c9d8-4052-ba41-a9a8811d970d",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b4067a39-7f58-46e7-8cb5-ef7d3a9c0ba1"
        },
        "item": {
          "id": "1b8c44f5-8b7c-48fe-a473-3e9ca29adb2c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fc4baa61-a9db-4fa4-9434-96ea323bb558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7923e50-5b58-4216-ba63-99354fe54585",
        "cursor": {
          "ref": "e50f00ef-7fd5-48c9-aefd-13c46823e9fe",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "409ff758-50ff-49e4-b2bb-7b0d95c20a3c"
        },
        "item": {
          "id": "f7923e50-5b58-4216-ba63-99354fe54585",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "96201973-12e1-4854-abd5-1cd7388ed03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e927579-c349-4164-a300-ff2983fceace",
        "cursor": {
          "ref": "8cd83351-f677-479d-aab0-a0304e47be67",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9e325951-963a-4a17-bb39-3b39fe414d3e"
        },
        "item": {
          "id": "2e927579-c349-4164-a300-ff2983fceace",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b1707bc1-2330-4669-af63-eaa34261d7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b9e93b-5335-4e64-bfd9-4ff8189a59c8",
        "cursor": {
          "ref": "2d5b4bc6-4379-471e-8537-3d0f9a308301",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4ce48f4c-c95c-401f-a2c5-f94d0e2b3c85"
        },
        "item": {
          "id": "61b9e93b-5335-4e64-bfd9-4ff8189a59c8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "664e8251-a022-4722-9fdc-3e2fb072e716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a812a600-5c50-42ab-8d24-d84b9ac8228b",
        "cursor": {
          "ref": "79b93ad7-76e6-4886-8d70-94d20a288301",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c8e21ed8-fae1-414b-a958-d98ebc7edb8e"
        },
        "item": {
          "id": "a812a600-5c50-42ab-8d24-d84b9ac8228b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a5870e0e-8fbc-4ac4-8849-b68144568477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec90a8c8-86a6-4540-8bd2-49b5d09cccc7",
        "cursor": {
          "ref": "4c13f737-e7df-4fee-81f0-10ea9b898f49",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e86ea713-14db-4aaa-9a6b-c5f1fe6db7b0"
        },
        "item": {
          "id": "ec90a8c8-86a6-4540-8bd2-49b5d09cccc7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a79c5600-47fd-4d8e-a0e4-6a4fea626efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294c7d6f-dc43-404e-b0fe-43016e8a4a06",
        "cursor": {
          "ref": "098b1cac-0c8b-45de-abd0-4cd190bec98f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "53e80dca-daef-4462-a87c-2efa33df69ba"
        },
        "item": {
          "id": "294c7d6f-dc43-404e-b0fe-43016e8a4a06",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bb7ed5d0-b8e3-40a7-9068-9945c4df40e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6e5aea-4fae-4ec0-8b9f-0820a6e144be",
        "cursor": {
          "ref": "8fb89a50-ca20-4870-917a-c9985a4be212",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "52601b51-03c0-47fc-95d5-84b89f39b21c"
        },
        "item": {
          "id": "bd6e5aea-4fae-4ec0-8b9f-0820a6e144be",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c3c8d0a9-2846-4489-a3b5-aa3ad27178ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dbce0d-775e-443e-821b-cce298c81d11",
        "cursor": {
          "ref": "2d78ce97-fb12-4251-bc01-b0f4efa69938",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba0fd36b-2206-4a55-8338-20395def9c2e"
        },
        "item": {
          "id": "f9dbce0d-775e-443e-821b-cce298c81d11",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3a0504fa-c752-4ec0-b585-7ee82d562921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029d67f1-7ca4-4bc9-a10e-c70b6d8295d1",
        "cursor": {
          "ref": "d1356cbc-961d-4399-b917-6b1289cc6974",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "799f5674-bb2d-4a1e-b0e8-b2d8bf700da9"
        },
        "item": {
          "id": "029d67f1-7ca4-4bc9-a10e-c70b6d8295d1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a6aacebb-b98f-4d3e-b1df-dbc2e568f404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1984a414-9524-4446-a45f-61848e2349c8",
        "cursor": {
          "ref": "7091d691-8df1-4a5c-afaa-2e6eba2ec9f2",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a9d045bd-f360-4847-a2a1-492730fbc730"
        },
        "item": {
          "id": "1984a414-9524-4446-a45f-61848e2349c8",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f88b4c39-8120-495d-b955-425b48d2c742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60231ee-418c-468d-8824-5a2d0ba9fa30",
        "cursor": {
          "ref": "0c510591-2029-47eb-9a31-5b053a0cb901",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b8eb9c83-67a5-49e8-92d4-60ea9237a14a"
        },
        "item": {
          "id": "e60231ee-418c-468d-8824-5a2d0ba9fa30",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2d01ca58-075e-4b1b-9aca-d8a165d96b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f72318e-cf79-45cc-8481-6edb5f0f901d",
        "cursor": {
          "ref": "df0f05f4-17be-4ebe-8ebb-49a10fd6deb5",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "69d241c9-81ba-4bb0-8b7f-2675720d2ee7"
        },
        "item": {
          "id": "3f72318e-cf79-45cc-8481-6edb5f0f901d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "067dea93-2d71-424f-bcd5-30f7ca505037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c613b5-daa7-4cb4-9930-008ac008374d",
        "cursor": {
          "ref": "fb59847f-4cde-41c4-bc37-ede004066d80",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a20252b0-bf28-4ade-be9b-6fbcae323d13"
        },
        "item": {
          "id": "91c613b5-daa7-4cb4-9930-008ac008374d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "305e9d8c-9aac-4186-bfeb-9c66ee6ec09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e4b442-31e1-4478-8497-80e8a97fe401",
        "cursor": {
          "ref": "c131c6be-23cc-4183-b9a2-a3e2ab203376",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "152e727c-2b95-4ca1-9395-f3798ba7cc0c"
        },
        "item": {
          "id": "e0e4b442-31e1-4478-8497-80e8a97fe401",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bc1cdb6d-8c69-48cb-af9a-6bf4ff1bbe93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdd30f8-32e2-4972-9856-5346c8ac8833",
        "cursor": {
          "ref": "434a8d8c-0d26-475b-8cad-ed7966e0bd96",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ec1f0824-8c8c-4754-b06d-270f8b52657c"
        },
        "item": {
          "id": "bfdd30f8-32e2-4972-9856-5346c8ac8833",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "682e2d77-1951-44b8-8260-911c887f81fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9769319-3039-4093-8eb6-25e8e271023a",
        "cursor": {
          "ref": "0594712a-811a-4f46-8b9d-31388dff353c",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "039ab9d1-be72-4a46-9f21-3ea465378cef"
        },
        "item": {
          "id": "b9769319-3039-4093-8eb6-25e8e271023a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b368ab42-9eaf-43d9-b8d5-7db2c55f1cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63e1189-ff88-4106-8cce-98801fc4b1db",
        "cursor": {
          "ref": "dceb589c-f17b-4a0f-b0fd-7849a386ecda",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7b6d1680-5041-42b8-8631-0e6e1e3dfa5c"
        },
        "item": {
          "id": "b63e1189-ff88-4106-8cce-98801fc4b1db",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d39252a8-34dc-402b-b451-4d1522a37409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe7259d-b914-4637-9c37-956ea51819fd",
        "cursor": {
          "ref": "e6f32378-d4f6-4ef3-8ce0-e03030b825d8",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2496bc09-cf40-4a84-8edb-70e08ba23418"
        },
        "item": {
          "id": "afe7259d-b914-4637-9c37-956ea51819fd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7f64451d-5ddc-450b-8282-5fe7ee6a57a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd9413f3-f7ba-4fcb-a385-b378b3259d28",
        "cursor": {
          "ref": "0408c79e-a9e5-4413-90b4-2bd9d7fb0ce2",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "55ac9a38-2639-4afb-af5a-bc3cc12fefd9"
        },
        "item": {
          "id": "cd9413f3-f7ba-4fcb-a385-b378b3259d28",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2bc7b392-3a4e-4023-8896-ae691e8efbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6d8017-bdc8-4564-91d5-3e4faecb6e68",
        "cursor": {
          "ref": "6e079505-e0c0-434f-869e-9f92dfa9b5ab",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5d549baa-f1b0-4496-9c22-854950b54abd"
        },
        "item": {
          "id": "6b6d8017-bdc8-4564-91d5-3e4faecb6e68",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b7db70e4-4c09-4439-978b-b0bbff99223a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d66073-f76d-4716-afb6-891f611aedc8",
        "cursor": {
          "ref": "7c42b60d-8bb1-40d8-b9dd-f2a8aea1cf10",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e4c48319-e8df-4dcc-8574-fbb344ce4a6f"
        },
        "item": {
          "id": "c3d66073-f76d-4716-afb6-891f611aedc8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75d9b2a2-0229-443f-8a1d-8fd78b9e5ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfb1eea-e9de-4105-ba5f-0f8a99ce39ad",
        "cursor": {
          "ref": "d6cd8bfd-e007-4473-8d85-4f9dce13f03a",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a6fc4d44-54d8-4f8a-9980-ec01171171df"
        },
        "item": {
          "id": "fdfb1eea-e9de-4105-ba5f-0f8a99ce39ad",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "18ca7ed1-25fd-4303-b62c-fc6c49a7f7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21bdc39e-55bf-4714-ab30-0473a49568e3",
        "cursor": {
          "ref": "eb0120ea-d438-40b5-a90a-30b613e3af07",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "73d68568-f249-47bd-922b-842adb05a4c1"
        },
        "item": {
          "id": "21bdc39e-55bf-4714-ab30-0473a49568e3",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "919fb7d0-335d-48c4-819a-f80df60dbceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15193e90-5d42-429c-86f3-dcffea30560e",
        "cursor": {
          "ref": "535b2588-84a1-41e9-a424-c48497ca6c93",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2cd00321-8cd7-4271-b2ca-b2feb8f4b340"
        },
        "item": {
          "id": "15193e90-5d42-429c-86f3-dcffea30560e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0e7f5c7f-b000-4d1d-a057-50b87e6c7cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133f7aae-0a43-49c3-adc3-d892e3943ecb",
        "cursor": {
          "ref": "2163ec3b-8193-4c5c-8050-aed1d1890766",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "089db194-36fd-4736-921c-ed1ac26e1331"
        },
        "item": {
          "id": "133f7aae-0a43-49c3-adc3-d892e3943ecb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7f830836-fc21-4d82-9c7f-646b6fcaaf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c36200e-73aa-4d6a-b06a-91a8c6722886",
        "cursor": {
          "ref": "2c111985-49f3-4834-a152-ef80c32ca942",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "66c5e911-809b-4289-b2a8-4d60e0a9b3bd"
        },
        "item": {
          "id": "4c36200e-73aa-4d6a-b06a-91a8c6722886",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ad0859f5-13f4-48bc-8720-78ee5b482a11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f6cb7f-56fb-4d5c-8ab8-2d571f300698",
        "cursor": {
          "ref": "1e75cf3e-dd55-45ff-ba67-ecde4fa90272",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ce5b4c2a-290c-40aa-91c4-8b6a130ba414"
        },
        "item": {
          "id": "43f6cb7f-56fb-4d5c-8ab8-2d571f300698",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "daf462ad-0b70-43ed-a28d-01c33e7ad8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d22219-4f3d-44ac-a86a-cceb919af002",
        "cursor": {
          "ref": "840254c2-e060-46a4-82c9-1983020615ff",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "437616bd-1994-4b8f-84a9-c6fbcf018fb8"
        },
        "item": {
          "id": "12d22219-4f3d-44ac-a86a-cceb919af002",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f4c1a2ca-fc32-45a7-82ce-55d0e8b82b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a37a6a5-17e8-44f2-b9bd-8abcc3332a35",
        "cursor": {
          "ref": "31805be1-fab6-496b-a63b-c6c73bb3724a",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "5c027698-481b-4692-8bb8-f3688679b321"
        },
        "item": {
          "id": "0a37a6a5-17e8-44f2-b9bd-8abcc3332a35",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3ddbc0c2-5f87-409d-b942-993189ef81a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9946c0a5-3b09-484d-bf4c-0bc5b831d514",
        "cursor": {
          "ref": "6eb0e381-fa35-4784-8328-f9df6b671bab",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d41fe2c-536f-48ff-8b91-bfea74034695"
        },
        "item": {
          "id": "9946c0a5-3b09-484d-bf4c-0bc5b831d514",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9137ea8a-5b36-475c-9427-6cad4e81b5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a41ccd-40c7-4f4a-b59f-c0dcb32a29a3",
        "cursor": {
          "ref": "b8f481e2-8c01-49cd-9910-ef17b40bf2d8",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "89a0fd4a-b1f8-4cde-81f7-1727bda9606a"
        },
        "item": {
          "id": "43a41ccd-40c7-4f4a-b59f-c0dcb32a29a3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ffd9a49b-c21e-467f-82e4-5aa342889652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daea7808-8b6b-4f6f-bc9c-4e56f18a2a23",
        "cursor": {
          "ref": "074d508b-e78c-478c-b694-07d8412073db",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "56345400-8974-462f-8aab-87c48127d01f"
        },
        "item": {
          "id": "daea7808-8b6b-4f6f-bc9c-4e56f18a2a23",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2ccd595c-21ef-4274-adcd-fcabe8a64ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b084704b-7535-4bcb-a20c-4b3c0129baa7",
        "cursor": {
          "ref": "2e21d389-57b8-4ebc-91b6-4d92dec1ad9c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "967f56e4-5a78-4387-9e18-a30886be4778"
        },
        "item": {
          "id": "b084704b-7535-4bcb-a20c-4b3c0129baa7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8b2e273b-4b3f-49d0-80bd-7ef3a1b280ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e079d8-9440-4bc2-9f36-b9c891d142df",
        "cursor": {
          "ref": "1484f99e-cf04-4434-bbe4-45eafcbebe16",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "041f25bd-8197-469b-ba5c-8f1ed5fc30d8"
        },
        "item": {
          "id": "34e079d8-9440-4bc2-9f36-b9c891d142df",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ab54d6c6-b160-4e6d-b830-33967bfce4b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4d596fec-b2b0-4f1e-980b-2e2f1d19d129",
        "cursor": {
          "ref": "55a99900-bbd8-46b4-b14d-314bae7f6e60",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e1d258fc-3d1a-4236-a23e-c6c5fb44e287"
        },
        "item": {
          "id": "4d596fec-b2b0-4f1e-980b-2e2f1d19d129",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2d76d39e-a6b1-4b2b-927f-ef0b644dcea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94be207e-8e7f-44bb-ae80-b06beba50c41",
        "cursor": {
          "ref": "b2c9b8a1-6c49-4982-a0a2-519a94e13fdc",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "50486aed-a8af-4ab7-b2c4-e51faa93e72f"
        },
        "item": {
          "id": "94be207e-8e7f-44bb-ae80-b06beba50c41",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f1dc85c3-066b-4f00-9450-1fad42e51fd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d7d262-33c4-4a44-bbf7-5320759216fd",
        "cursor": {
          "ref": "56f2f4c0-7206-4c46-aebf-6075dac380dc",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "4bf6a56c-3a84-43e3-9760-326ab1595256"
        },
        "item": {
          "id": "35d7d262-33c4-4a44-bbf7-5320759216fd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "909015dc-4d49-43ea-ae7c-2b248887954f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef3ba9ec-0ccb-467e-a219-c570b2a0b208",
        "cursor": {
          "ref": "edc9cd60-ac88-4180-b915-fa292089cdc1",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bfe810b2-a970-4642-a57c-ead24ce8c847"
        },
        "item": {
          "id": "ef3ba9ec-0ccb-467e-a219-c570b2a0b208",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5fb75dd1-9488-44eb-9ade-3591e8001790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 367
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3d9214-bc96-4010-a561-a42d4e3e4d6c",
        "cursor": {
          "ref": "a85eabd8-ce72-4d81-9458-83d455b55e8d",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8360c18e-e48a-4f66-8e0e-379168c6f29a"
        },
        "item": {
          "id": "cb3d9214-bc96-4010-a561-a42d4e3e4d6c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c4f4f65c-e0d5-44ba-836a-da76ca778f72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 304
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ca1856-99fd-448d-b8f8-c7889ae71490",
        "cursor": {
          "ref": "7bb6b146-1700-4f9d-99ea-d1e35d592239",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "71c0f4f4-ce60-44a4-b824-95ca32ef6e95"
        },
        "item": {
          "id": "11ca1856-99fd-448d-b8f8-c7889ae71490",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cdc369df-3e00-4896-a25c-17ab8d995f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea87ee2a-05bd-453a-94ba-0c62e3a18d9c",
        "cursor": {
          "ref": "c46d47f8-3cb2-48f8-bbfe-e21acab020bd",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c1e3d4e0-e36b-460a-9c4e-7aa4df9facae"
        },
        "item": {
          "id": "ea87ee2a-05bd-453a-94ba-0c62e3a18d9c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a22d250e-0cb3-408a-85ac-8f01a877f2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53556e46-19c5-4e28-a08a-ed56444285a6",
        "cursor": {
          "ref": "bdd4bb94-3f42-49c5-8fae-7b8b02bfc6c8",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "53a66eb4-f303-43f4-af3e-90c96956012b"
        },
        "item": {
          "id": "53556e46-19c5-4e28-a08a-ed56444285a6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a027fa8c-1a86-484c-91a0-89222afd3335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caf646a-167f-49d6-9efe-41b63df9d8e3",
        "cursor": {
          "ref": "a373d6e1-2c5c-4f8c-be75-c540d5473efa",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "62b0901e-517e-4f18-a1ad-0dac82e9e0cf"
        },
        "item": {
          "id": "5caf646a-167f-49d6-9efe-41b63df9d8e3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7c35e66f-5d21-4c06-b82c-8711563d768e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0a4295-ece8-4376-ac2f-b35597695581",
        "cursor": {
          "ref": "f8b56c36-9e48-4c1d-a78d-b4643e7d5f21",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1f941391-959f-41eb-909a-c1b9ae3c85fe"
        },
        "item": {
          "id": "ba0a4295-ece8-4376-ac2f-b35597695581",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "94b15a53-fc90-4898-a856-ce51a37486f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356df45c-2864-46d4-82b8-fea7ec33074c",
        "cursor": {
          "ref": "b55cc480-44a5-497a-bf4d-8edaf3a64fdb",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0fc9b360-5ea8-4305-b656-26abe2d87375"
        },
        "item": {
          "id": "356df45c-2864-46d4-82b8-fea7ec33074c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "916b0190-d2af-4444-b5e4-f6165a9da23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64223a6c-ba9f-4c15-9125-f5aaa792e137",
        "cursor": {
          "ref": "782ca240-01ce-4f08-800d-5bca99f8eb4b",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4ca20f18-3232-474e-bc33-02674dd150c4"
        },
        "item": {
          "id": "64223a6c-ba9f-4c15-9125-f5aaa792e137",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "30070b50-7df3-4530-8310-71b8dad785ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034338e7-d6e0-4c7e-9180-f361090cc97b",
        "cursor": {
          "ref": "f2aa086c-f78d-4b6c-a115-11d5607144b3",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7a736465-ca21-49e1-bbfa-233075b9dc4d"
        },
        "item": {
          "id": "034338e7-d6e0-4c7e-9180-f361090cc97b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9ad5be87-b121-49fb-bc97-43e4bb07442d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "176f1f19-7aaf-42b1-ae27-02b2930d1f13",
        "cursor": {
          "ref": "e35a44f7-9486-463d-8dd1-70c2302589ec",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7ea3e59a-d9fa-42b4-9938-2a94d6d3346f"
        },
        "item": {
          "id": "176f1f19-7aaf-42b1-ae27-02b2930d1f13",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e2089bb6-f16e-4f15-af44-80457adcfe9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c2d384-390a-445e-b743-89106f9db2f0",
        "cursor": {
          "ref": "d051e7f3-cede-4fec-841d-7eb7155e9695",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "eb99486a-c2cd-42dd-bd18-5ea05231f5ad"
        },
        "item": {
          "id": "57c2d384-390a-445e-b743-89106f9db2f0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ab9295ea-2d38-4b65-bcce-5bdcc24cd475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b6c238-570b-438a-8f00-af6ed85e908c",
        "cursor": {
          "ref": "d19a916d-d1d3-49d0-a319-02330cfb7cb9",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ae0d8a77-9ec9-44f2-a109-e10b5b7d427d"
        },
        "item": {
          "id": "63b6c238-570b-438a-8f00-af6ed85e908c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e78ea727-c856-4092-84b2-8a566e31bfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d1265d-c9de-4318-8b05-0fee1ce8fb2f",
        "cursor": {
          "ref": "a844bc92-209c-4452-a423-8ac6923b7c94",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6100a033-697f-4d29-a41a-739650f4f07a"
        },
        "item": {
          "id": "04d1265d-c9de-4318-8b05-0fee1ce8fb2f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "07b6f5aa-0019-4abc-9958-082586146d3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34452372-45ff-47d7-b30a-87656b704e20",
        "cursor": {
          "ref": "976b850a-d269-49e5-935a-72457da1ea00",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7433e678-1e58-4f2e-a99c-c5af556c3d6b"
        },
        "item": {
          "id": "34452372-45ff-47d7-b30a-87656b704e20",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f4818871-41f8-45a3-9edb-1152ffe5852a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300d1f88-e58e-48d6-9b10-c0c943d6ae13",
        "cursor": {
          "ref": "7944a484-a104-4337-ac49-fed755b98992",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "df9dc547-80ca-48f0-88e1-19850637823c"
        },
        "item": {
          "id": "300d1f88-e58e-48d6-9b10-c0c943d6ae13",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4ef33b6c-1f62-48b8-8712-dc2f532eda2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef29e71d-7a5a-4c8f-b54a-61862e9adcd8",
        "cursor": {
          "ref": "22fd8094-b46d-44ca-bb5d-7a6c670d0503",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b781975c-5885-49e4-9819-f4ab37d67f7e"
        },
        "item": {
          "id": "ef29e71d-7a5a-4c8f-b54a-61862e9adcd8",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "44f3c62b-2204-4d2c-bcdd-dae2bf9e31b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe598bf-c458-44b5-b37a-fde3f9aa83f6",
        "cursor": {
          "ref": "6ea67cda-6e5d-4d47-a0f5-c809a7d02c35",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9bc772a3-a416-4119-a23d-906e0c94c53f"
        },
        "item": {
          "id": "efe598bf-c458-44b5-b37a-fde3f9aa83f6",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "216b7f43-fabd-4590-9faf-27f59a5ec1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703912ef-3c68-4575-b789-f2ddb7d827ff",
        "cursor": {
          "ref": "af4e913a-f694-4f1c-b110-09e9b3b8ee95",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6fea17a7-e183-4eef-ad6c-16622e6aedc4"
        },
        "item": {
          "id": "703912ef-3c68-4575-b789-f2ddb7d827ff",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9d2bada5-3ebd-4a7e-9b30-a840a6409d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deeaa53e-65ce-43b8-9f11-7dcb59680dc6",
        "cursor": {
          "ref": "509e358b-e681-45ea-80e6-49f8a95eb0ae",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "68c4cdf3-6144-4c41-a390-e5fff978fa1d"
        },
        "item": {
          "id": "deeaa53e-65ce-43b8-9f11-7dcb59680dc6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8c5efac9-058b-46f7-86dc-1e8070bbb96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2579bedd-43eb-4c68-b0b5-9396fcbf4c01",
        "cursor": {
          "ref": "36e7f3f9-5db5-4b77-bd20-b69778e69f4b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c896e74d-dde0-4c48-a4ea-4056103b692f"
        },
        "item": {
          "id": "2579bedd-43eb-4c68-b0b5-9396fcbf4c01",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "014ac353-5ea2-4d17-83f7-19b41113dbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908648b5-2093-44e1-a19f-7c08f379d954",
        "cursor": {
          "ref": "4557fde7-ebbd-4d37-b76a-3d1bf024d03c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a924e567-a8e0-45a6-8ddb-fe7cac4c9363"
        },
        "item": {
          "id": "908648b5-2093-44e1-a19f-7c08f379d954",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9bb29d43-43df-414d-8b14-51067eb14248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc66a11-c276-4de7-9f54-1a3db37b664c",
        "cursor": {
          "ref": "67d5e096-138f-4fb1-a23e-c288acb28257",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "184a610c-2cd3-440f-b059-d05c92594542"
        },
        "item": {
          "id": "6fc66a11-c276-4de7-9f54-1a3db37b664c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "11c14dbb-7707-48c1-893b-fb50f05103a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59696dd4-783a-40af-a1ae-d617d3d7d2b7",
        "cursor": {
          "ref": "002c3f96-f869-4e86-8fcb-691c69313a8a",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "56c92211-661f-4148-9be4-0b11d529bf98"
        },
        "item": {
          "id": "59696dd4-783a-40af-a1ae-d617d3d7d2b7",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "76ebff74-99c2-4003-ae2d-bb19db730c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1593fe8e-f4f4-405c-9097-6f4c5c8775bf",
        "cursor": {
          "ref": "b1af923a-9fea-4a3f-8f86-b84ca598e722",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "aae628b5-e876-49cf-8025-eb07ab003b6e"
        },
        "item": {
          "id": "1593fe8e-f4f4-405c-9097-6f4c5c8775bf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c6c01665-302b-4daa-80a4-9eef4245c40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261ed783-a47b-4de3-9eb5-1427b35b4643",
        "cursor": {
          "ref": "c6291f26-abec-4020-b04a-39874ecbab98",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b27cc22a-03f4-4eeb-955d-07e08978bacf"
        },
        "item": {
          "id": "261ed783-a47b-4de3-9eb5-1427b35b4643",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "07c135bf-43e0-414e-bd2d-32ef71138f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d790b5b6-74c6-4475-85b4-ff796d1f9de1",
        "cursor": {
          "ref": "f7623c46-936e-4c1a-9ba9-dbbf85bf6b7a",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8676ad1b-cfef-4b3f-8ae9-77986102fa49"
        },
        "item": {
          "id": "d790b5b6-74c6-4475-85b4-ff796d1f9de1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5db1837f-8f81-4e57-bb3d-03015504798d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebea4e9-26ac-4114-b1a2-c1089ad8475e",
        "cursor": {
          "ref": "d9b164c8-1d44-4f8b-afdb-6fa26f69839e",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "255f69ba-c3ae-4834-a07f-66b671bc574c"
        },
        "item": {
          "id": "7ebea4e9-26ac-4114-b1a2-c1089ad8475e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "79adf989-5741-4187-b7d5-9813a34352cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a803d558-71ac-44af-8adc-74ad95794f1d",
        "cursor": {
          "ref": "7fa10c88-6b3a-49e6-bb1c-8a554dc30b01",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "fbff3631-7b79-4d5a-8b68-2b74fbe892a6"
        },
        "item": {
          "id": "a803d558-71ac-44af-8adc-74ad95794f1d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a43679e-de4c-4202-b4d5-285d4d8c1cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e59268e1-bd26-4053-aaa5-d7b2005241c9",
        "cursor": {
          "ref": "248a0f62-3e45-4289-90ff-624bbe902a12",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1fdbafea-fea0-4e84-8553-df2fbe88d6ec"
        },
        "item": {
          "id": "e59268e1-bd26-4053-aaa5-d7b2005241c9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "25403bed-7a0a-428e-a075-9fe3b53465d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 168
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2fd457-6645-4606-a3ad-e49a1394b2dc",
        "cursor": {
          "ref": "cc721916-6f21-43cd-af73-4dd7b4d9a426",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "147601fd-f309-4b0b-b054-d98e5507ffe0"
        },
        "item": {
          "id": "9f2fd457-6645-4606-a3ad-e49a1394b2dc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2e82f21f-5ffd-41b2-9509-85247c9e957f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feaaf6d6-f892-4eab-af89-dab4051a59a1",
        "cursor": {
          "ref": "ca2afca9-ad4a-492d-8509-2f55a8e9f39c",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "690373f5-ec50-4e5e-b012-63f1ebedbf66"
        },
        "item": {
          "id": "feaaf6d6-f892-4eab-af89-dab4051a59a1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d8edbfe4-3bed-4ce9-b586-7e0948ade89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce8e43d0-067a-4470-8cfa-6222c3481c7c",
        "cursor": {
          "ref": "030cce02-f4de-4a1c-bf60-3f65001d9a7c",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "671e4a9e-4c7b-4025-9848-269372fe5997"
        },
        "item": {
          "id": "ce8e43d0-067a-4470-8cfa-6222c3481c7c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2a0bef27-7324-4529-8337-5870be510249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddd9971b-f332-4cc8-8408-d690784980cc",
        "cursor": {
          "ref": "7766e572-9107-4a5d-9732-30329fff274c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d120381f-e54e-445b-a78d-38c8b5e140e9"
        },
        "item": {
          "id": "ddd9971b-f332-4cc8-8408-d690784980cc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b08277f6-5c41-46dc-9e91-34f7083b3f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a88ca7-1e6a-4f14-8d2f-9b17aa2ed5bb",
        "cursor": {
          "ref": "e41cb18b-bcbb-455f-8bac-c2ef9cc716d5",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3e75f8cc-03c2-47bb-bda2-1c78e9370943"
        },
        "item": {
          "id": "52a88ca7-1e6a-4f14-8d2f-9b17aa2ed5bb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8240e8e7-6e05-4a76-820e-4f78a8200503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8792ff6d-ab9d-4990-a197-458a6de57fa1",
        "cursor": {
          "ref": "f106493c-22bc-456c-b5df-50be57692250",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8c0d2c31-63e8-4c51-b7ce-e6907cfa8287"
        },
        "item": {
          "id": "8792ff6d-ab9d-4990-a197-458a6de57fa1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bac24f51-8dcc-4f45-9ba2-0f0254eafd33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d95d4a-d1ac-490d-abff-20620b9d54e2",
        "cursor": {
          "ref": "8c501c6d-134b-43f3-a4e9-d14b5c2d2622",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fc77f422-f00c-4a29-96f0-d0728aa82355"
        },
        "item": {
          "id": "45d95d4a-d1ac-490d-abff-20620b9d54e2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ea1d4ea6-0cf6-4737-bd64-3e75e6e76116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6784e4d3-289d-4f11-be1a-064129def1d9",
        "cursor": {
          "ref": "2caf89d7-ec5e-4778-a7ab-4bd70a79737c",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "44697b19-4ecb-4d84-99be-b140ca34befb"
        },
        "item": {
          "id": "6784e4d3-289d-4f11-be1a-064129def1d9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "85ec96a3-d936-49c8-940e-6aae82358834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba88071-1103-4281-8b44-3c6f8faa9f23",
        "cursor": {
          "ref": "70849951-aec1-46ca-8ae7-80ef9a65c26d",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "846c19eb-c0d2-4319-9811-e11398630727"
        },
        "item": {
          "id": "bba88071-1103-4281-8b44-3c6f8faa9f23",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8b11cba2-b60a-4a07-9efe-4caf479251a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130aab19-5e54-4297-bdb5-c247a400be2f",
        "cursor": {
          "ref": "f96eea5e-75d9-408d-905b-4d380277458f",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "68cd3efb-5661-49cf-8666-647e1378f114"
        },
        "item": {
          "id": "130aab19-5e54-4297-bdb5-c247a400be2f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a72e5a2-4cff-4b51-a7ae-bc61667dc405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7bf2ce-e0ff-4909-baa8-445b55161e6b",
        "cursor": {
          "ref": "b08b1f4b-ffc0-4e19-93da-942d6fa1d6db",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "93c31744-c22f-4776-b7fa-27264e926b9c"
        },
        "item": {
          "id": "5a7bf2ce-e0ff-4909-baa8-445b55161e6b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c0297175-c511-4beb-8804-149c2c262948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 249
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789bc4d3-b4c6-491e-a507-4766d3da0127",
        "cursor": {
          "ref": "87c6e3c4-8fd5-45dd-9bc2-23c7a631161f",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4afc7940-bc36-4281-8112-8e82e88231e6"
        },
        "item": {
          "id": "789bc4d3-b4c6-491e-a507-4766d3da0127",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d9926c61-1593-4f1d-93ad-a71ec4000d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5303da6a-6bfd-4814-881f-d648a04d88a3",
        "cursor": {
          "ref": "9c3eb506-0f22-42f0-a319-ccb3acf687f8",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0a5a3f1d-1b27-4c44-8cfa-a7ced00d1c82"
        },
        "item": {
          "id": "5303da6a-6bfd-4814-881f-d648a04d88a3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6528b231-16f7-4334-b0e1-a43bf7b05b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 191
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f30bb4-74f9-48f1-a4ed-070acdfb3394",
        "cursor": {
          "ref": "d9392a6a-3dad-4fa9-b152-1583db044f9c",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b7c599db-15b5-4b3a-90c6-17bf1a8534f4"
        },
        "item": {
          "id": "84f30bb4-74f9-48f1-a4ed-070acdfb3394",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ca62f3d7-3696-43fa-83a9-1be31c91f2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 240
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3b127e-04f6-4229-9d94-04625b130649",
        "cursor": {
          "ref": "6b664c35-9b94-4b8f-aee3-0a07778fc686",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cbede582-183e-4b5c-b4f9-efcf92e93de5"
        },
        "item": {
          "id": "6d3b127e-04f6-4229-9d94-04625b130649",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9601a58c-71f7-4bb6-9bd2-acb2ce4d58b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab91289f-1418-4aa8-a254-9d4f9a520fe8",
        "cursor": {
          "ref": "bfe2d427-bf23-4849-a248-7609fbdb6287",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b8c65893-80b7-4c2c-b594-fb13fe40b380"
        },
        "item": {
          "id": "ab91289f-1418-4aa8-a254-9d4f9a520fe8",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ac36af1c-4970-436c-a888-79bde86512fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57889bcb-c743-4108-995c-f4a36d5ba83b",
        "cursor": {
          "ref": "d1c86332-51ad-4639-8b6e-7e9d8cbad8ec",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c5bd077a-4e39-416d-b0c1-baf1ad6ea33a"
        },
        "item": {
          "id": "57889bcb-c743-4108-995c-f4a36d5ba83b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "fa45c02e-25cd-496a-ac1c-73ee20a41c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e9856c-a7b2-4fda-b3ff-47c46568af2a",
        "cursor": {
          "ref": "438b5d70-e00a-468b-ac29-a40e5b83eb40",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "29de09ef-6a4b-48a4-b250-79d31fafb6fc"
        },
        "item": {
          "id": "66e9856c-a7b2-4fda-b3ff-47c46568af2a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9ec14156-fad6-4364-9f04-3cdb891310d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 330
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7232ef4-56f1-434a-9564-5e7550c70306",
        "cursor": {
          "ref": "ae0ddd57-84a9-4e18-9419-061c537c3e6a",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0c0fa56e-d0c0-4855-9164-dc05e536429f"
        },
        "item": {
          "id": "b7232ef4-56f1-434a-9564-5e7550c70306",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "03aa84cc-5305-4c5e-878e-30643712e39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 267
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c32bbc-8185-4331-bfca-96ebbb39f62a",
        "cursor": {
          "ref": "f555e958-fea3-432f-bc15-adcb0b57cf3e",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c3f41c77-fe20-409a-9ead-9258eb8ef1cc"
        },
        "item": {
          "id": "03c32bbc-8185-4331-bfca-96ebbb39f62a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6c291b34-e27b-4cd4-a32d-ef2954494492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51dc530c-08a6-40a4-ac20-9a3f71de16ea",
        "cursor": {
          "ref": "e3930660-0836-4e41-8920-5d5179bce21e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ac825988-f91a-4e99-8cf7-fab7bdd5d197"
        },
        "item": {
          "id": "51dc530c-08a6-40a4-ac20-9a3f71de16ea",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8762167b-9061-44d4-88c7-ac3425c61daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3d2185-34e3-4dca-a2c5-db2cfcdabcd8",
        "cursor": {
          "ref": "6137fa4e-a956-46e7-a7b5-244543c27da4",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c3dcb121-bbb2-40c4-9e78-6c6f0b694880"
        },
        "item": {
          "id": "4c3d2185-34e3-4dca-a2c5-db2cfcdabcd8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2e0bfcaa-f7a6-4eb3-82dd-17c263fc693d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e614c3-0b5b-42f9-9a9b-95b7b79333e6",
        "cursor": {
          "ref": "9da10463-fc28-4043-970a-8612df18074f",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b895ce66-1606-4c0c-ae74-415c5a342aef"
        },
        "item": {
          "id": "e8e614c3-0b5b-42f9-9a9b-95b7b79333e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "240acc1a-88b9-44ec-9063-0c3f850d0a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492fa927-d968-4f51-9d0f-9df6c35c1335",
        "cursor": {
          "ref": "fa789013-b901-4f3a-bf1b-8d2221ef0b8f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ff64513d-a22a-4928-9579-1241ba009992"
        },
        "item": {
          "id": "492fa927-d968-4f51-9d0f-9df6c35c1335",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "aa3df7db-c3f1-494b-90aa-1277eefc5154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b729fc93-0d8b-433b-a888-94db5e0ab853",
        "cursor": {
          "ref": "45b5ce24-79a7-420c-80aa-db82843d1645",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "efca6a20-0ee1-4288-8778-182b818dfaea"
        },
        "item": {
          "id": "b729fc93-0d8b-433b-a888-94db5e0ab853",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0dccf2e1-87fc-4bf2-a5e3-7ba1109e417c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06e637a-b437-4b15-9d02-10ccff8c24b5",
        "cursor": {
          "ref": "08b7c46b-48f3-4153-967c-4ef26958263c",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "09aa462b-3342-4f3c-8108-4939ebd05150"
        },
        "item": {
          "id": "e06e637a-b437-4b15-9d02-10ccff8c24b5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e81cc140-6dcf-49d8-b41f-92c7e0b92f91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e27b65-7cc6-4ef6-aa01-7377d183bd4f",
        "cursor": {
          "ref": "f927cef3-9ec8-4a17-b00d-b0b5c06985d2",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "7063dbff-f996-47c2-a9cb-a3f83470390f"
        },
        "item": {
          "id": "e1e27b65-7cc6-4ef6-aa01-7377d183bd4f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "158419f1-9316-4549-8ba4-9ac874cdc5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f1fe15-f112-4875-adaa-74d564a66c84",
        "cursor": {
          "ref": "97e60bf7-7d79-49a1-a06a-f404e61e4e27",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "efa8162a-7e22-4678-89ea-efa1953eaa24"
        },
        "item": {
          "id": "00f1fe15-f112-4875-adaa-74d564a66c84",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "83ab1988-3bd2-40f8-b486-8296c0168a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b85ca6b-f93f-4613-85d6-f7c33fcd4ef8",
        "cursor": {
          "ref": "5346d52b-3c50-4ce8-a5e8-61d57bfd7eb1",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e02fadbd-dd5d-4140-a690-1173806ae693"
        },
        "item": {
          "id": "0b85ca6b-f93f-4613-85d6-f7c33fcd4ef8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2f281ebe-23e9-400d-ac8a-e84e7e6c5b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd5dd5ec-179d-4751-8580-0a4640513636",
        "cursor": {
          "ref": "149029d0-1e2d-4a1b-9206-fd9ed0a27ea1",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bd4a9cb0-8f69-4a07-bb22-9cb937f5ceb0"
        },
        "item": {
          "id": "cd5dd5ec-179d-4751-8580-0a4640513636",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2247ed16-87e9-4754-af3d-8af4dfab960f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f29701-f5ce-4e32-8cf2-b38ef10dce05",
        "cursor": {
          "ref": "457365eb-78a3-4234-81da-fbe25ef5f1a4",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "052f567b-6e30-404a-a09d-4d081aba1e11"
        },
        "item": {
          "id": "f3f29701-f5ce-4e32-8cf2-b38ef10dce05",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1b2feae7-6e7f-4d8e-a054-22619531528d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3d191c-eb78-4b36-8011-ebce8bf8a378",
        "cursor": {
          "ref": "692f4366-0c83-4e4b-89f9-5f2667398240",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "79a53b7a-a185-4e94-8724-56a186f9d2ff"
        },
        "item": {
          "id": "ab3d191c-eb78-4b36-8011-ebce8bf8a378",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d9e67154-3ce9-455c-90aa-05a8a380ea8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ced6ec-62b9-4924-ad88-08b90ddc348b",
        "cursor": {
          "ref": "2bd64a4d-0c03-43e6-904e-d642980bac88",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5cf552fe-7ab4-47bf-b69d-ca52cf50c9bb"
        },
        "item": {
          "id": "62ced6ec-62b9-4924-ad88-08b90ddc348b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "125377c0-2007-4136-b0a2-684a7961cc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4a7d5a-4017-4f0b-818a-8c1c5b8f78f8",
        "cursor": {
          "ref": "959f801d-b662-4645-aebf-5c843f1d30b5",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9b1f7a66-1edd-4450-9039-76a470633ac7"
        },
        "item": {
          "id": "2c4a7d5a-4017-4f0b-818a-8c1c5b8f78f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3e1bca1a-3370-4ef5-a393-4617cc8e406b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a19563-5a6e-40fd-ab70-14ff17d5f3ae",
        "cursor": {
          "ref": "f6bdf072-a62f-42f6-b627-b212fcd0c6c6",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9b84ec14-c55d-4ba8-9d75-7cf47e6a9ba7"
        },
        "item": {
          "id": "84a19563-5a6e-40fd-ab70-14ff17d5f3ae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5a36fb1b-1486-4c34-8043-028a5f0e093f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 717
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a6768dc-8526-4226-9a98-7eaea3ddefb6",
        "cursor": {
          "ref": "f6d1d649-22bf-4e31-aa29-99181bdf64c2",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f653c5ab-cc8c-4a07-9141-94a19c3a0b5b"
        },
        "item": {
          "id": "1a6768dc-8526-4226-9a98-7eaea3ddefb6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3cae3929-03cd-4f49-8814-ad3ef059ac35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d54d9f9-67fc-4a2f-b388-24ce30819f6f",
        "cursor": {
          "ref": "2366b566-ccb9-4bd9-8606-ad9b51b4b731",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "91fc2f03-3bc1-44fe-89a3-289f079dc34e"
        },
        "item": {
          "id": "2d54d9f9-67fc-4a2f-b388-24ce30819f6f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ee56c805-a604-4c48-91c3-6242fcb0ea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 661
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b93ca5-d59e-4cbd-a7d9-8ea2703ef2a2",
        "cursor": {
          "ref": "5945a3c9-ae34-464c-8175-5a9eaca2c9b3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8cb5c422-c0eb-476b-9866-297dafa7b0fb"
        },
        "item": {
          "id": "c5b93ca5-d59e-4cbd-a7d9-8ea2703ef2a2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "821ede7c-f46c-4f4c-a20f-3d5e4810251c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfc564e-aa99-419f-9150-92396eb2d2f8",
        "cursor": {
          "ref": "fadc400e-8500-48ef-9f5d-f6c4c99bcf1b",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "11a8e0f7-3e2a-403d-9bc8-a9b158333bbd"
        },
        "item": {
          "id": "9bfc564e-aa99-419f-9150-92396eb2d2f8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6b26d862-ae36-4a2d-a1ab-03e0303a5675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a5c2e4-4a11-4367-b37a-7d714d2bb742",
        "cursor": {
          "ref": "0e97ca88-dbba-4d00-9541-2528102b9e0b",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "702dcac2-5eb1-4d7e-bad0-99c4fd082856"
        },
        "item": {
          "id": "17a5c2e4-4a11-4367-b37a-7d714d2bb742",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "48961904-c1ba-4189-b16d-f7b333d6be2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f607fb6-7246-4e5e-b834-cb3f95e0af17",
        "cursor": {
          "ref": "75e93acb-822c-4d94-91ac-6f114d04c2bc",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "69b9e715-1980-45f1-bf1b-c52cd79ffe61"
        },
        "item": {
          "id": "7f607fb6-7246-4e5e-b834-cb3f95e0af17",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2864fa11-ae33-45c0-945f-6c7d0832e6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 314
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7e837e-1375-41aa-92ac-6b8bf2e51d5d",
        "cursor": {
          "ref": "456af706-588c-45ed-b912-b23cafe38616",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3b2d4879-4986-4f96-b273-f7b74a44a757"
        },
        "item": {
          "id": "8c7e837e-1375-41aa-92ac-6b8bf2e51d5d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "037751a7-7423-4acd-a9cd-c0484389df15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 255
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a781dbd-42a2-4794-b5de-cbcde0d1fcb2",
        "cursor": {
          "ref": "49e178af-3a81-4fef-8145-ba91c2f41eb5",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d1457db7-0561-475a-9fd5-806e55c26d75"
        },
        "item": {
          "id": "1a781dbd-42a2-4794-b5de-cbcde0d1fcb2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5d042c30-7b51-4a47-9824-61bed8d4853c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd58765f-671c-4525-9494-2e8aa43e9ef6",
        "cursor": {
          "ref": "af54ad72-ca1f-4072-839e-e783600aa6fa",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "18022c2e-21b9-4136-850a-deaa34feaf28"
        },
        "item": {
          "id": "bd58765f-671c-4525-9494-2e8aa43e9ef6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d0ff29ac-c8b8-4399-abec-db869e7eb43d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c594badd-013f-4f8e-a559-b0124ea08bc5",
        "cursor": {
          "ref": "3f3c03ea-a3b1-4088-a93d-64947913b413",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3f0084ef-7411-47d9-b6b5-180edc8ec559"
        },
        "item": {
          "id": "c594badd-013f-4f8e-a559-b0124ea08bc5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5a7892e2-9940-4d4f-a7f9-ea4377baded2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f183ebac-d4da-4cb1-a6f6-08a0fd6d4a44",
        "cursor": {
          "ref": "21c41e61-3d37-41ae-ac62-a715f17026b7",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "8b55fee1-175f-4492-9354-c0b54ef39177"
        },
        "item": {
          "id": "f183ebac-d4da-4cb1-a6f6-08a0fd6d4a44",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fb6e76c4-b99c-435e-9305-620e4e1b9cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab72662-5e3d-41b1-a81d-5ef1c260a210",
        "cursor": {
          "ref": "464bd141-f820-4c2c-8538-01b9cb3e3e9e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4cc77a8d-7141-4b9d-a6b6-c05d986b65f8"
        },
        "item": {
          "id": "cab72662-5e3d-41b1-a81d-5ef1c260a210",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fffafb86-84c8-4ff6-bf87-e5959e124c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 246
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254b36c6-8cae-4fde-8698-ea86b49c8e91",
        "cursor": {
          "ref": "99db677d-c3a5-4b9e-81f9-6895c8026faf",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2aa21414-847e-4096-93a7-a4a04cc4948a"
        },
        "item": {
          "id": "254b36c6-8cae-4fde-8698-ea86b49c8e91",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "91e903a3-8925-47f2-aa12-101fef7f3eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ade4a256-c740-4230-be4d-e8f9b56fcf4a",
        "cursor": {
          "ref": "a7d3d552-89b0-4c45-a769-b4008e119457",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "efb9ed77-fcb2-4578-b5af-e5f6dfce5f9d"
        },
        "item": {
          "id": "ade4a256-c740-4230-be4d-e8f9b56fcf4a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "deef64c8-52d0-4a34-bf3a-51ff561da399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e85fc8c-a8fd-4717-ae39-1757d2a48924",
        "cursor": {
          "ref": "73d2ab93-2051-4555-9a33-bb1eac656859",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "7e1e74fa-8b80-47c7-b51b-3017a1d03a35"
        },
        "item": {
          "id": "4e85fc8c-a8fd-4717-ae39-1757d2a48924",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b9ebd664-b2c2-47aa-8aa1-776245c88468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e680a5c8-4d6f-4fa5-80ce-a8705f233b32",
        "cursor": {
          "ref": "b79bc28e-1fd9-4df0-902f-6ced021136a2",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "97a7b5fb-2da6-4869-a343-acf1efbff112"
        },
        "item": {
          "id": "e680a5c8-4d6f-4fa5-80ce-a8705f233b32",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d1399268-94c0-43d6-a950-e80daa54bd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a36866-7fcc-47d4-8c12-5bf0f244557e",
        "cursor": {
          "ref": "a0b84404-d12e-46b4-9fa3-eb1eb8240537",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "790c34be-3323-432e-ae5e-c01972379a3c"
        },
        "item": {
          "id": "36a36866-7fcc-47d4-8c12-5bf0f244557e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a8d6d45a-81eb-4bb3-8017-31db4c3f3f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70ade0f-9c9e-43d3-9081-286a3541861e",
        "cursor": {
          "ref": "b39bdc57-1391-419d-a1c2-11f45aa86ff9",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "db657a8d-10d1-49e0-bf1f-12dee1f61e49"
        },
        "item": {
          "id": "e70ade0f-9c9e-43d3-9081-286a3541861e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b3feee50-2a44-4aa1-854c-153a41274e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059b0ae7-90b1-4d8f-9ba4-f347e2e87d68",
        "cursor": {
          "ref": "8d433580-6fe4-408d-bd9c-1ad54a19a50d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c527f73d-2b88-4412-8fa4-a96272d35075"
        },
        "item": {
          "id": "059b0ae7-90b1-4d8f-9ba4-f347e2e87d68",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f66f9dae-3018-4278-a617-026644c63b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9801e08b-5626-4181-b339-dcad31464ef1",
        "cursor": {
          "ref": "60c6b042-a02c-453c-b772-71515370559e",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "66e8e083-51ac-4d49-8522-b27b189fb59b"
        },
        "item": {
          "id": "9801e08b-5626-4181-b339-dcad31464ef1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "07fa83b7-8733-43a9-9874-92e17559e40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7239ea-041c-4449-aa27-1009f1b1b1dd",
        "cursor": {
          "ref": "cc7654be-e82a-4142-8df1-fc0903434723",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "4a80d4c6-ac57-4199-854c-c919bded5bcc"
        },
        "item": {
          "id": "dc7239ea-041c-4449-aa27-1009f1b1b1dd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fa70c28c-f904-479b-9284-f7b678e61155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401b2db5-46dd-47c7-831b-88e9431cfc56",
        "cursor": {
          "ref": "da0a514a-be3a-48f4-a5a0-687a6f01ea6a",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a751f63c-bdb5-4928-9098-75e98a1e08a6"
        },
        "item": {
          "id": "401b2db5-46dd-47c7-831b-88e9431cfc56",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "671b8768-8417-4839-825e-fe30a9c93aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26965cd9-adb4-46a6-8866-8f85d70eba39",
        "cursor": {
          "ref": "58697231-ad81-407b-b2f8-d6bc94cd6ac7",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d04c430b-e02d-4061-b324-7a49e7b6fe7a"
        },
        "item": {
          "id": "26965cd9-adb4-46a6-8866-8f85d70eba39",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "38462078-204a-4778-ba75-afea71f8d84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 292
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dcdb52-b93c-4853-905d-1f0e48ba6575",
        "cursor": {
          "ref": "de2dc34b-6f0a-46e6-be34-5e668154cdf5",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "0f77cf1a-4a0e-4bad-80ca-7782625f5aca"
        },
        "item": {
          "id": "29dcdb52-b93c-4853-905d-1f0e48ba6575",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1e761e1f-46ed-44e2-994e-2950502f251d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bea86c-8029-48a7-baec-a32673e832d4",
        "cursor": {
          "ref": "d4f9e3af-0157-4945-b4fe-99b46c24cc01",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "02d87e48-3fc4-4e9e-8a2a-a8c2021e040f"
        },
        "item": {
          "id": "44bea86c-8029-48a7-baec-a32673e832d4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2806810c-c310-484d-a50e-6d75c26fecc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:277)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:277)"
            }
          }
        ]
      },
      {
        "id": "22ac6b12-7381-41b4-9d32-91adefb87baa",
        "cursor": {
          "ref": "16fce9d0-8d9f-4a8c-a10f-c7c765270b7c",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1a54adcd-b13c-4626-9689-8f31231b2731"
        },
        "item": {
          "id": "22ac6b12-7381-41b4-9d32-91adefb87baa",
          "name": "credentials_verify"
        },
        "response": {
          "id": "346bbac8-6fdb-48d0-9691-bb44052fc6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "ee82c953-4c55-4bdf-b2dd-2f0d949c71e9",
        "cursor": {
          "ref": "760d7f59-4277-4c26-8e7e-d875af6bf041",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "2210ef7a-00cf-41cf-a825-59c6d8d792bf"
        },
        "item": {
          "id": "ee82c953-4c55-4bdf-b2dd-2f0d949c71e9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "dc96a12c-fdff-487f-b3cc-2bec82b14371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "08fc409e-3a7d-472b-9873-7cc3d8eebc0d",
        "cursor": {
          "ref": "fc813a2d-23d0-4030-b9f5-da17a2ced4e8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b3a7643d-472a-4718-b710-df537020983a"
        },
        "item": {
          "id": "08fc409e-3a7d-472b-9873-7cc3d8eebc0d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17e0175b-a672-404c-84fc-5c207adf8460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fc409e-3a7d-472b-9873-7cc3d8eebc0d",
        "cursor": {
          "ref": "fc813a2d-23d0-4030-b9f5-da17a2ced4e8",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b3a7643d-472a-4718-b710-df537020983a"
        },
        "item": {
          "id": "08fc409e-3a7d-472b-9873-7cc3d8eebc0d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17e0175b-a672-404c-84fc-5c207adf8460",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41f4d1f-c802-4df2-9f15-6b28e6062562",
        "cursor": {
          "ref": "712c625a-1c42-400d-abaa-3d58a06105b0",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cc5636c1-248f-46a5-b70f-272e48f78936"
        },
        "item": {
          "id": "f41f4d1f-c802-4df2-9f15-6b28e6062562",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b4fb6a1c-5cd7-4870-b135-e4e770c2ba9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9514222-4fe9-4e18-b29f-cdaa152348b1",
        "cursor": {
          "ref": "c2dd3736-7e26-4963-8e3e-f5386d08bba8",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "85a6999f-93e7-4e75-9df7-387b56346926"
        },
        "item": {
          "id": "b9514222-4fe9-4e18-b29f-cdaa152348b1",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "49c6a223-8e94-4249-9e13-5c4fb4bd801c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}