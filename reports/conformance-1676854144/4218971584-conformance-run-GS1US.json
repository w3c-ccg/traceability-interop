{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eaec7167-314d-4b65-a0b7-d4d393685b5d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "60fddc26-3388-4c87-ae86-b82c794b6db2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0100d2ed-0773-4f44-9094-9774426b2cab",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "df66a897-bc23-4cdd-9f5d-0e2a5d7967c7"
                }
              }
            ]
          },
          {
            "id": "f46a9856-a5f7-4e01-bcce-64e3a03def8c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bb53f10f-4dee-4cff-a9ec-a0880619c4da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "46959398-0a35-47ef-aee8-16dbde01040f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "95b76d4d-6dcb-47b8-818b-7c1762cbb8a9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "fb2f1821-9390-40ce-9927-a82430a18207",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a525863a-128f-470c-b5f7-1e062046ab27",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58734530-0131-4b1a-8c48-acce077e8dd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d690edb-6138-4556-b264-0b63b34f0f8b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "86703f3f-a041-470f-972e-7611aac598e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58e34918-bf66-43e5-b827-dfcb1ab66830"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f461078-66ee-4915-b40b-6d5d55c4fd43",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c5e669e-5367-492b-8740-9d5764f7beca"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1d2795f-0c76-4acf-a722-767413f58017",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0ef5dfcd-3fdd-4059-8e53-8d1ac8778cab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84fbd4b2-6aa4-4bc5-96ba-48db139f1ab7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d99a8a2-c899-44a6-aa5d-1878fa84ad50"
            }
          }
        ]
      },
      {
        "id": "5c3aed2d-4302-4052-9ef3-d06ce01beaea",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2810e0a4-b5f9-4dc5-8f0c-fb810920576c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b587dcdd-dee6-4c15-9b02-3393f3623d45",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca99801b-28d3-4b30-9190-dbc82fbeba34",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab40f168-1577-4519-8757-d3958adbedc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "02db074c-5ff2-4c47-97b7-e9cc0bc2531c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad320b3-defd-4b58-8f93-f72f2c5fbc46",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44d10ca-f87a-4eb5-b1bc-9c52ae22944e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28e6a511-30ef-4c49-a357-567fbe5a03ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdbc3c4-465a-473a-bef4-46e76635a7e4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06ce4a3-f8f8-4838-8b77-5d97fa164846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31affb13-8bf6-4349-90c6-0d05a353d99e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "61fd94ba-dcc8-4b6c-8dbc-f76d6a3c2913",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b3b74ff4-5f07-4bc8-94a0-301d5877c115",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f40f366-9185-455d-80e5-8cc1aa453f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c9f8e018-f0d2-43be-9620-586812eb4c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b08ed2-9077-499c-b8eb-6aa593c047de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3145e98b-c41c-45dc-80d6-678ed58d177d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405b6735-2ea4-49a0-b9b6-7a461a689132",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c293e31-ac56-4dfa-80fc-dfd2ae66625f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab7ad651-6626-4c37-a8c8-1a4a73165f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fa0c4d-3b6d-4385-a541-e4b88b58cc97",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "99543f0d-187b-4f31-8dd0-1556afae4add"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ffdcee80-8a62-4bca-95b3-cabf88ed8bf9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "18de93ec-3e4a-4cfb-8b60-f6e74da1421b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d447525c-af18-4d73-bd7a-e5bd783fa8c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4a75ca20-535c-43f0-a4d0-95511d949f0f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee1fa12a-1a3b-468a-b358-23862ece60ff",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "45c47443-9591-47cf-a276-08102a0a1cb1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7124ff7c-623d-48e6-b886-3f8011dc9c9f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61d0e2fe-c559-4567-ba5a-d046e125c00c"
            }
          }
        ]
      },
      {
        "id": "d7389372-9abe-4994-b097-181a38bd6d95",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b6aba737-4f01-4155-be15-c89937c8aef4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4bc7ddcf-c685-4675-994c-87325642dc18",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "42c8466a-317b-4b52-b4c7-2ce2dee3e1cb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a70271e-dd41-489c-a49c-331aa9c00217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3884328f-4f55-4318-9b49-1f0db9966dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3510fa-836d-4dd9-826f-9a73cf5eaaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1b5b2b5-3a9c-452b-9cb3-1869ed54a229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca00578d-649f-4e29-8596-5205305ab9cb",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc8c934-ef42-4fad-8037-adcb210646dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60217573-ce2d-47f3-8ebd-8eacd9abd824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026109b6-3030-4c26-bf0f-9f084e78a6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "864596fe-75d0-4c5b-a419-aacd0a43c7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a39d0b-8c9f-42c1-ac9f-2312bc154e54",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae4be6c-f4d7-4a11-b6f0-8a08f75c607d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9477aa0-ec87-4509-a1ad-7aadad3d518c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d9e80c-2a96-423a-ae67-e2d4180f492c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58a63e13-6cc2-41ae-a656-e5245a8f03f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a79fb7b-ed59-4ca2-bf3f-c3b9eac6eb56",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8ca944-2a5e-4b9a-aa8c-28d968d71872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00062c96-1f99-499c-8d3a-d23ed306dc23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca005a29-b4ff-4313-a617-616850ddc04c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bdef85b-8f27-401b-aa85-f807c18ef6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01d805a-2f3d-451b-962f-aeaa0266866c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b5db44b-f8d4-4f9c-8e22-3c8fa8f30657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f16fb7-19a5-4779-af76-f98bca4b3a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327da501-2a67-4dc2-ae98-52ddb5fda486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30ecbc8c-cc97-4dd0-bdbd-d771b1dc0f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb2cb91-881d-4db9-acf7-41fbacd0d5cb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d833f7b8-1d6f-4f3a-96ad-f83aa39dc19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53590e38-fd4c-41b0-9151-7c927dfa768d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6343b231-e06f-42e4-8f63-28f2e335acc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23b6cafb-85a4-4c40-b25a-271669e10cbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dafb01-ad27-46fa-9a15-bbe00a26b29a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaad8262-1e4b-4e28-aa67-310a747dac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f91a5f-ab71-4d1b-b430-f13fa257c6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b107f61b-038e-42f4-9098-61478531b9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3ce3a14-c315-4846-82d1-3e265b10d318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54626f51-b35f-4616-b236-becdfeee0bb0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983a3391-13c8-4365-817c-cddc7b179477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4229406-c6c8-4509-a946-cde180f84b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeab963-fd70-40c7-8d96-4f6367dc01c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79fff4b8-215d-4ec5-afd5-b1c1c6c86968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10303d37-138a-4649-ab59-6c60ce98a0cc",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4373d37-5813-4189-a901-da8c50e59f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae00a821-cb35-4449-9933-20fa4239a311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9cdd50-5183-40dd-833f-79f2d4e534d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73c3a948-ea61-441a-9847-82cb943f5593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df8dc0d-569f-47e7-b306-ee2217949831",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aee53d0-b7a7-4fa8-9a33-89624baf2f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6889d4eb-ab86-42d5-8661-684f0627589d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7197cc-3e48-48ca-a573-84b0bfbaf29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1d0a567-743d-4c3c-9d1f-e155b79c2713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea86a06a-98d6-49fc-a3ad-5125656170dd",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe778211-fda9-4150-b948-560847e90f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457c4d2f-4797-4921-adb8-434951824a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295aef2e-2b1e-4da9-bcf6-dd2b632b1f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "072a76ae-8977-476a-a75b-063302be29ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7530aa3-49eb-482c-8665-a82cb84b8172",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bacf7f-7d13-46ff-9892-51509b79f990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0169ce79-c8d6-4417-9a03-47182dd8efea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98959738-b7f2-4323-b0ec-939307f912ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e84e33e9-b836-486e-98a5-979873dd4f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d81242-4916-4516-ac53-0255bb7ba9a1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9230e38f-6ebb-4a5c-ad0c-43c559cb2d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b909c792-8c8e-4504-8ccd-48273cb62af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e134d7-7515-4576-ad65-b28e1c8d9aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c3f9b03-ccef-440a-9643-0133af174969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabbf0a3-0d77-488c-ab48-9d6bdfa0c7ae",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aae3bd-2169-42ed-896e-fe3815636413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a89ed1-9934-4860-9eeb-c9f16dc8e4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d2f051-575b-4fdd-826a-6f2f354d7d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21a0dc65-e9be-45f4-a154-44dd3081e079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33be595c-c39b-4558-847f-aff0ad89bf21",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d35f0d9-720c-4e9e-8c91-bf3b291e65a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ebe8a4-44f0-4078-9811-efe78e14e47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ab853a-02bf-4b8e-a53b-a46381a4cfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e183e5d1-d706-49ea-9789-b7b5f30cd11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de7b345-32d0-464f-a7e9-da3b6c77d868",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbfd12b8-f43b-4613-a04a-53953d8770f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91adfe0-ac96-4f25-8de4-234bcdfbc0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74337dcb-f868-4628-9bbb-9096f37bff5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2949a851-1a3b-4a4c-9d6b-78f3673686a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9940c14-6622-4ffe-a9e1-1bd877f6dadb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5962af-5bad-4ffd-85f0-4e71f3891ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7848fc16-6990-4e4a-ac03-30b1e5e4662e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b00cdbc-3466-4cfb-9b02-8de46df8be41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96df3f06-ae98-4633-86e9-885c90f75dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01776164-3a5a-4791-a533-3d6df0b25d00",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c2b1b6-9f39-435d-b52e-52fccef592ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5013d919-76a6-4fa5-89ea-823a61ab84dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4399819-fd27-439b-9821-9f01ecf6738d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "35759fb9-a4da-458f-aef3-76175fd2b25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24e62f5-51b7-493c-ae59-e27653267c3a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b262d936-87a4-4264-b7a9-4a1e72814231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8fc878-0bab-43a9-aa55-7c149479f79f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61df820f-728c-4236-952c-ae2f04016acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b71a4699-d2be-4711-89f6-336c7571c932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c680d18-6c5f-4bd7-8b8a-f851fc48ba89",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd834c62-dddb-4ef0-bc90-05ea1e1717e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bdf1788-7170-40ce-8ec7-7ef06ea2167e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d09933-3a0a-42a0-b297-e10ef383be15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed67aa3-03f3-427f-9185-0eef8b847d3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d7d726-2f45-4148-b575-cdd8a351cbfd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f326c0fc-07c4-4a0f-a5d7-c223ba69bca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f550e3-1f02-40a6-9ea4-2f5e1462c177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b952d954-7607-49ed-98ab-4b212783c812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2528ae1f-5f5a-463c-bd53-80c6c133f93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5d46bc-65e8-4c42-a231-ca83241346cf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0867d9-36ee-4a09-ba0e-c4d0c1a4cf7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f729300d-9956-456b-9a4d-6582ba4af920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5c044f-b471-448a-8c92-dca41b3b0ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cef1a8de-655c-4872-86a4-4fa904a58a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba35375-72f7-4d77-95a3-c1a3ab417262",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0b0869-f3e6-4344-abab-ffcfaec57348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f99517e-2782-422b-a7d2-f6c28708634e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60563ca8-7a3d-42f1-b45e-2f7c2ea8638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1609fe53-fb18-45b3-8f9a-7e77c802e1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cce3fa-a7f7-4e8e-b267-665239d0f0d7",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72defe68-57ea-451a-93f4-2d3b6cec05ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b147a2-cecf-4fd7-a1f6-8ab2220b52d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f34310c5-70c8-4ef2-b886-9df5f8d366fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2f38b0-21cb-4064-8c4a-bac420361b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff29160-ca7b-4e1f-8b02-9da39452d3f7",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec31c17-c672-48dd-9c67-729b6cc639cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7378795a-f89a-4572-8c95-5123df7ce28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbc0c5b-2367-4064-bf8f-77c80ff40c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed16c885-82cd-4bd8-bd97-7c08b796139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472c3bd3-0a30-42b1-8bdd-8dafef698fcb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39daad4b-4db8-4fe2-8a61-6bd0e5795ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e2da1e-7ba8-4bfe-9e24-a545762d7358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b75df3d-36d0-4326-9c67-1c0077c20355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "27061c7e-2a1a-4090-b894-f6c5e352d694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37c23cd-acf8-45e7-9e0c-f40535d1af59",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f911a3-a591-467c-9ce0-7e221d062c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed45e2c-b783-4aea-aa89-58754320fdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca73093-2d7a-417a-8565-bf1742c7560d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "281615c0-db43-4b8a-80c7-016ea07509e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbe2ceb-a70d-4671-8c0e-0e7bd2d46763",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa597893-0e13-4e27-a1ff-361646ce80d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b10032f-c5fc-4a4f-b858-d134be7dc497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbec3b8-27be-453f-8aef-601c4210f270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc035b8-aa5e-4897-96fa-fc07223546c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c254f1e-41d1-461c-ae01-5fca163c9e36",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7403212e-0f01-49ab-8979-375e0a4dbc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "894ba0df-5327-44b0-9d44-f781d3ad2976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a1e907-df2a-4713-a1f0-701eac0d2609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9117558e-83d6-4567-a71a-1fc555ebc3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf91e583-cbc8-472c-8022-a78cf41c028d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130b14bf-1ec1-4e7c-abf8-6f082c3349a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50db946a-b098-48b9-a6ad-a77d1475577c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a3b94af-d119-4113-b37d-4d15dc9dc225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeab5787-95c3-4bce-a5a9-c4ce2bcee1ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a710c2ae-df7b-409f-81e5-ece23e2fbd66",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b1da3b-ddfd-4743-82c0-0282d2cc2617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3ff8f2-a9db-4c97-8e39-76c3976cf57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2d5935-382c-45c6-b9fc-871d4b9d952b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb18800-2452-4e25-98ca-1fe14322dc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b2436c-59a8-487f-84d5-c3050321a0db",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46423172-fd38-4ae1-961c-c0d95712ce10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b9c1ac-8039-4d7d-b6b2-6e51fce06beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6844aed4-ffe0-442c-bf8e-cbb9292d6c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfa86cda-b838-4cb1-ad12-6eab7d138330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3900626-9dbb-4f92-a151-9e9824a6ec90",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3873de-6690-4deb-93e2-6dc8bed53849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3909c716-9233-4e17-86bf-e890799ab2bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a67ed0e-0f97-46ac-bf03-485ce977e5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bf9e47c-5ff9-4799-a72b-a144d29ec7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef36dd5f-a19d-4e41-b814-1133b0154a84",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad1638a-c105-4821-8e77-acfc932febe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba7d5bb-2d8d-4f8c-a381-a6e78f001534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b4cf86-6fb6-4eb7-a9b7-951c5b82493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ec47aa8-6a91-464e-a9f2-f69f0bd47273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f4c107-c8d3-4a5a-ac91-cf8a5b4f6ecd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae35710d-9d83-4155-ac85-2d408d281d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2caed3a-b91f-47a7-9b92-e65a0397ef13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6cf473-a62a-4039-a8ce-c59342bbef29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "665671a3-5c23-44e0-bd9a-c8f7992dde6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cd471c-1db5-49e8-a224-68f2b81ab69d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba07678-d927-4a9f-a1f7-d8920dc636cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c8204d4-2116-4b87-922e-54779d77ceb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411432c-32ce-47cd-9562-baab11edef35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "58e25ccc-ab03-42c8-93f5-cf546fe53412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604e4131-0571-4490-9de0-8d0fd949c293",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192c3aa9-d699-4ec9-82e3-3c69426913ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4939e7a-29d9-4341-a5ba-c751ccee33d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06a3c31-6347-4d1f-abc7-2b3f1a762c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "23454c57-817c-4b96-8669-80255d8a6071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b42e00-e31d-4fbc-9496-5e8159119263",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c93bd3-5d86-44d3-ac6f-004d286576aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03e688ad-4bd1-4508-99f4-5db566d5e1da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1974f27-1876-4ab0-9d84-ee8d08b3faf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61794174-a9bb-4c97-81ba-5ee1714548b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67a3217-ab13-421f-b32f-7e518a64ce78",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2252db-cfa7-46fa-9ca0-f3e9804088f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51f333d2-839d-48f5-bbfc-96a1d0602d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90072e84-03d1-49e5-8a2e-586cbe47d7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "533fc935-b955-44b7-85a3-0a00ec998c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440985d4-8550-48a2-b724-c46b39893948",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4e704c-b44c-4a5b-b541-662abe478e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb17a79-07d1-4b86-98e8-82654fc4db9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6ebdce-ab1b-42e9-b429-db7aa798a7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e7ae45a-1874-4ca9-a8a6-c184c28a15fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce63b1ad-5916-4fec-b6bf-c0cb487a9da5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d303114b-e450-40f4-9464-65b28fcd97c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff38249a-12aa-4d3f-b906-4764128dff8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49adac39-c427-43f4-bae7-f42fafc7f439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7bbca58-00ac-4c2a-8635-57f5bfea675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7421452e-fe9c-442f-958b-706e7545c4a5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae104529-f8b1-4a15-99fe-72a524e3476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af065011-86e6-4f9c-9574-c3a0e9f242ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47a492e-7768-4a8c-80bc-85c97637809b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "67fd2817-8615-42b6-90d7-350d7a53c7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e431eba3-ad16-4446-b18b-2ceebc7af8df",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a34685f5-e7ae-4770-84c9-26632bb3e189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "009a8e55-a1c4-4999-a3f9-213c1c500845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986d0716-8268-4acc-9322-2d840cf5306d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "04dba747-b97f-4357-8680-ccbbcc563016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd79ec4-5abd-4f69-82f4-7c8730fdf1ba",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82893341-1607-427a-b5c2-82a0667ecd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fc16db-11c6-4a5f-9d06-6fb9be714b99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c93c99-77d1-44b2-bd3f-8404f4b458ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d04067e-437c-475a-89b2-3d7879abc0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62f3969-3f22-4b95-a965-d28bb4fa4e86",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed5413-cf97-4da2-8c60-6ca0d559b245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd559416-a083-4bcf-825d-6306b885ad1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126973b4-9dfb-4fde-9ef9-5d8cdf6f0502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "32d9189a-2e2c-4bdf-8400-0deed27a0772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f5896e-52a2-4151-920d-8d98868862c1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8fe43c-6660-404c-81ef-c474581ed46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1a65e8-45db-4c8c-b10f-1b948d1ff3cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c92306-617a-449a-aefb-3d63633e0120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8f2ad0f-2457-4a6c-99bb-24654e614e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5559e9-d7c5-4d1c-a284-da567909a924",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab1c606-a81f-4b69-a52c-f8a3a0c6bda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69859651-999b-45f8-86a0-d09fe61c1144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa885ec-d7a7-4e3e-86c1-78165751226a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c877336b-2219-4f15-9d39-0f2748785cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6850bb5-01b6-4fb3-a9b0-dd7939b5b2b2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f71e943-e490-41bd-aa93-33655374d105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ddb4ab9-573e-42ee-9486-e343a489025b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4bd288-30df-48eb-be06-bcdcb9c15d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a03fcaf-2c0c-4b99-ac56-a9c800aa8531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba92b966-35e1-456b-8371-2a00e1889d1f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f050711c-38cf-433b-96bd-333422f4370c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10dd564-ca23-40bf-bbd0-55db2a496dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e1c2d8-5d75-48e7-8239-90bb5906a83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cfee2e53-0f69-4bba-bab5-e464247e0e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64faef85-ad80-46d0-81d8-04ccafbd0ed6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1631dc67-61ee-4598-955a-8ef1bddc9d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97c5d07-63d9-4933-a715-26c76e77ef8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d15c5de-c99e-4e45-b468-4bd855e4b726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26a9d4f3-41b9-4aa5-846c-9fb41d0a31d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d653f29-c99a-4ad9-baaa-304fac35c741",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795c7426-b0be-4f04-b5c3-1b0a4afbf160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc9c3ca-9e93-4bfb-bb28-8bd15a49487e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ff4d7d-95d2-4919-b760-965d7b2bd2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8827854d-2022-4d15-abff-38f25ea00cec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c572dfaf-2344-4cde-b9c5-6ca502acf60d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6513dbf5-a867-4661-957b-3e1f85884a07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd7e5a5-a79c-448d-8630-fad0c751fb73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f571d70-d50d-4a7f-8d26-0122890fa36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "779071e0-6f44-4ec5-904d-1c283d401e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cdb608-5f2d-43d9-b121-4f3fbb08df59",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71d7e1a-6a48-44d1-b915-c4cdfb721409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a758222f-2845-4c19-aa25-ef54f15f61c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41614a45-ef44-48ce-a916-670b08a4981b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44dd75f1-7588-4b2a-a9d0-7ea2e6fcdfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2414ea20-74c6-46c3-8cfa-a664db8a1859",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cc89fc-0b24-4290-b08a-13d0004b0a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce764ce9-e3b8-40ca-8036-19fa3d6a15f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d59e521-53ec-417e-85bf-e18307794b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f65f4588-975e-44ff-9a7c-22aec7dd5810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b020f5-cb89-47bc-ae51-afbd592e2823",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc1659-1cb7-4857-8be3-744dfe146f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50ea1a1-d65b-4352-8f53-325298b9b5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81518d2-9d8f-47f4-892b-c3efcd2bbdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59910fdd-a19c-435d-bb0c-44255173cfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ede28ce-3824-43df-8ee1-3a8929b5e93f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720ce4d8-9d4a-4724-bc71-b613a43d1adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8185762-80c9-412d-a1d4-22d22f2975a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7aa360f-03e3-4d4c-a19d-d1f6e83a498d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b184d45b-2778-423d-8628-1f000ffd64c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da4258e-b565-4676-8da6-4fafac9c13c6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1429bdce-99a7-47fe-87c8-fc8d3265fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c1c3954-87c0-4815-8992-2c125ccedd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80c013c-9d4d-45ed-9401-4407c4f071d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "91bec1a6-99f3-435e-9253-7bc6475e615b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6d4cd6-6de4-4555-90a1-36bfc38965c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618ef585-3456-4177-b5ee-ca636770b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd93848d-6001-4137-819d-a886044abb45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c60071-0def-431f-9cbf-ff2faaf4fc59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60a58f72-b025-4637-9638-4fe4c9a89ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f744675-0b70-4100-a780-e19edc3455d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb42fec-b935-4c0b-a2de-557e2295c8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e007000c-bb21-49fc-81c6-04b22491e6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783bfef5-f788-4b39-b870-e05d4774e5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f81d004e-a939-4263-8ebe-2445a1fc1177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafc0f51-3c38-4561-9e41-bcc8322836f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae064a5-1d0f-4904-b6c2-a6e7cf3cd396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f6a577-c19a-4108-ae36-c8e711143df4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635d5103-a607-4097-b4f2-a69391667fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8cabd15f-d948-42ef-8411-4a1f3b2d273b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3188dfad-9cab-4ab3-a524-52980f73ba2a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "789c64a3-d5fa-4aa6-80b3-6350df5b57ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603666bd-ea52-4278-b556-19b28576b5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc39ecfd-1efa-4315-8b74-b05476d29dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b0dba20-63b4-45f3-9a5c-63c4a3d78a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25584f9b-6768-4de7-b879-974ce5a204ba",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2faa65bc-3fb0-4173-9c89-2cee1608d339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a42ad36-cfb5-49a1-865a-35e982433ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca463760-9de3-49dd-b327-707436c51f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da78485-a2d8-4b4c-9c38-274b4f7cc8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66c5b6a-1c35-44d4-bc37-b1e78c931fec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4152e239-e557-4ac8-8684-482491875c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a0b1c94-aba5-44e9-9ebf-f3d14a51d090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1921982a-efbb-4c55-bcdf-d4971de9e739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a7d089-baaa-41c6-8ebc-6ebb6cfcda0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27883eb9-3079-4628-a937-ce3804cd39ca",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9220a436-7aea-464f-a50c-c76910fcfa18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdba920e-e158-44c7-a9f3-8721027bedb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7e4cf2-0097-4662-8b10-025f2a0b386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7ee040-cacd-46ef-a04c-913d9953c384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23691e2-f8ff-446b-b948-65a98bdb5704",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29bbdb8-4e00-463f-af9d-6bfc61d8efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da23e0bd-b3c6-4f44-a8f6-1631463ac083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e898cc-ed25-4af5-ac5a-afb485b462ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeddf99b-f6ca-4fff-836d-34e1021e11b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd69bd4-6d9f-4ecf-9a12-5794199a65a1",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5bb1dd-c769-404b-a26d-a432e65a0a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae62c2b-7bc2-423c-b373-86e91208d1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4c0a1e-c20e-41dd-b70b-4298f81a398e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12013dd-a26b-4b95-8232-e17dd76d67da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137209e3-a54f-4a64-bcf0-c67f77a31f40",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58016623-628c-4fd2-937f-03d62dd33c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60dd480-b4f7-4d22-926f-996ba60f1d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a12c0c-bc61-4f36-b2d7-2064bb479bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d965d9be-a04c-420c-b6d7-ef39ba1cba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f4cdef0-b566-41ca-a4d6-0779b8232c35",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b61e60d-3cc8-4704-a2bc-e63b577fd9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "158c4fe7-7f27-4e7e-a8f3-706008b6e6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208c9755-9356-471d-b0dd-4193cfea422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1da8df-d309-401b-8f9e-4deab75881f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4920c5ac-429b-4746-8d45-a77d43628b90",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e025284-68ec-4619-be54-cd663405251b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752d867f-52d3-447c-b4ef-3e0aa2864828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce0830e-e387-4a94-b6f1-382c4f3e5b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7e3d50-b026-4611-a3ad-ecb02eeee3b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2b62ee-0e16-4211-b807-43e550beabcb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b84488-4b96-4012-8f4d-f029a71fa15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff976b7-155d-4e3d-9526-ee312dc44363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04039c9c-b19c-4df7-acbd-3b29e972ce27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd38295f-ae69-4bd6-858c-e6f854fbb9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbf90e5-da70-4032-a7bd-57a55b94a14e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3acd8f57-ea65-4946-a31d-4c2a4f2b0d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a784f82-7c95-4781-9ff1-200ab39fac31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ceeab61-3664-437d-821a-44f5284c9ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0878a38c-bfe4-4075-a337-563e2472e45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7245dbe6-5678-4db0-9a64-65b0e0710f49",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e358f9c7-55a7-49b3-8fe5-8eecf604cdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef7fa8ea-1f74-4dc6-9d1a-e86aa78cc3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e82a0e7-0a52-49f0-a546-a605479bacd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "758615d3-734a-4fca-b640-7e8f6c9c1bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02500874-8969-4235-89df-3f6258247361",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a93f2b-04bc-4c13-881f-b8759b6989ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1671c059-39ad-4bbc-a6dc-c09fbe518d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e5dc09-4d8f-4994-8c9f-12e5c4a46a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0135482e-c4ad-4e4f-a20f-89e05b2838aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12764e3-a88e-414f-b04b-9bc09d8b9503",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53877308-15a4-403e-b166-06ffcec8c786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5d7ac1-ed63-4fa5-90d7-61ce275d6406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac32b45-3ee1-4100-8b90-6cde26135b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "406f8502-7950-4e70-85bf-fc30b95c9048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12b72d0-9c27-462b-b849-3eecff0302d0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc021ef7-23dd-4831-9c8d-ab79c9f81b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b06a7b-ac78-40d7-88bb-0599c98c3000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7735a223-4c47-4321-a162-14568904cedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3979cb45-be12-4380-a45e-03bf1cfb9eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180927ea-e479-44a9-bafd-32e568b2c97c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739ff970-9c99-48fa-bdb2-b41db5856353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182b2001-cb0a-4c14-b934-7ffd540b002a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b72364-8fc2-4674-95e0-e6ec4e132326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03079dad-98f7-4775-88db-2c64b85f97b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44c797b8-bf2e-4c89-b337-2373b0ad410c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7bf5dff-9d19-4192-8ca7-d6a68054acc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e762987-4dcc-4004-a46d-bb2a3cbf3c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411315a5-c9b4-43ad-aa83-85f7f1fde26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb4c0d6-fd06-4946-a0e5-306b035dafcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc4bec5-1c99-4e11-81e8-4f75b8923229",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f941c7eb-3eb0-476a-8593-a84caddd9375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a289ccd7-79e7-46bd-81b9-4b9d4671ae4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e762603-af3c-4c56-9397-ad9d6b5be54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdea095-dc93-47d0-b11c-de5c68d83413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694df4f4-6b22-43d9-b12a-fec6b601dd32",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e450d0-055e-4a22-babd-f8d5132f0024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b748cb4a-3ed6-43cd-8b6f-8b2b6023a4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a904b0-ae46-40b6-b292-beb21ee5f9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c92d8d-de30-4793-9403-34dc6e62c537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892a76e9-e0fa-496b-9a3b-55ff9d1f9c98",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dbcd40-7a1b-409b-9d4c-5c5752d1a621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef397ba2-4d7f-4d99-97b0-55c875d0fc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a44664a-4e15-4eb8-8952-ba18a8f571aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b858570-3d3e-49c2-a266-526e07e3363e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86be2055-1a78-48d8-858f-828d1edc2d33",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2aa18f-4513-43c5-86b3-1baea27f6eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d34c824-e84c-4420-9174-57500a7d532f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e275d7-aca0-44fa-95ea-de92f35347cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a83f9261-6d07-45b9-aa27-5dfd228187e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fa0bac-f35c-4d3c-82e8-bd7e231e60c6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c208395d-e174-4999-82bf-b6dbf933e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5faf8c7b-1fba-4085-823e-35c6c7cac18b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f855c11d-43c8-4920-8bd4-ed7d578b1e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e80213c9-0eab-407e-a196-bb208ca9650f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4d928c-600e-4a1f-92a4-58c836039f01",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d90d1a-2e3d-4612-b389-b001ac8f6b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f71bd5f1-fcd7-4f71-b17b-14dde988ab99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81ac26d-52a3-414d-94b9-0746d672ca31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d29a9575-53cd-4c83-9b6e-20d63f7e42e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d031ae-801f-4595-aaee-ec6c1e653cb4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8352740-1223-406e-ac78-dca4f8b82e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8284f1a-3ceb-401d-b1e4-fcc8e6caf903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10d49a4-03aa-4ce6-8c67-5afd8bff8339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50fbc31f-7843-4c86-8156-4d28f916c8f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c01ce8-7bd6-454c-b4e3-ddf7142f0ed5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f0049b-304f-4236-ab50-a0a7480bf44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcad10ba-77f4-40bf-9dec-48a1dc02686c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4e5451-fcf6-46b1-b306-a8571307519e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3dfcd4e3-c8ec-4bff-8b64-17b1161d62d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a3fe68-466e-4027-9a0d-6cf4e361e009",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d93144-2dd3-4830-bd0d-9e4a26431b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f112fb9c-df81-41b7-a8f6-4fca6b0f06f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f3ea9b-cbbb-43ce-8dc9-411b0cc7d929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb76d4b2-6b1e-4396-b67e-9fe58345be00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73625425-5702-4a6d-b1e2-0c42a36e266c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96195531-a730-43fd-8bb6-5770c0ad94c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc230a99-1ab6-413e-80ce-2059de3f6efa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "330f4923-832e-4868-a29f-96d33320d65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a111649-912a-406a-8a69-6ca7a81026c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1d4228-1ed4-402a-a18d-e12dd0efb558",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252350cf-e2fa-49ad-8cbf-03842c9fd201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c40df2-bdb6-4e80-854f-ca2657bba39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02597924-97a8-47f1-8f14-490d22de2ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2efb01a0-3d55-41e9-9449-2a2d5411cf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080c807d-2e16-4343-9d07-9839016b1fc0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833bbd04-a239-46d2-a80c-311b455a88ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ae4ddd-ee10-48a3-b2bb-c51792b87654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d023211-88df-4084-bd44-cab0f56163b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "17ac89c7-bab1-4dd0-b1e3-16d308006d6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47f8188-0a4a-4316-bbb1-a133c66c7202",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be0abfd-9857-4caa-9a89-57b8dcb9ec11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55cf3ee-0d26-4a6a-8fca-714c66088a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84d2510-90f5-4104-a7e4-c69bbbec3254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "715cbcdb-d1cd-4aed-abc7-75874ed57be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88cf5da-3246-41de-b6c9-877102c41a8a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3055527-901b-4cdc-b4fa-373a1290de61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4caac092-dc31-4ab6-ae64-cf6c1cb31009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d676205-b8e0-4bac-a214-e958d88e5ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "79d51077-d94c-44e4-bd6e-a18f3c39feca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be15c1b-5ead-431a-b1a4-c23e52f29451",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9eb1fd-460c-4a5e-a3cd-6f9917e91261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "85402363-21a9-4007-aebc-26c42a4a7372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d8ce07-54a1-4db0-a1a8-78b96006f490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "71666cf3-bc5e-4113-bb7e-60a44478d545"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d946c444-9647-4ee9-813c-d1ecab67f212",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eccc808c-6016-4562-ba0b-89fe311febcd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1d571e-c6e1-4ca6-b67d-53e15f86d1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a983a57-6f27-4f36-bfef-78bd076c913a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5642a4-3f59-494f-a174-cd544725808c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "fc6cbc7a-2985-4bf3-acf2-7a6d1c787b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a233f05-61af-4f16-a65e-3912a9408276",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a74d88-0891-43eb-bc31-eaf98703da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "167e6b3b-ef54-43f5-ad12-53ee52199beb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44341567-906b-4aa4-b17f-f1fce8ee6cca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d22818e6-bbbc-4fc2-9cae-9b1563e569fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83a0063a-1c3c-4df0-b059-c3d152127d9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2512881e-9a89-4284-82a0-674e5f3a54be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb99e6a-dc2f-4ce2-a3d8-7e4172d5aa77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f5a77a90-3297-4f44-816f-d14829958d12"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fca8bb16-8ec3-43f5-b5f3-eb7b62317804",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0937104-ff18-48f5-ae25-46ffd9531b5b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2b7f38a6-3d93-4023-8f02-ea8e8e6789a3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dede804e-2df5-42e0-a460-ccc12f46f346"
                }
              }
            ]
          },
          {
            "id": "dcdcef2c-5dfe-4b67-a4ed-34807be919d3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "321a395b-11f9-45df-8809-25749c6fa61c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb7877c1-cc70-4976-ba17-ca922ea377cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3504aed8-132a-4119-b6ce-55fe6f414cc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4864e5a0-4467-498a-8e6b-a6175d52cc85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d2bf1e6e-fc7a-436c-aa96-0082998c6d4f"
                    }
                  }
                ]
              },
              {
                "id": "e8d6745a-51ec-4025-9fa4-702277198c5c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0fb5a77-8cf9-4a54-a9f4-b35f44d764a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "995229b6-6161-46e7-8d0e-acab8a61a978"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b3d3604-2d7b-4600-86f7-c0c6068a6498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "63305213-322b-48a4-a7fd-261284c7a465"
                    }
                  }
                ]
              },
              {
                "id": "dc0a0a9d-4369-4338-b078-47a5e8158f26",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b644bac5-38d4-4c06-b112-48fe5a363cc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ba02f43-9aed-4f4c-80ee-28005b43a3d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15007f93-9d5e-4198-b46b-0d272460e291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "70a5f91e-e3c6-4979-8de6-18ff29da37bc"
                    }
                  }
                ]
              },
              {
                "id": "d1518c15-198d-4d45-8fc3-2f8984cb53fb",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f58cf44c-bfd2-44ad-9cc5-d667f9c735a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "669787b3-ef4c-4c19-92df-b0825612cdbd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc646499-bb76-448e-9ed0-0c7e16b5a483",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0bc7ebc3-d0b4-4b0c-8035-76e8af0388a6"
                    }
                  }
                ]
              },
              {
                "id": "f0ae166a-eed8-4426-b3cb-53427273f320",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08d57f41-440d-4902-9ea9-7c2b6404fc81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e3cbcbb-4129-4a8c-a740-d92f13502908"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afa7c25d-c3fa-498c-a0d3-8ced91b904b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "708c590d-3cef-428d-976c-d7f10c340d3a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95eb34e0-c4e6-4810-9d14-604e66e41b95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "170cbac4-bf50-4559-8449-f0a2ec74f89c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6b3b4b5-9de4-468f-841b-7bba15889853",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5270726d-0fe2-49a3-acf3-39ae78b24699"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0118fb8-e62d-458c-bdfe-0c2a1cf930a4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d45887c1-06f1-4815-903b-27a57a6178ae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85fd8ddd-5be9-42b7-ad0d-d1a67f997b35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "265118c3-dae2-45f0-af2b-3146cf5ee77a"
            }
          }
        ]
      },
      {
        "id": "7eff4fa8-43e6-4586-b585-747ed964df49",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1afc0737-1a01-4aeb-9743-b2bcf38465cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "227fc092-0f11-4b2c-a5c3-ab3dcb20fe6b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f61b50a-3610-4332-a873-bbc1cafd94c3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030a0611-0437-4613-9a66-4aed8d562cf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd084f3-5621-41fc-896d-144c842bbc5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b0792-abc9-46f8-972a-ee7489867f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc33de54-9697-4973-85a9-4bb0a3834aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afbb663-3b8b-4fe0-9a78-d3541b71476b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70551572-5105-4049-be3b-40e26b62f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61f71e7-fe15-4b30-8fd6-0aa9ea64645b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda89169-7202-4215-be28-792022462458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "15cad001-4ddc-40bb-959f-f8f618c4fe61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ab981a-9f67-4261-9e9f-0d7d901060c9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22a721b-099b-4f65-8195-2b3c58f9567f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4b28789-7fa6-4ecb-8c2c-c354852dccf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7a9700-dd45-4f01-988d-2c3a9e19e3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bca0077-201a-47f5-98d1-a7859049f23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4485c29b-efe3-44a7-a334-f99bc6294f48",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ea1f04-40de-4457-84bd-659c900c81b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd9ceef-11a2-40f3-9793-d0fb9597c80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "774d199d-daa9-4bd0-939b-3ad0b1285ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcbfd441-156e-44e5-bd27-b67f953a099f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79339cb4-5b5a-45dd-b4e0-858838cc5a97",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902c4455-ba6c-4c0c-a799-c1e6a5de7e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c7efd69-e40a-42ce-9c20-d2585da469f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08319c40-43eb-4134-ad32-9dbadd5c40a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e10f9859-f0d3-4ea2-ab2e-17b570f11507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61315b07-ee96-469c-84de-e3620f010519",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7148101-3d4c-490a-b01a-fe44694a25a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada6ffe6-4ad8-4c21-b304-2b94c57259fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ce4538-0a03-4659-9056-4630965e09c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3681bfc-06c3-460a-88ef-9b0921089aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333b6850-88ee-4dba-a9ce-15603ae6bfd8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c35cfd-d2a7-4bd0-946f-1b2a4a6b98c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c1441f-ecf8-4040-a58c-bc446f192631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c55175-9d0f-4c3a-b0d7-cd00cfc73858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf799412-c22f-4cf9-8e8f-f4b455a36a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbce3d79-34f9-49e7-a6e6-0147eb41f1bf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac929f0-ebe6-4999-8327-5903aa3986ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1a57a6-91c1-40e9-b8bd-92bacc48f9c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ecea04-7ba7-4586-a6da-65fd914b2dfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd55dd51-10f7-4e3d-8bc8-564956c4a2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da4eea3-5dd2-45ab-ba7c-dae0d4013f87",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e914519-3114-403c-b4c2-ae1247c511f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba865c7-32dd-4ce3-9a4f-bd8fdc403dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb19ca3b-4f83-4384-b139-cbaffebaf137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3632f642-a863-4362-819b-c90915b42fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c8d2d5e-38f0-4e5b-8e32-af55164664e0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d44fc85-1d0b-4442-89b9-896a55582ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e101e337-a751-4938-852e-3f226c66a418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6b7dd0-5fc3-444c-975e-f7327144343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eb01e3f-dc7e-46d9-b377-755847a3f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99764ebf-1357-45a3-92c1-3f1c7a19fe78",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674138c3-a3e8-43d3-affe-91b2d4abf4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a1d22d6-1819-4de3-97d3-32d4d37f04f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff31b27-f7c2-450f-89d8-6d198468587d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "7564fd45-6d95-4bca-acfe-3072a77c8c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79622296-28d9-486c-a752-ce7af12111f4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60708e5a-dfdf-4984-88c1-a06b590ff254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fd5656-405e-43e5-8f81-c333bb56e0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc00c0bd-5db8-41c6-8a21-b5fc92b54dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd26f10-84ef-41c9-b84a-b0345232605b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5b5beb-dd25-4256-8e67-94c41f3585c6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7994e50-5f6e-4172-b125-d034b05beed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe7120c-8ccc-438c-beb7-6bed9efe5d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39580349-2a68-4aba-9a07-93879db4be7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3bdc93-a548-4292-a50a-d1653b4f2274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c73903c8-3055-4461-819b-f76a603b663e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85aa6c49-743b-44a3-91c0-a8bb91845d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd23809c-8710-4311-9e82-4a3c22795b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbec83ce-5b45-464b-8657-b5fe295a1749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf284b66-5992-4e14-a1b9-747d465de49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1e00f49-c892-4f12-a9ae-ea1178e30715",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d2ab4d-ff21-450d-aa30-0114745e6352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45dea5b9-34fa-435f-931c-d4a3541d8f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e56156d2-00dc-4943-ac89-c8800e492ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "52543cee-4b1b-490a-8112-54a9c023b76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b9f875-5efe-48dc-b14f-7c991c04ddf1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e433598-c478-43fd-b637-709ce38a1d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107a0c97-b974-476c-a59a-cc244c455cc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7339129e-7fc1-43f0-8446-97ad9b1040fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7cb3f7c-6c0c-419c-867c-6761f63c2de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92dd5f2e-8bff-4c27-8588-d0d86b686ae6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562ff16b-eea9-4232-8475-45bdf1b7d47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067da15a-9ca6-45b9-9e65-5122538d481a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628a054c-df22-4a06-9f64-1ca4531c1b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d291e2-62e6-47d6-82e9-a008ba0fe973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "973aec8c-ff56-486a-b5f7-344be172ed7d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f126f9f-d46b-42e6-88bd-2a4d923036e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a2b44b-2798-4e6a-b702-6a787fefd062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8b6b4c-6e39-478c-8992-feb0300bcdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a03d027-9c37-43ef-bc7f-547a1b0e0cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad511556-f922-4545-a0c2-1dbbed164c49",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac1a478-a31b-4f73-b281-6d8873a91eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a0ec8db-a40e-4e1d-a27c-b6768af4ca7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d670993e-e3b6-4da4-97f5-4f252d7093dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7779c02f-ce26-4e97-abc0-402dc1b7cf1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30b3603-a622-40bf-8f80-957f679e28f5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf4540-b101-48e0-80d0-448f61763075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60487b93-6e6a-4a9e-9293-cc7a27f169e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51aae7f-e223-4c56-87ba-c2baf3d4e37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65225487-878f-43b2-8049-650708ddd951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0baf29-529e-443e-9dd2-fed18db55b64",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279e0dd8-a648-4fad-9e09-fcb2d14e3888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e912130-0463-4dc9-a27c-37709f39b89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0d7c7a-1eb7-4f8f-ab53-0bbd94929c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4248cbde-97f6-4e3b-8999-712095b8146d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5b9ce7-5b77-4e02-be9f-4c03e73a6bfa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fc941f-4554-4ed6-abbc-316a044d1e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "656e213c-8730-4d4f-a601-d0cc56aa67bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95f0949-cd9b-4f1b-ba2c-17ec1017ae40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ecb73ce-76a2-4a95-bf81-ac2039ca9fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c306d6-6f52-47b0-a504-de54bae890d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8371c335-752e-4782-abb7-34de6eb66f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d03c8b7d-9b04-4dab-bb1d-b047d2f0f0d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cb507a-24f0-4e71-85d2-3c170acbc82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c89a940-346b-49cc-ad79-bae67c0ba8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65175a2b-b12f-4f6f-ba0a-63b0e6703dae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec56911-fbb2-467e-9726-d64f3bd6f819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bebd37a-e2e9-4141-9466-28a578e3b36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952c760c-7bb9-47ad-99cb-9d5ae9caa547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fca17b6a-cdbd-461b-adfb-5f7e31b5b0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea3b300-81f1-4dac-8273-32e19da931d0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a9d66a-1de2-43ad-a5c8-09d05eeff430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e13a78c-b651-44bd-a262-5ff86392077f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c070e3-4cee-4c6a-9b79-5efce46d741f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "464cc212-ddc4-4bce-9beb-4e97da34d70c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea459b9-517b-4bec-96f8-e0d5c08f1858",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d473f4-d84a-4fdf-bc10-5d3e41561f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e0da9b-a130-4e97-9e93-2d92152c8fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5473df6f-1adb-4ce4-b8f4-b8f79b56e528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0efd358a-0512-442a-ae39-7f78d57f3a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9aa7c4-0e37-47f2-8e06-fe9581496499",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6212d35-7e44-4f94-ba05-fcb84dc5d155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30c6e674-8c08-4b26-bce3-b4fadc38b592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85055b9-9b60-400a-b023-714f1cc0562f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b22f99a6-4947-43be-8e29-e65b41267939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1eaac9-e01e-436a-8b9a-97e5b29fc2e2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef67e9e4-c331-43ad-a892-c5bb192fd711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f38af03-8aa1-442a-8d52-212abeeadd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f01363-aaaa-4c20-9d76-ce5fde964891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "745dfe5e-9d6c-45e1-a427-2064850acc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8912c6-ac48-48cb-a06f-cb30f2b7ae40",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd0046a-636f-4a98-9a83-58d15c36cdad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332ebeea-0bfd-4bb1-92c4-f9669a81c222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0228bcde-7c17-4fe0-888d-71e2e87bdbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f6eba44-0a8a-4c20-853f-a37e412a697e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65400014-5a9c-40bb-b3b8-44c2efed1480",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2767bff7-68a4-4193-879b-47b822530b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e72a88b-b744-4d7f-aa46-3359b8645a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ddb4a6-9ec4-4ce7-9470-e1c5f5b44da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b35bf223-cadb-436a-be18-c2f760e2c209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044afe69-7d2a-47c6-b7fe-3510d894a1ec",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08255f6-8479-42d3-844a-38ed7ec2d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42693fe8-4251-44e2-afc6-9951f3187552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13b4e81-94ef-4a16-aca5-9cb8fa038980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa4227c-9522-45a4-b595-f7ba57fbea3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e72419-50d4-41f9-a986-b1ea4abff62d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89aa640-10bf-4d8f-806f-c5243d230667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e38ce9-3905-43ab-9988-56bdd8875789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f2bbe-c3f6-4d1e-9978-59fc11765819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7f6be0-f73d-45b1-ae28-6e35872c99b1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2cb1f7e0-272a-4ef0-9370-d1b781c69b84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd0b3d0f-8198-4696-acc9-063006a95ccb",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32673708-64f5-4950-aec7-68cb3e5a2965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca2d5be6-b95d-4900-b89d-5b0f459c7425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c133833-6356-41c3-ab41-abcc10922afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a59de7a7-488c-46cc-93ca-bf9761e1abc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382e9750-05b9-4b6a-aaa2-6c02756511d0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f1dfcb-b481-4705-8b33-b18a49d38e47",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "dfed68df-47cc-4d23-9029-d00e52411d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f141b2a6-d848-4b65-8b22-c4012aa4b8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8737406d-99bf-4eb7-a9d4-74c25e2d1d52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b118b52e-98ef-4b71-a359-06910f003457",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "923902e1-aeb5-42b7-b01e-1a6a4a886621"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ead8d767-5b79-46ef-85bc-2d661165e3dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "028821da-452c-4939-8e68-a810ef4ad88e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "065c0434-5ef6-49df-a802-9f06692d0a17",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13a5f502-7599-4edc-bb38-bcdbaa4ea345"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33f51e5f-9ec1-4f59-9a13-7a59e55a6524",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c9fd747-9385-4ef3-86bc-3d633fe79af6"
            }
          }
        ]
      },
      {
        "id": "36980278-96d0-42cd-855e-bd13241db1bd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e828d8b7-424b-4ff9-8718-e04ec63ed7e2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "895b6cbc-9380-42ba-9820-9c1cb0d7e0c8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e6c76860-d93e-48ab-a241-26087231e1eb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b9cc37-9643-47be-9eeb-0ad8ca9bb09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae7ba51-bf4a-4b4e-b7d1-db4c8bae06b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a432df3e-e91b-4e9a-88c7-a7dab67e4dae",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af96957-8b71-4f54-99d7-714c2ca05ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8deebd1b-376c-48c7-80f1-429689e69041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7cab3f-6771-45d6-b63d-4be92ef745e5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dbec86-b255-4d36-a726-e924835b52d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3c22a0-758a-4ef1-8bbb-c3d04f21739d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad66e36d-e231-4a54-8209-d6dbf16f0ec1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ea36a0-d04c-4485-b53f-5b26a66fa9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c382ee9c-f2c3-44f9-b732-b35e6764494c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fae96b4-9632-4500-9cd9-dd006fec834e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092ac386-6958-4f64-b50b-e7d768cb0223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58de0eee-0a5a-4200-8a25-2ba8498cf9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522148e4-32fe-4c8d-8d3d-98999f549ab5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11130df5-3b2b-4f26-addf-cc1b97051078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81fdb7b7-1ec1-4d92-bb05-685ee9d1b4d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb15bfa-c2ee-47c9-8a05-a75f8e036ffe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a425b543-7189-4564-9173-21d1f47a483f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cb4fbd-0b57-4282-a533-778307b02237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c4811e-77d8-4e6a-9ddc-592966b89690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bccf22-d6cc-4c36-9725-feb6cde69554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6196a46-e303-4a26-8af0-8c03720ee238",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78bdb9a1-6f18-4d44-aa83-e49abec583a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8739bbf1-aaa3-422a-963a-94d9886488f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dee935-d3a9-4e37-b760-5a4876269aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5654fca9-0efb-48a3-acbf-f51c7728f067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f8ed833-5257-4da6-b582-af0f6fd3485a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd476fc-7dab-48a3-a0f1-ef78222c49c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46367acb-2487-4670-ad6e-13f05ee44243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d309042-af93-4c88-82bd-54884faaa28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a159b91-5e58-45e8-8742-af127a997ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2badf83-4846-49c4-bc01-691405c4e30b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "421c5089-7b1a-4581-9e66-80fe109d6f6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3466ea4-c9f5-4147-afdf-13ba1ef05f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6d7e3d-c302-4280-8411-d64ff8c4c422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7fa2b7-3535-420b-acce-4a0222db8865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655c668c-92c7-45d2-89dc-928ab3950179",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ef8b50-8ce6-49aa-bd72-9b1deb32bdf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eded36c-0693-4541-b1bd-79141896bd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a88349f-88a1-4439-905a-e61c75ea365d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f0b06f6-46f6-4c08-b4c7-5f9704711dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b008de1d-61d9-414d-88a6-d3d98fb70962",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e958444b-b47f-459b-86c3-90941e35df5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad56ec84-dea5-4f1f-8001-646ce64204a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ae1c76-08f3-46e5-a116-e43380f87e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df3a1ff-1ec9-40c6-87ae-34a739c79853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff74cb14-7b2e-4325-8a6f-88d184c4f5ff",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7928a3da-f52c-41ef-971b-943fab4c787f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc0c843d-257a-4f67-bae2-495e3a3b9248"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42436c0f-7c76-4262-8a4a-8f1929d9e410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f621113b-529b-41dd-8a7b-b6f87b7f969f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae2eacb-a2a7-467e-9d65-87299f218e0d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a71b47-1984-4b8e-83d8-e8be31533f85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fd8ca88-ee6e-493a-b23a-cbe5997c8493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2de4b24-f23c-4973-93f4-72ed0d36855a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02a758c3-a7c4-4766-981b-587f09c13024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb5ac67-6ff1-48ed-828f-af2602cbfadf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e3b8cd-89bb-440f-bfbb-5fe439fdc2e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86baba99-2b60-4bbf-a472-db54a9b0b9ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca0b4f78-a72a-42e7-b99b-46d162fcf5e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584146d7-b32c-4691-9cc4-f51a510e1d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc29d0d5-63ba-4897-8937-bcfcff25d972",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3c1ca1-a587-4896-be43-7d01a757991e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a7256c-5cb4-4569-aef8-fdef55a584fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b2cafc-7123-4997-98fb-14327259e8f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34932c4b-c2fd-4cee-b37d-3afbc04767c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9245d059-9ad0-46d1-9995-6cc2a24ceb66",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ec6474-c874-4527-843f-7da954d7f821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41399cd-8010-4b13-95f1-1d4e966d5249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f7dcb1-86b1-421a-b6d8-84baaa465c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3a79f95-784d-43c9-bf92-8d3c1e047738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40489778-4341-4531-ad91-bc73abc2ded8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f7ad36-5842-4fdd-910f-3d0fc0bf0cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2636e7fe-a3f6-408d-b19c-594e77de8299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ec7e87-46f4-444e-9ddc-7733e0c173b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712eec2d-a4d8-4939-8347-0266c335286a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b867af9-d90b-40b1-87c7-128294b59e26",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aad4163-30c4-4e9c-846b-97432bd7a3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36073e57-e512-4c68-8761-b8f1b78e1096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2dbcae-b6ea-4908-a998-3cd3d708a2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7ffd6e-25e6-494c-9c85-f9340e9894a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c7a995-64c8-41b5-bd97-8685dee26093",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702ed941-d3a8-4529-a28c-a14c9a0be4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77eaf17-7385-42e8-a1b3-f89a6af5f414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c69d81-be27-4aa3-b989-4056151b8a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ee6efb-bfb7-43f2-a9ce-9d9b5cf8990c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149b9d13-59ef-432c-88b6-2ad19b9768d1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53df732f-0556-4039-8b4e-0821e7c89a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4a3ccd-cb40-42c6-876c-416d5f64b905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d14265-47c2-43ce-9d15-11a2bd687bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee86f6dd-8e9b-4fa0-8caf-5f261346b603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b33634a-5bb1-4f87-a1de-1ee80019f209",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2c3ccc-5e5a-4e27-8d60-5fb8f4bb6265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852e3677-240b-4009-83be-8fa16f375575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b72bea2-76fc-4657-a5ce-3bddfb633a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2a6983a-36ee-4004-9652-cdeced28d717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b5d675e-2ca2-4ebb-bf9b-21ecc1b45836",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ced9ba5-58ad-4602-90cb-cffbaa812abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38efb73c-4ebb-46ad-9922-eec8c3ca60eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7a0bac-03b3-4059-a18d-db56cddd16b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90189d95-6c31-4db4-bbe8-25ccd0d977dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b704a895-0e60-4ea5-a0e6-406082a379d9",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c11e8e-d6d8-4295-aa3a-47763f664f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d16bd9-f69b-44a4-815d-34b94f6f7894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de605ba-ece2-4edf-b1bb-79c32bdcb9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc12ba7-e498-4430-9bf3-ff4e310cb831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594852fa-a666-4070-8a8c-4a900c9038cf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a94e670-cde5-476c-a06d-d060af5fac03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e82319f7-685b-4601-87d9-1410cfd0c2c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ab348c-e38a-437f-9480-599d7cbd3796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ef1c84-c14d-419a-95e7-5c3d67370df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f10e413-85e0-4518-9266-4f7dc04f1f32",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce08de8d-6c17-4b1c-ba9c-3deec23a9456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d03d69-7ea8-4a0c-93c8-dee1cbeb6ac9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e4ca5-3b13-4792-b4ea-6ec8527894cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cb575bc-344e-4501-afec-64aae5f115c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c67635-488c-4238-a138-cf5cc9698beb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31192d22-1832-43e7-822a-81205e00a37f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3482af57-d5d6-4c83-9941-13256fb8f210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0868c54f-1a96-4879-bb10-92776680dda7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9cbbaf6-d219-416d-b1c1-e36adb47c861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d0416-eda8-41f1-aa1b-c9b9f476af3b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd63d24-1363-4c79-aecf-4cbc552b40b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eecb44d0-1c38-4dc9-bec9-e085854d16ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818df40f-99aa-40c9-bc4a-8b7b28cf9543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbfdfa3-c72e-4e08-aef7-96f786836f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f664fc5d-8361-4b6b-b2ed-2de3b13e4a0e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c1ad7b-819a-44f6-900a-8dd92709ec16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b696caaa-b2f3-4b4d-a963-0b46166b8353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079a558f-60b8-4b54-8ad3-af32d92a9528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0762ba3-2377-4cf6-aec1-cc1eda650719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343a446d-c752-4442-911d-bf58d39bb3de",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac792e33-ab43-40f5-be61-3b803ab5d856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71053949-7dc2-4d30-91b3-fc6f54268e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a033a0cb-6223-4e9e-b087-e0cabd69f766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9675833-fc22-4872-be4f-ed8c45ac958b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dcf1d2-47f1-49a8-95da-5cc187d8a014",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c5f576-1064-411b-8e2e-a980a6fed593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372bdd1a-cefe-4ce5-a82e-67860a5a91b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d7eacb-3176-40e9-9751-68c0320f629f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65467c8d-8a39-4fd6-a0a6-b10d10e58ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4865ec94-c166-41b6-a578-efb4c1da7049",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7f1c49-2024-40bd-a51a-d18ae8b663bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d098855-2f75-4e68-a29d-e1f9148f7813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde5f5e0-37ef-4f5d-9aff-3689e016851a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3103512-391e-4dc5-a01d-bf681220a9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606358fb-c0a3-4b73-81b9-119e134c1078",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2fd5e6-e69a-4b9c-8d76-2a0e7716987d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdbba9bb-9a96-41e3-83a2-b719ce1dbef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56421863-2399-4eda-b1ea-f69c4fabb0e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01ed9b9-0c0e-4d97-8dac-4e3571b1b6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57774b75-4e0f-4602-806b-a4e4b0c9d6e5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894067ac-6681-4f57-8615-a8aa536f3462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61b0ce4e-9d16-4e53-97bc-30b966742fd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d10f2a-8b66-4633-aad4-8a704d45517f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13666ce6-53cf-4869-92af-7a9cf0c07874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27cc6beb-2b5a-472f-8e6e-2645ef70d92c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61079425-4f9a-4023-8cb7-5ebeb0f5a164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef3b035-5ad0-49cd-8d88-1c0cdc4eba9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18383f07-46b0-4a07-a341-f901687777e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6384db10-5c8d-4600-86d4-3ebe0cc0a89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a6d958a-4342-4377-81ec-1fe7ac1fc8ab",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2036433f-d5d6-4388-b260-f35e05920447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83688aa4-c3f9-45b1-af46-3ec04239c757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb91ebf-0a16-4185-84e3-9b87ef6ed84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fd4138-7f6e-4375-892a-85e8f835e7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca9a65a-4a3e-4764-bb1d-ca3aea0eae95",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015acf41-625c-4a0c-8a58-f59b08a316ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d16d4937-6614-4501-a49b-14811826526f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb7459c-c117-4a55-a299-5a10cd097edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2351fa1f-a418-4d8e-a4f1-ddea22981b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da15ec67-04a4-4ba2-b31d-924180596cad",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8acb860-488e-4f37-89b4-3db830460d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848cc630-2563-4316-b267-f3ea1d05c8ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed583811-1989-4cf9-b4ea-1f8b39aec69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6deb017e-9c41-4669-a7c1-13629020e95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7585e87-63d1-4479-9bcb-aedf64ae6226",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675ac644-fe71-45d6-a742-a771c7d939a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ee756a4-bf7d-46b0-a3ab-5036262becc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597dd3e5-0287-41af-8435-c5e1a1da9b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35f7f39-ee80-4d62-b9b8-01184e1db531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8f8ef4-a2be-4d60-bed8-89ad135d8631",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de86f9c3-5c0e-45fd-b56f-321cf0e7fb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2b3cdd-1b9a-41b7-ada1-d74c8885e2ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1f96c9-67a9-44fc-af9c-b2789a42e6d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71519451-6221-4fba-b6ad-405e88beb627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7df712-e7df-46b5-ad20-2e95b348f6db",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af919b87-8050-43fb-8e22-0450f8878478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1de3b2-e25a-4c65-a290-aa90be44c214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9684af54-ac4e-445f-941c-fab25dd95e52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ae8238-1e5c-44e6-960c-6cdef4d1d139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d5c678-bef2-497b-96b5-9a73fffc7158",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c35e431-5543-4a47-a50a-c78666093d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c97326-f8e6-499f-95f7-fda8672d63ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b60ec5-38bc-479c-98d5-e88e640334a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5eb357-da84-43a3-9cf4-dfeb16bed176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bee2aba-eaf6-4a27-8801-3cb855c91bef",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670a7d7b-5989-44a3-8f82-d709e54bb8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cb7c53f-f9e0-4933-a955-8d6ae4fe5266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1454f8aa-619e-4896-b807-2a6a1f14334d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d1b1207-5144-4b84-be72-ef0322a88fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45645a26-f92d-4fdd-9f2b-8e7112205281",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce73932-4f6a-4c2f-a197-368800b16c0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84daaebc-8924-4d38-8b21-47aee7de72b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65dd830b-1427-498f-9103-38c9bf9722b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4fb713-c024-4c0f-b617-915bc9fbf744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7528e0c-a852-4c84-8114-da2a2b48717e",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f29a49-0804-48a2-85f7-8ed75ce1ea40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57646584-8383-49d3-b3b0-c22145f0a257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646b2b90-e9ba-4c47-8e63-33b447bccdb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9149d54a-afa8-4b7b-a168-1033c78a417e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7877af4c-f0dd-494d-ab6a-20d39acdac0e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e96ef7-ef17-4a63-a7ae-31374bc2d3ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581a7791-b58c-449c-9431-ce918fc0ad54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72052546-130b-48c3-90a2-469fda8d69f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c7bf80-8059-44a7-b59d-df758caf4a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49645f11-4dcd-40eb-b4a8-97469b68773c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8d819c-85dd-4a8d-95fe-97783002e776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09225abd-5129-4c96-8470-f4468a21f182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef93e859-7fb2-47d6-87e7-e073479ef022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8fc957-e143-4e9a-9c87-6c4c058a11ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7f1278-b5a4-4b7e-9880-116ce8d4bdf1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd916807-35c0-4bc1-9e37-69bf8c6e2a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b14edbe1-99ed-415c-8d94-44dd1f5ae7cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9301f448-de53-4539-bb2a-d7d0f379bdf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495f6774-7ca3-4b04-bc62-0fecc6d5d1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9565e477-da34-43ab-b7b7-7a91818cd675",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8633b6-0e0c-42bb-b392-3e41b92f2b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b633a6-7d2a-4422-ab02-686ac392421c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72709491-c6e2-4d54-933b-0b593fca4cd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f4550e-d18e-4931-a77a-63d35cb41ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c8b6a6-0905-4264-85f2-5fc20ee2ede1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84389387-7084-4e32-a3d0-7366b439d59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b77d9d8-affd-4dcb-a21b-2b063ceaf299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c871d4-9083-4edd-a8d1-b62f8c6d88d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf5d6ea-1107-4d87-883e-0b7f83f1595e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd36af4-1882-43ca-b1a5-52d6ba040aec",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88e0660-33c4-4857-8452-69be6f1977a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a48a363-ce99-402f-bcc4-1082ab1d0a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d502d3e3-ecff-4f8b-b56d-f0e7f9c8a2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d832a6d8-ecae-4010-8d30-8477d04b480f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649bc133-7039-4e21-8e7e-08f8ef854472",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0cea35-dde8-43d8-8b5a-b28c8b382aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b48c866-a995-4eb0-b271-eee89bf761d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1416de3d-dcc0-4fcc-b19c-3c80697131d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6dddab-3397-4fa5-a025-cfe05bfe8f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d5c3bd-a867-4ff9-88ec-27e9361193e5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916cce34-bf7b-4b1b-a164-2e46fc8ee57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8eec812-26cb-43b6-bf45-ff5478920546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aef73eb-f944-4f95-9303-d359f958ef87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d6bf29d-15fa-4849-8532-9d4336be9fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdd1b8b-cc5d-458f-9f9f-c1faaac5bb89",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fcc0e63-87c1-466d-b622-a3d5fb2a1fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80966496-57cf-4c7d-9b52-08d461eee359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc1c78b-5606-42e3-9516-e6af272062ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee42656-e4a8-49ba-b583-7f9e6c672211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b703008-29c7-4773-bc5b-48769b91478f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54114d70-629a-4982-a637-51df7b6510f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5432e16-b458-45c2-ba01-7331eaf50ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b9a350-d8e1-4114-abf0-d3141a686dbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b5caf5-6e8d-442b-9c09-bcabe65a2eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494720db-0062-43fb-a0a6-e301804cccde",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2ec339-b108-4358-a8b5-85dcee82e470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4050d6-b7b8-431e-bc86-cfc986981328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4d5738-9185-4e63-ba2c-a77e637a9bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f845ee2-65b9-4d3f-94f7-a89e4211de63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0062edf5-abac-457a-9beb-98fab6369af6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624456dd-e963-4c88-8e3a-4cb90e658b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45578b6b-4bdf-49f0-8b30-a2d9a1a818ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "885f1f56-76c2-4103-950a-4b24c4822e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84cb1a63-83c5-4e4d-bec4-665550e7ecf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e43d895-b32a-48e2-a481-07eeb3fb4509",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f49bf0-d02b-47e4-ad61-7df09c510108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d6c5018-7a09-45ca-a272-0e25541e3243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbc7b31-cd42-4712-9a50-2f78bf7940a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d18e31-4723-40f5-a023-4c31681e8d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec67cf46-df2b-4e90-ad31-447030d23e58",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1ebdce-2cc3-425c-ba36-dcb562326135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "051110e3-0364-4044-981e-1534edeff710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c145726-8870-4407-bab1-792af98aac88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a4825c7-5f08-4915-a9a3-d3f4bb828629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fdbb1e-7171-4e0d-a79b-a1bb509eb675",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70333637-5ce2-4373-87d8-30bfa3afd98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7548dd23-c659-4e20-bf00-2120d957ec65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03e5927-5a22-44f4-a803-7cd2296cca6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3b15b5-5886-4254-9a13-f3180399b3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a57929-819e-4cb1-a0a8-9b4ce7c1618c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0fccc3-9eee-448b-a359-0660b4036463",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0598b815-3b22-45c1-ad32-e713880d652f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce2ab7e-6b5c-4a88-989f-9d17e3522653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0a24d4-bc18-4b02-a4e6-dd6162787d33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e93efe6-724b-47ef-930d-c4ccc8a84752",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e36a9-bb75-4d6d-a569-b5580e039574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34074df9-8ed9-4979-94e6-a0ed59b03d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "067db4e3-45e5-4864-8613-af3c3b84e076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13723187-05bb-4c11-8792-2d7fdb22f95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88318c66-8b85-4eb0-84a0-30f826b8466b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d95bfc-bee0-44e5-979b-6672f961f142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d152e9d-11ea-4b51-8eea-7ac0262e9a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4a4038-3bf8-4a26-8c58-2a4395ab30ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee58372-462a-430c-a8ad-e6b72eee0cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf23a5e-ea8b-4c8d-a924-7cf42948ac90",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d32d25-d2e2-4fae-9b5a-714e1f711fcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca52dc33-ab0c-4254-b022-6bd0e6c06499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13fbe6f-c891-4d0a-b412-11f0db3f8c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988f1ab6-068f-44c4-9d54-78b3740f40a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841f901f-85c9-45f2-955e-90cf1f07bc56",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea673f20-0fd1-4d4a-80cf-dc1d3e63aba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9acd11bf-082f-45e4-92c1-50e53aa2245f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440420b9-c9c6-4596-968a-ef1da47da50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4a2f0f-0b00-4a44-9316-e3098ce6f1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ad1c99-5cf3-4aad-8e9a-db263ba551a3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf3ffe3-a613-415f-9998-be09e7e3812b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203a000b-58d1-494b-86bd-0bdf0e4b6c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4b6821-88da-4294-84bf-8acf117c4f94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b23e4c8-b65a-4254-8d70-ca3bdc6d60b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbdc767-9a73-4cc4-834c-f2dcfd4d78e5",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fee9fcb-b499-4402-b173-df6b21652506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20bfb460-f43a-47dc-b72c-013e1a1e2463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af00eae4-5dfa-401d-b156-67ca99e24b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b0e8b1-30c3-43ba-9485-1220e7a44063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf40493-7dad-4223-b367-f4f13aa3d8f1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0078be-792b-4523-ba89-aba5ab1ef5a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd631bb1-d3b8-47e9-ab66-ff952fc8b922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24979de9-8c0c-4c1a-8c5d-ca9cf502ee6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97a7f91-975c-49e0-b9a7-4e140638c30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717df758-b231-4a7b-a3f4-10e89d2563eb",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2c19e1-8b75-48ef-8ad1-756f4194fc52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e3f526d-02db-4756-9a89-552b1b5c39a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd0e8b3-947b-4644-ac0c-0d7164e90d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac13ad87-fdb2-40f8-a1a1-ca8996717447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f246385-32f6-41f0-96f9-562f03770813",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b93ce1-1c2b-4fd5-a44e-990a3642a3de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a6a80a-ea8c-4a4e-a17e-f9a8a746af91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e3d1f0-acba-4c2a-b07d-c96f9fa6e4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab3cb14-e5ae-4934-bd55-09563a3e07b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24139829-a114-4803-9d6c-a481b962728d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da2a248-a84a-4676-9c8d-0f9915d3fb79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "648d884c-e13d-4011-a404-9576043cd538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da17403-81ab-4832-aade-3d2c9324ea04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7267e34-e33a-46c1-8652-6db3292097df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60437890-1a19-4afe-9267-1c90f1b7fcd9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ab7e0d-c868-4192-aabf-177f885151e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97797241-0632-4997-b4a1-87b332e81de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5685e65b-4100-42a7-8f3f-fcc6f140b5c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebad665-c092-403a-9775-de6402975f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657627dc-8c95-4982-ab4e-b0f28cb46ca6",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f6ca59-b849-4040-a899-ba51618a9921",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16a91650-83a0-497e-8c22-03e242b6b1b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6e965d-d624-4d72-b49d-99efae33dc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf9d0cd6-46d0-4041-95d9-b8aa17e35b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b02fcb9-8275-4302-a8aa-7e1ea746932e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f01e13-9ffd-4d67-bcbf-7bb149fc6c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f575653-fb89-40df-b7da-500d64de3ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "840dbb66-2e93-4e00-b0ab-d20b84736da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8391c74c-d5a4-4217-853e-82850ded87ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faedb6cb-65b5-4332-8de0-648331a61ce7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e98d41b-7e78-4f21-84e1-fd0aa38adda0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afd5eab5-e47a-4b9e-8f8d-8edcf952248e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33cf1c89-fbce-45db-bf98-6f9cfcc04c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0600518d-d800-49b1-b6c5-d54cc1b05614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345b83d1-57b1-45b2-89d2-350bab763733",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2291d270-f2c5-415c-b80e-597737358bff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b344a0f-c422-492b-b1e0-a3aca27b979c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45466840-77e9-4c4b-ae7c-4b282c068aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58934e1-82b3-445a-9d3d-6a9c4c31a519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae83ebd0-b767-40b8-872f-dc1a31fa9ffa",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70412fac-87b3-465d-9a78-0e59046dada6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c7d5ee1-a8e1-48dc-aa1b-45d815523dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e5f1680-ac2b-4aa1-9c2d-833c8b2a03ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a69072b6-bc39-41f7-9d33-da0969d739fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d57dd4-feab-41a9-8ca4-e38660badb75",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646b4824-b5eb-412d-8eb2-0957410491b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a9189e9-3b15-498d-9600-855606b905a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3113d06f-e6ef-426b-bac9-12091a95e506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d108c65-7678-48ab-b3e9-1554b5d45c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b55cf2-6ac8-4279-8314-5f7a5270999e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462a5e4b-7215-4241-ae25-29c9107cfd81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f390ca0a-e743-4ba3-a2a5-600bf7f3ce4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "055e95ba-32cc-442e-bbc1-10ca0b9ab60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3143c7ae-a85f-43ff-a144-44b1330d23b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d5e888-1cbf-4f0a-84a8-9ee79ce7ff9a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5785c14-fe37-4d87-bad0-8b8860a6136f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d276412e-7ac8-4b3d-b3b3-4a263d966490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43d3ded-5357-491a-b7c3-f8296227fde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e194c9e4-129b-4080-9974-c25e74b85715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bb52c1-c2a1-4e52-b978-85f18603fcad",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df5ed80-83d4-413f-9747-ec0c38af4f6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fedc47b-a8d5-428a-aaf9-3ab2f0fe0422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae08b50d-bd00-4502-9f29-5dbf4f7c1680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ddeecda-2741-4a16-ab85-3875be46b896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ac4a29-b6ed-44b9-935e-dcf31657ffc6",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda0da11-d5a9-407b-ab5b-f60c1cf6b437",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13c44301-f65d-47eb-994c-d8b1bbd800ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a685a7-285b-4e28-84ac-b1b8f07d3873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b21ce1-c6b6-4477-9f94-a1c7a57095e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd37e6de-0e03-4e64-a5eb-f984cf302b4f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5c0da2-3a79-4c15-97e5-e2112aa3578a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a97c85a-8406-411c-8b17-8ec61943b54d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b348bf1c-dc2a-4b8a-b283-ea8989c2ff0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b26223e3-d4ab-45fc-9401-8e5481b6439e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c172145-e7d0-46c2-afbf-32776c80b0b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae4ad3d-a459-48c0-8c64-53a6682715a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68151670-5892-4909-bc7b-9825600bbb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40be8da-0417-4379-a39b-0ad2c1bb4098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2dd76dd-5ab9-4117-a8ee-04abea61af88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7009081c-9756-47c8-96e1-5dbc11a94e74",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2decab-58b4-4147-a77b-67efd88d18bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cece2320-e733-4c01-929f-74403ee3ffa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd5562e-52f6-4fc2-9c84-9f5c169fa234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cfc191-0cfd-47de-b277-626d9217fe49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c9dc58-0f31-4f4e-b178-e7e9acd57f12",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58148274-1fbc-4739-a94c-63b607e79f0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a0fee0-ecf7-4944-ba48-8472e06e4b64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245f4869-e7c2-49d1-98ea-a80f4a5ece7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0069f835-ec41-4246-8f68-04e18cf4bc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40d70c42-d051-4a6b-be8d-8ccc2c5c024d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbec2d8-8bce-4e88-96ba-229671e122ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7831b5-755c-46ac-87cf-804d6464e804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e893369-da95-4d62-9231-4eeb56ab1bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee518f4-c3f5-4bf5-9383-3e999aecdc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e2b511-abad-4521-b701-517b7af8d748",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e8529-1430-49f1-a3a9-98e67491afb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eebe9663-1e5d-4c27-9b3f-a9c44d906b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48f7fcc-3107-422d-9358-4803a6a5143a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95863c36-35a9-4266-a4a7-8394f9734f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbb0537-de69-42fd-b4e4-dafc2d81f2dd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62af08a-c62b-4273-ac9a-7d2fcd9527d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72ff39f5-c57e-4030-944f-5a371eebde25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60ab785-bb9f-4d09-a5a1-75147af09097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba36322-f94a-4ee4-b2dd-446019320411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885531c1-9a99-4fbd-8671-945b7cae6f4d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4df522-b015-4806-91c2-9d7a90cb3d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1109092-e8c4-4a34-90b7-5ec7162b6142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d54b40-5151-4c32-9e09-2c0a7847fc6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd920640-a9a5-4d8f-80f6-4245b13782cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4be99f8-ff66-4d2e-9c4b-18e715da9d1d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d122ba-3436-4f6d-affe-a252695f6729",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "040f6108-e826-4bee-a52e-3a80975a6cc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ad6f4b-aed6-4abb-9dbc-77ee9d6b4264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e87d075d-20f0-4f8d-b1a2-a1ecaeb288ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5a53d6-82b8-4ce7-8b5e-d880bc1ffc26",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3d7058-0813-4a84-8d24-c48dbbf1a33d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "399afe0f-0d6c-4c40-aba7-bb9895a50ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34f71b7-fea5-4290-9acc-32769905f371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343f3fd0-3609-4237-9808-410b080d97d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d34f0e2-01be-4420-a298-e1888da5a5fe",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f264f8b-793c-4bbd-baa5-864886fba210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1793a4e-d333-4115-b345-96b990af47b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459a5baa-c0f8-4950-bae3-93fdd39a6de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1051fcf4-38b1-45ac-875c-965614e83c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411a320a-9a9e-4826-a3fd-2bce3536a5d0",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31db732-7af3-4779-b5b1-9e68ce6f29fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a35624b8-7ca0-4b96-a7cb-7abb4fa7aa05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd4fa3c-559f-4303-a73e-01e41ec0906f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9a1ef3-6efd-44ee-a6d3-68ff2888f90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69f0534-43ff-464c-a61f-fcc7357a083f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ec790d-7377-4dcc-aff2-95f57b3a3ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca34fd0b-850a-41f7-ab25-deffc0df107e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08251fb2-9237-4dbb-a9b3-62a99f6cdeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c83a472-16dd-48a0-a087-ceeb12ce2027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07dc159e-9fb9-4196-9b8f-889c9aaa50dc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d4b248-31b2-4012-ad17-97a6832febc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d836e8b-a5ed-49d2-9376-90ab66430941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea56ff93-e964-4b28-a0db-a594257d389f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd2d8280-6c3a-47d8-b1a6-d927b3d1f909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779c8fa4-87c3-49d8-be89-74340990c15d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92826106-cf0b-4ead-8aa6-5dd9498f0aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35315e1c-56ab-48d7-8144-ecfc6002294e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7b6109-cea4-437a-a41e-6375a39808fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34993ca1-898a-4fdb-966d-62122d8e1686"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03f7d929-85a9-4e12-b64f-a4cbe42c7317",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40ca4a80-c869-4dfe-91b6-10c1ac0cc654"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bdfe9ae-c85b-498b-aa1c-df2588a84b1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b6ae6251-1018-4e5c-aadd-24139a9f5024"
                    }
                  }
                ]
              },
              {
                "id": "e0d5dc98-9cfd-4e83-a36f-a386842cb131",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0be8d3f1-c8c7-43ef-9a20-a334aff163ca",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806135ff-1a36-4a40-b38d-fbf66ee4367b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "12011ee7-022a-4de7-a61a-1fdbf2ec2c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa65ea31-6408-4ab4-bcf7-b02a4206871e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1bd31ab5-40cb-4dcf-a153-0d5191f48125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e65bd8-e0d2-4f6e-941a-af3298bc8485",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca11109-4cf7-4767-9d35-2ebb005f3702",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "292d2bc0-bd83-4adb-a3e6-d230bbe87b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4053fb4d-7fd5-4a4a-9b44-1d7569f2e850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "555e840f-1828-4709-9449-77aa43772245"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec8a7264-4c87-48e5-92c3-11044ccdd7fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2533346-3ff4-495c-adc3-44c498096112"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38bdc8af-96a8-4c07-895b-0c6d1de7d5f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6baaa8b8-a249-48a7-8654-ddafda6ff7f7"
                    }
                  }
                ]
              },
              {
                "id": "42151369-091a-4c1c-a91e-fbd887f258e3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4a5ddb8a-6e58-498d-b63e-c855fbb4280d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f4487f-5d76-4a11-903a-dc0a9f2e0baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "438c3190-eadd-40f7-87a1-17f9208ae2ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b8255f-4064-44ad-8a0a-ac19a730f484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa647f57-1985-41e4-84a2-8a1d119d6062"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "70d9dcf8-50f2-4ff8-b019-d72e90f6e1e5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "711f30aa-8c8e-4e16-b91d-207a364c130f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b89cd37f-f662-492b-b080-f190c00cb651",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ac11bb3d-4588-472f-b625-1d343860b213"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe648d7e-73cd-4590-beb3-ce0fc4090b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57975ee5-a587-4585-9f20-4746477f0b5c"
                    }
                  }
                ]
              },
              {
                "id": "af9246f6-8f11-4a22-a5dc-6217990419d0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa3e8af0-8137-4a21-b814-ff0c9196013d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f1a844a5-b5ff-4be4-b79f-0a49aa4032d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43337fb1-a50b-4f0b-8373-6251aa4b1b64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87764138-6ffe-4a34-bd81-5653293473e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ed5605a-1a86-416f-aee2-0db7514aedf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6c098c77-08d4-47de-92e8-4fb5677b503b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6231e130-0d48-4aa0-9612-001847220fd7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebd60c43-0775-46c6-8b94-f264bf5e69ba"
            }
          }
        ]
      },
      {
        "id": "725147a1-b465-4fb0-bcc1-ebab8cbedae9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "393cde63-845a-4ea3-a0f1-eb557f930a46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "777165d2-ef5f-4866-9c48-15c20e0863a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fb26d11-0734-4420-af86-5f93361e5917",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f2563d-613e-4c1c-8ada-d18919e1b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0389dccf-4595-4ab1-ba91-bf905a30cd5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2d652d-e858-4384-a1af-c5ee0057b9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77a113da-2887-4a49-bada-f82d3da7f9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130ae0ce-3fce-4eb2-a981-642aafa081cd",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523f1253-399b-4fae-aeaa-686976163279",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ec3497f5-53d3-44d9-a845-45fa21a690a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a0fb01-345a-4150-aa14-7bfcd3394dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f46e89-e0bf-48c2-b12b-dad0154745e6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7134cd7-2ff1-4339-8803-8ad62ea4509c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caaa7f18-b385-4063-af55-96bdb3e13f6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9171fe2-4ace-42dd-969c-abde379d094d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56f1a9ba-b177-48fd-905a-7bc13b4741af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9204560b-095b-4629-89c8-1d6b0d09f113",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8de9a3b6-306c-44ce-bbd2-aa337602df39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05ec7431-143a-4874-94ac-30685e6f046c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8059e49e-0780-4f01-9cb2-47507a15be24"
            }
          }
        ]
      },
      {
        "id": "05bdb894-7121-48d1-9e28-19714d58872b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f6aa6970-fed7-4d3b-9bad-b1967755f855",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fbb1e3d-e6a2-4c74-8b37-81aacb72d113",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5be6748f-51ad-4993-a7cc-e7fccf7f988c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0719e15d-c038-4aae-b042-1280a0e7d756",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6b1bc543-914c-479f-aacf-ec261dd2f44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae177ec3-6f81-4b1b-8e45-28565a06beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3e622c8-fcb5-4a12-a8f6-3bdaa91a3418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db744694-725a-469a-83f3-4d1d34a417f0",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08a0244-93f4-4803-9a26-aede92355c73",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d33a706-2a83-4245-bffa-b738eb55425b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8289ca3a-6f3c-4e88-a6ba-45ad52a89559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39f65096-7117-4047-8e8a-09e952003581"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25cfd5b1-5945-4f7c-9098-8d4004e66420",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a9559e80-55e7-4fb8-b934-1e1dd7f4c790"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b732f02-e614-4122-b6af-bb0cda9297e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71c9cbaf-9e87-44dd-a018-8791683988c3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7620db9b-0ba9-4603-8a14-c3a903d56d34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "956b5d23-149c-40f9-b232-cbd2754518d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5360d2d-b2d6-477c-a680-2e12fd0254f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7735b28-23c9-4845-a2cc-c29ebca12616"
            }
          }
        ]
      },
      {
        "id": "89a15aa5-35a8-4096-8e5a-c0fc1f106376",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1a902eee-852f-47b0-ba03-a617b15e61ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70423944-6826-455d-8013-e217a0ef3662",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb181869-2484-430d-b905-f6e7169c831c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3325b84-6301-4fee-b66a-f44f90d05e4e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "976e1f69-fffb-43ba-8b49-3ccda57d90f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84be4143-ecbb-4635-bd74-5b8167baba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7f5e8530-1dfc-44ef-b51f-6a2614e8b5df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eaf45b-47a3-4806-bd9f-aeb9092ffc7c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa455ca7-3c34-4ff7-b45a-118c7eb5ddf1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "582d88d9-18e0-4cee-82fe-5bd89efb1b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aa6ac9-2dec-40f7-a29f-5bceaa89c675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e845d34-a1dd-4dfc-8437-27d95bffb0d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c0c14cf-73ea-41dd-9ac0-3d9a9d9f362b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15f5d901-002d-49c9-9682-eed3494d64c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d01aba5-7d43-402e-9aa3-0da4dfb5f785",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "457184ca-9fdc-4b8b-8b36-d78ecbfdd852"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "045a43e6-0556-4106-9e21-ba386ea79165",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0216cc8c-98aa-4a0b-8f31-4dc7686ae3f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4de0d6d-bbe6-4c68-a5cb-3249ad5faea2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce3c846b-65ca-4c34-afed-19fc01591084"
            }
          }
        ]
      },
      {
        "id": "50944a40-917d-47af-aace-3fd4765ad1dd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05c73d87-2f95-43f2-9f37-d7a73a5f33f2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1b90984-4a80-437b-8c2f-0223a856ac8e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1a615fbe-e57c-4b05-a828-4d8ba7f2b2c7",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e893e4fc-0222-4ec8-85ad-0b4f9e497e24",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a1d02e0f-0043-4f85-87c0-70b28678dcfe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 293.2702702702704,
      "responseMin": 28,
      "responseMax": 6813,
      "responseSd": 831.9271785612506,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676853794482,
      "completed": 1676853883922
    },
    "executions": [
      {
        "id": "60fddc26-3388-4c87-ae86-b82c794b6db2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "41a2dfaa-2af0-4f81-bf15-91f8babe869f",
          "httpRequestId": "79d94532-a309-4dbd-a840-52f1f7523e43"
        },
        "item": {
          "id": "60fddc26-3388-4c87-ae86-b82c794b6db2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f765e491-2b29-4b06-9b1d-52b3be66f909",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 0
        }
      },
      {
        "id": "f46a9856-a5f7-4e01-bcce-64e3a03def8c",
        "cursor": {
          "ref": "017bdf8d-3d8d-4a09-8cbb-581a885fbe21",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eeff327e-92f3-4318-868b-7060fb7b1dc7"
        },
        "item": {
          "id": "f46a9856-a5f7-4e01-bcce-64e3a03def8c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2a6afd45-f4b0-4113-b845-f6fc70fd8511",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 0
        }
      },
      {
        "id": "a525863a-128f-470c-b5f7-1e062046ab27",
        "cursor": {
          "ref": "ce88a4f1-dcdd-4c35-bda5-f303b31ab36e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8a979d9b-cf0b-4beb-8d17-676b41713215"
        },
        "item": {
          "id": "a525863a-128f-470c-b5f7-1e062046ab27",
          "name": "did_json"
        },
        "response": {
          "id": "64d3b718-e940-489c-9255-beefef03e915",
          "status": "OK",
          "code": 200,
          "responseTime": 411,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca99801b-28d3-4b30-9190-dbc82fbeba34",
        "cursor": {
          "ref": "e3313aeb-e489-4843-93d4-fa8d57b080ec",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62e4993c-919f-4f73-a7e3-ba66ec7b59e6"
        },
        "item": {
          "id": "ca99801b-28d3-4b30-9190-dbc82fbeba34",
          "name": "did:invalid"
        },
        "response": {
          "id": "dbaf4924-94bd-4b0e-a8c2-36530e4f3fb5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3370,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "ca99801b-28d3-4b30-9190-dbc82fbeba34",
        "cursor": {
          "ref": "e3313aeb-e489-4843-93d4-fa8d57b080ec",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "62e4993c-919f-4f73-a7e3-ba66ec7b59e6"
        },
        "item": {
          "id": "ca99801b-28d3-4b30-9190-dbc82fbeba34",
          "name": "did:invalid"
        },
        "response": {
          "id": "dbaf4924-94bd-4b0e-a8c2-36530e4f3fb5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3370,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1ad320b3-defd-4b58-8f93-f72f2c5fbc46",
        "cursor": {
          "ref": "9c6eeda2-daf2-4e48-8114-a8201ba3c8fb",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b815733f-3b5e-4b26-af3b-30d836bd0a16"
        },
        "item": {
          "id": "1ad320b3-defd-4b58-8f93-f72f2c5fbc46",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "73fbc452-d675-42d9-a222-e7ed39d468a3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 66,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdbc3c4-465a-473a-bef4-46e76635a7e4",
        "cursor": {
          "ref": "917104d2-2e36-4dc9-9e83-78659929b6df",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "c70c5689-5e67-4536-8bb4-cd59c0b96898"
        },
        "item": {
          "id": "ccdbc3c4-465a-473a-bef4-46e76635a7e4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "586287b3-8c3b-450e-ac4e-c696586738de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b74ff4-5f07-4bc8-94a0-301d5877c115",
        "cursor": {
          "ref": "e1b8c67e-bccb-4ceb-9066-0c57aa17b65e",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "259ed2af-1c47-45b3-8fc8-46432619163f"
        },
        "item": {
          "id": "b3b74ff4-5f07-4bc8-94a0-301d5877c115",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bd40bbb5-79fa-4397-9aab-f67a3f870f4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 532,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "405b6735-2ea4-49a0-b9b6-7a461a689132",
        "cursor": {
          "ref": "53ce4a5e-4777-4e3f-a7fb-637485233edb",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4c711910-bae7-4e9a-829d-af3f9ea49ebe"
        },
        "item": {
          "id": "405b6735-2ea4-49a0-b9b6-7a461a689132",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5f11042c-868e-4ab4-a755-440d74e9484c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "405b6735-2ea4-49a0-b9b6-7a461a689132",
        "cursor": {
          "ref": "53ce4a5e-4777-4e3f-a7fb-637485233edb",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4c711910-bae7-4e9a-829d-af3f9ea49ebe"
        },
        "item": {
          "id": "405b6735-2ea4-49a0-b9b6-7a461a689132",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "5f11042c-868e-4ab4-a755-440d74e9484c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "18de93ec-3e4a-4cfb-8b60-f6e74da1421b",
        "cursor": {
          "ref": "3289b470-eabf-41eb-9e8e-62992c4e417e",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "46bac805-cbec-467a-a2de-71d2ccdcc808"
        },
        "item": {
          "id": "18de93ec-3e4a-4cfb-8b60-f6e74da1421b",
          "name": "identifiers"
        },
        "response": {
          "id": "c90b9e62-e5da-473c-bcb5-adbb36d3fce2",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c8466a-317b-4b52-b4c7-2ce2dee3e1cb",
        "cursor": {
          "ref": "f0166d46-a81d-4a38-950d-2aefff16588b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "77516fc2-c9fb-48d4-afee-82a27a3805c3"
        },
        "item": {
          "id": "42c8466a-317b-4b52-b4c7-2ce2dee3e1cb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d1e7ec8-da81-415e-b957-91b85df0b325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c8466a-317b-4b52-b4c7-2ce2dee3e1cb",
        "cursor": {
          "ref": "f0166d46-a81d-4a38-950d-2aefff16588b",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "77516fc2-c9fb-48d4-afee-82a27a3805c3"
        },
        "item": {
          "id": "42c8466a-317b-4b52-b4c7-2ce2dee3e1cb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d1e7ec8-da81-415e-b957-91b85df0b325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca00578d-649f-4e29-8596-5205305ab9cb",
        "cursor": {
          "ref": "cdb0165d-679c-454a-9996-64a311555c09",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2e1cebd3-7e80-4b69-943f-a7da139f5e80"
        },
        "item": {
          "id": "ca00578d-649f-4e29-8596-5205305ab9cb",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d8ade34c-8bd6-434c-b3a3-f04e418346aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a39d0b-8c9f-42c1-ac9f-2312bc154e54",
        "cursor": {
          "ref": "44dffe72-6594-4619-bca8-03c3af18eca6",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "574d416f-c4fd-420e-abc3-05f4bc07b22a"
        },
        "item": {
          "id": "97a39d0b-8c9f-42c1-ac9f-2312bc154e54",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8c5e40c2-6a96-443d-af9a-d7d6bf4a6303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a79fb7b-ed59-4ca2-bf3f-c3b9eac6eb56",
        "cursor": {
          "ref": "88e17be1-1bb1-4d6b-9bee-ade9460647c2",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9a1e7b63-2b7a-465e-968a-6bb64f07d1cd"
        },
        "item": {
          "id": "8a79fb7b-ed59-4ca2-bf3f-c3b9eac6eb56",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "96eef628-65d0-4f1a-9c4a-813191fcb4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01d805a-2f3d-451b-962f-aeaa0266866c",
        "cursor": {
          "ref": "236329d8-27ea-4ae0-9e5a-ec092d856a83",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8d6fa9d7-7b2f-4f03-ac1e-923bbce3e03e"
        },
        "item": {
          "id": "f01d805a-2f3d-451b-962f-aeaa0266866c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3040eda9-5ee8-47fc-a4fb-edb8ee5deb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb2cb91-881d-4db9-acf7-41fbacd0d5cb",
        "cursor": {
          "ref": "77745242-4544-4b8e-a65d-049fdf7e4f08",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3106331d-6193-4153-9dee-165e658f9640"
        },
        "item": {
          "id": "2fb2cb91-881d-4db9-acf7-41fbacd0d5cb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3cd8e22c-87e7-4941-a460-1b8e99f5da62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dafb01-ad27-46fa-9a15-bbe00a26b29a",
        "cursor": {
          "ref": "03d34079-feb5-4e0a-8979-614f3f3ade13",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9cbb7f4f-a5b6-4faf-a954-7ef9c043fb1b"
        },
        "item": {
          "id": "28dafb01-ad27-46fa-9a15-bbe00a26b29a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "52fd95fe-0171-420d-9c13-0269f5662815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54626f51-b35f-4616-b236-becdfeee0bb0",
        "cursor": {
          "ref": "98635136-2d97-4295-ad3a-5aa842fa4da4",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "78e47bb3-0fa1-4e3d-8e4b-62f9c4609588"
        },
        "item": {
          "id": "54626f51-b35f-4616-b236-becdfeee0bb0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "3a913b76-4469-4e11-8687-aaa43e1360d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10303d37-138a-4649-ab59-6c60ce98a0cc",
        "cursor": {
          "ref": "a40dff52-914b-47c6-9577-793a5fc4083a",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a8a72800-83bb-4e5d-b099-9c8259428e10"
        },
        "item": {
          "id": "10303d37-138a-4649-ab59-6c60ce98a0cc",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "66b61146-8002-4e14-8714-21db0bf333e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df8dc0d-569f-47e7-b306-ee2217949831",
        "cursor": {
          "ref": "1ffeec14-1954-453c-9d7e-5e86ddaab180",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e6a5ff3f-ec21-45a8-ae79-6d1db57442a6"
        },
        "item": {
          "id": "8df8dc0d-569f-47e7-b306-ee2217949831",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "facaf877-0559-45e8-8507-ff47ed8eb1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea86a06a-98d6-49fc-a3ad-5125656170dd",
        "cursor": {
          "ref": "263de4fc-372f-425d-bbac-dfb753803b6f",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "629d752b-a63e-46fe-b297-46fbe4439be7"
        },
        "item": {
          "id": "ea86a06a-98d6-49fc-a3ad-5125656170dd",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6301573d-49e4-44e2-af34-d28f66abcd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7530aa3-49eb-482c-8665-a82cb84b8172",
        "cursor": {
          "ref": "cd9290a7-7d29-46ed-b163-1a2d52742d86",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a2cb83dc-fea3-4b29-b84c-ab9d2f6cbe7c"
        },
        "item": {
          "id": "b7530aa3-49eb-482c-8665-a82cb84b8172",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "fef33aed-5d40-4d12-8a43-2fc3daa870ba",
          "status": "Created",
          "code": 201,
          "responseTime": 5641,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "89d81242-4916-4516-ac53-0255bb7ba9a1",
        "cursor": {
          "ref": "e8fe5483-ce3e-4875-bab1-4d9dba49cc9d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "09010aef-1d8c-4cf9-9722-1ef1ea384f0e"
        },
        "item": {
          "id": "89d81242-4916-4516-ac53-0255bb7ba9a1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "666dc5e0-c15b-4d0b-a67d-9bcd6c61a182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabbf0a3-0d77-488c-ab48-9d6bdfa0c7ae",
        "cursor": {
          "ref": "25316ef2-9139-4756-a430-3aee1459b561",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d24dd5ab-29dd-4168-84dc-920d4a4ad99b"
        },
        "item": {
          "id": "cabbf0a3-0d77-488c-ab48-9d6bdfa0c7ae",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b39a0d7d-b4a9-4e00-af50-3bf9fff3d3d6",
          "status": "Created",
          "code": 201,
          "responseTime": 6813,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "33be595c-c39b-4558-847f-aff0ad89bf21",
        "cursor": {
          "ref": "faf2c46d-c861-48f0-b007-a66ec7d6f1cb",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c2c2bc01-fb3e-4c56-99de-d85f6df70da5"
        },
        "item": {
          "id": "33be595c-c39b-4558-847f-aff0ad89bf21",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7e8597c3-1bea-48a3-9c5d-e830e0b1e6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de7b345-32d0-464f-a7e9-da3b6c77d868",
        "cursor": {
          "ref": "6d426896-b9a8-4955-8591-29389c5daea8",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fc72ceda-0439-4d22-aa64-4ceaa178e73d"
        },
        "item": {
          "id": "6de7b345-32d0-464f-a7e9-da3b6c77d868",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "fb4ff131-f602-405a-96ba-06470b429c21",
          "status": "Created",
          "code": 201,
          "responseTime": 5133,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b9940c14-6622-4ffe-a9e1-1bd877f6dadb",
        "cursor": {
          "ref": "2896b478-d40f-4808-a175-212443a5b9f7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "04568e99-6f74-4aed-894d-84d89e7f367a"
        },
        "item": {
          "id": "b9940c14-6622-4ffe-a9e1-1bd877f6dadb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5a219d3b-ac0e-4823-a178-37c5639f3012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01776164-3a5a-4791-a533-3d6df0b25d00",
        "cursor": {
          "ref": "03ab0a94-2f25-4bdf-a828-bcf16b1144ce",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0b19950d-08e6-459d-9cfc-9acef59ccf54"
        },
        "item": {
          "id": "01776164-3a5a-4791-a533-3d6df0b25d00",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9b314205-76e2-4770-8855-4c24e26dfde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24e62f5-51b7-493c-ae59-e27653267c3a",
        "cursor": {
          "ref": "2d93503b-30ea-4f04-8a0f-719b72dafffa",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7c6a642c-a539-40a4-a358-cacefb1db90d"
        },
        "item": {
          "id": "d24e62f5-51b7-493c-ae59-e27653267c3a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "8c94ffb8-c1c3-4c4f-86f1-1490796b1765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c680d18-6c5f-4bd7-8b8a-f851fc48ba89",
        "cursor": {
          "ref": "755be72f-cb2a-4c09-aa50-7f6dfb721463",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6b4a23ad-7a86-407a-9ea1-3c593d7a8c9d"
        },
        "item": {
          "id": "8c680d18-6c5f-4bd7-8b8a-f851fc48ba89",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1e288317-5ea4-4296-baa7-d4cc9e5de453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d7d726-2f45-4148-b575-cdd8a351cbfd",
        "cursor": {
          "ref": "6a977699-d679-4262-8276-d63d195fb1f6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "182e78d1-6828-4210-8a1e-140dfc801b17"
        },
        "item": {
          "id": "24d7d726-2f45-4148-b575-cdd8a351cbfd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "748fac4d-2270-46c3-94e7-32c449373f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5d46bc-65e8-4c42-a231-ca83241346cf",
        "cursor": {
          "ref": "975102ef-094b-4d58-b88d-0cac718a2274",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4c60cfbc-b483-4586-8b14-0ac09afe7211"
        },
        "item": {
          "id": "fd5d46bc-65e8-4c42-a231-ca83241346cf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6ce49bc0-6d17-465e-ba81-414abce1aa95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba35375-72f7-4d77-95a3-c1a3ab417262",
        "cursor": {
          "ref": "5f69e4c2-30e4-4aac-a847-467c9d504d3b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "877684b0-7bef-4bdc-8426-8d260b6dac6e"
        },
        "item": {
          "id": "3ba35375-72f7-4d77-95a3-c1a3ab417262",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9f20d24e-dade-4c4a-96d0-b77fa5063c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cce3fa-a7f7-4e8e-b267-665239d0f0d7",
        "cursor": {
          "ref": "e164cb73-7daa-4eba-9e41-0e9d8cf6153b",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "909a6232-45cb-48e6-9ea0-ba70f7f80f19"
        },
        "item": {
          "id": "51cce3fa-a7f7-4e8e-b267-665239d0f0d7",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "302ae9fa-b433-4691-8eba-0c23cbde3208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff29160-ca7b-4e1f-8b02-9da39452d3f7",
        "cursor": {
          "ref": "a3d16c39-22aa-4d83-8a87-eb8c14bdf47d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a619ac2e-ddb3-4027-8ae0-828446cfb81d"
        },
        "item": {
          "id": "bff29160-ca7b-4e1f-8b02-9da39452d3f7",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e2fcd9d0-5f07-42e8-8647-49f09026b412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472c3bd3-0a30-42b1-8bdd-8dafef698fcb",
        "cursor": {
          "ref": "89eee364-1842-44a4-a207-8a9b253b05a5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e0496e6d-ceb9-4158-94b2-2c43d31b3f04"
        },
        "item": {
          "id": "472c3bd3-0a30-42b1-8bdd-8dafef698fcb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5e5403a4-059e-4acf-8e71-324eaf1bdadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37c23cd-acf8-45e7-9e0c-f40535d1af59",
        "cursor": {
          "ref": "d2c930b9-82ef-47e7-b866-2b133057bc24",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f43e1671-f235-4fc8-9c71-409e667bdd3e"
        },
        "item": {
          "id": "c37c23cd-acf8-45e7-9e0c-f40535d1af59",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "13f4c7d4-44bc-46eb-b62b-9b4770254a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbe2ceb-a70d-4671-8c0e-0e7bd2d46763",
        "cursor": {
          "ref": "a5f87d06-2d2f-496a-a54f-ca0cd984f2ce",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "32a7642c-ca5a-476c-8d97-cf2cc071079f"
        },
        "item": {
          "id": "0fbe2ceb-a70d-4671-8c0e-0e7bd2d46763",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e8d1d745-c515-426a-bdc6-f5256ea813cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c254f1e-41d1-461c-ae01-5fca163c9e36",
        "cursor": {
          "ref": "6c3288ad-7380-4b76-b7c8-ec47f222966e",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4417ccc4-2df3-4e19-a290-3427f8960dcf"
        },
        "item": {
          "id": "6c254f1e-41d1-461c-ae01-5fca163c9e36",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c398d006-6003-4526-9769-5924d7f6e086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf91e583-cbc8-472c-8022-a78cf41c028d",
        "cursor": {
          "ref": "fcb6d390-3ac2-4ef9-8423-b862fe43a955",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9a5905b7-e9cf-4d0d-8c27-80e453b11afb"
        },
        "item": {
          "id": "bf91e583-cbc8-472c-8022-a78cf41c028d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b3e2ecfa-edcc-440c-899b-0b196fb40c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a710c2ae-df7b-409f-81e5-ece23e2fbd66",
        "cursor": {
          "ref": "b7b5ad94-e5bd-4f4f-9630-973d297ebda9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "eebbf2e2-d226-4916-999b-a5ad18e96989"
        },
        "item": {
          "id": "a710c2ae-df7b-409f-81e5-ece23e2fbd66",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "10b0df0f-a656-46ce-a285-22cbe3e283d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b2436c-59a8-487f-84d5-c3050321a0db",
        "cursor": {
          "ref": "6df71519-0e8f-4cf4-ad92-9cd00e76cf68",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "028f5ca7-751c-4991-9449-3c711b5cac77"
        },
        "item": {
          "id": "c8b2436c-59a8-487f-84d5-c3050321a0db",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2e4b9ad4-2097-474d-8d6d-f98d98da8ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3900626-9dbb-4f92-a151-9e9824a6ec90",
        "cursor": {
          "ref": "a496444d-1182-4d7c-aca1-ced05207a915",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "eae96ed7-4727-40b4-bca2-0a7c6a249b04"
        },
        "item": {
          "id": "a3900626-9dbb-4f92-a151-9e9824a6ec90",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5e15bb8b-2c05-4780-b6fa-66eaf2162090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef36dd5f-a19d-4e41-b814-1133b0154a84",
        "cursor": {
          "ref": "928ec59b-ec01-4e78-b0f5-c3d3a9e8f392",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "de8ef8db-54df-412d-b19c-7148da263fb8"
        },
        "item": {
          "id": "ef36dd5f-a19d-4e41-b814-1133b0154a84",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "712df319-9f1e-49ca-a745-16f0ad175ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f4c107-c8d3-4a5a-ac91-cf8a5b4f6ecd",
        "cursor": {
          "ref": "9cc56ed1-fa7a-43bc-9423-10413ac21999",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "16f443cf-a7ac-402d-a5c0-89a2c3ef41ce"
        },
        "item": {
          "id": "42f4c107-c8d3-4a5a-ac91-cf8a5b4f6ecd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6016c558-2cdb-4f66-99f9-6e52590b1d52",
          "status": "Created",
          "code": 201,
          "responseTime": 1823,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b3cd471c-1db5-49e8-a224-68f2b81ab69d",
        "cursor": {
          "ref": "3ae60b36-b89a-4db2-8b5a-2872fe8dde3a",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "33288c16-6385-4098-8a50-dfa561d5ba99"
        },
        "item": {
          "id": "b3cd471c-1db5-49e8-a224-68f2b81ab69d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "37c3ed34-d609-48c2-a057-a575924642db",
          "status": "Created",
          "code": 201,
          "responseTime": 2511,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "604e4131-0571-4490-9de0-8d0fd949c293",
        "cursor": {
          "ref": "c97ac112-8e6d-48d0-b3d6-99d2fc181b8d",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bd4b46af-7e2e-4473-90ce-25be01b2e81c"
        },
        "item": {
          "id": "604e4131-0571-4490-9de0-8d0fd949c293",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2ccf1b31-7675-4aeb-93cc-2337dc66bc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b42e00-e31d-4fbc-9496-5e8159119263",
        "cursor": {
          "ref": "9f7789bd-c244-4748-92dc-9b6ea00ba804",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3ce47c06-6da8-4dab-8a73-81c13526dc95"
        },
        "item": {
          "id": "a4b42e00-e31d-4fbc-9496-5e8159119263",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "180a9830-d061-4f55-ba84-315c13f66ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67a3217-ab13-421f-b32f-7e518a64ce78",
        "cursor": {
          "ref": "3420eb85-9706-403a-bf33-3ee8423389e6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5cee0e71-de52-42fa-a875-a4a4b510a6ba"
        },
        "item": {
          "id": "a67a3217-ab13-421f-b32f-7e518a64ce78",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1e2b7449-80b1-4cc1-ba25-4328fc3772c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440985d4-8550-48a2-b724-c46b39893948",
        "cursor": {
          "ref": "016fd11f-4694-497d-a569-d4c46f8553ca",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ca701ec9-fd0e-466b-883e-220b1ddebe76"
        },
        "item": {
          "id": "440985d4-8550-48a2-b724-c46b39893948",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2da9943e-802b-4847-b08c-0dc449dc099a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce63b1ad-5916-4fec-b6bf-c0cb487a9da5",
        "cursor": {
          "ref": "cd7d884f-4cb5-4458-8e74-8bc62a7cba36",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "4a3b8dd5-a280-4cb0-8fbc-b5a18f1a7c87"
        },
        "item": {
          "id": "ce63b1ad-5916-4fec-b6bf-c0cb487a9da5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "190c6dfa-0620-4101-a867-eb4c6affb7ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7421452e-fe9c-442f-958b-706e7545c4a5",
        "cursor": {
          "ref": "fe44ba35-43d8-42d0-9d2c-56e458c08e23",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "45e8378b-bd62-4da9-89bc-8b975d0fd557"
        },
        "item": {
          "id": "7421452e-fe9c-442f-958b-706e7545c4a5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5080b839-2a22-42f7-8f1b-489b7f5a0cd9",
          "status": "Created",
          "code": 201,
          "responseTime": 2508,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e431eba3-ad16-4446-b18b-2ceebc7af8df",
        "cursor": {
          "ref": "66967ab3-0a55-409a-aa1b-6eaee1dfa3c1",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8b88c17d-80b8-4e51-a981-6568f929fc8b"
        },
        "item": {
          "id": "e431eba3-ad16-4446-b18b-2ceebc7af8df",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6d1a8d6f-66fa-4932-9783-1bc9ac119f89",
          "status": "Created",
          "code": 201,
          "responseTime": 2145,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "6dd79ec4-5abd-4f69-82f4-7c8730fdf1ba",
        "cursor": {
          "ref": "6512df17-f71f-4bfa-8620-28a67b975791",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "79b17deb-3f17-40ad-b2b8-bacb58dc804a"
        },
        "item": {
          "id": "6dd79ec4-5abd-4f69-82f4-7c8730fdf1ba",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "253e8f13-a42b-45db-a420-55c7906d5ad7",
          "status": "Created",
          "code": 201,
          "responseTime": 2684,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "c62f3969-3f22-4b95-a965-d28bb4fa4e86",
        "cursor": {
          "ref": "49e4a50b-f779-4041-b350-455e57a3a8fd",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a72196ae-7a44-40c9-b8da-33032e8bb290"
        },
        "item": {
          "id": "c62f3969-3f22-4b95-a965-d28bb4fa4e86",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1f5bb85b-a3fd-4dab-894e-61b09d5a6245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f5896e-52a2-4151-920d-8d98868862c1",
        "cursor": {
          "ref": "604b8dfc-4d65-4ad7-b4f4-995f6283781a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "53b9ea5c-532b-4a5d-a367-cf1c7d54128e"
        },
        "item": {
          "id": "a3f5896e-52a2-4151-920d-8d98868862c1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9ac8a40b-dcd2-4031-b258-94dfb105dac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5559e9-d7c5-4d1c-a284-da567909a924",
        "cursor": {
          "ref": "c1b9d663-fedb-4c8d-b936-a6fcd943d9fc",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2a55c760-3613-460c-af21-3b610219e498"
        },
        "item": {
          "id": "6f5559e9-d7c5-4d1c-a284-da567909a924",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "63ebb8dd-2bdf-4e84-a590-0d1441cbb36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6850bb5-01b6-4fb3-a9b0-dd7939b5b2b2",
        "cursor": {
          "ref": "5bbb90af-4324-4526-9494-2d9703aa66d7",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c9ee1274-734a-4b24-8f70-5af9ae99862c"
        },
        "item": {
          "id": "a6850bb5-01b6-4fb3-a9b0-dd7939b5b2b2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "060bc431-13db-4e1f-b999-df9ea5d38f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba92b966-35e1-456b-8371-2a00e1889d1f",
        "cursor": {
          "ref": "dda3d301-fadc-41a2-8e72-c7a93f97048a",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "37e57745-5cbe-4a79-a69b-ddc01d747500"
        },
        "item": {
          "id": "ba92b966-35e1-456b-8371-2a00e1889d1f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1d6140be-ed8c-4710-bc84-adba0ad661ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64faef85-ad80-46d0-81d8-04ccafbd0ed6",
        "cursor": {
          "ref": "42732d49-c371-4e92-821a-a386ed2add89",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9f8fa6b0-a977-49eb-b7b2-b921a92d2696"
        },
        "item": {
          "id": "64faef85-ad80-46d0-81d8-04ccafbd0ed6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "34c98664-c6b0-4157-9053-954cfa40f656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d653f29-c99a-4ad9-baaa-304fac35c741",
        "cursor": {
          "ref": "8d8a7347-c5d9-4a28-a974-bdef76460cbd",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7dfa21e9-fb17-4a31-8b00-0fe49ceb10f4"
        },
        "item": {
          "id": "8d653f29-c99a-4ad9-baaa-304fac35c741",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c4782f45-048f-4ad5-a013-b9f1c5e218f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c572dfaf-2344-4cde-b9c5-6ca502acf60d",
        "cursor": {
          "ref": "9e286e31-dee5-4592-b14e-b06559842f25",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6f163bc9-13fd-4c71-8c9c-2cd4ed733834"
        },
        "item": {
          "id": "c572dfaf-2344-4cde-b9c5-6ca502acf60d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e4b896b2-39f9-4749-af99-da1737cd9c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cdb608-5f2d-43d9-b121-4f3fbb08df59",
        "cursor": {
          "ref": "e4632b28-9c89-4fff-9ca9-a41595b929a4",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "86296f99-3085-419f-a60f-edb0b7764014"
        },
        "item": {
          "id": "c4cdb608-5f2d-43d9-b121-4f3fbb08df59",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5f9d67b7-4421-4a08-8bc6-0568cb8d8c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2414ea20-74c6-46c3-8cfa-a664db8a1859",
        "cursor": {
          "ref": "ea803e2f-5183-4223-86d4-5c4149615ef9",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c5733340-f5b4-4091-b083-04c862ef6af6"
        },
        "item": {
          "id": "2414ea20-74c6-46c3-8cfa-a664db8a1859",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ff350893-4af2-4e84-83f0-7707edea33b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b020f5-cb89-47bc-ae51-afbd592e2823",
        "cursor": {
          "ref": "7fb10061-cae1-4ab1-8c32-d9e5903d6554",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cf8e4cc0-7fab-4b1e-a2a3-433c0c472e53"
        },
        "item": {
          "id": "98b020f5-cb89-47bc-ae51-afbd592e2823",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "52fd8037-1c7c-4c29-97c2-5dade23238b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ede28ce-3824-43df-8ee1-3a8929b5e93f",
        "cursor": {
          "ref": "bf589cf9-51d0-42f3-b047-b25fa879e638",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5dc5b49c-a88d-4a5f-9685-83558a6ab0b0"
        },
        "item": {
          "id": "7ede28ce-3824-43df-8ee1-3a8929b5e93f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e53917a0-a701-412f-8073-eeebcd804ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da4258e-b565-4676-8da6-4fafac9c13c6",
        "cursor": {
          "ref": "c34331a5-1e35-40cd-ac7b-40f9a7098646",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "31e8d058-09cd-4100-995a-1d732671b5b5"
        },
        "item": {
          "id": "4da4258e-b565-4676-8da6-4fafac9c13c6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "bf5d3989-a0ff-4554-bda6-c303651c3a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6d4cd6-6de4-4555-90a1-36bfc38965c3",
        "cursor": {
          "ref": "2951a2dc-52ba-4924-806f-d456b0d194c1",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "556e801c-bf0c-493a-ac15-5c22483ce93f"
        },
        "item": {
          "id": "0c6d4cd6-6de4-4555-90a1-36bfc38965c3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e952e0dc-9b8f-46be-9ca6-952df81c8a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f744675-0b70-4100-a780-e19edc3455d8",
        "cursor": {
          "ref": "34f54764-b595-4b9d-b752-7a8f91cbea34",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "222fa728-3f48-405a-8694-dd3a59fc7a48"
        },
        "item": {
          "id": "6f744675-0b70-4100-a780-e19edc3455d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fdfc2ef6-e547-48aa-8270-894cdad3a520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafc0f51-3c38-4561-9e41-bcc8322836f9",
        "cursor": {
          "ref": "e52319bd-2896-4da1-9e9b-90ab2095d5ea",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b4afa97d-c328-484c-b0a3-16efada412f3"
        },
        "item": {
          "id": "aafc0f51-3c38-4561-9e41-bcc8322836f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fdef7759-feb4-4a78-8039-c396072c923f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3188dfad-9cab-4ab3-a524-52980f73ba2a",
        "cursor": {
          "ref": "dea72f66-323a-429d-9537-68de32e79578",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "71f9206e-4d95-4b45-9616-f0aecba64fd0"
        },
        "item": {
          "id": "3188dfad-9cab-4ab3-a524-52980f73ba2a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7b0b5a23-03e2-4ef0-a9b7-de6a1b18c323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25584f9b-6768-4de7-b879-974ce5a204ba",
        "cursor": {
          "ref": "059c2481-fc43-41ab-af30-3d82512279bf",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5659193c-5f9a-447d-9c53-aeefe7e80306"
        },
        "item": {
          "id": "25584f9b-6768-4de7-b879-974ce5a204ba",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "bd560fba-4636-446a-b452-5967b567482a",
          "status": "Created",
          "code": 201,
          "responseTime": 2497,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "c66c5b6a-1c35-44d4-bc37-b1e78c931fec",
        "cursor": {
          "ref": "cd492f60-f2cf-48d7-94a2-867b838407eb",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "83812dc8-59d4-4741-92bd-598b6a24da05"
        },
        "item": {
          "id": "c66c5b6a-1c35-44d4-bc37-b1e78c931fec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7c54b147-a05f-4b59-93c2-b1a14c4c168e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27883eb9-3079-4628-a937-ce3804cd39ca",
        "cursor": {
          "ref": "6b82f7c1-7ad5-497f-8574-26e1396c1117",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8c09f0be-db00-4e1d-862a-270ce7bfb07f"
        },
        "item": {
          "id": "27883eb9-3079-4628-a937-ce3804cd39ca",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "c1e5dc26-59d8-40d3-a8e4-e008bd516b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23691e2-f8ff-446b-b948-65a98bdb5704",
        "cursor": {
          "ref": "fd3dae7e-02b3-4b2c-956e-2c2738030393",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4ca3fa55-22b6-41eb-bfaa-f39e58dc509c"
        },
        "item": {
          "id": "b23691e2-f8ff-446b-b948-65a98bdb5704",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2818d947-1dea-4d90-b6cd-70403321adec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd69bd4-6d9f-4ecf-9a12-5794199a65a1",
        "cursor": {
          "ref": "d17960fc-46ef-41b2-919d-073d62736dea",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "eed67040-ea03-443f-9db5-0f27488826aa"
        },
        "item": {
          "id": "0dd69bd4-6d9f-4ecf-9a12-5794199a65a1",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ed95b357-9ad5-4836-b0b9-b377d3f2b1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137209e3-a54f-4a64-bcf0-c67f77a31f40",
        "cursor": {
          "ref": "afda6b2b-45e6-4c11-8a4c-c096e9a1403a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a2ab0a7c-3264-4832-854b-6ce368302f2d"
        },
        "item": {
          "id": "137209e3-a54f-4a64-bcf0-c67f77a31f40",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b425d8f5-cb87-412e-abbb-7addaea112f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4cdef0-b566-41ca-a4d6-0779b8232c35",
        "cursor": {
          "ref": "dc94e7e2-133a-4427-8f0b-cca575afb0ea",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "26791e39-4475-48c8-a8fd-3268e890a4fe"
        },
        "item": {
          "id": "1f4cdef0-b566-41ca-a4d6-0779b8232c35",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b1b1bf8c-2340-47a7-b74c-8a2ae3e37c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4920c5ac-429b-4746-8d45-a77d43628b90",
        "cursor": {
          "ref": "14e2d02c-1fdd-43d4-826e-2aa64b558575",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "09d06560-0b76-4414-a05d-d568807fc33d"
        },
        "item": {
          "id": "4920c5ac-429b-4746-8d45-a77d43628b90",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "282afec8-730f-4012-a944-f1b51d16971d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2b62ee-0e16-4211-b807-43e550beabcb",
        "cursor": {
          "ref": "516c79f7-a5ef-49bc-8b10-393f43d2b805",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "676e954f-6452-47b1-b14e-264b3c2a4e69"
        },
        "item": {
          "id": "fa2b62ee-0e16-4211-b807-43e550beabcb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f3ecb700-fd45-4863-945b-16c914ff8f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbf90e5-da70-4032-a7bd-57a55b94a14e",
        "cursor": {
          "ref": "f7a89df7-ffb3-4eb5-ac5f-072394f13f4b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b8fdc90f-9070-41ec-bce3-297ec11a1245"
        },
        "item": {
          "id": "7fbf90e5-da70-4032-a7bd-57a55b94a14e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "00463b2d-2f40-46f2-ab39-5a8dc8a794c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7245dbe6-5678-4db0-9a64-65b0e0710f49",
        "cursor": {
          "ref": "b1af6048-eb6c-47b7-9988-f8442323a226",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "42e99950-accb-4716-8e97-d137c0ca288a"
        },
        "item": {
          "id": "7245dbe6-5678-4db0-9a64-65b0e0710f49",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ac82bbd7-5a9b-4656-b3b3-806ecf76cbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02500874-8969-4235-89df-3f6258247361",
        "cursor": {
          "ref": "068a5397-d0b6-43b1-a8e4-d7218df68559",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "732ada60-236a-4861-8e61-47c465f2cd23"
        },
        "item": {
          "id": "02500874-8969-4235-89df-3f6258247361",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e0d0118f-1efe-4012-a060-3adbe2359270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12764e3-a88e-414f-b04b-9bc09d8b9503",
        "cursor": {
          "ref": "0648de14-8fa0-4a2c-b30f-08efacf74eee",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a4949102-9225-4ce2-9750-c297a665be69"
        },
        "item": {
          "id": "d12764e3-a88e-414f-b04b-9bc09d8b9503",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "041ca106-3c87-4bfc-99c2-12cde918960a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12b72d0-9c27-462b-b849-3eecff0302d0",
        "cursor": {
          "ref": "0fc4483a-80fe-4082-ae6a-0be72c5a1c7d",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f42e316e-6c82-442b-99d8-807366d12c63"
        },
        "item": {
          "id": "d12b72d0-9c27-462b-b849-3eecff0302d0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "def41f7c-4fee-4226-89ed-f92ce393682c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "180927ea-e479-44a9-bafd-32e568b2c97c",
        "cursor": {
          "ref": "26c7c54a-b856-4910-93a1-3263b9fedd5e",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "63df69c6-da55-4700-8128-dd4752159b37"
        },
        "item": {
          "id": "180927ea-e479-44a9-bafd-32e568b2c97c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ab047b4f-d216-44c3-8076-9932f64844b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c797b8-bf2e-4c89-b337-2373b0ad410c",
        "cursor": {
          "ref": "be926324-ac60-497b-95c6-a31b23f4bb7e",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f936002a-43f1-4c45-9054-fc582c0f90ff"
        },
        "item": {
          "id": "44c797b8-bf2e-4c89-b337-2373b0ad410c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ca206aaa-8147-46e7-af3c-d41546f3e757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc4bec5-1c99-4e11-81e8-4f75b8923229",
        "cursor": {
          "ref": "cfa72d65-5728-460e-a68c-99c8c68e8b54",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "331d18b8-2e99-4509-976b-5b1414ff1822"
        },
        "item": {
          "id": "3dc4bec5-1c99-4e11-81e8-4f75b8923229",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cd139677-105b-4a2a-8dd3-cb7b866c767f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694df4f4-6b22-43d9-b12a-fec6b601dd32",
        "cursor": {
          "ref": "74fc82dc-0394-4ba7-a71b-4684b8eb0c83",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a4089ae7-3abb-4cf0-8855-e40340526d51"
        },
        "item": {
          "id": "694df4f4-6b22-43d9-b12a-fec6b601dd32",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5d69715f-8c69-4387-b2c5-c830a0d499ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892a76e9-e0fa-496b-9a3b-55ff9d1f9c98",
        "cursor": {
          "ref": "8d68f4ba-acf6-4111-bc01-aeb127e75e40",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "497901d5-5e73-423f-93fd-b9b7ed1f5562"
        },
        "item": {
          "id": "892a76e9-e0fa-496b-9a3b-55ff9d1f9c98",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "19b66f10-c622-4fec-9370-b70a5bb3eacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86be2055-1a78-48d8-858f-828d1edc2d33",
        "cursor": {
          "ref": "416d2628-d4eb-47ce-b835-aa731743d7f6",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "41e53d61-e55e-4f9a-941c-0e11377f8374"
        },
        "item": {
          "id": "86be2055-1a78-48d8-858f-828d1edc2d33",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dd24b502-1373-4e98-a7d0-92d44dbeb9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fa0bac-f35c-4d3c-82e8-bd7e231e60c6",
        "cursor": {
          "ref": "c1d70059-4341-4b38-abef-913823ddbaa2",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4a331423-79d9-4f46-a331-3a21ade822c9"
        },
        "item": {
          "id": "94fa0bac-f35c-4d3c-82e8-bd7e231e60c6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "105631a9-c6fd-45bd-8071-37ae46bf93e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4d928c-600e-4a1f-92a4-58c836039f01",
        "cursor": {
          "ref": "7f68c178-edbd-4a01-9d1f-c4d08cce9f77",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "29537598-3a98-4ed2-a86a-28049ffc2e76"
        },
        "item": {
          "id": "9b4d928c-600e-4a1f-92a4-58c836039f01",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "efcd2ea2-f542-4bba-baae-f42aee68beff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d031ae-801f-4595-aaee-ec6c1e653cb4",
        "cursor": {
          "ref": "07cd44c9-84d7-4fe9-894e-5adcf471f628",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b2c2c558-69d0-4614-b3ca-c93401116bbf"
        },
        "item": {
          "id": "55d031ae-801f-4595-aaee-ec6c1e653cb4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "411230d4-cbd0-46d5-b563-a45801c208be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c01ce8-7bd6-454c-b4e3-ddf7142f0ed5",
        "cursor": {
          "ref": "87e025c3-119c-442f-a251-538e31569afd",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fa95c478-ed55-4fef-a00b-2502a8526f64"
        },
        "item": {
          "id": "b7c01ce8-7bd6-454c-b4e3-ddf7142f0ed5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7842ac64-92f7-45fd-b908-1db01118635e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a3fe68-466e-4027-9a0d-6cf4e361e009",
        "cursor": {
          "ref": "061f313a-86b5-4009-b4db-538a7f73d94c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5897bf24-786c-4a61-9726-780f166011a3"
        },
        "item": {
          "id": "d5a3fe68-466e-4027-9a0d-6cf4e361e009",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bd13616d-5014-466c-beef-e62efd5dc0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73625425-5702-4a6d-b1e2-0c42a36e266c",
        "cursor": {
          "ref": "4d1788a8-9edc-49f7-8190-c79a3449dc59",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4a5298ee-06cb-43a9-9c41-bde68d7b08da"
        },
        "item": {
          "id": "73625425-5702-4a6d-b1e2-0c42a36e266c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6efa05d0-afb9-43b4-be89-38a804b3bd2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1d4228-1ed4-402a-a18d-e12dd0efb558",
        "cursor": {
          "ref": "56b76261-1044-4475-b134-07fea513f2c8",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "95bac666-eea8-4756-a165-f2e54a7429ca"
        },
        "item": {
          "id": "2b1d4228-1ed4-402a-a18d-e12dd0efb558",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d1a86746-ca86-4414-a737-97c53a1f1e6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080c807d-2e16-4343-9d07-9839016b1fc0",
        "cursor": {
          "ref": "791fee2f-5aa8-48e8-be5c-74d4e9fd83bb",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8d4f5e9b-c7cb-4ea9-8fd6-4bc065193d19"
        },
        "item": {
          "id": "080c807d-2e16-4343-9d07-9839016b1fc0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4f2d44e7-88b4-4dc7-94bb-b92a5a741f89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47f8188-0a4a-4316-bbb1-a133c66c7202",
        "cursor": {
          "ref": "9b1164e5-950e-42ea-88da-3316bd089961",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bcb3613a-9135-4e13-a259-ebc3ec3082e0"
        },
        "item": {
          "id": "b47f8188-0a4a-4316-bbb1-a133c66c7202",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "00e4e59d-3412-4bf9-970a-22291315cb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88cf5da-3246-41de-b6c9-877102c41a8a",
        "cursor": {
          "ref": "36c05a69-9a7b-4e6d-bc40-ae2396dedb43",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "03c3f643-8798-452a-8895-44b43577d23d"
        },
        "item": {
          "id": "e88cf5da-3246-41de-b6c9-877102c41a8a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a5802b20-f205-4b56-b14d-0a8416595823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be15c1b-5ead-431a-b1a4-c23e52f29451",
        "cursor": {
          "ref": "daee8ee0-8228-484f-8780-9e33a5393f8d",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b540500e-1172-47ec-8a06-48f594abcd3a"
        },
        "item": {
          "id": "2be15c1b-5ead-431a-b1a4-c23e52f29451",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3d65eefa-76e6-4c50-ae71-5a5033ab4d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccc808c-6016-4562-ba0b-89fe311febcd",
        "cursor": {
          "ref": "d0a8f86b-7c4e-4584-8c92-95fb7d24f15c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ae86c2a9-961d-4afd-a7c2-01e0af69f995"
        },
        "item": {
          "id": "eccc808c-6016-4562-ba0b-89fe311febcd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b953d9bb-2d81-4cc3-8db6-84a85f6a3a7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "7a233f05-61af-4f16-a65e-3912a9408276",
        "cursor": {
          "ref": "215f08d9-6eff-46e7-8215-177f00f5ff3d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a1f816ee-819d-4eca-b047-2655125cb143"
        },
        "item": {
          "id": "7a233f05-61af-4f16-a65e-3912a9408276",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "5b027e36-50bb-4bcb-bd47-08b8f64d9371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "321a395b-11f9-45df-8809-25749c6fa61c",
        "cursor": {
          "ref": "3595ef64-f3b7-485b-8729-5e7da393c00e",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "88fbfb8d-13a2-4045-967f-c06509d432d6"
        },
        "item": {
          "id": "321a395b-11f9-45df-8809-25749c6fa61c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3b569446-4742-4324-87a2-d18aa6790ad4",
          "status": "Created",
          "code": 201,
          "responseTime": 2007,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d6745a-51ec-4025-9fa4-702277198c5c",
        "cursor": {
          "ref": "b6b3e63d-b1f4-48e4-a288-8f8f98162366",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "09353cd7-94b8-4462-91b2-7482bf911e7b"
        },
        "item": {
          "id": "e8d6745a-51ec-4025-9fa4-702277198c5c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9b89ea4a-efa3-46aa-bb1f-7c3f844a9db1",
          "status": "Created",
          "code": 201,
          "responseTime": 2212,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0a0a9d-4369-4338-b078-47a5e8158f26",
        "cursor": {
          "ref": "cb58625d-ac4c-4c61-8d97-5269623c01c7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "46ec96d7-1a4f-453f-9348-b8337d1bb522"
        },
        "item": {
          "id": "dc0a0a9d-4369-4338-b078-47a5e8158f26",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8e2c0656-d161-46b5-b386-bd8bb45c0805",
          "status": "Created",
          "code": 201,
          "responseTime": 2101,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1518c15-198d-4d45-8fc3-2f8984cb53fb",
        "cursor": {
          "ref": "41560d99-eb4f-4666-85a3-3981b33211a0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c21beb4b-f67a-41c9-aea9-3ae76eb73701"
        },
        "item": {
          "id": "d1518c15-198d-4d45-8fc3-2f8984cb53fb",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1f2f2ba0-fbd8-49d0-845c-84ebdfdaa08b",
          "status": "Created",
          "code": 201,
          "responseTime": 2089,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-20T00:44:13Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-20T00:44:13Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "f0ae166a-eed8-4426-b3cb-53427273f320",
        "cursor": {
          "ref": "c22ad50f-58b2-4738-9cad-6a7ce171338c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "22a794a6-4e62-4858-81f7-2b50eb784d34"
        },
        "item": {
          "id": "f0ae166a-eed8-4426-b3cb-53427273f320",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "48902856-5daf-4cc2-bc18-7d7c9752dbf6",
          "status": "Created",
          "code": 201,
          "responseTime": 2381,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f61b50a-3610-4332-a873-bbc1cafd94c3",
        "cursor": {
          "ref": "af3dc966-efd6-403f-8a7d-81937d018f0e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "71905930-61fd-4847-a289-61b317044c29"
        },
        "item": {
          "id": "3f61b50a-3610-4332-a873-bbc1cafd94c3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c6ea606-5981-4ee9-b4c4-725ff517deb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f61b50a-3610-4332-a873-bbc1cafd94c3",
        "cursor": {
          "ref": "af3dc966-efd6-403f-8a7d-81937d018f0e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "71905930-61fd-4847-a289-61b317044c29"
        },
        "item": {
          "id": "3f61b50a-3610-4332-a873-bbc1cafd94c3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2c6ea606-5981-4ee9-b4c4-725ff517deb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afbb663-3b8b-4fe0-9a78-d3541b71476b",
        "cursor": {
          "ref": "ae738244-4c2e-4d3a-8e6b-9c4070abc1c5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "be3f9389-4009-4707-8cf4-ae31a7608307"
        },
        "item": {
          "id": "1afbb663-3b8b-4fe0-9a78-d3541b71476b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e7866c89-621d-4a0a-a8cf-3daa7b361f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ab981a-9f67-4261-9e9f-0d7d901060c9",
        "cursor": {
          "ref": "7dc2059d-3efa-4871-b883-9b09ff457642",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3b3cbcea-1b82-4472-9ba8-3ced255f6f3d"
        },
        "item": {
          "id": "25ab981a-9f67-4261-9e9f-0d7d901060c9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "093069a5-952c-41b9-8a1e-b89c4821c6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4485c29b-efe3-44a7-a334-f99bc6294f48",
        "cursor": {
          "ref": "3909ae13-88a9-4d20-ae8e-3809147e9d52",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "23586789-e66b-48ce-828c-acfe885cd5ce"
        },
        "item": {
          "id": "4485c29b-efe3-44a7-a334-f99bc6294f48",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "85eb2aa7-de4e-4e24-a006-267e992b1caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79339cb4-5b5a-45dd-b4e0-858838cc5a97",
        "cursor": {
          "ref": "39883ed4-a944-4619-a619-d59754865b8e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b7e7b733-5c97-44c9-a7d8-6dd0e2cffd69"
        },
        "item": {
          "id": "79339cb4-5b5a-45dd-b4e0-858838cc5a97",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "99f5c066-00d6-4f87-bdfd-20fc1cdd4166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61315b07-ee96-469c-84de-e3620f010519",
        "cursor": {
          "ref": "51b7a9ed-43d0-4bb5-84da-69ad9595c936",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "876e6396-63c4-4227-ae11-613ce2fb2a75"
        },
        "item": {
          "id": "61315b07-ee96-469c-84de-e3620f010519",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a482bdae-4696-49bc-b049-efc177ce329a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333b6850-88ee-4dba-a9ce-15603ae6bfd8",
        "cursor": {
          "ref": "cb919faf-3e55-4ada-8348-a16f19138459",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "444515f7-ce07-4a0c-9116-76d3ddb8e2d3"
        },
        "item": {
          "id": "333b6850-88ee-4dba-a9ce-15603ae6bfd8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f50d460-6148-4047-9c7d-18146b82d4d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbce3d79-34f9-49e7-a6e6-0147eb41f1bf",
        "cursor": {
          "ref": "578476d2-666d-4b96-8556-494be10d263b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "71fc225a-5dfc-4baf-a6c0-a6dabc3c7a2e"
        },
        "item": {
          "id": "cbce3d79-34f9-49e7-a6e6-0147eb41f1bf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5b3621dc-2b6d-4846-87d2-936b5c6f86ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da4eea3-5dd2-45ab-ba7c-dae0d4013f87",
        "cursor": {
          "ref": "be471d04-24b6-41ca-89f0-74cc72794cd4",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a0985348-72e0-4190-b661-714c8dd7accc"
        },
        "item": {
          "id": "7da4eea3-5dd2-45ab-ba7c-dae0d4013f87",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "844a4cd9-0215-4cd8-8609-556e586484ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8d2d5e-38f0-4e5b-8e32-af55164664e0",
        "cursor": {
          "ref": "a4b44d2a-92f8-403e-a3f5-8603efd34daf",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "228813cb-5495-49f3-8707-4e9a1beb8e3e"
        },
        "item": {
          "id": "0c8d2d5e-38f0-4e5b-8e32-af55164664e0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f51d79a2-43a5-42a0-ad19-18013f70361b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99764ebf-1357-45a3-92c1-3f1c7a19fe78",
        "cursor": {
          "ref": "92973951-11bb-4fff-b1ab-2cdf6e9e0c8b",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "03122f7c-4d0a-48ce-8041-64a756046aa9"
        },
        "item": {
          "id": "99764ebf-1357-45a3-92c1-3f1c7a19fe78",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "567d462f-9c0f-4f9a-8e5f-7fe4a1b3f245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79622296-28d9-486c-a752-ce7af12111f4",
        "cursor": {
          "ref": "30f45e1f-2ad4-4721-875e-d2bcf6e29bf7",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dcf56856-bf39-46ea-b80b-8cbd1a65b7c3"
        },
        "item": {
          "id": "79622296-28d9-486c-a752-ce7af12111f4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "652417f2-5402-4cdc-9c96-987284ce919e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c5b5beb-dd25-4256-8e67-94c41f3585c6",
        "cursor": {
          "ref": "800faa56-7b15-449e-b582-69da9e951bb6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4d850cce-dee5-4654-acfa-8bd0c59cf0b3"
        },
        "item": {
          "id": "9c5b5beb-dd25-4256-8e67-94c41f3585c6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f4b94c6a-6002-4ee4-8088-6d797fde0048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c73903c8-3055-4461-819b-f76a603b663e",
        "cursor": {
          "ref": "ae66a9ec-cc51-4453-ab76-d62f9fead2fe",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9eddda86-d2f8-4000-b553-94fba0676e2b"
        },
        "item": {
          "id": "c73903c8-3055-4461-819b-f76a603b663e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a305ef60-403e-4e84-a227-389220b1859e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1e00f49-c892-4f12-a9ae-ea1178e30715",
        "cursor": {
          "ref": "f0b49e18-83f5-4f46-aa8e-cc019497a46b",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dc625277-f638-4a2a-889f-a9b021c3d057"
        },
        "item": {
          "id": "a1e00f49-c892-4f12-a9ae-ea1178e30715",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f2fb4d18-b3bd-488e-9f50-8bccd6865b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b9f875-5efe-48dc-b14f-7c991c04ddf1",
        "cursor": {
          "ref": "12717a89-ba14-4f79-8275-712f8e9407c1",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e8d45750-ee11-465e-be52-35815e94c0df"
        },
        "item": {
          "id": "55b9f875-5efe-48dc-b14f-7c991c04ddf1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fd89ab0e-94a6-4c7d-a7ec-f17646ceb750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92dd5f2e-8bff-4c27-8588-d0d86b686ae6",
        "cursor": {
          "ref": "1a893316-c63a-4cfd-9891-44311692a2cd",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2328d8f2-ee91-42a7-bfeb-eb1c19871778"
        },
        "item": {
          "id": "92dd5f2e-8bff-4c27-8588-d0d86b686ae6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6960dbeb-967e-4f05-900a-b7d337d52278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "973aec8c-ff56-486a-b5f7-344be172ed7d",
        "cursor": {
          "ref": "547857cc-927a-4ce4-abd5-c0ec7126c4c3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "824f38f5-e8c6-4ba2-8aa1-a0e0a0594205"
        },
        "item": {
          "id": "973aec8c-ff56-486a-b5f7-344be172ed7d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cc1cf464-96ae-42a9-9ae1-0ae77a59ab4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad511556-f922-4545-a0c2-1dbbed164c49",
        "cursor": {
          "ref": "8c108e83-83a4-4528-93f2-dbd641f461ed",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "169f658e-dba1-4fca-a9c6-f3d1c70108d3"
        },
        "item": {
          "id": "ad511556-f922-4545-a0c2-1dbbed164c49",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c268a8b7-7edf-4c4b-8a59-d793fa94f12e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a30b3603-a622-40bf-8f80-957f679e28f5",
        "cursor": {
          "ref": "1017eb20-26af-4f3b-b6f4-efb4f63a29d7",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "40a31cab-7f7a-4615-9ed4-eedf55e1fa9a"
        },
        "item": {
          "id": "a30b3603-a622-40bf-8f80-957f679e28f5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e2e8b24e-e455-449e-ac33-b31b96a85c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0baf29-529e-443e-9dd2-fed18db55b64",
        "cursor": {
          "ref": "c9972d9d-33e5-4077-b297-65c0bab675a5",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "aa95c41f-a22f-4969-8bf5-c96dc21c7ef1"
        },
        "item": {
          "id": "cb0baf29-529e-443e-9dd2-fed18db55b64",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "32b4cfd4-3257-4b6b-8f27-8565df029ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5b9ce7-5b77-4e02-be9f-4c03e73a6bfa",
        "cursor": {
          "ref": "07b10bc7-2dae-4f6c-b73e-8daa0a892671",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4ae25fa5-8db8-4540-82bc-220b79954141"
        },
        "item": {
          "id": "fb5b9ce7-5b77-4e02-be9f-4c03e73a6bfa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "69a5c359-7ff9-4acf-bf3d-cf47acf4759f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c306d6-6f52-47b0-a504-de54bae890d4",
        "cursor": {
          "ref": "1f95d2f6-ec15-4da1-80dc-02d3789eb805",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9843a501-87b8-477d-890f-417417536853"
        },
        "item": {
          "id": "29c306d6-6f52-47b0-a504-de54bae890d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "39adb8cd-58cc-457c-afd7-5a387fb8ad00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65175a2b-b12f-4f6f-ba0a-63b0e6703dae",
        "cursor": {
          "ref": "38b8cce3-8c5b-48f1-800c-c978e59965ce",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e82d1e2c-2e0d-4889-9e64-f58419b28fc5"
        },
        "item": {
          "id": "65175a2b-b12f-4f6f-ba0a-63b0e6703dae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b8021d92-f39f-4f9a-8bb1-fe48ee690c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea3b300-81f1-4dac-8273-32e19da931d0",
        "cursor": {
          "ref": "0033de84-f4ce-45a4-b23f-90e3f112b30e",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "55b784ef-58ac-4541-b62c-79659df5fffa"
        },
        "item": {
          "id": "9ea3b300-81f1-4dac-8273-32e19da931d0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8649581e-eefa-42c9-aa34-a7ad89e67deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea459b9-517b-4bec-96f8-e0d5c08f1858",
        "cursor": {
          "ref": "e78fd998-2219-439f-8f00-96fd3f5b69cb",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cf658340-2fdc-4a23-9ff5-755b6f0e6800"
        },
        "item": {
          "id": "8ea459b9-517b-4bec-96f8-e0d5c08f1858",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c05a42de-8dfa-4196-aa9a-eb1917de6aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9aa7c4-0e37-47f2-8e06-fe9581496499",
        "cursor": {
          "ref": "0f5c90ed-615b-4e8b-a4dd-8858f2ca3532",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cac43c90-da29-42a6-8966-80deb81957f0"
        },
        "item": {
          "id": "2f9aa7c4-0e37-47f2-8e06-fe9581496499",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d2895fd6-af02-4f04-857e-207223fd412e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1eaac9-e01e-436a-8b9a-97e5b29fc2e2",
        "cursor": {
          "ref": "65d73b0e-9b45-4622-adb6-d6267b906421",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e44c387e-2a15-42b6-bd7e-5d9831203d85"
        },
        "item": {
          "id": "0c1eaac9-e01e-436a-8b9a-97e5b29fc2e2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0a61f430-7fa4-4d3a-bc20-991467261428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8912c6-ac48-48cb-a06f-cb30f2b7ae40",
        "cursor": {
          "ref": "e5e564f8-bb3d-4a9c-8e13-0363f49611af",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "127e54ca-4fea-45d0-b6c4-a118c83ac62a"
        },
        "item": {
          "id": "ff8912c6-ac48-48cb-a06f-cb30f2b7ae40",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c94f7cd6-cfc6-4bca-9287-d66a96f34a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65400014-5a9c-40bb-b3b8-44c2efed1480",
        "cursor": {
          "ref": "385fb1ed-34c8-458a-b91c-3f34aad12d1b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4eac8585-817a-47a6-83ca-105e48656318"
        },
        "item": {
          "id": "65400014-5a9c-40bb-b3b8-44c2efed1480",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "46f59dae-8f81-48cc-af28-8794e834b8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044afe69-7d2a-47c6-b7fe-3510d894a1ec",
        "cursor": {
          "ref": "73d12d6e-5353-4326-84b6-b905ecb63d43",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "efba19bb-ed75-44f2-a15d-a5de809ce98b"
        },
        "item": {
          "id": "044afe69-7d2a-47c6-b7fe-3510d894a1ec",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2d6a53b6-e8c3-4e1c-ba82-0b3d3020fb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e72419-50d4-41f9-a986-b1ea4abff62d",
        "cursor": {
          "ref": "9e6e5e13-2744-480e-9f8b-a4abc4a0547a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "70275504-e8f5-41a9-8eac-7da4955cc4e6"
        },
        "item": {
          "id": "b9e72419-50d4-41f9-a986-b1ea4abff62d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2048c7f2-0c4f-45ed-a98a-b169eb9aacf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0b3d0f-8198-4696-acc9-063006a95ccb",
        "cursor": {
          "ref": "041ca96a-1d38-4e6b-bd9f-d330cb15717b",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "707f3f7d-bf72-454f-8f8d-5fbf939f11f6"
        },
        "item": {
          "id": "cd0b3d0f-8198-4696-acc9-063006a95ccb",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8cd22b22-da9a-4c3c-a200-6fbaebebc7f1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "382e9750-05b9-4b6a-aaa2-6c02756511d0",
        "cursor": {
          "ref": "60fd6624-aabe-4948-8bfb-7507e382e249",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "06fc9c59-848a-4300-a7b6-ffd229a03946"
        },
        "item": {
          "id": "382e9750-05b9-4b6a-aaa2-6c02756511d0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e9482eaa-bb47-4b15-96a9-bc0ae076b098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e6c76860-d93e-48ab-a241-26087231e1eb",
        "cursor": {
          "ref": "3c6cfc8f-073c-4280-94e6-e2d5a8fc850c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "77ba2efa-86e0-421d-8b62-d7d90407545a"
        },
        "item": {
          "id": "e6c76860-d93e-48ab-a241-26087231e1eb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "51c48f75-d9bb-4b00-9fb4-c4baf6eb4209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c76860-d93e-48ab-a241-26087231e1eb",
        "cursor": {
          "ref": "3c6cfc8f-073c-4280-94e6-e2d5a8fc850c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "77ba2efa-86e0-421d-8b62-d7d90407545a"
        },
        "item": {
          "id": "e6c76860-d93e-48ab-a241-26087231e1eb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "51c48f75-d9bb-4b00-9fb4-c4baf6eb4209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a432df3e-e91b-4e9a-88c7-a7dab67e4dae",
        "cursor": {
          "ref": "baca031e-56be-42c2-87e2-ae0d20fb1afe",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "de4d8196-2612-4f7c-9381-b11c611835da"
        },
        "item": {
          "id": "a432df3e-e91b-4e9a-88c7-a7dab67e4dae",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "fb35be37-4e6c-42a7-a997-4d5de7e04f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7cab3f-6771-45d6-b63d-4be92ef745e5",
        "cursor": {
          "ref": "c6500e49-5217-4c76-a658-fa1fa7036850",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a2d896a3-1bd7-4de0-b7ad-0823291e89ec"
        },
        "item": {
          "id": "bd7cab3f-6771-45d6-b63d-4be92ef745e5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "50584343-e22a-407f-85ae-14828601a763",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad66e36d-e231-4a54-8209-d6dbf16f0ec1",
        "cursor": {
          "ref": "7ccff4f4-d0c4-4639-a5c9-4f02a60e7ef6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "49111ee1-20d8-4003-948e-15f5cbc22dda"
        },
        "item": {
          "id": "ad66e36d-e231-4a54-8209-d6dbf16f0ec1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "66d6e842-eadc-40f6-8dc9-ef6f45ef2e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fae96b4-9632-4500-9cd9-dd006fec834e",
        "cursor": {
          "ref": "d9f7df0b-916e-4e73-923c-d112b56aca24",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "3f4ff7f5-cbc1-46ed-9459-286fafa0a67c"
        },
        "item": {
          "id": "3fae96b4-9632-4500-9cd9-dd006fec834e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2a20e943-04ec-4d4f-a573-e965c3525dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522148e4-32fe-4c8d-8d3d-98999f549ab5",
        "cursor": {
          "ref": "ee02d81d-9c81-465b-920c-80cf361fa2ef",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4857b039-a70e-4f87-9781-6898d4986a2d"
        },
        "item": {
          "id": "522148e4-32fe-4c8d-8d3d-98999f549ab5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3a36d942-6559-4cdb-9dd4-a56c82d54681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb15bfa-c2ee-47c9-8a05-a75f8e036ffe",
        "cursor": {
          "ref": "fc5e8b9e-a5a0-49da-8971-3c7b24f27e34",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "81d3b660-2d26-4a31-961e-edb7881241f2"
        },
        "item": {
          "id": "3bb15bfa-c2ee-47c9-8a05-a75f8e036ffe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9c95c5b5-772b-4a54-b0bc-1e8faa46e61c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6196a46-e303-4a26-8af0-8c03720ee238",
        "cursor": {
          "ref": "47e4fcbd-b691-4c19-8f17-75e3db9f71dc",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0733a60a-77b6-4358-b924-45e99a17cdb6"
        },
        "item": {
          "id": "b6196a46-e303-4a26-8af0-8c03720ee238",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "61f87841-8996-4afe-ad85-04670d12e3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f8ed833-5257-4da6-b582-af0f6fd3485a",
        "cursor": {
          "ref": "17f373d9-2b32-41ba-85ff-5ac1d6ad38a4",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c2783799-5d00-4c9a-aa62-0565b7ad10c7"
        },
        "item": {
          "id": "8f8ed833-5257-4da6-b582-af0f6fd3485a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0576b544-108f-4dd9-ab9d-2796ad3b80a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 191,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2badf83-4846-49c4-bc01-691405c4e30b",
        "cursor": {
          "ref": "b3f1a6e4-7360-476e-b537-d34ab30edc49",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0b08126e-eab3-4db5-9746-b496884bad9c"
        },
        "item": {
          "id": "b2badf83-4846-49c4-bc01-691405c4e30b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4ad3e5ac-adb4-4651-ae9e-03a8fa7ed72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655c668c-92c7-45d2-89dc-928ab3950179",
        "cursor": {
          "ref": "59cc338f-6284-4860-ab8b-65e0045aff86",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "241ef050-e230-4ab5-ba7f-c783ef416cbc"
        },
        "item": {
          "id": "655c668c-92c7-45d2-89dc-928ab3950179",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1ed54a9c-4df5-4d86-96af-883304e21f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b008de1d-61d9-414d-88a6-d3d98fb70962",
        "cursor": {
          "ref": "e7f4c4a0-0b79-4bc0-b241-7e0843b0ebf9",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6a10c06d-f14b-4e26-b6a5-3d909bee893a"
        },
        "item": {
          "id": "b008de1d-61d9-414d-88a6-d3d98fb70962",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f6367ee1-f60e-4748-a8ee-62a23b04f7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff74cb14-7b2e-4325-8a6f-88d184c4f5ff",
        "cursor": {
          "ref": "27719020-4fe0-4913-809a-522f0842ea06",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "904aeb1a-6a5a-48ff-96e5-925e0d25df56"
        },
        "item": {
          "id": "ff74cb14-7b2e-4325-8a6f-88d184c4f5ff",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "489bb5e3-ab56-4d20-878c-b3be801eed91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae2eacb-a2a7-467e-9d65-87299f218e0d",
        "cursor": {
          "ref": "08c6aabd-73a9-4816-9425-1ac9abd7d7bc",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c6ba784c-154e-4b27-933f-82b0de62bf7e"
        },
        "item": {
          "id": "cae2eacb-a2a7-467e-9d65-87299f218e0d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b56db5a5-5d70-4a03-a93b-388d55c675e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb5ac67-6ff1-48ed-828f-af2602cbfadf",
        "cursor": {
          "ref": "e5c5c216-6a15-46e4-a2bf-81ee79afb9c7",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2b273727-4430-4e20-9f73-d0c5f074be07"
        },
        "item": {
          "id": "2fb5ac67-6ff1-48ed-828f-af2602cbfadf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7b72260d-930c-4ca1-b2b1-40eb04270655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc29d0d5-63ba-4897-8937-bcfcff25d972",
        "cursor": {
          "ref": "aed52585-4101-4f59-b988-8493e1f4e55e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c4225f61-6996-4e7b-a7f5-bccdbda74996"
        },
        "item": {
          "id": "dc29d0d5-63ba-4897-8937-bcfcff25d972",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9a8b42e8-569f-4f7e-a4ae-e21c53e6b02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9245d059-9ad0-46d1-9995-6cc2a24ceb66",
        "cursor": {
          "ref": "c26c2226-2489-426e-9179-9c80a49fc655",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0aed0104-368c-4a7b-a24e-b0596aed50c9"
        },
        "item": {
          "id": "9245d059-9ad0-46d1-9995-6cc2a24ceb66",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "98dbb7c2-5356-4c1c-875b-006aabe583c3",
          "status": "OK",
          "code": 200,
          "responseTime": 251,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "40489778-4341-4531-ad91-bc73abc2ded8",
        "cursor": {
          "ref": "cc873bb2-ab50-49a6-91df-b0f255b8e49d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "89398e50-1d30-473a-99b8-b7eb356838d9"
        },
        "item": {
          "id": "40489778-4341-4531-ad91-bc73abc2ded8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "29d03a2a-567f-44b2-a424-33360d28b866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b867af9-d90b-40b1-87c7-128294b59e26",
        "cursor": {
          "ref": "ade7ffa8-1a82-42a2-892e-1d0808df1c29",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e896ff76-5dee-4841-8bf4-751d76e51d89"
        },
        "item": {
          "id": "2b867af9-d90b-40b1-87c7-128294b59e26",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "115f73f0-3495-424f-b267-ad162f07823e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c7a995-64c8-41b5-bd97-8685dee26093",
        "cursor": {
          "ref": "2c2334b9-322e-42e4-b77d-307d6337f28a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6c53bbe6-1938-40c5-8e45-7e62a4f5b8f3"
        },
        "item": {
          "id": "82c7a995-64c8-41b5-bd97-8685dee26093",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b7f70679-b95b-459e-93cb-5eae5215fc8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149b9d13-59ef-432c-88b6-2ad19b9768d1",
        "cursor": {
          "ref": "f5d1c3df-30a0-42d1-b072-283476faed22",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c310b3b1-3e4e-429f-8b80-a00bac7ad25e"
        },
        "item": {
          "id": "149b9d13-59ef-432c-88b6-2ad19b9768d1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6a92588a-f19e-48ce-a46b-0ededa84b893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b33634a-5bb1-4f87-a1de-1ee80019f209",
        "cursor": {
          "ref": "78862e8a-df98-4f7b-8507-af1b63c5cb68",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bdb7dbcd-8c83-4b0c-9ab2-5876b3283e7b"
        },
        "item": {
          "id": "5b33634a-5bb1-4f87-a1de-1ee80019f209",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2e66aaeb-b207-4279-ac24-c7effe3e93f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b5d675e-2ca2-4ebb-bf9b-21ecc1b45836",
        "cursor": {
          "ref": "786279f6-1bd1-458e-8939-6f31ad4d0fd3",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "31afd4bd-a592-4e19-b456-7ec30b988fa2"
        },
        "item": {
          "id": "6b5d675e-2ca2-4ebb-bf9b-21ecc1b45836",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "df585e67-da0c-4fa2-9b93-267320e6831e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b704a895-0e60-4ea5-a0e6-406082a379d9",
        "cursor": {
          "ref": "63e53de6-6f60-40cf-95b8-3892ac817cb2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2bbd08aa-7292-4c3a-a67b-1bbbfbfbd95c"
        },
        "item": {
          "id": "b704a895-0e60-4ea5-a0e6-406082a379d9",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "98e047ab-8f91-480f-bae7-7f8177b6aa2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594852fa-a666-4070-8a8c-4a900c9038cf",
        "cursor": {
          "ref": "a40d9eaa-2f30-42c7-8a32-88a49c77611f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5e75e641-c04c-4f94-b209-fd68757e25c7"
        },
        "item": {
          "id": "594852fa-a666-4070-8a8c-4a900c9038cf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f0d86184-a4ae-4789-b19b-f1d462977004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f10e413-85e0-4518-9266-4f7dc04f1f32",
        "cursor": {
          "ref": "40721be4-65b8-4565-842b-0a6fbb3d4e53",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "49bff359-e102-459d-89dd-127fb796f0d6"
        },
        "item": {
          "id": "5f10e413-85e0-4518-9266-4f7dc04f1f32",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6bae246b-9b1f-4ea7-9858-03c3e7f839ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c67635-488c-4238-a138-cf5cc9698beb",
        "cursor": {
          "ref": "1c5d7da6-44b4-4532-9ed8-54f929f99b86",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "ef870668-cb2f-40e9-bed5-e6918a8a6dd6"
        },
        "item": {
          "id": "95c67635-488c-4238-a138-cf5cc9698beb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7338ae6f-5607-4a2a-9613-58b2fe71c89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143d0416-eda8-41f1-aa1b-c9b9f476af3b",
        "cursor": {
          "ref": "b57b6917-aa3d-49a2-98df-1a3dccb0ab75",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "905a33e5-d6ff-479c-beff-53a3b98d7991"
        },
        "item": {
          "id": "143d0416-eda8-41f1-aa1b-c9b9f476af3b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "754f3ef0-52d3-48de-abab-6c9cda01b71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f664fc5d-8361-4b6b-b2ed-2de3b13e4a0e",
        "cursor": {
          "ref": "8b5c44d0-7b71-4528-9b54-a9a0fa15190a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "811bf1b9-3b4d-462c-bbf8-183f8dacc426"
        },
        "item": {
          "id": "f664fc5d-8361-4b6b-b2ed-2de3b13e4a0e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8805b652-f366-4e8b-a71a-24e6bbcbccd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343a446d-c752-4442-911d-bf58d39bb3de",
        "cursor": {
          "ref": "2bd2f4c3-c17c-454a-8639-b09311edc33e",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f25fa347-de3d-4cec-a679-fad2e301c18f"
        },
        "item": {
          "id": "343a446d-c752-4442-911d-bf58d39bb3de",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "623a382d-b80b-4ea5-a663-12d3c8795f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3dcf1d2-47f1-49a8-95da-5cc187d8a014",
        "cursor": {
          "ref": "5b3795f7-1747-4466-8f87-0d62b76adb4e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "13c44957-5e69-43dc-b5e0-d09ee2646f26"
        },
        "item": {
          "id": "f3dcf1d2-47f1-49a8-95da-5cc187d8a014",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8ad264f3-3dde-47e6-bd26-7e250a731418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4865ec94-c166-41b6-a578-efb4c1da7049",
        "cursor": {
          "ref": "deba8d36-3f91-48a5-9304-b836375c412c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4cc53700-4ce0-4def-8ec0-145d421e45d2"
        },
        "item": {
          "id": "4865ec94-c166-41b6-a578-efb4c1da7049",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "19d3f778-44b8-4e27-929c-024bdacac60e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606358fb-c0a3-4b73-81b9-119e134c1078",
        "cursor": {
          "ref": "9f887e54-d961-4923-bb0d-58f5a8a3b068",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "143d4a84-59f8-454d-8817-8c4e9caf2ac1"
        },
        "item": {
          "id": "606358fb-c0a3-4b73-81b9-119e134c1078",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5bc5a671-22a6-4061-a762-2776eb1f464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57774b75-4e0f-4602-806b-a4e4b0c9d6e5",
        "cursor": {
          "ref": "726ce894-1498-4063-b56b-25baa0d93c1d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c4e52859-ed6a-4d76-a4e3-c5a66f5ea762"
        },
        "item": {
          "id": "57774b75-4e0f-4602-806b-a4e4b0c9d6e5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bf6aa6e3-2736-48c2-9be9-15961c27522b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27cc6beb-2b5a-472f-8e6e-2645ef70d92c",
        "cursor": {
          "ref": "bf79de8b-714c-4e95-97ff-13b10324d9a4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e1c2ee91-6479-4b34-9f47-a1743bcafb41"
        },
        "item": {
          "id": "27cc6beb-2b5a-472f-8e6e-2645ef70d92c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "92503e4b-aca7-4429-87b6-0aa8037a5b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a6d958a-4342-4377-81ec-1fe7ac1fc8ab",
        "cursor": {
          "ref": "afd7e5f4-9d0a-4778-99b3-6f7b84577040",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a11f7e2e-3340-43ff-b201-16ce052ae94e"
        },
        "item": {
          "id": "5a6d958a-4342-4377-81ec-1fe7ac1fc8ab",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "a98fd4d6-1fa4-40eb-8817-664aa804afc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca9a65a-4a3e-4764-bb1d-ca3aea0eae95",
        "cursor": {
          "ref": "f4074c5f-e7f9-4b08-a222-1c13be4d5cf8",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "00cdafac-78a3-4311-b70e-d85c310c1dc1"
        },
        "item": {
          "id": "bca9a65a-4a3e-4764-bb1d-ca3aea0eae95",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0d82e4fc-c877-4094-b856-3a6819fe4b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da15ec67-04a4-4ba2-b31d-924180596cad",
        "cursor": {
          "ref": "8569ab5e-30c2-4ca5-ad5e-c0a07e59eeae",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6d98736f-df99-4d7d-a2ad-bb5dc9822f5e"
        },
        "item": {
          "id": "da15ec67-04a4-4ba2-b31d-924180596cad",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "10281d45-5a46-4ba3-9079-6def42330afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7585e87-63d1-4479-9bcb-aedf64ae6226",
        "cursor": {
          "ref": "393628c9-fb79-4756-8af2-906e0febfc09",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4136d683-4a5c-4467-bfd8-a3b004e07d3b"
        },
        "item": {
          "id": "a7585e87-63d1-4479-9bcb-aedf64ae6226",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "cfc00e35-745b-40cc-aac2-166d971a77d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8f8ef4-a2be-4d60-bed8-89ad135d8631",
        "cursor": {
          "ref": "55fba0c3-94d0-4f25-8a64-be9a5953528c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1f0c8d31-e97e-4f2d-ac55-304db147d262"
        },
        "item": {
          "id": "0b8f8ef4-a2be-4d60-bed8-89ad135d8631",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6141a7b1-46d9-4708-ab60-8b349b6ee3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7df712-e7df-46b5-ad20-2e95b348f6db",
        "cursor": {
          "ref": "9d3969df-82cb-4e2c-a9b8-2d040aeb1b15",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b362814e-cebd-4b4c-9ab5-3450ad485c89"
        },
        "item": {
          "id": "cd7df712-e7df-46b5-ad20-2e95b348f6db",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "a120b844-4ebb-4cb6-ae1e-a147787749c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d5c678-bef2-497b-96b5-9a73fffc7158",
        "cursor": {
          "ref": "33a7fe5c-fa19-4b12-8302-4578432aeb25",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "22ff3eb1-fbac-4768-ba02-da9b71b0dd38"
        },
        "item": {
          "id": "48d5c678-bef2-497b-96b5-9a73fffc7158",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9a7c7957-fef5-41a7-af4b-dc3f21e2156e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bee2aba-eaf6-4a27-8801-3cb855c91bef",
        "cursor": {
          "ref": "22f2d443-f4dd-4a59-8e87-1e7bc9c5348c",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea2185ce-810d-4fff-a1fb-3cbd4e7653e7"
        },
        "item": {
          "id": "6bee2aba-eaf6-4a27-8801-3cb855c91bef",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2a78c642-96b4-461d-bd6e-888917511821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45645a26-f92d-4fdd-9f2b-8e7112205281",
        "cursor": {
          "ref": "dfc6f910-f4b1-4a7a-9754-095a393614f9",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "71e9ddb6-9145-48f1-a2b9-d4dbc0245e87"
        },
        "item": {
          "id": "45645a26-f92d-4fdd-9f2b-8e7112205281",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "629c1af5-6360-4d5e-a6ec-5043f07a8b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7528e0c-a852-4c84-8114-da2a2b48717e",
        "cursor": {
          "ref": "02771c42-9a6e-4d53-b71f-3057645d8b94",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bcdcdd60-17ab-4ae7-a5c3-882aa6d0ca3e"
        },
        "item": {
          "id": "a7528e0c-a852-4c84-8114-da2a2b48717e",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "70237c21-14cb-4520-a8e9-ca89ac69d5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7877af4c-f0dd-494d-ab6a-20d39acdac0e",
        "cursor": {
          "ref": "025400d0-ffc5-40b2-a9d8-ed6c7b1a5c45",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "41c262f4-740b-4c10-b9f3-70dcffb355fe"
        },
        "item": {
          "id": "7877af4c-f0dd-494d-ab6a-20d39acdac0e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c662601a-9173-48b2-bccf-8b99346eafb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49645f11-4dcd-40eb-b4a8-97469b68773c",
        "cursor": {
          "ref": "53066e8a-3aff-49ab-bed4-e1983228bc19",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "44c1ba6f-070b-4943-b82a-f35057fc7935"
        },
        "item": {
          "id": "49645f11-4dcd-40eb-b4a8-97469b68773c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "105a33b8-f4c9-4a63-b3d9-72a1acc8baee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7f1278-b5a4-4b7e-9880-116ce8d4bdf1",
        "cursor": {
          "ref": "eb3c1fe1-2119-43bc-a756-c27e8ffd52d2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "457070ab-ee53-4e31-afc2-d050eec8ba8a"
        },
        "item": {
          "id": "8b7f1278-b5a4-4b7e-9880-116ce8d4bdf1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d681fec7-03ef-4484-a53c-f1cc8f8209a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9565e477-da34-43ab-b7b7-7a91818cd675",
        "cursor": {
          "ref": "316f13a5-2541-4161-91a5-a4c2ba1a3b73",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bf8a8ede-48f5-4f90-bb55-97202f923888"
        },
        "item": {
          "id": "9565e477-da34-43ab-b7b7-7a91818cd675",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0f28e391-5050-4316-9bc6-4a7d68a9e26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c8b6a6-0905-4264-85f2-5fc20ee2ede1",
        "cursor": {
          "ref": "001a149f-1ea9-431c-8885-11625d590692",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "eeee9730-7981-4e0f-b3e7-32033bb13fcd"
        },
        "item": {
          "id": "d8c8b6a6-0905-4264-85f2-5fc20ee2ede1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e14a4091-22fa-4046-9936-bb2a6abd4174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd36af4-1882-43ca-b1a5-52d6ba040aec",
        "cursor": {
          "ref": "5cb4d2e0-5926-4d1b-a2f5-23996832fc62",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "fa69460d-d833-4131-95f8-6a8bf9e3c739"
        },
        "item": {
          "id": "dfd36af4-1882-43ca-b1a5-52d6ba040aec",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "be0c0c28-a571-4bb5-b0a8-d065d7b63774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "649bc133-7039-4e21-8e7e-08f8ef854472",
        "cursor": {
          "ref": "ee33a008-7304-4ab1-a17b-4122d3d0f545",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0b67e00f-bca3-488c-86a7-5a356fc55c35"
        },
        "item": {
          "id": "649bc133-7039-4e21-8e7e-08f8ef854472",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5d918b85-5f80-41f6-beca-7be91c126a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d5c3bd-a867-4ff9-88ec-27e9361193e5",
        "cursor": {
          "ref": "e5f155e6-f47b-4435-a0b7-5190994136d7",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "26027e48-4360-43c6-9d22-c381bfb24882"
        },
        "item": {
          "id": "15d5c3bd-a867-4ff9-88ec-27e9361193e5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4d892a5c-2e09-4bdf-9c0e-8bbc8535f475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 861,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdd1b8b-cc5d-458f-9f9f-c1faaac5bb89",
        "cursor": {
          "ref": "4aa4efbd-a43e-4f0e-9f27-2655f283d32a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "063eada1-42a8-453c-adca-ab6b4c6972a4"
        },
        "item": {
          "id": "3bdd1b8b-cc5d-458f-9f9f-c1faaac5bb89",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "75f5f141-2ab2-4873-a69b-1289ff8edfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b703008-29c7-4773-bc5b-48769b91478f",
        "cursor": {
          "ref": "edba5718-bad1-4273-83b6-93df5a75e36e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9c154b2f-4710-4f0e-9b7e-1d9c60d0cfb6"
        },
        "item": {
          "id": "8b703008-29c7-4773-bc5b-48769b91478f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c033b47e-ba7f-4b99-b053-a3aadae0e733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494720db-0062-43fb-a0a6-e301804cccde",
        "cursor": {
          "ref": "f8c0ac3e-ef7c-4f59-b260-17e35b662aa1",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "37c61a9d-2363-445e-8aaa-c1d2fa14efc8"
        },
        "item": {
          "id": "494720db-0062-43fb-a0a6-e301804cccde",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3e2efe87-8942-41c4-ad08-0d70e6c8865d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0062edf5-abac-457a-9beb-98fab6369af6",
        "cursor": {
          "ref": "858c3f74-4623-4182-ade4-8b843f92bcad",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "13ddd2ba-197f-49f5-b1ab-797fc6c6f59c"
        },
        "item": {
          "id": "0062edf5-abac-457a-9beb-98fab6369af6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "87094cd9-1578-44df-89a7-d358b2e3d655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e43d895-b32a-48e2-a481-07eeb3fb4509",
        "cursor": {
          "ref": "ae66b740-6d8d-479f-a4af-1c61650bcf96",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e89b4528-10ac-4f49-b9e5-fa7529dc1ce2"
        },
        "item": {
          "id": "5e43d895-b32a-48e2-a481-07eeb3fb4509",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9aefe3a5-06fa-4ff5-b04d-4e832378c73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec67cf46-df2b-4e90-ad31-447030d23e58",
        "cursor": {
          "ref": "67e1c98b-5c92-49de-a849-1a37ad8bf910",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "92ed5790-e363-420a-b50b-cd79bc02e674"
        },
        "item": {
          "id": "ec67cf46-df2b-4e90-ad31-447030d23e58",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d381c109-3d33-414f-9627-8c62156faf56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fdbb1e-7171-4e0d-a79b-a1bb509eb675",
        "cursor": {
          "ref": "942df5d9-55f4-4115-aefe-f7fb419982d6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9d4fa138-ecb1-48ad-adc0-80b48c9f7b22"
        },
        "item": {
          "id": "72fdbb1e-7171-4e0d-a79b-a1bb509eb675",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d8dc4690-d6fa-4dc5-ba5a-612993357e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a57929-819e-4cb1-a0a8-9b4ce7c1618c",
        "cursor": {
          "ref": "b1e63743-003e-4865-8aee-a095a5d356f1",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6cc28481-997c-4729-a7e0-8a06bb02bce5"
        },
        "item": {
          "id": "07a57929-819e-4cb1-a0a8-9b4ce7c1618c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0d7fbbe1-a589-424a-876f-99adeb89b47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e93efe6-724b-47ef-930d-c4ccc8a84752",
        "cursor": {
          "ref": "a87f8c6f-cc2a-445e-ad38-125de966840f",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f47fd5d6-cd55-4bed-86b5-82164e5ed7fb"
        },
        "item": {
          "id": "1e93efe6-724b-47ef-930d-c4ccc8a84752",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5c782771-79cd-4b77-ac98-0a0855dc4fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88318c66-8b85-4eb0-84a0-30f826b8466b",
        "cursor": {
          "ref": "1c9b4510-9099-44ca-9b90-efd05363b839",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "0ccf8583-57c0-49c0-b1b6-051c53d2de06"
        },
        "item": {
          "id": "88318c66-8b85-4eb0-84a0-30f826b8466b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d53c4993-bda4-4117-85cc-d6320a2998a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf23a5e-ea8b-4c8d-a924-7cf42948ac90",
        "cursor": {
          "ref": "4e9b6090-c473-49ff-a039-ae3d4aebcfbe",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9b0820d9-754c-4a3f-82b4-0c4e6b065d7b"
        },
        "item": {
          "id": "3cf23a5e-ea8b-4c8d-a924-7cf42948ac90",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "16d9ad29-2637-468c-a768-02606a691d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841f901f-85c9-45f2-955e-90cf1f07bc56",
        "cursor": {
          "ref": "94d231bf-1c23-4cbe-b34a-96a34923b3f9",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9eba2d1d-dca3-4da2-8728-108076b9e6d4"
        },
        "item": {
          "id": "841f901f-85c9-45f2-955e-90cf1f07bc56",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "75fe5e55-4a93-45cc-9e39-be7a519803ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ad1c99-5cf3-4aad-8e9a-db263ba551a3",
        "cursor": {
          "ref": "ee629552-e8d6-425b-bf10-5f5520e87684",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0bb5a463-ebd0-4cfa-8aad-2b29965b9cfe"
        },
        "item": {
          "id": "52ad1c99-5cf3-4aad-8e9a-db263ba551a3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e30b5eec-eca2-4240-af37-42db7e6990f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbdc767-9a73-4cc4-834c-f2dcfd4d78e5",
        "cursor": {
          "ref": "b1161f10-e98d-4fb9-9c4f-a4d1458de753",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8f18fb96-b519-4988-9fc6-34328b97e312"
        },
        "item": {
          "id": "9bbdc767-9a73-4cc4-834c-f2dcfd4d78e5",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e785f20b-cd4d-4bed-8ae5-d28ef4b6d3c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf40493-7dad-4223-b367-f4f13aa3d8f1",
        "cursor": {
          "ref": "56712698-708b-42e6-9940-148a937ef68c",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3c11c686-21db-4b51-988e-02ef0819d7da"
        },
        "item": {
          "id": "7bf40493-7dad-4223-b367-f4f13aa3d8f1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "72d0e9ea-9509-4628-9aff-e7ad31cda7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717df758-b231-4a7b-a3f4-10e89d2563eb",
        "cursor": {
          "ref": "6017f259-178b-435f-90e7-373689e69125",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3a94f8be-df8b-447c-bb1c-0b534d7633f6"
        },
        "item": {
          "id": "717df758-b231-4a7b-a3f4-10e89d2563eb",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f7e282b2-77b4-4eef-96cc-b907f7831459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f246385-32f6-41f0-96f9-562f03770813",
        "cursor": {
          "ref": "533c773f-ac58-4010-92f9-737b8b90005d",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a67c9438-913d-4269-bfeb-78fa5fc5fd61"
        },
        "item": {
          "id": "9f246385-32f6-41f0-96f9-562f03770813",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "53c6bb61-08a4-4c91-9c53-df655efded42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24139829-a114-4803-9d6c-a481b962728d",
        "cursor": {
          "ref": "c8becbe7-4a9c-4315-9562-265356a839aa",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a5416018-e40a-4571-a52e-f4be382efe97"
        },
        "item": {
          "id": "24139829-a114-4803-9d6c-a481b962728d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d32551c0-79a2-44c9-adc0-0c11e96c5269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60437890-1a19-4afe-9267-1c90f1b7fcd9",
        "cursor": {
          "ref": "2382d00d-36ce-4145-b288-12bd790bbdd5",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "82251a7f-fdc6-4b7f-85dc-001fbf4a0f23"
        },
        "item": {
          "id": "60437890-1a19-4afe-9267-1c90f1b7fcd9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ee07c228-9302-48e2-829b-46b34cec64d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657627dc-8c95-4982-ab4e-b0f28cb46ca6",
        "cursor": {
          "ref": "09c400ef-bde2-4bca-b9f2-bc7b8e7dcbf6",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2e6b9994-0608-4247-b8e8-8d904562f14c"
        },
        "item": {
          "id": "657627dc-8c95-4982-ab4e-b0f28cb46ca6",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "67080122-c337-4a57-9af7-643b71a62432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b02fcb9-8275-4302-a8aa-7e1ea746932e",
        "cursor": {
          "ref": "7a77a112-3bc5-49c0-b8ca-1fcc4c2e6e0f",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "eb5880a1-c5ea-4729-b72e-79027cebffbf"
        },
        "item": {
          "id": "9b02fcb9-8275-4302-a8aa-7e1ea746932e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9605bbc2-f832-4e78-8d00-ab19328cbb59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faedb6cb-65b5-4332-8de0-648331a61ce7",
        "cursor": {
          "ref": "bbce30c6-90ab-4849-9687-6bd4e0947a65",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b7132d6e-6754-411c-af4b-7be169f7e587"
        },
        "item": {
          "id": "faedb6cb-65b5-4332-8de0-648331a61ce7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5a77790f-dae5-4d6a-9e21-678f2d962aba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345b83d1-57b1-45b2-89d2-350bab763733",
        "cursor": {
          "ref": "657b2516-2329-46fb-84c1-c8cfed4698a8",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9400747b-727d-4826-b124-e98cd81ab14f"
        },
        "item": {
          "id": "345b83d1-57b1-45b2-89d2-350bab763733",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "61815f1e-4e40-48fb-b1b4-76525003cf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae83ebd0-b767-40b8-872f-dc1a31fa9ffa",
        "cursor": {
          "ref": "9df45ce6-3cdc-4faa-b7c1-edc75ef7910c",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "249b213a-685a-49ab-9b08-ff758f678009"
        },
        "item": {
          "id": "ae83ebd0-b767-40b8-872f-dc1a31fa9ffa",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e5bbede0-1cfc-4e96-8c98-960dbeea5e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d57dd4-feab-41a9-8ca4-e38660badb75",
        "cursor": {
          "ref": "c4cb31a6-fdf2-4126-9be3-eb831af108cd",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4f041fc9-be1d-4d34-8368-5a80d4e97819"
        },
        "item": {
          "id": "03d57dd4-feab-41a9-8ca4-e38660badb75",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "84422b6c-446c-4ccc-a171-c705788731e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b55cf2-6ac8-4279-8314-5f7a5270999e",
        "cursor": {
          "ref": "f4c40d02-e616-46dd-bece-0c3338d09548",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "0435b8cc-4fbf-451a-9bd1-fc14933abf38"
        },
        "item": {
          "id": "88b55cf2-6ac8-4279-8314-5f7a5270999e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6613d2de-e15d-4394-baf2-acefaa261d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d5e888-1cbf-4f0a-84a8-9ee79ce7ff9a",
        "cursor": {
          "ref": "89dfd016-b49c-4e56-bc2a-3b20679bc2cf",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "499c0a24-0216-4f33-88f6-00079e37bea3"
        },
        "item": {
          "id": "f8d5e888-1cbf-4f0a-84a8-9ee79ce7ff9a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "18b4964d-a5a7-40ad-9148-f3582c7c805d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bb52c1-c2a1-4e52-b978-85f18603fcad",
        "cursor": {
          "ref": "5b7e5b32-c537-430d-aed3-d563df44c2a7",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "466840d8-7dea-47ca-a993-9362877d3797"
        },
        "item": {
          "id": "84bb52c1-c2a1-4e52-b978-85f18603fcad",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a09a0458-ac3d-4356-a14d-dad87e53d9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ac4a29-b6ed-44b9-935e-dcf31657ffc6",
        "cursor": {
          "ref": "8eb52925-cf98-4597-aef6-694079d3ee30",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7bfdcf0f-b449-4f6f-b46b-f7adf58d685b"
        },
        "item": {
          "id": "51ac4a29-b6ed-44b9-935e-dcf31657ffc6",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0ca8bf1a-39aa-4602-a79f-3ff1b0c971d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd37e6de-0e03-4e64-a5eb-f984cf302b4f",
        "cursor": {
          "ref": "d665b761-5bbf-4ac1-93bd-88b28bbd693a",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bd705b72-49b0-4d02-a755-35574e88cc29"
        },
        "item": {
          "id": "dd37e6de-0e03-4e64-a5eb-f984cf302b4f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4d3a946d-796d-4bb8-bca2-22017524b881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c172145-e7d0-46c2-afbf-32776c80b0b5",
        "cursor": {
          "ref": "1e8bf036-7c63-4c03-b1a6-990d582c98a3",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "20036ba2-2fd6-4738-99db-772ea4fa3cfd"
        },
        "item": {
          "id": "2c172145-e7d0-46c2-afbf-32776c80b0b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "603bac82-0c9f-4dd5-938e-6d4cd8f808ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7009081c-9756-47c8-96e1-5dbc11a94e74",
        "cursor": {
          "ref": "308d8b1e-8280-428c-813a-01ce9d950b3e",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b7a53ae0-9c9e-4922-9551-ea35ffae72d4"
        },
        "item": {
          "id": "7009081c-9756-47c8-96e1-5dbc11a94e74",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ad38bcac-571e-404f-9d62-f3aca16a09c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c9dc58-0f31-4f4e-b178-e7e9acd57f12",
        "cursor": {
          "ref": "d8c6a3d2-7230-4bc1-8d07-356028cf8367",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "441b3d14-112a-4ef5-882f-84ae09b29935"
        },
        "item": {
          "id": "c6c9dc58-0f31-4f4e-b178-e7e9acd57f12",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f3585560-5155-4674-bdf4-22652716ca79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40d70c42-d051-4a6b-be8d-8ccc2c5c024d",
        "cursor": {
          "ref": "61eb6e87-1a08-4da4-b758-a7bac0cf4e4c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dab2a090-f835-48a1-b4e2-3e3412df76db"
        },
        "item": {
          "id": "40d70c42-d051-4a6b-be8d-8ccc2c5c024d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ae348ffb-ce57-4a32-8462-346b71eecb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e2b511-abad-4521-b701-517b7af8d748",
        "cursor": {
          "ref": "e658b1c3-204b-427d-8779-f7f5ac5946f8",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7d071a4f-2f0a-4244-a0f6-bf58b66e2b9c"
        },
        "item": {
          "id": "33e2b511-abad-4521-b701-517b7af8d748",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fc427426-cf58-484b-bb07-2d55c9f8baa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbb0537-de69-42fd-b4e4-dafc2d81f2dd",
        "cursor": {
          "ref": "0c14be13-a0fc-4636-be52-beb7b1df0fd3",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "5f05b530-0d30-4a3b-a58a-a870a3e0a00b"
        },
        "item": {
          "id": "efbb0537-de69-42fd-b4e4-dafc2d81f2dd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "521c9823-0bd9-40f6-a993-55ac05af65c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885531c1-9a99-4fbd-8671-945b7cae6f4d",
        "cursor": {
          "ref": "23b7de69-817f-4e2f-94fb-763f28f02406",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0894b6d2-ba1c-4b8d-ac45-1e6c91eaa02d"
        },
        "item": {
          "id": "885531c1-9a99-4fbd-8671-945b7cae6f4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cf9d0417-1f3c-4ccb-a6e8-80f267c7b527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4be99f8-ff66-4d2e-9c4b-18e715da9d1d",
        "cursor": {
          "ref": "aa940542-e5f6-4e44-a33b-dcf9731d99b8",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "838e01e3-d127-4e3e-bd85-e85af6bc4b69"
        },
        "item": {
          "id": "e4be99f8-ff66-4d2e-9c4b-18e715da9d1d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "eb908def-f40f-4818-b5db-103998f57a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5a53d6-82b8-4ce7-8b5e-d880bc1ffc26",
        "cursor": {
          "ref": "950b2482-a3e0-4ce7-85b2-786a278b8182",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "51c816b5-fab8-437b-9c2e-adaae5f407bd"
        },
        "item": {
          "id": "3e5a53d6-82b8-4ce7-8b5e-d880bc1ffc26",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "75505189-e6fc-4690-8e12-99e0168f194d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d34f0e2-01be-4420-a298-e1888da5a5fe",
        "cursor": {
          "ref": "62dc4fe3-8037-4f97-9f1f-da9a9b7e51c1",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c959c882-e04a-4bce-b138-8b97357f3435"
        },
        "item": {
          "id": "9d34f0e2-01be-4420-a298-e1888da5a5fe",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4dc19ae5-f880-4e13-82c9-7bfe070ade6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411a320a-9a9e-4826-a3fd-2bce3536a5d0",
        "cursor": {
          "ref": "ac7b3ef3-e6c4-4faf-a87e-3392683b7419",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "917798d7-8501-4f8e-a922-25f95998e6bd"
        },
        "item": {
          "id": "411a320a-9a9e-4826-a3fd-2bce3536a5d0",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "31c3389c-be49-42d5-a16f-7cb3786d2678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69f0534-43ff-464c-a61f-fcc7357a083f",
        "cursor": {
          "ref": "842c53e5-b9ef-4f71-9b0f-85019e9f614a",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1c629c71-52f0-42d0-ae1c-4d425d374d78"
        },
        "item": {
          "id": "c69f0534-43ff-464c-a61f-fcc7357a083f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "726305fb-d560-4dec-996f-d7e47626966d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07dc159e-9fb9-4196-9b8f-889c9aaa50dc",
        "cursor": {
          "ref": "c4c9b6e8-e388-4ef3-85e4-57ba344b3fde",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a4206364-57b2-45da-8315-af9767655554"
        },
        "item": {
          "id": "07dc159e-9fb9-4196-9b8f-889c9aaa50dc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f8f97572-c0e1-4239-bc80-fd67c1ab8b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779c8fa4-87c3-49d8-be89-74340990c15d",
        "cursor": {
          "ref": "f688bf42-1c91-499c-a5b6-155bfe32798a",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8a6de518-0cc7-46aa-bac6-51a8af2f39e8"
        },
        "item": {
          "id": "779c8fa4-87c3-49d8-be89-74340990c15d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9abb1a27-8bb5-4c1d-840c-633b7dba7362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be8d3f1-c8c7-43ef-9a20-a334aff163ca",
        "cursor": {
          "ref": "e9d85aa0-086f-40a6-8c93-182ee93c6a58",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a23d67f6-2fc9-4d6e-8f17-a77a229cd58a"
        },
        "item": {
          "id": "0be8d3f1-c8c7-43ef-9a20-a334aff163ca",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0e7e1460-9cda-4ac0-8ca4-4e23d94f6f3b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d0e65bd8-e0d2-4f6e-941a-af3298bc8485",
        "cursor": {
          "ref": "81035009-6971-49a4-9625-658d55f18296",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "88b2195c-5b6a-4e38-a99d-9f168f1eecc0"
        },
        "item": {
          "id": "d0e65bd8-e0d2-4f6e-941a-af3298bc8485",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "82f2b10b-efaf-4ff2-91f3-d59ed9f738a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4a5ddb8a-6e58-498d-b63e-c855fbb4280d",
        "cursor": {
          "ref": "a561ff85-9483-4fd2-9f81-08e86f6da1aa",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "cf0c7e3f-ae71-43b8-834e-db84ad5e420d"
        },
        "item": {
          "id": "4a5ddb8a-6e58-498d-b63e-c855fbb4280d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "79d22fc2-f0ac-4656-b1f1-bd546f10c402",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "711f30aa-8c8e-4e16-b91d-207a364c130f",
        "cursor": {
          "ref": "2122eb6f-c527-4763-99c0-06f76dc4edc3",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e7e7680b-fa05-4dd5-ac81-63f67ecb0467"
        },
        "item": {
          "id": "711f30aa-8c8e-4e16-b91d-207a364c130f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bee0e099-183d-4904-a4e3-37edcb7a924d",
          "status": "OK",
          "code": 200,
          "responseTime": 2550,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "af9246f6-8f11-4a22-a5dc-6217990419d0",
        "cursor": {
          "ref": "e92d6e67-b2f6-4aae-85fe-221a4b097d84",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1b62a8e0-9e55-4d84-bc56-e12837e8f811"
        },
        "item": {
          "id": "af9246f6-8f11-4a22-a5dc-6217990419d0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b6f0faa3-b616-4be6-8283-87c6d1798e12",
          "status": "OK",
          "code": 200,
          "responseTime": 3429,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb26d11-0734-4420-af86-5f93361e5917",
        "cursor": {
          "ref": "afcb9483-435e-4648-a913-7278a3829d9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "25bb0aa7-d82d-4bb2-b2d3-5ecaa9d92906"
        },
        "item": {
          "id": "2fb26d11-0734-4420-af86-5f93361e5917",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d6b54c5e-f488-4c04-a23b-f3bd60e8089a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "2fb26d11-0734-4420-af86-5f93361e5917",
        "cursor": {
          "ref": "afcb9483-435e-4648-a913-7278a3829d9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "25bb0aa7-d82d-4bb2-b2d3-5ecaa9d92906"
        },
        "item": {
          "id": "2fb26d11-0734-4420-af86-5f93361e5917",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d6b54c5e-f488-4c04-a23b-f3bd60e8089a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "2fb26d11-0734-4420-af86-5f93361e5917",
        "cursor": {
          "ref": "afcb9483-435e-4648-a913-7278a3829d9a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "25bb0aa7-d82d-4bb2-b2d3-5ecaa9d92906"
        },
        "item": {
          "id": "2fb26d11-0734-4420-af86-5f93361e5917",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d6b54c5e-f488-4c04-a23b-f3bd60e8089a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "130ae0ce-3fce-4eb2-a981-642aafa081cd",
        "cursor": {
          "ref": "ca3de382-d13e-48b8-a3cf-ab5e5b0fd6e0",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f2f4c48b-e9bd-40dd-a64c-bd3e9c5da6a5"
        },
        "item": {
          "id": "130ae0ce-3fce-4eb2-a981-642aafa081cd",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "660dbf2f-aa60-4eef-8ae2-89a84b96b465",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5be6748f-51ad-4993-a7cc-e7fccf7f988c",
        "cursor": {
          "ref": "2fad031d-2698-4dc2-95c1-5a7587f51dc8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "035397d6-8387-4b44-a6a7-bcb067b5820a"
        },
        "item": {
          "id": "5be6748f-51ad-4993-a7cc-e7fccf7f988c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8ebc5532-011b-48d3-879f-c983d8302853",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "5be6748f-51ad-4993-a7cc-e7fccf7f988c",
        "cursor": {
          "ref": "2fad031d-2698-4dc2-95c1-5a7587f51dc8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "035397d6-8387-4b44-a6a7-bcb067b5820a"
        },
        "item": {
          "id": "5be6748f-51ad-4993-a7cc-e7fccf7f988c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8ebc5532-011b-48d3-879f-c983d8302853",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "db744694-725a-469a-83f3-4d1d34a417f0",
        "cursor": {
          "ref": "5ed09c83-d1d4-42d9-ace7-fc2a9406bee3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "976af248-dcc5-422e-9c73-dc5a3dd311b3"
        },
        "item": {
          "id": "db744694-725a-469a-83f3-4d1d34a417f0",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6e78412f-1e48-4e0e-b50f-216e179494b1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 141,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "eb181869-2484-430d-b905-f6e7169c831c",
        "cursor": {
          "ref": "69703f55-fde4-4e3c-a14b-424f097a48c7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e377edfa-7938-48b4-80a2-9e1c055a01b0"
        },
        "item": {
          "id": "eb181869-2484-430d-b905-f6e7169c831c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e9a6ecc4-b98d-46db-9239-a72f8b7542d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "eb181869-2484-430d-b905-f6e7169c831c",
        "cursor": {
          "ref": "69703f55-fde4-4e3c-a14b-424f097a48c7",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e377edfa-7938-48b4-80a2-9e1c055a01b0"
        },
        "item": {
          "id": "eb181869-2484-430d-b905-f6e7169c831c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e9a6ecc4-b98d-46db-9239-a72f8b7542d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "39eaf45b-47a3-4806-bd9f-aeb9092ffc7c",
        "cursor": {
          "ref": "ac89dba0-0755-4f85-afe0-78889298799b",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7ed8f2d4-8d16-41c9-bf64-ef3e1c648029"
        },
        "item": {
          "id": "39eaf45b-47a3-4806-bd9f-aeb9092ffc7c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "eec96194-98a5-4bfe-adc8-eac46ed1bf08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 89,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}