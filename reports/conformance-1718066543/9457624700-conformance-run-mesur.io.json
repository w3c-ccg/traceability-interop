{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "cffb1d0f-613d-43c2-90ff-28da58e454e8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "def0c35b-2e9f-4047-ae0b-5fa586a7aa23",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0ecefc61-e011-487e-ba70-7509fd6ba3e1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "94b6360c-2722-43be-9bb1-76c76417410c"
                }
              }
            ]
          },
          {
            "id": "eff8975a-b69c-4246-9fcc-ca9275d51b94",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c324672-bc3f-4c33-abf9-91389463b2b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c0bcc152-6bcb-4188-bd20-3d2cacd1dbd3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "74a0f8b2-7281-499d-b2db-78da2f06ebf5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "15e136e9-7749-404e-884b-8a7dd14dedbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d4815a1a-2f53-41de-a4a6-ab52e687a27e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dab82819-2350-41f1-bbd4-b61b417b333c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "521ccd3b-7ff5-4a5c-8880-48e4f22be0be"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47edeabb-1a41-4e03-8b0b-729a1346f63a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97bb929b-c704-455d-be67-eb1aaa9f0316"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d63b9c5a-0e4e-4f30-a7c5-34969b88d76a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "832c2ee1-d64d-4cc9-8d82-d5c69718b9bb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb98e44f-f00b-46ad-8318-1fbab87a7330",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6f291f7c-2993-42c6-9608-ed3d43a37ee8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4f82c0f7-bdfd-43e6-aaaa-55818c500335",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58c8d7ff-7bac-4aec-99de-2cc8fca29584"
            }
          }
        ]
      },
      {
        "id": "fdb5f038-16f6-4277-82c6-3099b5f64e54",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b412ec92-5d98-4b2b-82f4-71188e64a53c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3e54380-bcb0-4d2d-8c24-58143ab651ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "811b9f84-323b-45d2-a6a8-dfaf11b9e1fd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2a95bbb-b708-458d-8268-1562d65cf270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee1a4b0b-7132-4cd2-b017-e9507ba2b5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0937fe1a-a945-4b87-8177-5a92cf310465",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478bc4b8-d1c0-4892-b354-cfaf911871ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3354744a-5507-42d5-a8bf-d72319ea0a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f10216-c21f-40a9-97fc-eec39452d79f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88189871-e364-4340-b09d-615f7692c78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35def721-19fd-4890-8035-64d4bb7ff055"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0ce4b8d8-9ae3-4c86-8413-04d5a4082cf8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0f4c572-763a-4b6c-9663-ca4973a01be5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28c21e6-67de-48a2-885a-1fcd4be1c0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "505e65d6-e4a7-4762-b371-e9918fdb9485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99db80c5-72bf-4c0e-be8c-70906350a762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01135624-afb0-4830-b7be-ae4744a525d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7bfb6476-60c4-466e-b63f-edae09f6e138",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e7853aa-a698-481b-9414-db899e86c1f3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b28416e0-b200-4f70-93ea-806f320a6228",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f57cc138-9e37-46d7-9419-58a7637c7c48"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84e69838-e62d-4ec4-a845-0c025cb9334d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "000b0c69-b641-4296-ba1c-107c8271f611"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08bd9160-3cf1-4dbd-9ad6-eca7ee4eea6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f17f187-05cc-49df-b5b6-6974466e31a6"
            }
          }
        ]
      },
      {
        "id": "4a68e9d4-ef81-4a9f-bd49-3e537fbaf8cc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9fb64313-e9f2-4c0f-aa34-b69091d6cdd1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16752759-717d-4364-84a9-c5ac864bf134",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dc876af8-2ba3-481e-ad2f-3779775448c4",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d4169f-014a-419d-9541-072cb24a839f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7036fb26-6602-4f8c-8884-3de71e57c691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a379993-9ee9-4e76-934e-34a70e14bc06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d494ee3-e287-4935-8c49-376c81039cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724471f2-967d-442f-a54c-a42d21a8f18a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecfe3b8-d16f-4ff9-9a91-388cc06d4a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b132f8ed-fcc1-438e-aa44-8c55d3cb2826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b92641-5749-41f2-b9fa-68e6cae81be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bec656a0-fd4c-4ecb-9f2b-db4a3c080396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70694ff2-c24b-4bf1-8ca5-add589b3680f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43631ee6-4b7e-4696-a534-225ea0a8942f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba602ad9-1a51-44e6-b7a9-f84d27eb2424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4bbb19-4b53-443c-a735-26a39e03cf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35fc59e5-42ec-4573-a2d5-f60f919bf711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c55d4b-7e39-4627-a46f-ee3464305219",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0b9506-4ac3-43f8-845e-6a3d529f3cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "392e57b5-5d23-485b-bf47-b035c2cfccb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5086c599-cf08-4e79-98e9-f430aaf0a26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce7b54b3-be41-418e-b231-9a889eff7fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e950b2-4b0c-43ab-86fc-085208a752d7",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4460d960-d67e-4772-b244-d44d76c2bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caac5d4c-ff42-4d13-a3f2-bd8f7e21d399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f064b2-ec7a-445c-b68a-620576526ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "946ff104-473b-46d3-9a60-4c150d3319ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449710bd-71db-4b3e-a008-59ff6cad2690",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376f694a-4cd6-4b8d-9045-4d0f57855dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe91297-8ec8-4dcd-beff-55696e62d591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e052d5-12eb-429f-9991-025d463d4e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2df38fc3-8b19-41b7-b000-9050b51016fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c6115c-f467-4902-8374-312f3dec9f97",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f711870-4230-45c3-951e-c38d97ebdf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1c3705-5697-4729-bd1d-5564b1392bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a055dacc-afc1-420f-9f11-90c45eb32483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41b5a739-dfeb-4657-b35c-a66ef4f8df05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117c43a3-1104-4ab8-8cea-c3816617dee9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc8a914-6424-4352-9bae-ff4a6a65c9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29975a24-6786-4b14-88fe-0dbe0ab096f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01bcb366-cb1f-4a30-9316-9a05cbf1b438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b04cd7cd-6ddb-410f-9bd8-b55d3aa7f8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f115e27-89dc-44a8-9282-4cc70350eb9d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d272abde-a4c9-43a2-8c1b-def0e3ab453c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080bd6e5-9728-49e1-86fb-e154371dcc1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf400973-dc13-44ae-a70f-4fcaf7b07468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1880bb0c-ecbc-41f1-9aaa-8c0344a19a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdcd250-3c1a-48a6-b0a4-29cf809259b8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626c70d1-0501-4ee2-99f3-4129bbad6c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79be142-2816-4e76-b7e3-c4f9ba90600b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c58382-2e32-4523-bbc1-1dd95d87b7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55127905-b7f0-435a-a586-4e02eab5625f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30cdc96-ccdc-4b55-ac22-19814f56d7e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e8e66d-378c-4b98-9c69-0732702653cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19b3f0e-1f1d-4215-8215-e6d472c3e8cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49fb9ef-7f06-4c2a-ac5d-34cee010027d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "397a684f-8930-4ba2-9f43-622f1063b471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abdffd05-dbf0-4bbe-92df-2e6e8bd1934a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713fcdc3-1e2c-43c6-ba08-bdf579c3a5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b9c64ba-8f4f-4c2f-8538-f4a3c2c8f944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8315ee2-48fa-48e3-8b14-2beac6ccabdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ae09213-6126-4052-91c5-c4f1a488db8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadea869-ea30-4103-84e8-4e7185ccd8c1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07aed97-3af5-4935-ac3c-79b6ffa7682f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68aa6e59-4cf2-40fb-aff3-9b2d23966a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413651eb-29ab-46a9-b8b6-b8f0b9e467e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "19f07375-5bd3-4573-bc99-29bfc701bb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e790ef-1928-4483-ac8b-7bb53e948ae9",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc213c4-c1c7-42da-ad76-a8dec2823d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00de9af-4b6b-499f-b9ff-ed24586937b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605675e7-7181-4e3f-89c8-d958cf11e8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "415553c2-3be5-4182-ad00-68335df42d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e063e5b9-0803-4759-a4a1-313029f8c681",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6962c505-483a-4ace-a0b5-0bc093af35b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8d1f67-cbaa-472a-a471-1953ac0996a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef368a0-d8b3-4adc-954d-c664bd5030f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f90165c-69c3-4b5e-b1f6-5de6ce56df75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07213d3f-98ac-4640-b868-e0797028572c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5279e25-a36a-4b38-a456-e2f4642abfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c2c151-2b8c-4b60-82da-d2335e8208ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dbdde1-4492-4ac1-8a94-9b7de5f211f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e87ecc3-5f79-4109-a393-f2db5256da5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e75bdb7-0dbf-4a20-bff3-db8ede81cda8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bec4a2d-3c3d-4109-9c22-7d445a069f9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b41ef58-075c-4d5c-926f-2766199efbd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cebf00-75ea-451e-9d4f-a3efce6a1f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b15da42a-fe6d-421e-8c45-7ec858207d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea3d299-5759-459e-be37-b94906a6d44c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c72e2e0d-6a35-4f90-8a9f-5a86422169d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b1249d-0f50-47e5-bcc4-1208141bfd90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfe0158-ca74-4265-bf88-2e63af84c99f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "97ddafff-32c2-46f4-ae2e-16e9422cab25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfdbc5a-8c50-4b14-9282-03b3e8057242",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441c0e4d-b617-465a-b538-513974b89544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421a2ecb-9ab6-442f-ab3c-89b264593b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f4f253-b7e5-4c9a-9b97-3d81189d3b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "adf53b9e-7fa3-4aab-867c-f513e2a34f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c95d596-71dd-4842-bf16-d009929a7c64",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525174df-c37d-4fdd-b345-5c6bf356f465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ca7bd7-51f6-4176-86b3-a9fed7989acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16fd5df-a793-4e00-b5e4-667a4ef71b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14a780f5-136d-45b6-a608-6f3451914201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca4d981-f54e-4b97-b996-1292d884831f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd0eb77-73de-4af7-9571-41ebe0ee8ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6be8048-b1ba-4182-9fa8-fe882c7ad725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b025fb-06e2-4c7e-ae9d-56275f90a10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cab770d-73a1-47c9-a48f-c8d6a9aa489b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cafc2590-4bcc-4f58-a35c-e096723ba237",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb64c858-8a53-476a-9e8e-619fff7328b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb6a8c8-bcfd-4b9d-98c0-d4b3e001bf08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd110094-0de6-42ff-9213-e7abdcf9e49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7859cd-40ae-4363-8968-150a59c603ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f14662-499f-4ddd-9fed-dacbe38755b3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11be3c1d-0c31-4a3d-bb8e-2d10d205e413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9702519-d4ae-4c13-98c7-4ac9a16ebdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bfc6c2-256d-415a-9dfc-ce750293fa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9f25dff5-eee6-47dd-a503-f6bca9481d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db98ac8b-10cb-4347-b431-095cccb84d6a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d0296f-2757-49b4-a5bd-3227eb95a4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a195947b-a78b-4c9a-b8b6-3acb182cff87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11676db-2482-42e8-84d2-1487a020a1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "328ec08a-7550-4a0d-82e7-2467ef7b29bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d729e1-9c3f-4f81-8224-962774e22a3f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42311789-975a-4119-b3b5-efbc564680f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a15def5-48a4-452e-8155-ccf965d57b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0427064f-865c-4754-8add-d438586a54dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee04766-c4cc-4156-b909-117418a33957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7cfce8-897e-4286-bca5-d0ead9ce1b13",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2b615b-37e2-4b33-8348-401a9267c89c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71da944a-aa58-4f53-ad74-e43215d2ceb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20fc8f6-f0b8-4ae9-81ce-9c21f3e345bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "506d7257-7b3d-4193-9359-de0e2d38d7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50e9c19-eceb-4246-9885-a1f5a74f554c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8031f50-d1f6-40d5-b452-0bbaec76c2dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba4d5f3-cd56-43b2-9e5c-cb73c2e3a160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52640101-6e01-48d8-bd5a-bdb915099915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33a64e28-2758-458a-8548-51f1ce16f172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6afe34-0f8f-4546-95e4-49f92f13dfeb",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c508a05-2908-441a-8591-06e6d2998cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f317c9da-5823-42c8-9d55-be9365fca839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ca8cf0-8454-42b8-8e96-4580b714022c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8a52d0-293f-4827-961b-2fa39f8a9e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4a0e65-1db9-49fe-8d70-ab5c95b3bea0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b35fec-1108-4a57-96cc-c386ae6c769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f358aa2-e09e-4b51-84e0-ebf0deb75e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564b62d8-58bf-4c88-98f7-099704cd24db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ead34ee4-c10c-497d-8ca7-334e903e6a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d130f0-fe54-4fec-b72b-af8dd8405677",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebe7853-c2e5-4a16-bb31-4c361b138a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064dc9a1-5063-4f8d-94cf-386bf6cef091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5acf4944-9a8a-40de-b018-16d0d271e84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe8603c-7509-4a0d-b45e-02e9fec8824e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d89df1e0-4566-4f43-9493-5f0e0d54134a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed6f39b-2032-4d65-bf35-d511e169cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c5df3e-a9bb-4517-a38e-fbffe5649a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b617be-9f22-4d42-b3d0-9be8567c2360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fefb730-a1d9-42bc-9fc6-a28a5ab37feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5e19c2-5812-4a83-b95f-1b85cb6a04ac",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f768319d-0436-4349-936d-0e7951930fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53805141-4240-4de2-8415-3bf21af7126b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630e127e-6795-497c-b497-7b33c8a96205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d091e17-9583-476e-9d8d-8c58841b14ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee97a24-2a2e-496a-92a7-d03a64936189",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "285a5cda-c42c-4454-b948-9b90577ce9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89fd1363-d73d-4d12-a941-b70ccfa677af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65f6178-1b03-4d75-b5cd-3096929640ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd8f022-3897-4a17-8e08-edfb76fe2a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff591ed-059c-4d5e-9646-89a9a4035a74",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf772da0-ce4a-4f25-b607-0c29e9123251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88314e23-4127-45ec-9e44-196692d5ae99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0620d1d4-ef5d-4f6b-955f-1dd7d673e916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e0554ec-c527-4a8a-9486-2e3ff290f2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6367a355-ca78-417c-bd76-90c7805ac26a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c325309-f9d8-4d40-bb02-d038ac60e137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af9e8bd-0d25-4b67-843e-476625a61176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f98819-8c04-4610-bda1-0e299608f1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9999077d-a667-4046-b089-30668d9f82e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76504241-d252-43fc-8c56-c65aa52be8ac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c04230-754f-4457-895e-60a1e555a3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31026645-bb09-4933-a404-76bc851677e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67df27f-b427-4dc5-89d0-5b176d497418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d47273d-e5b4-4ea5-8deb-4cbb1bf41029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fbc8d0-d457-4937-aee6-082f4d2e66a6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e264a3-d5e0-4f70-9563-46352c5f9a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce9467d9-a262-4dab-9926-8d1fc5e750bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ffcb5f-7b43-4464-9ffc-b30e90d01b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "993a3c95-3328-4efc-8b7e-ef31da1c859d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660cf765-78ff-40b3-9da0-4133ff3845e8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e0b697-78e4-4e64-8afd-3acedb134e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08228101-0646-4927-b3a4-d6920fadbeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848ad8ea-786a-41fa-9f60-d50f1f005c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c2d630f-b125-4308-9b63-9c18aba3769b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3880e66e-4a68-4797-8bb4-44e2d67264c2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77473f4a-57ad-44f6-ace1-d101ef456d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f2e17c6-0b4b-42a5-adfc-c5ea4cc5e6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3db5b3-32ca-4391-98f4-d8c6f20e380d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "08a49ba6-6a35-4024-9582-e6210dc85ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f198304-a237-41be-a572-1668046225f0",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c8119f-e029-42ae-9aaf-b5261135b5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf080352-dc35-4baf-9836-3f4a12d300ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ced7fcd-af70-47cb-b4b2-4372d22ff346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fbd8eb7-8e4c-44a1-950e-29fad07f8ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcdaa7ef-88b0-4ed1-8548-30807daf0b9a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5461c3d-440f-4616-aa71-37f7cd766177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a364cf86-d345-4e31-a60a-3b6f29af5a90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383eee38-c848-46a7-80a0-6e3c62b834db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8efb44fb-cefd-43f9-b786-68f9f586930b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d6ea76-0aa7-49ef-bcb2-357ce5d325ae",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45bd977-093f-4a6c-9464-8deddd9db65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9752c78-045f-4231-bbe7-628e9d29468f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30480219-022e-411a-be6e-8068ce7a827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8634ef4b-45f5-4bfe-8304-1dc85c96b619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0199cb3-1fbe-40ff-ac99-6a0edc2bd0b5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df24bae-fe07-44f9-9034-6d67968c7081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b91e006-ce85-42fb-bcea-67903c255ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0b23c1-aaca-4590-8d5f-8946f7d0026b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c5bfd28-a490-4ef7-9c8b-6f9319f67d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82f87d7-de68-4dc0-8ff3-2020f0ee679f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ef4d38-c20a-452b-a6c2-b094ca455f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023576dd-d846-4d2c-a036-56b584ba4fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121447bc-b1c5-45ad-a321-cb91b5b9fa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6a8f0d-1f39-47d6-babc-78c57300fd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637adc56-6297-40f9-940c-ce62aa433c4b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71317350-9964-41f9-aa3b-d8689866ded2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0687e18-3b9e-4d03-a2e4-f5d06586a439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30911363-e144-4ecb-b909-994a4a8a233f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1b7c29d-4eae-47fb-86e7-6d563f7a8f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8121d1b-ea13-47ef-aee9-1e0f82275387",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49f8746-1857-4526-a11e-66df5080e5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ac7880-96c3-4f2c-af72-08c31a823461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f43fa1-de45-41f8-8a5f-9f6db1ee8a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b359a4c8-6ad8-4240-927e-33205bfd1cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6661088f-3c78-4f00-a38a-fbd44e199589",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d76d4a-0047-4228-8fc8-76e24d8a526c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1467e97-5ea8-491c-9fdf-315419baef27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ea01d6-e224-4b35-9a90-70fba3a0b013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "375d655e-8d7b-40d6-95b0-be837a5c4515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3f31d9-6276-47d4-92ff-4fbb06370775",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f13e7c3-f4df-466c-91fd-8dadebe80eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef37c593-66b2-49f2-984f-fa7a928cd918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78eab565-1ce3-4c41-8dde-4acbbf1801cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0548bab2-566e-4893-b947-abd6cd8d0f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80d3f50-955c-40ad-955b-095f2e7603b2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59b9f74-23cb-43cd-a59f-e3d47ef77365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57c5a4be-d8e6-4e8b-9e66-cf5f4eec73f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e393906-282b-4602-92a2-0857dd6195c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6df0beb-250f-4c35-ba57-d04f9b126ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17f0b5d-5bc0-4bfb-bade-e4dee66b1f42",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a3071e-ebe8-442c-807a-27b564121656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39381b03-cc75-4d09-9222-01572a16b4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471487e9-e770-4444-9c23-09df5e9fad43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "805dccdb-007a-4872-80d7-1021dc4317fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11f0ffe-292a-432e-801c-0de93817dc80",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e286bec5-f9ec-4a9d-b802-ce3653359eac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8001415b-44fe-4abc-8966-d36a86d4929f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c534243d-1c5b-4d48-84be-a00341f74b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d720989-4b74-4545-aa0c-d104f39197cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07597020-af4f-4695-bbf1-4c12ce1d01e0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8d9d3e-044b-4140-9ab2-a02412a5bd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d7ef52-63c2-4beb-9bb3-10ed7c2f40b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828761c0-8243-4232-bca9-9fe122549be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c296049c-ed1e-4b07-bb32-e1200e7c700c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed6c5d9-fbc4-41ee-94c2-bd58612a5889",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286cca6d-3804-4940-91f6-2819cc547bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c03a52-7ec0-4c39-a736-376fb780c474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78fb94c-8f09-4a65-bf5f-09c6b272873e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dffe2211-e8f9-4b8c-a626-f1963458c140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557197a7-f4cf-4766-92fe-ec06f5cf98f3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290c0bb4-7c8e-4f35-865a-c9dece862b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f44e1d74-3437-4726-ae3f-3241beee4634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4095250-8a48-41a3-8f7a-ff3b62a83594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1d028f-f60c-4fc1-a054-86658a761184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3870b9-b5ca-4881-9976-3de243c0bf66",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e3ce63-c691-432b-a103-18cfb6f57e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13d0505-038c-4592-a291-332b55abbb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e2442b-0523-40d9-a65e-51a1572b32d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ac683c-c89d-40a4-a3ac-1bf80f5fe9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3ff09f-392b-4b2e-9786-0009fdf9c754",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079174a2-9faa-4415-a571-f544c98b660a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87074b0b-5fe8-491d-877e-07b3cf8f871a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00de3f7b-30ae-4924-86ca-2e5a8e24c656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "38555632-8418-4615-83dc-f91c9b56b3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe1b36f-d1a4-4a78-b237-c96e9ff9051e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c36d82-bc53-4b28-9a54-4fbeee6002d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa201ece-dc8c-4c25-a5d6-bf3cb8393740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30dfa278-721a-43c9-a7e3-2b9cf04a9290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf80d83d-6d08-44f9-ad30-fa0f3977b289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013579b1-fca3-4f84-80bf-f451b83c0fdd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d03377-a400-4e3e-b9cc-dfc4f6d18893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf758c2-75fd-4394-8bd3-2f4b42f4dfd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fed40d-30e5-45fc-8180-36dc986e5d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e00307b7-a027-4a6a-a011-9112c436d564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87d5096-0f7b-4bc5-bfd4-3b684342b87a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d305bec7-a04f-42d9-a898-b82fe7acd5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4776d235-fbd1-4581-8e7b-08d024669c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd5c4c4-fb54-40f5-981d-b2358a52161d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "769d2942-d670-46e1-bb96-a3afaf819d6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bb9b36-52e3-4295-9ae7-0624b511887f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94d4171-1b08-41b4-902f-ccafe990c8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f72fc0f8-b27c-46ec-aaa4-8c643e3a83a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de7198b-9e98-4dfc-8be6-6a634ed51c3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fac53221-1fbc-4d78-b1b0-9a9404446de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf048a6-4355-4fde-8b49-01b0d64b8683",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef46091a-621a-4853-a14f-488a9e430038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3ffa8d-3a2f-48d2-b5f9-1873a2225668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234a2f30-7fb6-45ed-a02f-99bf6f058e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf106229-4e41-496a-a880-f6bf726fa10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97aa550b-547b-4e0b-8385-9c7feb4469b2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92c6a7a-4134-4f74-a694-59ecd556b2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e55736-9e1d-4496-8200-efa26c7053dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3c55bf5-d753-4dea-8a84-99dac735a81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3af05dcf-dc9b-43d2-99a3-8e1c54b62963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f00901a-0065-4dbc-8c02-72da8d6ce4c4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6621b21b-3d1b-45de-8404-ea4103709b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e8831e-d099-4f33-8dd7-4b638e2790ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a164bb-a61f-4069-8a07-6f91f772b32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "da63c683-5657-4910-ad33-474ef5f2e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0cb81a-2c93-4477-9ccd-74739611a695",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c672a624-2894-40c2-b076-c4399580857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c54c56e-cb4d-408d-bdc3-afae2dc91c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288e335a-eff6-48d3-890b-2d0aaa954855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b743e30b-09e0-4f9c-927f-fe639305d4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e81034b-9fa4-4d74-9718-accafc45f750",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1b6799-dc28-425c-8056-9c378fc66a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6bd2e6-0bd4-4299-bd78-b0e113a55f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dbd6b9-acbb-4de8-bb1e-67de076c895f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cff3a96-5721-4fc1-a373-7eb6dd0e0545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579b2eee-d23d-4c48-8e0d-66a5ecc6b415",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c04340-bdf0-4388-93a8-c0e34dadc810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be070e4-c8de-4a1b-a35a-d487e67cb474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df841e39-d1d4-4581-ac4c-fd31148ffc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "044f1578-4b71-4af3-9f86-5f9bd78d4678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b27064f-5092-4884-a6bc-16f93b0b06b7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75630762-4e56-41c4-bc0f-fb6faff25728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1213484f-00c7-4760-9265-2f52df3e196d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e4bbfa-96e5-4a6a-8831-9af1f53396bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93f0f9b0-7a24-446b-95eb-37df68e88cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35114708-6b41-4d31-9612-6037b41fb221",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba0dde1-be81-4463-9d62-f20bab38d687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2972db0e-82f9-442e-8f33-7869ab08d34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cddf0c-b27d-4375-a364-69b892d5a22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "882e1817-1bf9-4991-a457-0e2da60fb796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639a40fd-a612-49dc-86a0-438ab0e35c64",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc03932-5f75-428f-8ced-ad8c7b8c0e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f4e85dd-40d5-40cb-820a-548615718a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a235b8a1-3af9-443e-a5d7-0773449a4edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd981bef-8b41-4166-afd3-922d448cfb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7530253-7530-41fb-babc-f878b3d377f3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68604f39-50e9-4d96-bd46-347e5b8ed694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5980fa-c1ef-45f4-a9b5-2878cc5425f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd45eb8-96c8-48de-886e-a075e67aae28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15602cb1-0f4c-4b6b-8ca0-b87c69246d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce13869e-d949-4f7e-91ae-2a12cf357a1d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c11f810-a26b-45f9-9bb8-bab2e3a95586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1011c096-5e99-44c3-b642-32fd0248ec05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1930ee07-3d66-4803-a090-70ca231bc858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce64e944-bf3a-471b-92fd-919d1c1358bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0ad169-2d00-448e-aa61-1ae77e40af01",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ea275b-1952-4ce9-b0d5-68edce947666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56c0d42e-8bf2-41ae-8834-f1dfb4b1b2a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dccdc9-ecaa-41e0-929a-3f20faf8e924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f433c8b8-d097-4946-992e-eaba53342e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3b9c63-d5e5-4225-a718-0e67e7c2bff8",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57a28ed4-b4d6-4eda-b9e5-e880f325d7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556875f3-a44c-4577-bb46-17357ae1ae8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5cfc6d-753c-4827-a197-5e58e3692eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e37c071-bb20-4e22-98ba-d5ffe1612685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ae38de-30ec-429f-b587-a55a6ae8db8a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32992977-6824-4ee5-983d-d4626df670ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "726bfc6c-f5c1-4136-885f-7f062eb360e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bad8a3-dfae-4177-878e-edce75846143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d1767a-bc91-474b-868e-20fa0443a720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19520efa-fa2d-4ecc-9805-2eabe93517f1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1717f4cb-e2d0-4f24-ad9f-e733d8b32437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a84a76-c7ce-475d-a8b9-baf9aedbdca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f28ea3-b4ba-4593-8ef1-b9aaa33e94f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a665db4f-d283-4898-a33c-20f651910782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0554bdd-4115-4105-9d9d-94652eaf42a6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbec4f9a-61d8-40d6-afad-78e307c69432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55aa1d34-f6bb-4568-a038-668654b195f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585a8ee1-2a92-41ab-83ad-9895a33eb11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f9ea59-b5c2-4559-8140-9262b9ac9bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ddae4c-7c4a-4c97-b134-0b7edc0bfbfb",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54918c17-10f6-4364-a41d-5562fd81a8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c8ae62-dd35-407c-921e-aa50495ee584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f10855-d7b6-4c7f-b8ac-40542ab024ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1041382c-31d4-460e-9d4d-d8922afc0a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb2549c-e94b-423a-bad5-50d3f67c4c6b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cc3ad1-059b-4872-89e7-0d44653cfcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce343a3f-3fe9-49de-afc0-256d328c3422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569a3665-81d9-4222-835d-40633ef422cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "196bb881-889f-44db-942a-a6733aac8e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95383a5-1f60-492d-a7aa-5a051a7c9fe3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7051635f-8d05-4bc2-b413-86ece29b4644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700e0e3f-fad6-4bb1-a140-05af2358d3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0afb0d-03c6-44d5-8930-39e85441cc95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e039d782-61c0-4f6e-94ba-0fbae0975ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b6f58f8-f689-44f7-9c51-04acff6c3011",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc7bb3b-e73b-49ec-95a8-08e772935ac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2328f71b-f22f-41ec-a957-b18a2d7d8313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec92fb11-790c-44d0-8fb2-85e21620ed81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d24c0a02-569f-4e56-8159-64d34e49a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b806d3f8-745f-4194-841f-5b84ad4bfae9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f2165f-94e5-42f4-86e5-90defc7ebdd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58a3f20-6ef4-413b-9bba-bca035b74c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8156b9-e3ef-44cb-b9db-e0de618c3bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6fd99a-47b1-4a09-a060-5bde4cfe4366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f038576-634b-48db-ae84-2c346aa89f3c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f796064-5c85-4a28-99be-97472e1a2c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffd54c1-9bd8-44a7-96f5-e9165c789d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84034b22-4b01-4852-85b9-5b31abe1c974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "443645a4-eef6-45eb-9355-afe6f6690e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7455080a-2f4d-4de9-940b-677723ebceae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af43c0db-267d-4e97-b410-6c5af44de45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b7d12b-06d3-4e95-af10-6936856a7abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1245d1d1-56af-4d5e-9010-b936c1aa2c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3d6ada-1329-4f50-96be-a026efe7d515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f0bbc2-d3d2-49e8-89c3-6cbe4c3501c7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a70cfe0-990a-46dc-9e87-fd551bd2651c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fa5f0d-a0c8-4109-bddf-d4a5ec92e19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068fb891-9e33-408b-a7dd-dab84aa8f592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cba890c-75e2-43a9-ac22-8496055fd678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9037f63f-02c2-4753-8b12-3aba9ad20980",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06416003-5029-4e1b-8c17-433908fb38f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53de496-cc86-4685-b0d1-1dd99d8400d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50cf05a-54d4-4668-9e6d-6cb475a756f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e73b054-c78b-4687-aa71-9edf6c1eb0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef4f630-cfa1-4162-b94f-ff96a455af12",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491171f7-f3ed-4666-b698-cee209b8a391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbaac78-473d-48c9-a9a5-bc1a846c5ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddc4f26-93f5-43fe-a1d4-f8a1dccd4d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8225ba6-06d6-4c96-906c-74f7b7177197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ffad81-5523-45d1-ae2a-e2efc838b839",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fbece42-b40e-4309-a428-44b86e83ec47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14dc2687-c5c1-4e81-97aa-c1cc4992c356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2989350b-0330-4800-b836-a4675c33a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0026720e-dab7-4b2b-8c90-f3ffee5bde64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94b919c-aaae-46fa-8323-3fc5e7bf2148",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eb09e3f-0f68-4207-b72a-1464e7bd8c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599fef5f-494a-4338-b2c5-5f5aa697ccde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb01f52e-1b52-4150-940a-e82d839447b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98bce015-6d16-431e-8ea3-1b4b62e2898a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5941dd90-045d-4167-8618-ec884d537756",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eab3a9a-9072-4657-939f-9eea5ed00b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15543fde-7d28-4b25-90ca-2ac9b0d0a899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb11ddc-f77d-4290-b826-658bfbad1669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fef61d4-b4fb-4be0-a155-61953ff328d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d7d2d1-8a16-4e97-8873-cc2616809d01",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f873e2-9990-4204-929a-c9736e3baaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65d8d25-a6ab-4b11-964a-876bc42ddc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e08523a-4f4a-4dca-918b-007808131464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d9f24c2-7f17-4d92-af5f-e96210c1bbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dff9f17-af40-46fd-b683-ca34dc88a513",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983ae864-8fce-4f98-ae35-9b2acd755d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a7d05b-36af-489e-a839-a441d92cd210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d50d3c9-498f-47b9-94ce-b4f617f1e22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "751b5a52-a50e-421b-a96f-57be3476b27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9c7047-3a41-444a-97bd-ff3c43a6535f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0613317e-fab8-4b50-af51-26f88dee92ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "05f04b51-d550-4b35-9f1f-2286778cb6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4ab74c-fd3e-4351-86a3-29e046e68399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "44e045f5-00d6-488f-b9b2-4f81939f5086"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a174fde-8c7c-4fb0-b61b-4811c5593400",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d99945a-0ec2-4397-8270-1826abd3f541",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793854e0-a0b2-4e13-8338-53870613f355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdf97164-ba5e-4ad2-a419-06b99673e0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62eb25b2-7514-4b9a-ad39-3b92353626c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad6da96f-d88d-4eac-8806-47b27f2a7106"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dbd8c6ee-a67e-44e2-aa8c-0927daa5c7f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47117f2f-764b-4e25-b6cc-8b03fa0a2cd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ae04ad4-c86f-4420-80db-fb987c597aa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34064019-6a37-4493-9fc6-6d45738a6567"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b470687e-1601-4858-849a-54b45f186747",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90354111-4d0d-4228-85c8-0e37ce1b60fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cfbd623b-77ec-4ace-bcb7-c7c35624a867",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d48673b-7d56-4031-9b1e-013e5fec2f64"
                }
              }
            ]
          },
          {
            "id": "efc10847-a7e0-464f-9f7e-198f89b811eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba288c2d-3497-41b6-b80c-ad0f2c580f20",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "99fcdf22-f4c6-43c3-a995-d8eb4dee1e20",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3b552a-cf9b-46e6-a27b-df21c74712cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0502d1f2-86e1-4eda-8f8f-180e58a6eea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9b0d92-e6d5-402f-820b-b0854f61dee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65865fa-dded-49c4-ae7d-5c6cd7a8c452"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "416014a9-914a-459c-b0b6-a87d512fbbf3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f74ec817-5fc0-4365-89a0-19e42c0f187a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "03d5853f-5889-4160-a5f1-5914d99c497d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1d078f5-21c9-42e3-924c-7adf756f457a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e824917f-46f7-45e4-91af-16760a0182b5"
                    }
                  }
                ]
              },
              {
                "id": "c3570455-3b03-47fa-99f8-55b6a31069bb",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "358a0f6d-7276-42e7-956e-13d0377aaf63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e51ac9bf-8be2-4452-b5e5-2183dcd24e18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21da923d-6a29-4d44-a5e2-8d15208e90b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "09065d5a-ecd4-4a7b-983b-e8494c3c6d28"
                    }
                  }
                ]
              },
              {
                "id": "f8a60c2c-c939-4836-9cc5-50f2ded9067f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3499e9f6-c607-40bc-b6cf-32a2dbb07d42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "576966cd-bc52-4c50-9530-03cb8ce8ef06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b6c07b6-d034-4b95-bc27-9a0177483f0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1d5ae31-b607-4494-b5fd-e6f233bf8538"
                    }
                  }
                ]
              },
              {
                "id": "0c553e45-b025-4a7d-b697-387f995ea655",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b99c164-62be-433a-bfed-edb1a9baa8c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d471c40-51d3-4a7f-904c-5afb81bd6037"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55dba994-1832-4bd8-85a5-93dbb1f00818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "79f13c36-d1ec-41b4-a7e5-e2159777eaff"
                    }
                  }
                ]
              },
              {
                "id": "47844542-e079-4f5c-bf4e-05aec4576759",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b99f14cf-237e-4b81-b103-05ff9e0e5a5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "074a0327-31b1-48e2-9ff0-107e8e0aef9f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85c3eac4-1d0c-4862-b7f5-cfdbfb5f3c48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "54bf06d1-66b2-4d6b-9b3f-876a62bc9a70"
                    }
                  }
                ]
              },
              {
                "id": "3773a55b-a78c-40a9-8b82-897c2c894cb6",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e164c85e-bc9b-4c5e-a9b6-e70a75eb1f11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e40471b-468f-499c-adf6-9416eaa0f2bc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6565492-b620-41bc-b2a1-86a91f12c091",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2554a230-0961-4df3-87d7-ce93317e8f04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cadd25b2-440a-4d97-8ea7-1d86c642fe27",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23a8d6ec-bfd1-4c91-94f0-99c0c2db5862"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "506b27f2-f5af-4b2a-ba24-12533afa483e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7b89f75-8079-40b7-8710-8b9b2d6fc06c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73cba656-4f4e-4507-96a8-17763f50df92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a31ae669-e4d9-473c-bb34-7f89d113384f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6200e39-fa1b-4acf-a4d5-0390cb1fbc83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95ecaa51-a054-4f5d-a47b-1de0227467cd"
            }
          }
        ]
      },
      {
        "id": "75fa326f-71fe-4ee4-8558-0800f4fb9c6e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "264c988e-73c7-4f4e-8a79-2017b70d6d9d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bcb4f779-01fb-475b-b882-42c66abf07db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2c605d2c-a36a-4e4e-b63b-00282287559a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd19edef-674f-4949-9d92-9f964dc1a642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562b8f10-66eb-4c64-a3d2-427ded654604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f8c6f9-41f9-4cb6-a6bd-60187d1c3edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8be7dcb-96ec-4a77-8069-4d35992553d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d8bdab-f9b7-4954-9bb9-b73e9cc9f026",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511a4382-f224-4b62-91fb-71120c621630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c12f64e3-e18e-4bbd-baae-f20f0ca47787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e202666-0ebe-45ad-8961-8229b5987ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "484be1d1-b4b4-4ee0-b198-840d2151b797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04e5df7-3918-4173-ae7d-69826d1c92e2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ae27ec-919d-48e1-9d87-6da3e1b225fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daac58d7-5686-479c-8921-b354239eec35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6062bdc9-ffea-430b-9b84-337a678c2046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d73ff9-de86-4410-a04c-bf16049e01ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7800c7-6afa-416d-a5fb-a6892aa923f2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fa2c36-2cba-4f6a-a766-be8db39a9855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3619b77b-5a02-44ab-8fec-5f5de1f2fb11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14852f76-efec-4290-95b0-9176daecf559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b635977-d158-44ea-9817-79976759ebdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8465ab-9ac0-4017-b657-a7a511eea055",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceeb72a9-6ca3-4e13-b743-37785a7b3a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95859516-2c22-449b-8097-77a661048709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58455b3-b073-4850-bebf-eebd7d23c5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2aba17-8132-4de3-9add-8741d04dfa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c24d9f-76a8-469e-8ce4-757e6b79d9e4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70855ff7-b8cd-47e4-bdb7-72caf4098514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84c5690-2237-4d1c-9c99-ca1f29574245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f18277-01ca-4dd0-8d48-5c01d0196625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eae23dc0-32fb-453d-9289-956ac11a4be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7118c-4a97-4c81-beed-6525eff49bba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a1d244-9ad3-4a5b-a29f-c9c7d960b086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85521f94-1452-4b92-a8f0-dd1a2aef551c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc4a2a5-8aa1-45a2-ab32-434e74f58c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2cf41a-4d71-403d-a3d1-c51de11638b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1626a4ac-d804-4d50-ab81-ec1f9f2a6212",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c8c3a2-a802-4a4b-bda3-e79f13a51dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624c9bac-f709-49a0-8316-127a1026f792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2921bff9-42eb-498c-9cff-f86683c1ebd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd87a6a9-6641-45d8-9cbc-ab9938e34b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9aaa042-6a5c-43e1-97d0-8779ec1eb23c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68c745b-bf65-4750-beb6-7288dbbd6b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc35774-711e-4441-9f7d-d7a03e72cc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20c3967-04e6-41de-8826-da8c66815546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e952b567-cbb1-4c93-bf89-c17b898ca0cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df33f0fe-d24a-47b7-9421-67fbe1ae57a1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f789e7a7-03ed-4c75-8e0d-0b17a5b10ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db9e79d-3752-495a-94ff-b859b44d6ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b8fe0f-750a-4471-9e47-84ce1d732c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "809ad946-203a-44f1-8aa8-c672e5342ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d79b47c-ae78-4b46-b812-1f30cab64739",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324abca7-f963-4860-acc3-0d3b5ece211c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da69ffd-68c7-477e-a724-1a45152a4595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a6285e-6fd9-40dc-baa8-d02d18ddd99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12d855fd-f026-4ab2-86b4-6f45e85d6299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a7eac5-d878-4668-9fa7-d462f407ef26",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0963bf66-fb4d-453e-b253-72c589274c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91cc163-3d37-4085-86a9-139e6b11e8bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf7d425c-2aac-46dc-937a-1400b33b4139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9628cd74-f6de-445f-a38a-3097ecb43a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289d62d8-4a33-42e2-8725-cac1a88dbfdb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd2abe6-0495-4882-b755-a66979f56ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6500f86f-2f81-4831-b692-824ef16b2dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be6cc7d-5f8a-41d1-82de-a7b7cc7680d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a41469-9b85-4718-9bcc-1a5d86d00a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865af387-afbd-471a-8a15-9cf9245575d5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445d1c6f-52c0-4bf1-a0c2-01dda36eb690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916a8766-ba2b-4813-95ad-3ee5ef6c160c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6744133b-38d7-454c-a02f-dfc085b9e088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f7d448b-1f7c-41ee-87d8-d9ffa97b5cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f7fdce-3ca5-4903-8f93-e0b49fe56a04",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b754d8c-d5b3-4058-8ecb-40670ffd1536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7db6c4c-b89c-4085-b2ff-cb98716c1b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0c59ef-712f-41af-8079-650638418a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcfdfbc-5af9-4707-8672-96e9de2d7be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c71952-9d6a-4a57-8071-852a021e4c27",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27992ab0-d57d-440f-b624-9c497c878797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc36f47-39e9-4e4d-a416-12e93af4b5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443264ff-e422-49fb-b194-2f9fa6696037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9eec91b-38f0-4cfa-871c-62e1beeaf922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e586bc-89a3-43e0-a904-a6fa5d369ae2",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb14285d-a08c-42ad-af26-993c195fb98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a12128-c173-4f48-afd9-1c71dc7b61f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e36b141-0b3a-44cc-ba64-e7707ed39131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6191db08-445c-4fdd-bc4c-9ad6982381ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414969e6-974c-4c91-aaa7-f4a3655eb33f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93171af-67c9-4fc1-8b03-4a49486847e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d98d47-b56d-48fb-b27d-997c414b15f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88fa700a-cf35-4b35-bc4b-b18da9addde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "24b7faa5-f37d-49ab-bd96-e60642a3c0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd0b787-8064-4846-b4c7-ecf0ee796014",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5bc86d-cc9b-45a4-bf12-8c0184866087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73709e07-9c89-4035-8e25-687dac3c2cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3536e535-b9e0-4ee4-8547-b88ede2abde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dba307a-9077-43e9-b2b1-ff96e7557cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2019ce4-0937-4b48-b5fd-b7a070dae072",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b3cdd1-9d18-4dd5-8fc6-52aba3c2a709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b892347b-463a-4fc4-b130-3680bde9e4fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997e8490-dced-4269-afc4-907dd71bac84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33423a24-0f45-4b4e-bdeb-6813d370be4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be37ba72-8a71-433d-afee-87dc39e95405",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162561c0-74ba-4133-a184-e8f676136ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d21d862-cd85-4c4c-8569-ce8b16162d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80c3376-44a7-4b8b-bfc6-54d0b1e143d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "279af13f-b2d1-4a09-9ece-f183a0600d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72252c1b-28a1-4184-a1f5-846cff48aa7a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f271b9-dc14-4169-a88c-06747f285889",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b27da3-6a25-414d-a4f3-47b710d77657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356ab973-7b41-4306-af96-a713e0d99130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5e6069-105c-443d-a24c-af03c59dd5fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07490b42-6e7b-4a2e-9188-67be591e6bfa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e962cf2-96aa-42d0-80f7-6d8bb295ffd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "645e6844-aa66-4657-aa99-b2218b098d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88b3f7-d197-4128-8602-88bb92a632d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "814806ce-8886-494d-aade-7b1b7902c0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfa0a19-fd7e-48d0-a581-60d7c9f26c88",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617adb40-8f66-44ee-af24-f5090cb638b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f156873e-c85a-4915-9e57-53d0d1a3f816"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae779f4c-6084-4d8e-9d10-32e524c80a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d538a91-da3b-471a-96e6-bf11cd59e610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd068be1-c51f-4fe2-a671-1cbf34952f6e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37848a7a-a59c-4c00-ba35-c7279c2056c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239fd217-9f5c-4411-b8ff-f3a78b0e012a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb36ea0-9d81-4741-8cb7-49b64c69ccd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87a30303-3779-4cd5-aa7a-22842a1e6a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564ee220-0e45-4589-a07d-6f8fe5de94bf",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9983fbe3-01cd-48af-981d-9fbc2df1161a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9973a901-94d1-49dd-aa23-6370c7449ba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e1d2e3-8b23-4782-a0d4-7d7c9fda09d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdaef70e-cbf2-467d-9602-660300a32e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b5da91-2ab5-4988-9752-909e78c9716b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f32e1c6-5eb4-45b8-b734-770002005a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f8d9ec-5a2c-4a0f-8492-183af9ef3672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf038e7f-3e65-4c9f-96ca-0a7558771bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fab87f07-4d45-44e7-8103-b4ec2378354a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf8b868-cd9e-4c46-8e19-0474f88924c6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e979bc9a-be0c-4c07-b0c2-1f04210340de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ae7773a-c58e-43b7-85ff-0b063085d459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a113b7ab-7013-4e9a-9b2f-9efe8c8b8d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fafdbdc-f75f-4f76-aa9a-6a21cc5c8a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654a5a60-6698-4853-8e67-5c30250965ff",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fe798c-048e-41cd-8dc8-6d0b1f3dc373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4037c5b0-d8d2-4f74-9aba-2223ee8d835b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c6dbdb-8608-4927-9045-00ddf5e04ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4b7bc1-a7ea-4e0e-813f-42774802cb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa0aa0e-6f31-4b13-b5e6-5990383e96f8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0858581e-05c3-4596-bd5c-405b3ba313b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6cc8b42-5709-49e9-a263-0ea22c0468b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7c68cc-c1e9-4ccf-ba26-9776b1f6ee4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f77312fe-fe84-4be8-825b-73c11b86f407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb7b8ce-8e5a-49de-95b2-8b6050697351",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f82da43-f1b0-486d-83fd-c29cf8d35b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa78478f-e413-47ea-a663-1b7a8e1ae808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3826c5d2-3e7d-49b2-a51c-bde57fc55634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15ac1807-fb4c-443b-b9e1-e379cf944353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d8f18f-8414-40c9-879b-d6dbb24336bf",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c90875e-b762-447a-8c99-c4edfd988a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7494fab0-ad15-4980-b563-88e669ccf98d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496994a7-8eb9-431a-9a9b-b51dd0e5c15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4afd6e4e-00fc-496e-a4e2-d643c6aeb954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813c41fe-1240-4f9a-9a7f-73e5ae080929",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9473b49f-4b17-4f5c-a341-fb28028ea710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7897020e-2334-4ebc-b2ce-9e53a2351424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9499cd5-bd2d-4a0b-8494-f922b9147f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8552abc-9927-47ef-a331-bbe594cc18d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd07d1be-a737-4a5c-961c-250f997465d6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d132b747-7a4d-4c86-b33b-48abbebf040d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28aaa1d5-9b6c-45f5-9254-724dfd25adc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eee18a0-81e1-4860-b166-04ef3b9ff213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "492ca989-b284-4a21-b192-7c1d253bf833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3386f5-3f02-4101-89e5-45267a5ed618",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ffe80e-6bd9-4c75-8df2-606f51537366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "957dd22e-9ebd-41e2-87b1-ab08e1fdfb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002f71ee-e761-4815-8226-806ea1bd6845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97458b3f-88a9-40fc-80b7-0706e0d842f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0072a4-3bb1-43cb-b282-bd06a45a2cfe",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebf6986-45fe-4480-a6a7-395768438aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defbc1f5-49a8-4074-aae9-0d6885aa1564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3079fcb2-fb72-410d-93eb-804b3ed965b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec04c69d-30b9-4952-b377-2d0c59c979f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a28aea-e38c-4896-969a-180bcd81047a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acda23b9-3582-4267-b538-988169eee390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eef5f27-b548-4929-b559-53a7ced695d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a4c1f3-1717-47bd-8976-263b2369790c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d962d5f-1fc2-4032-8693-0c6efe40dedc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "66644660-bb4f-4936-82ba-ca1f1210ce0e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d297c65e-ce7f-4b8d-b0ec-6c19e7d75fe4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b37c1d7-4d00-4756-8ea7-c5821af50cbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c1beece0-6c3a-4876-b9c6-e6ff4359836e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "478faa25-7e2b-4ae3-a768-4560822f209c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f4a9937-e098-4848-8d71-7f0f76fe2dbf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78264167-858b-423f-bb64-1e678ab6dea4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97f676d0-41c7-4e58-a551-60c3da709a3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "940deda4-375e-4909-849c-8f3726072006",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4394848-6f9a-406a-8cc7-162d05edc2ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e17aa677-737a-4ba1-ac78-8c35b5619e40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e1bf8c0-fd2d-44da-a595-b470e6bf9ff1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83f50b87-c4d8-4da7-8db3-da9d4512e3b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "170e8235-2c47-496b-8c83-36857475d57e"
            }
          }
        ]
      },
      {
        "id": "21cebfd0-844d-4cea-b1c6-3fbde8a5c3e1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b61de7e0-21b0-43eb-addf-bffdb6e6a471",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a1cd58f-2437-4931-b4ee-d0366dc4591f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f48c6f5f-75f9-4664-bfcc-6a2bd77dfc04",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e581ca-e2d5-4485-a66e-01db3a38ce7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958a50a3-a1df-45fc-a2bd-ae012d5bbcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca2fb9b-9dd3-4e09-8224-c123f5553190",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197f7de9-75a2-4af7-8ce2-ae2cf5f95d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca1744e-6a0c-495e-921d-ccc498908f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1314a219-dacd-4d50-8e55-736c461f47ee",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c3e82f-3abc-46a2-8962-51b4ad4fa2af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b336db-e838-4e80-a4f8-7e868b4d1283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cd8448-fdcb-4d30-8bc1-ed00f97f957b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36589e6-1f21-4395-9f7a-36b94162981e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04efb5d6-7e01-4098-9041-6b3aaba5eca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d78125-f9ef-4d2a-9b47-f0e625f88090",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f52b29-ed1a-4494-a41c-5936a31016ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a20a85-0a56-40bf-aaac-8123eb6cbf18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec0f71a-70bb-49d5-bf5a-4b5837668b15",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351dd467-29a7-41fe-8bca-70c07bedbe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0cf51e2-2368-4ad4-ae73-275e47bfc98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e669b36-bf20-4053-aa2a-a311c4c9fb24",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ad99e7-ac9b-4a3d-820c-bb4bd3492bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2147b09-3bc5-47d3-b4c0-b44c7ce40905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15ad2353-c968-4a34-945e-f24ee28aa225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c4c027-e58d-4a89-8db0-7ce23826c49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff270dde-5091-47f0-9611-8a005320b423",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5415fa93-874d-4322-abe2-1b823c0ed303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf79f8a0-0986-4e9a-afd4-3ec0d8ef2006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee7f975-b95b-4c5e-9a7f-c7f24a1dc81d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609ea9e7-3e9a-4009-ac42-6cee65e5ffd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1182aca8-9546-424d-8372-08fafc40c3a1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cdd94f-8ac8-4f2c-86bc-2c249e062e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe8c87a2-6859-4eb7-ba16-4501ed584f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34432143-7e3c-4f86-aae1-d9a13169fab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120c9369-6aa1-4ed1-83b1-f52abe198fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be0bf27-3d13-4c8b-84a7-0d0660953111",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1571fe53-3539-48cb-83a3-78b1262b2b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abf20435-772f-439f-9ecc-23729142fea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38f4f87-718a-4bef-b53b-912bc8dbe58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878e0849-52f9-47fa-bc2f-f735fb6da31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ceda2f1-4193-4125-8361-948f6eaa420a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ee7eb7-2a14-457f-af91-7962995bc853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02801683-1e17-471d-b401-4864b0fc820e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8beabb4f-8ae0-4f1d-9868-2f037945c26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8ce01a-2063-45bc-8f70-280f1c65335f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc37d25-37b3-4e16-b24b-2834ed0cc275",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6d9bcb-f13f-4642-90fb-857da28f1867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e818ae8-319f-4b07-8039-5417ad2a8c28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b69078-f678-4a5c-bcd5-9f832ea89910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30eb6e00-d2ab-405e-a3a6-213620054579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9037672b-7120-4fc2-aa39-de0a4d4fd26b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b64e5e-1291-402d-82af-0d11d73dc766",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adad91d7-1808-491a-b4a3-b4746665a325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfad63d-3ffe-43ad-9786-87b491204ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e067f30b-fa7a-4bae-90d9-d9093de0ff76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa3a2f2-343e-4fb5-8289-14e5eb27fc99",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f41813-de5e-450e-8d9f-7d47e7249007",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a7279a-c7f2-48d6-a192-ffa76177d607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38e2e75-853e-4efa-981f-8a0c2b36cdab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32728ec-8d44-465c-ad48-72966971cae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bcba01c-df4b-4abd-9a0d-eb2d9a503127",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c54780-7d20-4588-bf8c-176f205ccc3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88133752-f0c6-4bb6-91a9-973d2cf4298c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e94487-d385-4d55-8bc7-0cc315597b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4840f42b-2c66-413a-ad0d-5571645efd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f75862-2c22-4e24-9a44-7514eb209892",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5c65dc-4af5-4b56-9617-f83b0dfbd65c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23cc7051-47fc-43d1-b03d-d9a5cbeb8c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb653df-0187-4bb5-884b-99369edd2bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6626545d-8f8b-439a-a0d5-d20e4fa29fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0750e207-2ba0-48d7-a961-be9c121fbce6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d714cd7c-eda0-4f4d-9ea3-4862a62a8bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41815cf-a065-4a0b-a293-0adfea51047a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8eadb0-5e1c-4563-94cc-07e0236272e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d2f193-f709-4927-a5f3-627811849917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf94e9d-0b93-4e38-b625-785f62c74ff6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd6a8391-3c75-4708-9ee9-1134bba954e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b3ccda-40af-4046-9b9c-c90a4fd66677"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f53720c-4b6f-4545-9031-ced0fa8cd391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e65c91-fb00-4bbc-bcf3-7195d043e3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e9ef59-5eb5-4270-ac9a-580ce48c6c4b",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eb5750-8f2c-487d-8b33-efa06dd22407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476c277b-62bc-4a0c-98ef-78ff404510e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7e0fe4-b98a-4262-8eb2-bf1d290c16bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3529fe8-792b-47e1-978b-11a7f44c8db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd7d657-5666-4373-9b9a-476509b1267c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa264c3-fed9-4795-b197-6b8c9c018e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0f9a968-9363-4c67-b901-8b4a6d8ac60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ba1f11-3274-46db-b04f-df05d8f67dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf7edf1-9f6a-4b7d-8e8e-91b3f16de644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f15cac-76b7-4ac5-8a83-202872f7acad",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5fc939-1d11-4341-997d-9971b45c5bc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af33ee44-19a8-4301-bd58-31e6970c011e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86377f9b-d95b-4765-9300-ddef5dc34df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfce8a12-e4f5-47c1-bebc-2890351be830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86c5087-e625-476a-aca7-268cb9c44d5d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082a1285-4eca-4a74-ba16-30bf6fe5e3f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2db0f1-587b-4c17-af47-928e3947d33f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba209f4-d77a-418f-8a99-18116d5268a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff0692a-4df7-4bdf-b3be-80cadf8df14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d891b0a-5fb2-4f3d-8682-8ffa2c69d7d5",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfcaa62-de99-4ed3-b0a6-a1cf1fdd56c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47069065-60fd-45b1-a399-50b7bd41fe6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b28535-788c-42cc-aeb6-e2ebdf6c7209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e849bdc3-f385-4806-b900-130dbb019135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c99316-8ac5-48d8-8f03-73348c6a55c1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de20532-a1e8-4504-8ecc-d2ce2899ce82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e2421c-f66b-4223-a8fe-837596c755a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "707f8aac-2e58-4f40-919d-c62e12c6d361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696a2c73-89f8-459b-88a9-ca1c07db9d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f10ee23-4354-4942-8e32-42b21b2bf316",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c74761-0fde-4a55-9861-f94f3bb5a878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e73202-0a51-4384-82ac-05ba269630b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e498b25a-15a9-4b0e-8f64-4af38b392607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cadb92f-6185-477e-a621-dab20b6fccbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e49f0e1-a6ea-4abd-8e78-646c53b179d6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f7d0cb-7010-4fc8-9738-d244b01cc576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47504455-cbe6-4e02-b866-e57b4512ecec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68877a5-1cd3-459f-a334-651cc6e0dec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef63e2b-35af-45f3-b363-1822d4987bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6f03b4-09ae-46d0-9f86-6542d3aa0777",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c197b9ab-7506-4adc-b0fd-cf5f8365f2e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5540ddc8-1c96-4c64-9b6b-e468dffd28f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea9e008-1373-478a-9089-8a96c130a059",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35cd970-3bd6-4f86-ab62-02a8e100b59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab81ea5-1a5e-4b03-bd2c-514846256bfb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88244ddf-0ab9-474f-82ac-7cf27c723a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da248fa-98d9-4ea7-9dd9-3e3da0068765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129cf55c-4a32-492f-8da2-8681be10496f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e53626-d793-4500-9ab7-7cc0ff5e408f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d708b743-9d46-4959-a8b9-d15ee3b7d304",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4b5664-d240-4bf6-a3d5-c7c833a5bd98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bcb5dc9-c0bc-4747-ad17-17c04236cffd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246ec9dd-d48e-474b-8ae4-53be068a0f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d1d81b-3ad9-4840-a1a7-f61645536d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f93f84-7dee-4bac-88d4-5d246c338e51",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d18e61-6663-496b-97a2-c5a5e9c8fc29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e922dfe7-5c0d-488f-b6eb-83db574a5112"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffc5210-66a9-4602-a762-df980a57e67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447420b2-8daa-4e7d-9771-a37eed6c3170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eee4ea-29a2-4972-abbb-260daa9c6852",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bfb03c-d135-4361-b955-9a2fcbdfee5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0874fbd3-5900-4a48-8ff8-407fbe4f005d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38728af-0c2d-481f-b2e4-40f23a6ef95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f35328be-b16c-49e9-85f3-735ac1ce8699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d82a48-9d43-4ede-8335-ecc544e1e1cd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e92353a-6b88-4561-adf3-8b02ab56633d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4ae940d-6eea-4414-b7be-46bbd153e771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad04d2d-4686-41a2-a6a5-c26c3550291c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41746a83-b788-47f7-9cea-28f9e3fdb932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c060c15-46b9-4ee8-8b29-67b536f81f0b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8935604b-fe02-4886-bbe9-789c95e50dc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "075c9350-fdae-446c-ab95-b525c7f975b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3173a40-079c-41c1-a964-06fd88551d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f7e2b3-6d2b-4d5d-990a-59f1185b620c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e0d450-75ad-4664-b343-d41efb02a99c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee22d894-6e88-42da-8b9d-ba7faafb09d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b42a620e-4338-4fb1-b95e-b21043ab0a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f271099-32ff-4584-8bf7-49b8b6d74d54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8754f067-1b1b-453b-90d0-b996b1cdbc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b40435e-220f-4708-9c67-d8f1a76eadfd",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6fd6bd-6b4a-41b8-bc02-74aeb0a0b613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3d0fc56-8342-4a47-b988-939b447e2b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38f25ae-2251-4abd-aa05-7a3a4d951a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a256145d-ea0d-4d9a-b6ba-9845c8f5374c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24b9856-5918-4b19-a2eb-ce61c9043146",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7696865a-0b78-406b-932c-35f1322a9982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a805c4-d9fb-47ff-bb04-afeae5bb7510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fc2d4e-686a-434e-b928-bc50cbd9e235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc397cc-6989-45de-b48b-48c0cdd2b07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49e662e-a84b-48da-be7a-0a5c734ddfbc",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f309a4-52fe-401b-a2d9-69305758537b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d84a36-4a45-4e0a-b502-fd58f6272930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694d6665-0502-4e9c-bb20-03b79ee26ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109854f3-b4c8-4efe-bcbd-b1220654c458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d08a71-98e2-453b-b1ae-92bc3631411b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1ccd92-939a-4ad7-8785-1b28e8c9e391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2f8b4b-b0e0-4057-8d53-9cd6a6b3bdaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b9496e-cfc3-4f33-a9de-a52eeb217b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7409550-e7da-4e98-b30f-c6f70ae80d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e52d03-3e8d-495e-bee0-f24bfaa81710",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de387cce-de6f-4b2b-9f61-041529179ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c4c2dd6-933a-409c-a4f7-ba96566566fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7377fd63-a8a7-4ae2-9699-4ef8bc8b5be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c99dc5b3-8fe4-422c-b6da-6440dac52832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acff46f-4f80-40f9-b6d3-8b3b7cbfd537",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f28618d-dfcd-47a3-bfea-92ae2080c1bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab23831c-4625-4fd7-a904-f63488d37e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb7c438-1913-43ae-8dfd-16c49df289ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c907c37-3413-4ab6-952a-1e5859071bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53adee38-86aa-4f89-ae81-0ecf3f03e260",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eba4731-7d14-4692-bf81-071e3817fc23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c4577ae-4531-496e-b292-a1d9dffd65ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22254f54-5089-4270-a974-a6dd17f955fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394f29cc-027a-4450-8998-9dfe8c5a36c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4632d6-3c3a-4b13-950a-3e618d9075c3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda6d09f-ae8b-4f10-ba5f-e23f6fb8257b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49272ef-0c56-4e88-8ed8-c9c6617dec60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a631c62-738f-42fd-b015-c5cb43626bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db7d842-f50b-44ae-9782-ee687426ab6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5013d22c-f564-4ecf-860d-ce0cb69b3167",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b954f45-b8aa-4349-8bcf-8d3c654803cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4357ca-bade-44dd-8a43-389974b050ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37427f9-88fa-4e16-953d-81bcf9211077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9b8bd8-0ec2-441b-a7b3-35a2f0967375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa9f603-98c8-4d45-be6a-ba224986728d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a99b9d-6535-4441-88cb-7d5a8ee0ee33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590f0763-4c18-47f3-8dcd-0f6ae96880d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4f60f6-38a4-4723-8bb2-dc0ec187fbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8c5052-d8eb-410a-ad1e-ac1583e03701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974c5571-e3e7-41c9-b2ab-a189aef1beb1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9b522b-912f-4333-9d9c-9e4357bb1296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d41f74-30d9-4af5-a725-a7ba5fea03cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "819d0898-0f16-4f55-b677-291641e41217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d99bf159-0439-4861-9b9a-a2e1b33b009d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab5a225c-1612-418b-9af4-14079e6bb7b9",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf7c263-acce-421b-894b-0e5960ec1e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3769cd34-7d2e-4e7e-802d-dc28a70cbc2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb87a74-0185-4006-aa61-e6f4e14583a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42288377-e1d1-4db0-b098-d3326a86d8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42f17f79-1350-4ef5-8489-1a717e4e2472",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b8f19c-c774-4197-bdb6-abfbf275c05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f59d5d-baab-4ffe-992f-12d173d206ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a656d1d6-d6d9-4433-8a91-105aa578a9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14404e84-2824-43bb-9a23-8f203aba1ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7578df36-c426-4144-ba24-8c95822ff7a7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d69af-e138-4cb7-9315-5e7750938af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ebcae56-efe0-4690-a086-a3fdbd9af69e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f6af5c-be54-479b-90ef-6113691a1857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034a1d68-e254-4d79-95e3-3dc86f037d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b093b7-24a5-4fae-a32e-4e62332451f1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dcc673-58c2-4ffe-96d3-5ff9a996e2f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419f15df-b9fe-4eab-9308-9c4586282294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af4d7e2-567a-4fbf-b6ec-72267bbef7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96e615f-12f6-443d-bf3f-d9e3080c4d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9cd905a-5615-4b5f-b487-42b5cb75c2bb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b25ee3-7a88-4bd1-bfd5-f0ce89215c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788fd6d3-e016-48fe-94e9-632d5e5c4cac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c74697e-6ea8-457e-837a-8e61a14daa41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed67861-7d78-4693-97e6-119d533f3a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4848acda-473f-4b36-a9af-960f1987edd7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c21e7fb-054a-4aef-b899-86805b7ae1ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33e6e355-1f57-4bc9-b7ac-321e1cc4d1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bff68f-9caa-41e2-8db7-154fd11578ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a13c47-1d57-4a27-af27-bfcc12c03e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7c17b1-4427-4194-89f6-73adde8a3740",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657e5411-1e66-43f6-9b5a-5f9e262de432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e84883c-64d4-40be-85a6-c15975836329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b22599-fa64-49f7-9dc6-e066c054bb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e3503f-9c57-41a5-80c4-fb02cb1098d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ec36c4-a97b-451d-90b6-5cff37e5d946",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d89e0d6-4287-408b-aefb-12b6bd4dac58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee6700c-4d78-41d5-a320-2689bae751e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de2d180-b906-4fdc-a743-42c18f67611f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218a5fd2-2504-4e7f-a171-df3fd3a51a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2756c36-d999-416c-8cbc-cb9d06444ff7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "349c20e8-7594-4c21-897a-514f4444b434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7484f95-9542-4ff5-8c41-a58073e80e84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2313fbf0-6b8d-4ebb-9609-6f192f348d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb41b6b-ad4d-4347-a143-d18c18f3c0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964368f7-5816-4cb1-b0d6-08a7680be1d3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce64a16f-5592-49b1-bf6f-8566c6b41c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8843c7d2-7a21-40e6-974c-ec666bc369aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "682f168e-74f4-4fb9-bade-e5f1e5402a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32934f0-ca7d-40d7-ac19-2e27d279a569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c84e92-be1d-4924-be0c-9e445cbacea4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf558b9-c1c4-4c3e-87c9-fcdb43d2b7fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11d94ff-384e-4636-8b6a-76d81fcdf96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cca821f1-2465-4f20-9743-5bf93277e2b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2e72b2-a215-431e-8d63-2a700872540e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe42b083-b542-4098-91b0-c05990a25b09",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5406421f-2cd3-4884-9677-e51633b3714d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4657ce6-ee63-4cfe-9a1e-82b3b709bc13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f452c732-e57d-43c4-9cfe-b7dec3e0fd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a518b4-b8e0-4328-a26d-eb14046cea79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d823a34f-c6ce-4cce-8a74-dc5f0b585490",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930c3f50-62af-4dd1-8721-ee4d35b27c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef10207-3a23-4e72-be90-96ccd7d65cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef75072-cdea-4f51-9118-23e30ffa19f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d12a3d1-59fb-49d5-a9a7-9eca7ac3d70f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc4c263-c28f-45df-b3cb-c44ad1818aa2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66618e2e-f6fd-472c-8d14-79fcfe05d120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d37c415-e869-4376-bbcd-13eaa9786650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "800fdb4e-7b14-4a73-bebe-a6299ecc1e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd3e911-2e95-4fe9-981f-4c1152bdf5f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b80b32-6518-45f7-9df2-4aae59bf23c5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b766e7-0f8b-47f9-8e6d-7a0312d3961a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5440f2e8-c772-4d51-937a-fec8eb18941b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c46175d-88c0-4410-ac9a-f69c26c0ab2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae94f76-4378-4885-aa31-f2897a8beaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb5a2c4-d6a7-42b4-aeb7-d1e49a2cfabe",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67eb3204-a3de-4080-8e18-2d3ea40b8c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96aa5dc-91d4-4144-8d76-70a791011f3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af483e5f-0086-4f4e-b0c3-d12c427c0753",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156187dc-2f2e-41dd-989f-25b03e8e5807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85906c8-3d3f-4ab3-bcc4-3edf64d9e70b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebd1ed4-087f-4f5a-913e-429f86e8e9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bcd597c-af9a-487c-acc1-6e747835df9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2dc3ea1-668d-4e58-b92d-48b4a4d5840d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ef44945-1448-423e-ba53-e81033557af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554279cf-25e9-44c6-b2cb-b06c9a9f72bf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1183707c-dd8b-4d9b-b732-937de90dc207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99d43685-44fa-4168-be4b-5e246be46be6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8077edbe-6ccf-4204-8a71-02442c688557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec88997b-c63a-4f03-b044-7a10e6953950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8702a6-cc6e-4b07-accf-af504b8ec6cf",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d61b6fc-2a74-43b7-8220-d7df3e012534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d1e120-8374-4a65-82b1-b3fef3b77dd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6bce99-c501-435a-82b6-8cdc994d45d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d7ed488-74aa-4654-b12d-70e794d3673e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae4431c-0498-4d3f-809b-d96d57cb4b5e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0755d717-48f0-4048-9771-d884e856ebe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23186c7e-e17f-4069-96e2-4f9cc89cebed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5c342c-e8a0-41b0-a735-3657414a6544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d3c7e2-dc4b-4be1-aed6-0fb94775691a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ad5b12-2975-4cdd-9a89-6dd8d03cd5fd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88c3eb3-76f0-4d68-bbc3-e9c0048a6353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee5db68-e39b-4f1f-a0ed-2fc285a606d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab467ae-5adf-4c26-9148-5f549f6e30c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc066923-d279-41f1-8cea-bd6cc1611ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e23fd6-7bae-4093-b2ab-3550ed6f5cfd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8efeecac-dc82-45b6-a3c8-f3b6db3ff373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37ddeb65-1017-44af-9eb8-ca7366150327"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91149c7c-9df8-4903-97f2-aeec8e42a8cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab6e999-cd78-4f8b-a8c0-79a0e3f19022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62f6c69-2415-44f4-8289-9afec0b59622",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf60e22c-f546-40c8-885c-ede109bc90a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47aca788-cb18-46ca-84a6-b42f3ad288a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a894e21-02c7-4d37-b32b-db971f25e31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a92b789-68db-478f-a2ed-3a8284f3d426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ba6941-6ae0-4e32-884a-0653c9718b44",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6a98a5-a51f-4a11-a449-70c2a2b9cd45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e984cf2-bc2f-4c19-9832-080e5430071b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7aa586-7e02-44e0-ba3c-48ce784e8f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b964515-5df6-450b-8da3-9eac1be8e21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2189efd-1def-4d2a-a562-a16a73b1b673",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70253c2f-3b5c-4d4e-8392-1e64c08530ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7c1808c-937f-4796-8046-48403d0e9844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767d77cc-3629-4191-b515-37a0dab058be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df3af063-ad9f-4d3d-a5b1-333b50754024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "135074be-de2a-49d3-b111-a9acaabd7cdb",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e209a9a-4153-4e13-94d6-4b1b933c9978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01861371-e893-46e2-be6f-819d7b571d9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ef723f-547d-4bac-96c8-90bf72ee55fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d88af615-d300-4111-8e5b-4386b9a490bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84902530-6539-4642-bffc-80d33fd78a6a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a566b98b-11dc-4137-b984-7c073c6488ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df396f0-800e-45bd-9351-0062a0f7d564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407d580e-1dbb-4640-a241-09878dba70e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54d4b1a8-9272-444c-8bc0-0cdb3d5f867d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3129180-cffb-4f47-b6e0-02bbb9f29b40",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8d185b-bf71-4e7e-88f8-208204566c45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f4ac988-c17d-48c9-8480-1110b3f70469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4dbda1-c018-458c-908e-081d5d5b6f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ffb0cc2-7d68-4f01-a14f-01ff2615fb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c15a16-a3ad-46a0-a672-d3a8072ee6a0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3baf5feb-da74-4cb5-9397-1fd2ecde2ba0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ba57900-a356-4ada-9c58-6a95f103aab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fa0508-b7a4-4736-8b15-ce18596b30e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f22f22-9567-40c6-93c7-03279da97eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266265ea-bcfd-4362-9928-7df86bd25175",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b433e-685c-479d-ad21-ddc3e33324e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ead3d69-e5c7-4974-acd6-5f43acdfb237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52add202-fb7f-421b-8478-8d81b25b7e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58fdc2a-c2e5-413b-b5b1-f4a58509fc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df406b45-a97b-41d3-b73a-d2f1cbc62c8a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5495f049-8047-4629-b847-081f3529b225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77db4496-1f14-47c9-9b9b-4c4d1848477e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "772d72ce-6c95-451e-9c07-63567889e918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65fd0a32-8478-4914-afb4-5f9d14d2c1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24635fc1-c44b-421b-9166-ef6621703d3d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410a69c1-d97c-46bc-8b90-238969b8b983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a821ac48-3acb-484e-8704-a44e3c5c32a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d7b1d7-fdda-4015-b930-98a3e6eab382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05cc686-a1a1-4e83-a627-3fea8c8460b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67111cbf-7b02-444b-81b6-58c28a1c0364",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4f031a-609e-4b84-a517-43bef4da105e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9a2f9d-13df-409b-bc00-d8c6b490c3d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dc7297-f9ab-4a2c-b505-bb10cf6cf47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3a8d50-66ac-49c7-94ec-97678eb5e2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961a7f93-77ec-4aba-8b88-4cebd890ee2b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610b413a-989c-44c1-a283-27c428192b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98e11f4b-826e-4c62-8553-d1777701d29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4848240-6102-415d-80b9-83e2ef936f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d387f82-6045-46e8-b5a7-b41701d94dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73bff3a-fa39-4f6d-8aa4-ac6c023bb8f1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b80d04c-d0e7-4865-8fad-54cc9c0da3f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf58b5e6-ef73-4fac-bfe9-51d32161709f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af91ea09-e811-4fc7-bf10-b34747dbf813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8f242d-b72c-4975-a586-606476276910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c33b0a6-0c7b-4c29-9dd3-ed0f47232358",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b54e324-834d-4ad4-a042-f348638d9b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ebfd301-78be-49ef-9c38-0072b2d77cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ff3d9-9ffb-4e64-b04a-5a74fd3068f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "905555ef-cdd5-4866-a9f4-b6525a19f8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9393da03-7f02-45e9-8bbc-3aee0b9e3b8a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a3986b-77fb-46f2-b332-658ac63d311e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87482871-7ee4-4dbf-8c83-1140fe079143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "615343b8-7361-4599-95d6-f69768fb9ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa06075-cd1c-4e04-a5f9-3178a39f778d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcac45af-c732-4bdd-87d8-eb02feaf7625",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fba1315-f754-4b44-8f9d-4efb28e33f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a008f560-6540-4dc7-ac61-2058a579fcc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823d7a05-c095-418e-8d1f-6d0dcd210e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66b84bbc-8ff2-46dc-952c-cd2acc7ef6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3694a533-e80a-4d86-915e-5e5989402ab2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc142247-abdd-4508-bf0c-aa69ae11e89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4707d403-9a54-4428-bfb6-95399f9dbfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44819f5f-19fe-4036-8309-af8fb9494040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3f728a5-5556-484d-a9c7-452977b89f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25a5ed5-7ecc-4d7f-b1aa-d87de7708799",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80125cc-1948-4d87-9f36-a829336c5bfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aa6ab37-7a17-4818-a946-e1feb01a35ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea4bd18-7cc2-41a2-b3d2-106b5e78df88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e358fe53-598e-41b1-95bd-19dc041682d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ee2a96-c770-441e-8468-640041077c61",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8013dc-df2e-46b9-a7fa-29eaf5f1724e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3ff3be7-a550-49cd-b81a-1d0add9682e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84cd163e-e529-43a1-9107-2c21b2845074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8c6954-7a11-4344-9af1-fb4fb95e52a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad14f422-cde6-49a4-9665-0f51bac3f796",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdabd10c-6edd-47a7-a43c-bd0a78cd2924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64c6a988-6228-4eca-8814-4135b68aec5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a20569-b01c-431d-ba9f-226e4d8990e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39387823-4f04-44bf-a9e4-9ff1f4998cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e21f9-40f0-4a28-abd8-a01c2398a7e6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d31f783-e574-442c-9b9b-c464122f74e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10841902-2265-4392-abca-af1b2223a106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206cc68c-459c-4267-9b58-0b3d07e82f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94012d7-2435-4d0d-b982-69622efe1e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a839a654-fc61-436e-b3ec-22b269db133f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27adac56-0853-4127-928c-0e7ef482f0d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816ae46d-ecf8-439c-8888-94669407274e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9dca9c-06d9-4e50-97ca-4a22d8049244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d15124-6ac3-4305-8234-09829a916358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fd4551d-c999-4969-ba9f-c0dc86e0127c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf04fdd-a311-494f-8174-fd3120b7cad5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8162db29-3e82-49aa-bd30-c12a54b4c5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "449094bb-d948-450f-a4df-772a8ccd7ce9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfd26e60-5713-49be-8435-948b6ba0a9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17aed19-8d7a-4e92-90a1-d1f6c48a6951",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976d1b38-e0c9-498f-8a46-9d8ece44b168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a28ee9-1ab4-451b-a7b4-9ad32019b1cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a984d33a-bef9-4943-81a4-dc8a7878a55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c53790-2e5b-464f-a32b-9b05d8e0eef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348b4eb3-8913-44e4-bf36-8600a16ebe57",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4bf433-485f-43cc-a3d0-764e3881ef85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b258df03-b56d-4f12-b30d-07e2e48d0f4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727f99b7-3ce7-4e4c-9d59-60fb3c78a4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf21bee1-4498-4a8b-bde8-63826226fc1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91da6c9e-aa02-47c6-8548-4cb01be6b204",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d906741-2d6b-41e1-af91-e6f14dcd3f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e058f8a-79ac-4c68-a829-e3ca719fb126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a4b941-389c-405b-a586-dc9ec3c97a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29700e67-2f31-4647-8946-fa2039e681a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d201b0e-055b-4e2f-bebf-c2719daa84f4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d83b9f-b7ec-45cb-b980-564477ce9f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06a8b5b4-6918-407a-b3f8-9b3b9f3ed698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fda0a64-1ef7-4c10-a459-f2fc75e44c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee4daf9-d7b0-45ce-82ba-cb26acfc1ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de55b32-f1a6-4ad5-a93d-c4824f88934b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e860afaa-f497-4cf6-a286-568fc70ec63e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafd33ae-f9ff-4287-9541-8b6cc00fb33c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a731fd-bf30-49ff-8c17-533aa5165cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a3d9fe-9875-4089-b5a4-2e75b20272fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6c6795-3aa2-472a-9ffb-de882a1f2db0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585f8a1a-f2e9-4837-974c-7c9b8e16f207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a081b0f7-4ae4-4329-bd1d-96abfa7ecd1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60aaad3-2c32-45e9-9bcc-90ca5eb25256",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f761cbf-d5e9-4a55-a080-382a8b2d01db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "656501c7-282d-4d44-b3b1-38ffc5ca1667",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e0ea54-c472-451a-92c1-2b7d7d7826f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "430b0a72-eb0a-49c4-809e-1c52b3ac96ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8d5192-cbb1-44ae-9bf5-db7f3323dce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d517528-9582-499f-b54a-23a264305b61"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d3dbe44-0778-4a3a-bd81-4136d1614230",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c332d59-cc5a-4dec-9b08-ae3f72b28ab0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2074cff4-ded0-4912-8574-b839f094d7bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3b562e8-7b71-4756-b4ca-123b012b81ff"
                    }
                  }
                ]
              },
              {
                "id": "a5d89087-2621-4cda-8335-299829dd4bd8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "851baf0c-a33f-4e63-852f-9d7eb543ff8c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d241c028-46b2-4fad-9c1a-a0e1d74d053d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3ad338d8-2936-482c-9b0c-2ac48608af46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1531eba-14f2-402e-aa8a-03e5478ed9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b45ef47e-651e-434d-8074-1d52eaa79484"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "785f2079-1a66-4a89-91c8-9df3247fe092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14b1adb3-dfec-4d05-b24b-3db41b3b6c80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40f7921e-0253-4c97-8d06-a3297adde4b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bba5b415-9208-4167-9743-64243f768c4f"
                    }
                  }
                ]
              },
              {
                "id": "16731aeb-0433-4ad4-bc9c-48bb298bb608",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "856b31ec-ab22-45eb-b506-a722a0c2d2f2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c51c23-0976-4349-8d4e-d98ab9325166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4e77bb2a-22e7-4c0c-801c-cfab34766388"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61328fb6-adf6-4e88-b730-dad2ddbb24ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64777135-125a-41d5-8f2f-eafc11300119"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c368e0f-bc56-41f0-8526-ba13c7473131",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9f7bff73-a427-4425-8483-d9eef3253825",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7497d3fa-b34b-47cf-b965-1e0bcd2a02d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4dd21262-a0d1-4799-93c4-1ef903e57c2a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b08390f5-38b4-4c22-95cf-f4d843081ff7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2e33c38-68ba-48fe-aafc-6e3a8569f61b"
                    }
                  }
                ]
              },
              {
                "id": "afd78cc8-22f5-4972-8375-926709301ec5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71757a03-4777-4db3-9aca-b5e6efa446d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8edaf7e0-9ca9-4c51-a882-4fc700493919"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "449d6808-148d-4775-873a-d248ff6b62e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6888fdbf-0139-4623-80cb-9638e6c8fe38"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cbdee7c-02d2-4200-854c-c8bc361830db",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "30363dc0-0c5d-44c9-8f5a-3e193e05a7f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e40dfbb5-25ae-4358-8ce4-a73dd28ae37a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fab82bd2-657e-4944-8c4b-cce197ecef06"
            }
          }
        ]
      },
      {
        "id": "08262e47-d4a2-4d24-8203-2fe5992219f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c1a7b1f-cdf3-43b0-86df-3fbd6712d3be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b263070-d23a-49b3-b07b-ccaedee6d838",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a6ec8b65-db03-4f54-9e1f-f42015f1013a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cc5172-a5c8-4fa6-b38e-07c2d9a30dc4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8acecc65-b481-499a-b565-8299e98ecffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51694a27-3124-43f5-ade4-235c0b4b956f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9541e48b-2ab2-4ee8-88cd-5f15eaaa914e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3251320d-d1a3-45a5-a070-a6d66ea458a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a963709-0c60-41ed-966d-655ff02cb298"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "573dbc3b-e617-4094-9c62-604775bd965a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08a29028-fa47-4195-b931-0c8346da3388"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d0d7ea7-fc44-4fc4-a80e-4981025d166e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "17e28a44-653e-4fea-ba18-e0c256ce3e58"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "557d1b0b-fe2e-4b56-b759-0804feacd778",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c36578ce-9bf6-46ab-84c7-ec49c0d043e4"
            }
          }
        ]
      },
      {
        "id": "c29c239b-08db-4928-af20-1f982417951c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d046f0b6-d919-44fa-a926-13be10493fe8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fb8735b-d0d2-4d4d-8466-b4ad8ec3c2c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cae52525-7585-4855-8f30-de1ab85d33d0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaaadb1-9f3d-4f17-a4ef-3a5ceb85b36e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "615e04cc-bc14-4bd9-b1ce-c484bd0c54d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c1843f-6c7e-4655-ae65-dfb674680569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ef60805-063e-46af-a458-f373de0d4142"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b9dd69a-d249-4378-81b1-a7c64ddb6484",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "755b61e4-d92a-4d84-a1bd-4dee289dc7b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8cffc008-3b8d-4118-a693-2b4b45acbb57",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d3adbb3-0c89-41bc-8c2f-b5f46a4c1f21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a2a05b8-ce33-4e23-b93c-2878461859ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "254e5372-e52a-43c1-aecb-dbeb764652d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "043ef469-3769-4b4e-9817-b187e8c99f56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f762c161-a4e7-4e23-b290-64073b810f12"
            }
          }
        ]
      },
      {
        "id": "90a2b488-d920-48a6-9812-0a641abde23e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "03e214ca-24fd-4b43-bc3e-81513bfe638d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a15d9e5f-f0be-4d37-a0fa-66acce7634b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6923b2ab-7ef2-4c2b-a2a5-99f2bd58a06b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f030d7a6-6514-4fb6-b81a-1800076b08e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89e32667-e988-4add-9b62-a9641e2c5d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3cb7621-70fa-40b6-850c-0f809ec0ad2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e7708f47-fd88-42b9-b3c1-a914334b636b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a1e1994-2773-4840-91e6-e67af07fa05c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d853844e-787e-408d-a5e6-04db80dcbca2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66fde7f2-6c32-4f13-ba5f-94c9005ae52d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "099b5e60-aa63-4f0f-8071-5d45ea6ea310"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6f38351-f7eb-4597-b698-871a802f9d19",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "773d20e1-7c15-40c6-ab60-2fb9e42de4d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86f9d2ec-ea30-4e0e-935e-40d2cbd12e4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5335115-7b52-4b1d-8beb-a03c445b3946"
            }
          }
        ]
      },
      {
        "id": "f064251a-2115-4a46-bbd7-f87ace805bbd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d9d7b9f-db58-4701-a647-8195d4e9f1ee",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a33885d-4100-40b6-9290-14dc58af2fa1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "17fba30c-1b4a-4465-aea5-d416431e66c3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6a718caf-cb42-4217-a411-4d3a755d7423",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9476a998-511b-4dd3-9cf4-6edab39c29cb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 29.432539682539684,
      "responseMin": 8,
      "responseMax": 266,
      "responseSd": 19.7236717393934,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1718066278629,
      "completed": 1718066294236
    },
    "executions": [
      {
        "id": "def0c35b-2e9f-4047-ae0b-5fa586a7aa23",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7cc55da4-493f-4cbc-aa50-6e518c83d1fb",
          "httpRequestId": "818b5688-afba-4de1-8a97-30d9d8eebf5a"
        },
        "item": {
          "id": "def0c35b-2e9f-4047-ae0b-5fa586a7aa23",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d5c8f170-9b08-4cf6-a0b7-1c839b0a0a7b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "eff8975a-b69c-4246-9fcc-ca9275d51b94",
        "cursor": {
          "ref": "886480bb-8bce-42f6-907c-cd740c39879e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9d4846e3-2554-447c-b501-7ac40542f7d1"
        },
        "item": {
          "id": "eff8975a-b69c-4246-9fcc-ca9275d51b94",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4f7e0028-282c-4836-8991-7565bc4d655a",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "d4815a1a-2f53-41de-a4a6-ab52e687a27e",
        "cursor": {
          "ref": "05d33e74-525f-41b1-b718-440227fd3b06",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "03653b7c-17dc-4b34-ab1f-8de890ec0383"
        },
        "item": {
          "id": "d4815a1a-2f53-41de-a4a6-ab52e687a27e",
          "name": "did_json"
        },
        "response": {
          "id": "dff387fb-8a83-48fa-a776-eb8886274c08",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811b9f84-323b-45d2-a6a8-dfaf11b9e1fd",
        "cursor": {
          "ref": "dec1d5bb-d37e-44e6-9db5-745611bebe59",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6aeb0570-f49d-4e67-8ce8-4f92d749252c"
        },
        "item": {
          "id": "811b9f84-323b-45d2-a6a8-dfaf11b9e1fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "6a59ec73-a231-4932-bd43-e93d679b60fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811b9f84-323b-45d2-a6a8-dfaf11b9e1fd",
        "cursor": {
          "ref": "dec1d5bb-d37e-44e6-9db5-745611bebe59",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6aeb0570-f49d-4e67-8ce8-4f92d749252c"
        },
        "item": {
          "id": "811b9f84-323b-45d2-a6a8-dfaf11b9e1fd",
          "name": "did:invalid"
        },
        "response": {
          "id": "6a59ec73-a231-4932-bd43-e93d679b60fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0937fe1a-a945-4b87-8177-5a92cf310465",
        "cursor": {
          "ref": "60f2dc1c-523f-4cec-b191-02d515c4e665",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "51c817b1-539b-4c50-9e86-6230a0ed8034"
        },
        "item": {
          "id": "0937fe1a-a945-4b87-8177-5a92cf310465",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "64f99025-e0de-4aed-9a8b-9b6b40ec357c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 137,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f10216-c21f-40a9-97fc-eec39452d79f",
        "cursor": {
          "ref": "45b408cb-65e9-4614-a616-2409e94426d2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d16ebfdd-08c1-468b-a2ad-a7fd74f24f9f"
        },
        "item": {
          "id": "28f10216-c21f-40a9-97fc-eec39452d79f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "15e0e8f9-2bf1-43c1-b017-8e1c44ab84c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 26,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0f4c572-763a-4b6c-9663-ca4973a01be5",
        "cursor": {
          "ref": "a2fb4317-8fed-4991-8be0-5659871e261d",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "80c685fe-8c6f-4304-937b-fc309f00673d"
        },
        "item": {
          "id": "c0f4c572-763a-4b6c-9663-ca4973a01be5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e078761b-e4fe-4593-835a-0c8121f0ef5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7853aa-a698-481b-9414-db899e86c1f3",
        "cursor": {
          "ref": "f87141a8-28fa-4122-8bbd-0f91e76beef4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1763ba2b-2130-4149-b64a-5072359f38b0"
        },
        "item": {
          "id": "3e7853aa-a698-481b-9414-db899e86c1f3",
          "name": "identifiers"
        },
        "response": {
          "id": "16281f1a-a966-42d3-81d7-ddf12a421c7c",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc876af8-2ba3-481e-ad2f-3779775448c4",
        "cursor": {
          "ref": "a7faa820-f5d8-4d7f-831a-cedc1acac4e3",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1512a56b-0996-4152-add8-5d8af2580416"
        },
        "item": {
          "id": "dc876af8-2ba3-481e-ad2f-3779775448c4",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e7b0586e-5f9b-423d-92b8-765558c8c772",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724471f2-967d-442f-a54c-a42d21a8f18a",
        "cursor": {
          "ref": "490aa4dc-5ff9-4bc7-8e3d-74994c6dee33",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "27d2e2d4-60d7-45ba-889c-5e1e9a5c0590"
        },
        "item": {
          "id": "724471f2-967d-442f-a54c-a42d21a8f18a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "52df603c-8ff3-4dac-a4bf-67e4887ef182",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70694ff2-c24b-4bf1-8ca5-add589b3680f",
        "cursor": {
          "ref": "baaa3c6f-310b-4bcb-9121-db0b28694ff2",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "26f15c3f-650e-41ef-9c49-811ec7939ad7"
        },
        "item": {
          "id": "70694ff2-c24b-4bf1-8ca5-add589b3680f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "740dcac2-3bc1-4200-8a54-861425fa758c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c55d4b-7e39-4627-a46f-ee3464305219",
        "cursor": {
          "ref": "4fc0bd8d-89ce-4f89-bda0-fb396e0f6fc8",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9386c5df-dfdd-42ac-964a-14fd634d6bee"
        },
        "item": {
          "id": "f2c55d4b-7e39-4627-a46f-ee3464305219",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2ba9a457-39e8-4cf6-832c-d4d466e84c10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e950b2-4b0c-43ab-86fc-085208a752d7",
        "cursor": {
          "ref": "9808e5e6-29dc-4d9b-aa62-6376e9a4c681",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "58f05a68-755e-424c-bf53-ebb9ac0c9e0a"
        },
        "item": {
          "id": "71e950b2-4b0c-43ab-86fc-085208a752d7",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "05e8b70a-123d-4531-8a45-d3d75a0bf661",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449710bd-71db-4b3e-a008-59ff6cad2690",
        "cursor": {
          "ref": "9ad2baf3-34f4-4fb2-9a20-b8ab7679f27f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "eb4dc3c4-bf6b-4b67-8938-25726a46b413"
        },
        "item": {
          "id": "449710bd-71db-4b3e-a008-59ff6cad2690",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "486a5de2-f5e3-4587-aac6-ec5ddf217bc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c6115c-f467-4902-8374-312f3dec9f97",
        "cursor": {
          "ref": "3faf4a46-5ab0-4f48-8518-c5e049dcd2ba",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8735d783-7d18-42f2-aa3e-60c8e8153215"
        },
        "item": {
          "id": "05c6115c-f467-4902-8374-312f3dec9f97",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "80a39395-41c2-4c0b-8adc-c7d88872f503",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117c43a3-1104-4ab8-8cea-c3816617dee9",
        "cursor": {
          "ref": "c15b697a-f34e-427a-b3dd-9723cd930af6",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "02def8c7-1dd5-4563-974f-e3fdc7cce632"
        },
        "item": {
          "id": "117c43a3-1104-4ab8-8cea-c3816617dee9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d463136f-3906-45b6-9161-83fcdeff5732",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f115e27-89dc-44a8-9282-4cc70350eb9d",
        "cursor": {
          "ref": "47fc0786-578d-459c-b917-17d7e525fe9d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "43a5fa26-0b0b-4b7e-b5a9-ecd585f0e9af"
        },
        "item": {
          "id": "9f115e27-89dc-44a8-9282-4cc70350eb9d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fe681025-1a7a-40b2-bc37-e49212e20171",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdcd250-3c1a-48a6-b0a4-29cf809259b8",
        "cursor": {
          "ref": "66a0746b-8f9d-46f4-8807-9b92d5507997",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a978f8cc-02af-4afe-a633-e989e91fedc6"
        },
        "item": {
          "id": "0fdcd250-3c1a-48a6-b0a4-29cf809259b8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1a82e272-edf2-4747-8afc-8a149d871698",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30cdc96-ccdc-4b55-ac22-19814f56d7e5",
        "cursor": {
          "ref": "b0dfdbfc-e263-425f-a055-d67ba07ce435",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ed70be9a-2ab3-4dc3-b499-431fe0229d79"
        },
        "item": {
          "id": "d30cdc96-ccdc-4b55-ac22-19814f56d7e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9f334156-f3b2-4786-b0a9-8f8f017220b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abdffd05-dbf0-4bbe-92df-2e6e8bd1934a",
        "cursor": {
          "ref": "849e0cbf-a015-422d-908a-fdf1185ff12a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0216eedb-90df-4e0d-a6af-a8fe36c0c5fc"
        },
        "item": {
          "id": "abdffd05-dbf0-4bbe-92df-2e6e8bd1934a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "92e96b6c-aa7a-4bae-a93c-3e5d6a01a06c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadea869-ea30-4103-84e8-4e7185ccd8c1",
        "cursor": {
          "ref": "fd3f8248-cb23-49a2-88fe-786d5583599c",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "427d53d9-c877-4291-b1a2-0d4d65bfdf13"
        },
        "item": {
          "id": "dadea869-ea30-4103-84e8-4e7185ccd8c1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "81f59b3e-4625-4a51-8d90-ab005327ee4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e790ef-1928-4483-ac8b-7bb53e948ae9",
        "cursor": {
          "ref": "a1d50405-4976-4069-9fc6-31e64f36bb1b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d3772163-f95a-4c0f-b251-3e7b1abeec86"
        },
        "item": {
          "id": "61e790ef-1928-4483-ac8b-7bb53e948ae9",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "14af4a85-f87b-4017-9ac0-1ee9887d3462",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e063e5b9-0803-4759-a4a1-313029f8c681",
        "cursor": {
          "ref": "312cfc9a-8bb8-4a7f-b82b-de20ad4d288b",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9016fde9-ef4e-40c0-8573-73dad8b60942"
        },
        "item": {
          "id": "e063e5b9-0803-4759-a4a1-313029f8c681",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "54dd2b36-dd9b-422b-8cee-679ecf5fb272",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07213d3f-98ac-4640-b868-e0797028572c",
        "cursor": {
          "ref": "8500d703-89ce-48c2-b864-febbdc08bddb",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ac7fd09e-805e-464a-96bf-6fc8d0d0d200"
        },
        "item": {
          "id": "07213d3f-98ac-4640-b868-e0797028572c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "90feb7e7-814a-4c69-b8e4-27ab43173164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e75bdb7-0dbf-4a20-bff3-db8ede81cda8",
        "cursor": {
          "ref": "06a060e6-c9ae-4263-a2d3-dab47897e268",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "7ace321e-fe5d-4b18-b19b-bec08b1a260e"
        },
        "item": {
          "id": "5e75bdb7-0dbf-4a20-bff3-db8ede81cda8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4bc75422-e92e-4a93-8c91-6fcca375572b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea3d299-5759-459e-be37-b94906a6d44c",
        "cursor": {
          "ref": "3f4b0845-b515-4e39-bcff-07691c09c263",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f40bdf28-9526-4afe-bba9-53f11d913204"
        },
        "item": {
          "id": "dea3d299-5759-459e-be37-b94906a6d44c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1f36c23c-daf7-4ac6-bb34-80a6c8e9a100",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dfdbc5a-8c50-4b14-9282-03b3e8057242",
        "cursor": {
          "ref": "a6d784e0-924e-49f3-8887-342dd590a88c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6f62fb9c-3432-467b-9444-175123fa2b16"
        },
        "item": {
          "id": "4dfdbc5a-8c50-4b14-9282-03b3e8057242",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c712925b-3ed2-48bb-83c0-cd2a4ee3ae04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c95d596-71dd-4842-bf16-d009929a7c64",
        "cursor": {
          "ref": "5316c603-9400-40d9-a633-8868adc5d060",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4d419d71-ea60-4bcd-aae8-0eaef9747b6c"
        },
        "item": {
          "id": "6c95d596-71dd-4842-bf16-d009929a7c64",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0d95c78f-b775-4b27-b870-4ed0e58360e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca4d981-f54e-4b97-b996-1292d884831f",
        "cursor": {
          "ref": "c40834ae-807a-4c22-8fa2-a390142af0a1",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "db6723df-a114-425e-b672-8e7cb57ee5d0"
        },
        "item": {
          "id": "6ca4d981-f54e-4b97-b996-1292d884831f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "b1a2b108-f4a4-4501-a747-85bcfdddb6c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cafc2590-4bcc-4f58-a35c-e096723ba237",
        "cursor": {
          "ref": "0e8b45e7-a7d6-4999-a499-880b72b7251b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e07fefda-b71a-4d42-a073-77e30e102cb7"
        },
        "item": {
          "id": "cafc2590-4bcc-4f58-a35c-e096723ba237",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b583b4bf-8100-46fc-9c95-85c6ce1cdee3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f14662-499f-4ddd-9fed-dacbe38755b3",
        "cursor": {
          "ref": "214a8886-3245-4318-a813-7a1ec3926364",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4182c857-271c-405f-912e-947528175e05"
        },
        "item": {
          "id": "80f14662-499f-4ddd-9fed-dacbe38755b3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "62da81b5-6186-4832-93b2-11cdf546906b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db98ac8b-10cb-4347-b431-095cccb84d6a",
        "cursor": {
          "ref": "a0d0ba98-e5ba-4b9c-bd51-283499b3640d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "be601915-c6ea-4b9c-8ea9-c28226758f53"
        },
        "item": {
          "id": "db98ac8b-10cb-4347-b431-095cccb84d6a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ed1c7aba-6a6d-4481-8330-73beedc0c926",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d729e1-9c3f-4f81-8224-962774e22a3f",
        "cursor": {
          "ref": "4784877d-348c-4020-a1a0-159000c30cf3",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cab1c582-6498-4f28-b4c6-bbdc5d88c9d3"
        },
        "item": {
          "id": "91d729e1-9c3f-4f81-8224-962774e22a3f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e1730821-2ebd-4c66-bce6-2b9fc8fd56cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e7cfce8-897e-4286-bca5-d0ead9ce1b13",
        "cursor": {
          "ref": "f3c2a274-632d-4ead-9e60-63b24a505277",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "37c9963e-fe5a-40f0-a52e-d6d3e92fd66d"
        },
        "item": {
          "id": "0e7cfce8-897e-4286-bca5-d0ead9ce1b13",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ea3a326b-fa9e-4cd5-8e92-409757a6de9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50e9c19-eceb-4246-9885-a1f5a74f554c",
        "cursor": {
          "ref": "79fb62d2-eb05-4160-9318-2ef33a09bfa7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "704fd3df-ef64-4b52-9c62-8f66a9ccc53f"
        },
        "item": {
          "id": "a50e9c19-eceb-4246-9885-a1f5a74f554c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "cce06236-1149-46b8-ab9f-03dbbfd135d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6afe34-0f8f-4546-95e4-49f92f13dfeb",
        "cursor": {
          "ref": "d1d96a98-02c2-4115-b0fa-38cb356ad655",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a10f1f22-9ded-4d53-bb49-4860ecd8f091"
        },
        "item": {
          "id": "cc6afe34-0f8f-4546-95e4-49f92f13dfeb",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c1bed4b7-9504-4985-94dd-2872528db37c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4a0e65-1db9-49fe-8d70-ab5c95b3bea0",
        "cursor": {
          "ref": "dce9d8d7-7337-45e4-9f2c-281909ccc58b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ce9fa4cf-74e0-4a2c-a818-9e2381c6b346"
        },
        "item": {
          "id": "aa4a0e65-1db9-49fe-8d70-ab5c95b3bea0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cd57f783-5c69-46b5-b02b-12fb988ddf72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d130f0-fe54-4fec-b72b-af8dd8405677",
        "cursor": {
          "ref": "8052d192-1538-4438-a503-28a904a1c48d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4530238b-cedd-4c91-baa1-3d3be4aedebf"
        },
        "item": {
          "id": "49d130f0-fe54-4fec-b72b-af8dd8405677",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4bb58f44-9579-4346-a59f-96693f32a18f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89df1e0-4566-4f43-9493-5f0e0d54134a",
        "cursor": {
          "ref": "8417e750-a81e-4897-8add-bc283de68cf8",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fc1bef8e-c391-40a9-a3a8-8ef5bbeb6a2f"
        },
        "item": {
          "id": "d89df1e0-4566-4f43-9493-5f0e0d54134a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a5ce9f9d-0f70-4763-9e5c-0970ae3a0cdc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5e19c2-5812-4a83-b95f-1b85cb6a04ac",
        "cursor": {
          "ref": "b7e92872-e6c9-4c1a-8de1-1470d1cd586c",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e4c19ca0-aa16-48e4-962a-461f69f44451"
        },
        "item": {
          "id": "7c5e19c2-5812-4a83-b95f-1b85cb6a04ac",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "bf5b04aa-8d0e-4dde-935b-a5423e0d8396",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee97a24-2a2e-496a-92a7-d03a64936189",
        "cursor": {
          "ref": "21b07c31-1364-4219-823d-6208456da94d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fffd0e21-711f-4342-b183-427f952b2190"
        },
        "item": {
          "id": "1ee97a24-2a2e-496a-92a7-d03a64936189",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0563026b-3528-4193-bf59-83f0d36f2f02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff591ed-059c-4d5e-9646-89a9a4035a74",
        "cursor": {
          "ref": "db70562c-fa9b-49f1-b82a-31a25226b492",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cd38336a-f17a-44a5-8740-609dc38a5edd"
        },
        "item": {
          "id": "aff591ed-059c-4d5e-9646-89a9a4035a74",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a8ba5869-fba4-43fc-9eee-fa4812ed2192",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6367a355-ca78-417c-bd76-90c7805ac26a",
        "cursor": {
          "ref": "a3a53bd4-2f0b-44a4-a548-becf8eb44dab",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "396751fb-449c-40d6-913b-2130e29d3955"
        },
        "item": {
          "id": "6367a355-ca78-417c-bd76-90c7805ac26a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "49a959f6-b15d-498c-a776-a11e5d5dae75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76504241-d252-43fc-8c56-c65aa52be8ac",
        "cursor": {
          "ref": "b45fc7b4-d21a-4897-8541-e1e553d0ddff",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fe2e2d22-bcd6-43ed-8c75-10690d60fa9e"
        },
        "item": {
          "id": "76504241-d252-43fc-8c56-c65aa52be8ac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e6c8b2d0-f83a-4d8b-a155-0b36f1306efd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fbc8d0-d457-4937-aee6-082f4d2e66a6",
        "cursor": {
          "ref": "757e0814-0143-45b5-bd64-3731b2f35134",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "b57e3976-ae1a-41e3-bb27-f8b2422cae22"
        },
        "item": {
          "id": "b2fbc8d0-d457-4937-aee6-082f4d2e66a6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "398ef56e-18f7-47de-ab7d-2bf0195231a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660cf765-78ff-40b3-9da0-4133ff3845e8",
        "cursor": {
          "ref": "a4d016de-fba5-4f7d-a2b4-5afdbc218c91",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cb3ec3b7-67b3-4ae6-a856-4aeb6adf1d92"
        },
        "item": {
          "id": "660cf765-78ff-40b3-9da0-4133ff3845e8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cb2f2016-58f8-4945-8a93-720df89f95ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3880e66e-4a68-4797-8bb4-44e2d67264c2",
        "cursor": {
          "ref": "955d678b-24c2-425f-a48d-1bebce746684",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "15f297f8-8f17-429d-8047-7314241cd5f0"
        },
        "item": {
          "id": "3880e66e-4a68-4797-8bb4-44e2d67264c2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f05924ed-ddf0-4488-b242-9a0f44ee78e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f198304-a237-41be-a572-1668046225f0",
        "cursor": {
          "ref": "5115dcf3-e903-4dcd-a0b2-c984611c05da",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6fd6ecc8-9d1d-421d-8967-78161f7afaf5"
        },
        "item": {
          "id": "4f198304-a237-41be-a572-1668046225f0",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3d5f4146-9d45-4f98-aaf1-d70993e123d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcdaa7ef-88b0-4ed1-8548-30807daf0b9a",
        "cursor": {
          "ref": "1401f766-5ee1-4fde-9213-96ea2ecc32ed",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "13116021-bed7-44a3-b968-3db75065f93e"
        },
        "item": {
          "id": "dcdaa7ef-88b0-4ed1-8548-30807daf0b9a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ff606a71-c3fc-49c0-b329-badc2e225959",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d6ea76-0aa7-49ef-bcb2-357ce5d325ae",
        "cursor": {
          "ref": "fac986cd-2d5e-4d67-967b-e582f664a6c5",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9a147b7f-209a-47fb-bda9-a84fe4e2474f"
        },
        "item": {
          "id": "b2d6ea76-0aa7-49ef-bcb2-357ce5d325ae",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "55fa2488-dfe3-423c-9107-3563adaae7a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0199cb3-1fbe-40ff-ac99-6a0edc2bd0b5",
        "cursor": {
          "ref": "fe4bb0bd-364d-4b53-93aa-dc09d08b8faf",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2c699667-cd65-4554-b2ab-0d0ab10d0003"
        },
        "item": {
          "id": "c0199cb3-1fbe-40ff-ac99-6a0edc2bd0b5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f61f4f06-4ed9-468f-8ed0-11bdd2aa3225",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82f87d7-de68-4dc0-8ff3-2020f0ee679f",
        "cursor": {
          "ref": "4b002754-3748-44e8-8bc6-f230577594b6",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8538c88c-5449-4f08-931e-38abb7ed35bf"
        },
        "item": {
          "id": "f82f87d7-de68-4dc0-8ff3-2020f0ee679f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1607f0e0-052d-4554-9841-ab70e5de745a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637adc56-6297-40f9-940c-ce62aa433c4b",
        "cursor": {
          "ref": "01906115-941c-408d-97da-63e1f68ec8b4",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "833f4c6b-3e9a-4755-8ca1-8942f40dba1d"
        },
        "item": {
          "id": "637adc56-6297-40f9-940c-ce62aa433c4b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "15fecb70-66bb-46cb-a81b-77da36e61874",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8121d1b-ea13-47ef-aee9-1e0f82275387",
        "cursor": {
          "ref": "3b114d8c-da1a-4454-b5ff-3e0d6c52ee84",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "53b594e8-bec2-407e-afbe-8541e288a274"
        },
        "item": {
          "id": "f8121d1b-ea13-47ef-aee9-1e0f82275387",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d763590a-1ba6-422c-9874-8dfec4d945c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6661088f-3c78-4f00-a38a-fbd44e199589",
        "cursor": {
          "ref": "54a8eaae-4bdb-4f75-be21-15ef6f8fb9d9",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7d7741f6-6424-421d-8092-73d4174eef6c"
        },
        "item": {
          "id": "6661088f-3c78-4f00-a38a-fbd44e199589",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "519d1bdc-c8f0-4ced-a981-35cf9c0209e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3f31d9-6276-47d4-92ff-4fbb06370775",
        "cursor": {
          "ref": "2c2e2a39-659f-487d-8f73-c312e6fc37ae",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b6a1dd59-089f-4b78-8708-d984eca2e11f"
        },
        "item": {
          "id": "0d3f31d9-6276-47d4-92ff-4fbb06370775",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "96d54589-e3fd-466a-abd7-502d4bf22ca5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80d3f50-955c-40ad-955b-095f2e7603b2",
        "cursor": {
          "ref": "39c30914-6a10-4a73-bfc4-6067d8d8b54c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d0494c2b-42b6-48c0-9012-7eee1927029a"
        },
        "item": {
          "id": "c80d3f50-955c-40ad-955b-095f2e7603b2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "d951f8c3-29ea-404f-a3d6-1cc6cb4c2efd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17f0b5d-5bc0-4bfb-bade-e4dee66b1f42",
        "cursor": {
          "ref": "c655b476-68ad-4925-98a5-e69d32a97a93",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2af34b84-794e-4817-9621-6ba8ad4ca07f"
        },
        "item": {
          "id": "f17f0b5d-5bc0-4bfb-bade-e4dee66b1f42",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "949a408e-20c9-4829-9d8e-5650aeb1366f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11f0ffe-292a-432e-801c-0de93817dc80",
        "cursor": {
          "ref": "80f2ed14-839a-4b14-ad3b-c4d14fff81a5",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a915cb18-b814-49b6-8517-42fb510f5910"
        },
        "item": {
          "id": "e11f0ffe-292a-432e-801c-0de93817dc80",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c011313e-cb98-462d-bee0-5f979b94e0fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07597020-af4f-4695-bbf1-4c12ce1d01e0",
        "cursor": {
          "ref": "cb2e1d4b-bf92-43cd-b0a9-40a2631fe9c2",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7f90fbbd-389f-4e0b-a488-c77b8d364aa2"
        },
        "item": {
          "id": "07597020-af4f-4695-bbf1-4c12ce1d01e0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ad00e040-fd49-40b2-a061-8d4ff31878e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed6c5d9-fbc4-41ee-94c2-bd58612a5889",
        "cursor": {
          "ref": "6bf510cd-1d36-4be8-851b-3322e08dc7d4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "970527f9-a003-4c0a-aaf1-e61d03e5116e"
        },
        "item": {
          "id": "fed6c5d9-fbc4-41ee-94c2-bd58612a5889",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "96af7744-36be-4c93-bf3e-9a1102fff79a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557197a7-f4cf-4766-92fe-ec06f5cf98f3",
        "cursor": {
          "ref": "6b67c874-b9a6-4985-9811-af1121e70300",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "73e1e7dd-edfd-4a49-8266-67a303aa08af"
        },
        "item": {
          "id": "557197a7-f4cf-4766-92fe-ec06f5cf98f3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "198363ee-6ba1-4a24-9541-ec844273953a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3870b9-b5ca-4881-9976-3de243c0bf66",
        "cursor": {
          "ref": "29fe1461-c8e6-4a29-8a5f-c3d3d6cde6f3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "339a4c64-1172-4aa7-a92d-d9c46a4e031d"
        },
        "item": {
          "id": "5a3870b9-b5ca-4881-9976-3de243c0bf66",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ec847438-59db-433d-b0c2-7a2326efc140",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf3ff09f-392b-4b2e-9786-0009fdf9c754",
        "cursor": {
          "ref": "a9850400-4881-409c-807d-39dbf58f2ed7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "b3f73dc0-d979-4da1-9f14-d4400166412f"
        },
        "item": {
          "id": "cf3ff09f-392b-4b2e-9786-0009fdf9c754",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "43cc3c84-130b-4bbe-9657-132847ffbe20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe1b36f-d1a4-4a78-b237-c96e9ff9051e",
        "cursor": {
          "ref": "9c657c94-5b15-4b42-bce0-e6e4b0b7f6be",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c6b1e932-6e02-4667-9650-6f4504623fcd"
        },
        "item": {
          "id": "fbe1b36f-d1a4-4a78-b237-c96e9ff9051e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c99d7b63-2967-415c-a707-2d41aa1a15a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013579b1-fca3-4f84-80bf-f451b83c0fdd",
        "cursor": {
          "ref": "b7e3ed48-2548-4973-8199-312d9c395add",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "174b8f65-08c1-4dd1-8db3-fdc353ccf44a"
        },
        "item": {
          "id": "013579b1-fca3-4f84-80bf-f451b83c0fdd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "81814107-7b1d-4ce9-9efb-c996d4b78f0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87d5096-0f7b-4bc5-bfd4-3b684342b87a",
        "cursor": {
          "ref": "62b969f2-3d87-490a-b8c0-7089a2b44585",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2fafc7fa-4913-449f-bcf3-02256ff9e929"
        },
        "item": {
          "id": "d87d5096-0f7b-4bc5-bfd4-3b684342b87a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4b3c7a6e-2a88-46a6-97e1-919e377a44cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bb9b36-52e3-4295-9ae7-0624b511887f",
        "cursor": {
          "ref": "51fb3645-4259-41a9-88da-729abc2641a3",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "067d82a6-e4e0-477d-9175-822f6303f905"
        },
        "item": {
          "id": "85bb9b36-52e3-4295-9ae7-0624b511887f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2a3aa140-8c1e-4a3d-a384-8325cfb9cd0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf048a6-4355-4fde-8b49-01b0d64b8683",
        "cursor": {
          "ref": "e31877e2-e3b8-45d8-9d67-ebb019493afb",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9e972dba-8e3a-47e9-a599-dc6b21efa68f"
        },
        "item": {
          "id": "0cf048a6-4355-4fde-8b49-01b0d64b8683",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4a87405e-f928-4212-905e-263eea6b802a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97aa550b-547b-4e0b-8385-9c7feb4469b2",
        "cursor": {
          "ref": "462c350a-4433-4bb3-b46d-72e64a77ab9b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ddb4c163-99ec-4c90-b434-b25fbf61d6d3"
        },
        "item": {
          "id": "97aa550b-547b-4e0b-8385-9c7feb4469b2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c61bdecd-a1b7-4420-92e3-212107055ba2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f00901a-0065-4dbc-8c02-72da8d6ce4c4",
        "cursor": {
          "ref": "f207fd25-5afa-4d2a-9a43-d05300bbc699",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "74915067-37d6-43a5-8f2a-0f3d49f2e758"
        },
        "item": {
          "id": "6f00901a-0065-4dbc-8c02-72da8d6ce4c4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4e706aae-faed-451d-8a88-1ffe919127e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0cb81a-2c93-4477-9ccd-74739611a695",
        "cursor": {
          "ref": "8d553a1d-9997-41a3-8af0-1069119d93aa",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "42429824-0e59-46a1-baeb-23478fecc107"
        },
        "item": {
          "id": "9e0cb81a-2c93-4477-9ccd-74739611a695",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7747a2c5-dc6a-4ef8-9c7a-200e1adb5dab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e81034b-9fa4-4d74-9718-accafc45f750",
        "cursor": {
          "ref": "f0cf0796-7eed-45a6-b928-bb09c76353cf",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "399a5a20-a3f0-4c26-9c32-fdbfac071f11"
        },
        "item": {
          "id": "0e81034b-9fa4-4d74-9718-accafc45f750",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cee6acb5-bdc1-484d-b6d4-7503d9303b0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579b2eee-d23d-4c48-8e0d-66a5ecc6b415",
        "cursor": {
          "ref": "5e4d8b99-6fad-4e89-bb8d-e1268a86fab2",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b4f67b3d-5525-4665-9113-52648577225a"
        },
        "item": {
          "id": "579b2eee-d23d-4c48-8e0d-66a5ecc6b415",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6ce36bb0-13f1-4203-8da0-c21228779c0e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b27064f-5092-4884-a6bc-16f93b0b06b7",
        "cursor": {
          "ref": "38116dd6-f33b-427c-b7ad-dc51f163472f",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "02dfb5c6-076e-40f5-9c27-58e8acbbabbf"
        },
        "item": {
          "id": "0b27064f-5092-4884-a6bc-16f93b0b06b7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ae16aa09-47bc-40e7-a6f7-ab12bbec22f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35114708-6b41-4d31-9612-6037b41fb221",
        "cursor": {
          "ref": "5d01256d-e973-4369-9874-b3bf340c286b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "03a942e4-09d3-4d23-a80b-4226b60b3273"
        },
        "item": {
          "id": "35114708-6b41-4d31-9612-6037b41fb221",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c6010b86-9cd5-40cd-a5d7-298966730543",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639a40fd-a612-49dc-86a0-438ab0e35c64",
        "cursor": {
          "ref": "55cbe21d-6d50-4675-8f4e-251fa3b146eb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "708670fe-15e8-4648-942a-dd5970ec8570"
        },
        "item": {
          "id": "639a40fd-a612-49dc-86a0-438ab0e35c64",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "be7a4abe-a18c-43c5-8e8b-a6bf8329c24b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7530253-7530-41fb-babc-f878b3d377f3",
        "cursor": {
          "ref": "94c15a0d-5a13-46ab-a30e-e320ece9339a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9aa7c77c-eac0-40a2-b551-e469c179c8d4"
        },
        "item": {
          "id": "a7530253-7530-41fb-babc-f878b3d377f3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c8b07f2b-92e3-48cc-9097-a04550782afc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce13869e-d949-4f7e-91ae-2a12cf357a1d",
        "cursor": {
          "ref": "abbec25e-41f4-4493-a7d2-35f6022580d1",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "11e4a264-a4cc-4587-ad3e-ea705f080b0e"
        },
        "item": {
          "id": "ce13869e-d949-4f7e-91ae-2a12cf357a1d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "79a54dd9-fe98-4193-86b8-bf4700758b28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0ad169-2d00-448e-aa61-1ae77e40af01",
        "cursor": {
          "ref": "610f303f-9b8f-453f-8a82-17b12766b358",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "78ecbc2a-ba7e-48a1-89a4-68de8d19bf75"
        },
        "item": {
          "id": "fc0ad169-2d00-448e-aa61-1ae77e40af01",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "88c4bbf1-52c3-4253-8110-fb17c2e8d1f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3b9c63-d5e5-4225-a718-0e67e7c2bff8",
        "cursor": {
          "ref": "d2322510-4c9d-40f2-96c3-a9a0f42e5acb",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ef26dee1-5f67-4cd4-8a9f-2f681d6eff7c"
        },
        "item": {
          "id": "af3b9c63-d5e5-4225-a718-0e67e7c2bff8",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d6cb07a7-a6a9-4e7b-8a1f-feb2ce6e6cf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ae38de-30ec-429f-b587-a55a6ae8db8a",
        "cursor": {
          "ref": "827ea3f3-9ec1-48c7-9983-e2ae4b31098a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d4320ab8-8646-420b-835a-bd2e235eca4b"
        },
        "item": {
          "id": "e4ae38de-30ec-429f-b587-a55a6ae8db8a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "67901101-9e55-416a-850b-2f2093ee1180",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19520efa-fa2d-4ecc-9805-2eabe93517f1",
        "cursor": {
          "ref": "074f25d2-00f7-47be-a7ca-58f3fc2718e5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b35486d1-8582-4607-b805-0292d8f29872"
        },
        "item": {
          "id": "19520efa-fa2d-4ecc-9805-2eabe93517f1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "06b80849-3450-48ea-b4fb-ff11c1b8c607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0554bdd-4115-4105-9d9d-94652eaf42a6",
        "cursor": {
          "ref": "055ed363-a6a3-405f-9718-def87dca4a31",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "8e5c6c74-eded-4ad0-952c-021a71eb4d6b"
        },
        "item": {
          "id": "e0554bdd-4115-4105-9d9d-94652eaf42a6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5219c073-c85a-4c35-9d6e-2bad392d17f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ddae4c-7c4a-4c97-b134-0b7edc0bfbfb",
        "cursor": {
          "ref": "9257674f-8e8c-4e54-92fd-c01d447a5a5a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fb85faba-9d5e-44cc-91f5-2543fa2666a4"
        },
        "item": {
          "id": "88ddae4c-7c4a-4c97-b134-0b7edc0bfbfb",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "437069b3-9475-4396-92b3-d87ebdaa676d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb2549c-e94b-423a-bad5-50d3f67c4c6b",
        "cursor": {
          "ref": "fdf05ad6-8cc3-4afb-9c0e-41d5677a5b16",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "33f9271a-a3d2-4db7-9c89-1939b6d434e7"
        },
        "item": {
          "id": "ccb2549c-e94b-423a-bad5-50d3f67c4c6b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "cc074813-1530-440c-8866-a51e38f24b77",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a95383a5-1f60-492d-a7aa-5a051a7c9fe3",
        "cursor": {
          "ref": "dd85ec23-1238-4ed6-8f72-ee836b2b5033",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d8b54500-4866-4761-beb1-e5edd44346dc"
        },
        "item": {
          "id": "a95383a5-1f60-492d-a7aa-5a051a7c9fe3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "811be35c-3d5e-49cd-921e-14831d4ceaa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6f58f8-f689-44f7-9c51-04acff6c3011",
        "cursor": {
          "ref": "312cc000-ce47-48ec-a5d4-745ba79ff503",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6d7a50df-83ea-48a1-8dc0-4f06fc858285"
        },
        "item": {
          "id": "6b6f58f8-f689-44f7-9c51-04acff6c3011",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2ef145cb-1874-438f-91c8-809c51256258",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b806d3f8-745f-4194-841f-5b84ad4bfae9",
        "cursor": {
          "ref": "2aec55f4-d340-44da-b075-68d3aeb0f73b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d2f3de3f-3b41-4fbc-9512-ec6ecf0844d6"
        },
        "item": {
          "id": "b806d3f8-745f-4194-841f-5b84ad4bfae9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "51d65b8c-0ab3-4aea-b98c-3fa9c7b0a95f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f038576-634b-48db-ae84-2c346aa89f3c",
        "cursor": {
          "ref": "a57399e0-1e05-4629-8690-410f3271c7e1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "36c0af3d-67b0-4e73-b9a1-cedfa5d37b04"
        },
        "item": {
          "id": "2f038576-634b-48db-ae84-2c346aa89f3c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f54c4504-4c2e-48b8-b004-fab815ebac26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7455080a-2f4d-4de9-940b-677723ebceae",
        "cursor": {
          "ref": "7ac20247-8e01-4a07-bf62-15e66e27e74e",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fa27026b-2daf-4b7c-a95e-aadd61e69770"
        },
        "item": {
          "id": "7455080a-2f4d-4de9-940b-677723ebceae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9405689c-ed33-45c9-b2a0-4045809d05e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f0bbc2-d3d2-49e8-89c3-6cbe4c3501c7",
        "cursor": {
          "ref": "ccd4f637-c213-4e48-96d0-d63678dcb9ed",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "78943fa1-0b88-443f-ac98-3ca85771dde4"
        },
        "item": {
          "id": "90f0bbc2-d3d2-49e8-89c3-6cbe4c3501c7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e9fdeee1-0cdf-4318-8646-cd941d134d8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9037f63f-02c2-4753-8b12-3aba9ad20980",
        "cursor": {
          "ref": "2d161e40-c250-413d-b657-6411fff30cd4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fb3f29c4-4b8d-45a3-af1f-e28e86205e57"
        },
        "item": {
          "id": "9037f63f-02c2-4753-8b12-3aba9ad20980",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "79ce7c73-660e-4f51-905e-64e57b9cf314",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef4f630-cfa1-4162-b94f-ff96a455af12",
        "cursor": {
          "ref": "66cb847b-5958-4457-ae86-4126f273e066",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "37698e1b-b1ee-4a5e-a530-7dbf974daddf"
        },
        "item": {
          "id": "9ef4f630-cfa1-4162-b94f-ff96a455af12",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bae686d9-21ea-4204-b373-063cee59abc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ffad81-5523-45d1-ae2a-e2efc838b839",
        "cursor": {
          "ref": "8ccb978d-49b5-4304-ba66-7b4a972936e1",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a9556d58-ea5e-47c6-8d53-e6623450034b"
        },
        "item": {
          "id": "46ffad81-5523-45d1-ae2a-e2efc838b839",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6dad3485-a42f-479b-898c-45871b96b237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94b919c-aaae-46fa-8323-3fc5e7bf2148",
        "cursor": {
          "ref": "cf84ed57-3271-4c0c-9929-96e6bc48093b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "be8363ec-7281-482e-97de-c6af326664e0"
        },
        "item": {
          "id": "c94b919c-aaae-46fa-8323-3fc5e7bf2148",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "71c5eb14-b8b6-4fe9-8858-2f9ff0d8c128",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5941dd90-045d-4167-8618-ec884d537756",
        "cursor": {
          "ref": "3c624785-70a8-4e1c-8ee5-ee86b1edacea",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ae485d03-c557-49ac-b46c-95f00b315cbc"
        },
        "item": {
          "id": "5941dd90-045d-4167-8618-ec884d537756",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4bdf900e-9ffb-4586-96b0-8a69016edabb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d7d2d1-8a16-4e97-8873-cc2616809d01",
        "cursor": {
          "ref": "ee308796-0378-4128-8d20-43a2977b512b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b45748c4-8c8a-4b81-b88e-e5fd041276f0"
        },
        "item": {
          "id": "e2d7d2d1-8a16-4e97-8873-cc2616809d01",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "336dcf52-f419-41ae-9e69-a3e2bb047384",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dff9f17-af40-46fd-b683-ca34dc88a513",
        "cursor": {
          "ref": "4c3ec4ae-b567-4d7a-86de-62181adef668",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "11054578-ac03-4ea6-bdee-59b68de020ef"
        },
        "item": {
          "id": "7dff9f17-af40-46fd-b683-ca34dc88a513",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8c8c482a-098a-4ba1-9560-4f1dbb965ea3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9c7047-3a41-444a-97bd-ff3c43a6535f",
        "cursor": {
          "ref": "9e0edb95-78c6-41f5-b7e6-725fac2d8b81",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "22c0774f-f451-451e-a961-c09a13682539"
        },
        "item": {
          "id": "3c9c7047-3a41-444a-97bd-ff3c43a6535f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "98c1a320-c95b-4b29-80fc-e15058e4d353",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d99945a-0ec2-4397-8270-1826abd3f541",
        "cursor": {
          "ref": "8e2aaf44-d2c3-4553-b963-b197e343e297",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "940bcb4f-2aab-43de-92b2-403a51d54146"
        },
        "item": {
          "id": "4d99945a-0ec2-4397-8270-1826abd3f541",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "afc9db8f-5cbe-47f7-bdff-178a1f0c7e38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fcdf22-f4c6-43c3-a995-d8eb4dee1e20",
        "cursor": {
          "ref": "b345fadf-9571-47f4-9c8b-925cb4e00f67",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e406da09-7a08-4c4b-9b97-ba13d1234d93"
        },
        "item": {
          "id": "99fcdf22-f4c6-43c3-a995-d8eb4dee1e20",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "96642858-28b3-429e-87eb-7e3d09d56d8e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "416014a9-914a-459c-b0b6-a87d512fbbf3",
        "cursor": {
          "ref": "68567352-5178-482a-90f1-f7e50cc64937",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "839b2d05-63ed-4294-9396-e093d075c2a8"
        },
        "item": {
          "id": "416014a9-914a-459c-b0b6-a87d512fbbf3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2b361c7d-a185-449f-bb7d-5a37578f15f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "c3570455-3b03-47fa-99f8-55b6a31069bb",
        "cursor": {
          "ref": "36b8fa3b-52a1-41f3-b0e7-81e706e4e274",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e4eb5db3-2914-4525-898d-52d42e195940"
        },
        "item": {
          "id": "c3570455-3b03-47fa-99f8-55b6a31069bb",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a51a1296-246a-4c95-b54c-c3b4a86b7701",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "f8a60c2c-c939-4836-9cc5-50f2ded9067f",
        "cursor": {
          "ref": "305c03fd-bbb2-4628-acf4-6907c8b52913",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a2c3d636-4641-4c91-9bdf-1790d1dbd1df"
        },
        "item": {
          "id": "f8a60c2c-c939-4836-9cc5-50f2ded9067f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bb65d454-27eb-4a5f-b77e-70ee77529c21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "0c553e45-b025-4a7d-b697-387f995ea655",
        "cursor": {
          "ref": "62adc855-b801-4228-be63-841ef5bc4ef8",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "302b1fa9-0dc6-4857-bd12-b2d794b6978a"
        },
        "item": {
          "id": "0c553e45-b025-4a7d-b697-387f995ea655",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1dc13262-73b8-4359-96a9-c1ffad828cd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "47844542-e079-4f5c-bf4e-05aec4576759",
        "cursor": {
          "ref": "ea75d227-bad3-4b9a-94ba-8dd5e51c1daf",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1c29274c-2cde-467a-9b0b-e3e5c2f78bc3"
        },
        "item": {
          "id": "47844542-e079-4f5c-bf4e-05aec4576759",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "689cb15b-0eef-4dd2-afd6-744b51db6409",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3773a55b-a78c-40a9-8b82-897c2c894cb6",
        "cursor": {
          "ref": "aef47380-5ae8-4599-98df-8e2e459c8c1d",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "014de6e9-8285-4c2a-8297-d8de9a8cc3f4"
        },
        "item": {
          "id": "3773a55b-a78c-40a9-8b82-897c2c894cb6",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "32627bb3-0eae-4dc8-8218-c36194113ff3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "2c605d2c-a36a-4e4e-b63b-00282287559a",
        "cursor": {
          "ref": "76673459-4d40-43aa-adc6-78a3ef077450",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fcf3954b-a5e2-486e-b2a0-06f55ee67d5c"
        },
        "item": {
          "id": "2c605d2c-a36a-4e4e-b63b-00282287559a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1239646e-d856-4813-abb6-a03a437521ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d8bdab-f9b7-4954-9bb9-b73e9cc9f026",
        "cursor": {
          "ref": "d2715aee-fb22-415e-8c6f-1aef38056acf",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "18e9e871-0b42-404c-8769-9099d671336a"
        },
        "item": {
          "id": "70d8bdab-f9b7-4954-9bb9-b73e9cc9f026",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7ca2f295-30e8-440b-a606-436323e092ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04e5df7-3918-4173-ae7d-69826d1c92e2",
        "cursor": {
          "ref": "53c5f1ab-e7fe-4033-9fb0-6f1601e4ea1a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "24a3df0f-a275-44d6-8bb8-c554e6898502"
        },
        "item": {
          "id": "b04e5df7-3918-4173-ae7d-69826d1c92e2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ffd5fd52-50d3-468c-aa07-315e3a3bb288",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7800c7-6afa-416d-a5fb-a6892aa923f2",
        "cursor": {
          "ref": "d829c6d4-d411-4c47-b240-62a1211e17a2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "504218da-6238-40ef-b499-b01c0589ba4f"
        },
        "item": {
          "id": "9f7800c7-6afa-416d-a5fb-a6892aa923f2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "074003a3-52f4-4da7-b16b-e60d05dce382",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8465ab-9ac0-4017-b657-a7a511eea055",
        "cursor": {
          "ref": "34ff8c01-ed2a-4631-884a-b332ce7ea145",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "faa7e653-e90e-4fc3-8991-1682e887282c"
        },
        "item": {
          "id": "6a8465ab-9ac0-4017-b657-a7a511eea055",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "46f9d7dd-1b7d-4f9f-9d5e-bd28a93a3bda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c24d9f-76a8-469e-8ce4-757e6b79d9e4",
        "cursor": {
          "ref": "5d54a56d-05e3-49aa-9fc9-84fbf3dc65c5",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5f826081-2554-43b1-b95b-2167dc4d34a5"
        },
        "item": {
          "id": "b7c24d9f-76a8-469e-8ce4-757e6b79d9e4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "04001c3e-0b86-4074-92de-e97e044ae3f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7118c-4a97-4c81-beed-6525eff49bba",
        "cursor": {
          "ref": "f45f237a-f6f8-4956-8305-e91e2428e200",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0407057d-2813-4661-bb53-768f198748eb"
        },
        "item": {
          "id": "01f7118c-4a97-4c81-beed-6525eff49bba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "af47f49e-b28f-4f60-b309-04e128c6eb1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1626a4ac-d804-4d50-ab81-ec1f9f2a6212",
        "cursor": {
          "ref": "c6a56b61-2852-46ad-9e41-92787d11d203",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2fd2841f-5e80-430e-94e5-ad1860f50ca8"
        },
        "item": {
          "id": "1626a4ac-d804-4d50-ab81-ec1f9f2a6212",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c2c7982b-fadb-424c-baed-8c1ce1bf7515",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9aaa042-6a5c-43e1-97d0-8779ec1eb23c",
        "cursor": {
          "ref": "5eb0fdbc-6b40-4a69-b722-a8c15bcc980e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fdbc9e76-022b-418a-bfb8-26b75474790e"
        },
        "item": {
          "id": "d9aaa042-6a5c-43e1-97d0-8779ec1eb23c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4d3f5374-2f5b-468b-a7c3-106c20b0c45c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df33f0fe-d24a-47b7-9421-67fbe1ae57a1",
        "cursor": {
          "ref": "3d39f442-da52-494e-8a2b-c3bfb1470dbf",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "74a3c39d-f366-4eaf-b785-dff2326e4539"
        },
        "item": {
          "id": "df33f0fe-d24a-47b7-9421-67fbe1ae57a1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b06e89f-da11-4788-be76-b5b674c0c7dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d79b47c-ae78-4b46-b812-1f30cab64739",
        "cursor": {
          "ref": "f1386c6f-a23f-41ad-9182-ebf80441cb5d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ee1feacb-f563-4932-9780-fa8ffb9e341d"
        },
        "item": {
          "id": "6d79b47c-ae78-4b46-b812-1f30cab64739",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6ba47d20-7fe9-4f03-9eed-e6af4f37a39c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a7eac5-d878-4668-9fa7-d462f407ef26",
        "cursor": {
          "ref": "1c4c6c71-d51e-46b2-8c92-7e2084ed8d6e",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2c4ca852-bc30-4ca0-a166-029e69af871d"
        },
        "item": {
          "id": "d3a7eac5-d878-4668-9fa7-d462f407ef26",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "aba21193-0537-4af8-9776-c77c7c00fe24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289d62d8-4a33-42e2-8725-cac1a88dbfdb",
        "cursor": {
          "ref": "1304e2fb-3fdb-45f6-8445-a52ed8b45b07",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "96fdc4a6-32e4-4876-a4d1-266b41e0a3a3"
        },
        "item": {
          "id": "289d62d8-4a33-42e2-8725-cac1a88dbfdb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9a048893-ec08-4340-957e-7f8fa1ea58d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865af387-afbd-471a-8a15-9cf9245575d5",
        "cursor": {
          "ref": "4189bdcd-1180-4afe-a19b-ac0e66eadcfa",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "170dd9df-05b3-4909-b393-9cc5f49fd54e"
        },
        "item": {
          "id": "865af387-afbd-471a-8a15-9cf9245575d5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6c727985-6664-4f2d-8b28-d2a4dbcde0dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f7fdce-3ca5-4903-8f93-e0b49fe56a04",
        "cursor": {
          "ref": "8500ea5c-2065-471b-bdc3-8a7e783aaf6a",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c2f9f775-23ce-4033-969e-97faa43437d9"
        },
        "item": {
          "id": "02f7fdce-3ca5-4903-8f93-e0b49fe56a04",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "16dc2c71-a613-4f00-ae51-fd3ea7b55d0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c71952-9d6a-4a57-8071-852a021e4c27",
        "cursor": {
          "ref": "c18733c3-725a-4732-9728-6555eacbe951",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "09980723-da31-46b5-9994-bcc6a1ccf746"
        },
        "item": {
          "id": "95c71952-9d6a-4a57-8071-852a021e4c27",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8fc74114-b1f7-4612-a24c-808256b9af0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e586bc-89a3-43e0-a904-a6fa5d369ae2",
        "cursor": {
          "ref": "1d1d74dc-3bd3-4450-a0aa-9e3a7ffa9a2e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0b52b07b-6d9c-4ff7-88e3-d73ec0e7f883"
        },
        "item": {
          "id": "87e586bc-89a3-43e0-a904-a6fa5d369ae2",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "307021ab-4070-4acf-9264-ca78f829a0e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414969e6-974c-4c91-aaa7-f4a3655eb33f",
        "cursor": {
          "ref": "ca60ad99-0f0a-4278-8f0e-6fd3ffd53697",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b254f8ed-bcd9-4c89-8b6c-b051d0445a04"
        },
        "item": {
          "id": "414969e6-974c-4c91-aaa7-f4a3655eb33f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7a5c7a05-7256-4276-96d0-dc4e6a3dd398",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd0b787-8064-4846-b4c7-ecf0ee796014",
        "cursor": {
          "ref": "4da9fc12-f47b-4c16-849a-6067927084c8",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "db298823-7f8e-4810-910c-0fefdc8fce8a"
        },
        "item": {
          "id": "fbd0b787-8064-4846-b4c7-ecf0ee796014",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ec599299-3ccc-4351-8ac0-852f3286789d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2019ce4-0937-4b48-b5fd-b7a070dae072",
        "cursor": {
          "ref": "074ba232-374f-4ac8-8bde-a5429c5c6f3d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b3b6dcbc-fee5-49b7-9a9a-79dc1bd8fc6f"
        },
        "item": {
          "id": "d2019ce4-0937-4b48-b5fd-b7a070dae072",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "818d1da7-dab8-43aa-9cb8-e80f487a5e9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be37ba72-8a71-433d-afee-87dc39e95405",
        "cursor": {
          "ref": "4f298546-36ae-4a07-b4f9-0194638856b4",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a234c318-cf6a-455a-adfb-f5b27941f0bd"
        },
        "item": {
          "id": "be37ba72-8a71-433d-afee-87dc39e95405",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7d8ad329-93fc-4f5d-b3c2-d04ae978281e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72252c1b-28a1-4184-a1f5-846cff48aa7a",
        "cursor": {
          "ref": "ccadf7d2-c292-400d-847a-a462d490081d",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "233433e2-4615-4fd7-bc52-4eaac2980a4d"
        },
        "item": {
          "id": "72252c1b-28a1-4184-a1f5-846cff48aa7a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b7ba46c8-e084-441a-824e-b84c5326b9f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07490b42-6e7b-4a2e-9188-67be591e6bfa",
        "cursor": {
          "ref": "fe84ac2c-909f-4c2e-a798-1411216324ed",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7e1249e1-27dd-4660-9d07-ce8c6707de6a"
        },
        "item": {
          "id": "07490b42-6e7b-4a2e-9188-67be591e6bfa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3877d464-0295-440d-bf43-c8f1a5f6964c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfa0a19-fd7e-48d0-a581-60d7c9f26c88",
        "cursor": {
          "ref": "6c34e4dc-c67a-430b-b0b2-8ce0adea954e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "293934bd-53de-4926-930f-905d9381650a"
        },
        "item": {
          "id": "dcfa0a19-fd7e-48d0-a581-60d7c9f26c88",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b04d8125-23d0-47bb-9e7f-874f26a047a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd068be1-c51f-4fe2-a671-1cbf34952f6e",
        "cursor": {
          "ref": "e6ce2969-d9c3-4ec4-a936-c9e65eacd8f2",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d1ac398b-a2b8-4eb2-a599-013308a37b1b"
        },
        "item": {
          "id": "fd068be1-c51f-4fe2-a671-1cbf34952f6e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e9afc4e7-0898-43f7-9d8c-b6e82959f5a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564ee220-0e45-4589-a07d-6f8fe5de94bf",
        "cursor": {
          "ref": "239c6d0a-dce9-49ba-a042-79628b67974b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "541df69a-64e3-4433-892d-e75e1c46ce38"
        },
        "item": {
          "id": "564ee220-0e45-4589-a07d-6f8fe5de94bf",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a4bcaa93-8eae-474f-ade0-03e8639fcb0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b5da91-2ab5-4988-9752-909e78c9716b",
        "cursor": {
          "ref": "74ea07d0-60e3-452e-a058-42c77a039098",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "fe7a5455-4cc6-4f3c-aa3a-7d73024727ac"
        },
        "item": {
          "id": "39b5da91-2ab5-4988-9752-909e78c9716b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3bf5bf5e-1568-4ba6-ac47-46156c756016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf8b868-cd9e-4c46-8e19-0474f88924c6",
        "cursor": {
          "ref": "55521abf-3132-4858-bb80-e68e7d93a0eb",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "1a71007f-5d02-4761-8030-903c042f84e9"
        },
        "item": {
          "id": "fdf8b868-cd9e-4c46-8e19-0474f88924c6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c9dfabc-50e7-4ec4-9efa-f31987c56fb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654a5a60-6698-4853-8e67-5c30250965ff",
        "cursor": {
          "ref": "9442b178-87f7-426d-a7f1-8ce04c693cb4",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0534d1f1-bffa-48bf-9d7f-ef1ab431c9cb"
        },
        "item": {
          "id": "654a5a60-6698-4853-8e67-5c30250965ff",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5fe96fbe-9002-4609-a535-364bdb797f47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa0aa0e-6f31-4b13-b5e6-5990383e96f8",
        "cursor": {
          "ref": "b517de09-2ca7-46ed-9985-657101756661",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "481b5661-1797-43b9-85bd-ee7fbcb3d34d"
        },
        "item": {
          "id": "9aa0aa0e-6f31-4b13-b5e6-5990383e96f8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1144a62e-9c1e-47f1-bbd3-f16d0168bc78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb7b8ce-8e5a-49de-95b2-8b6050697351",
        "cursor": {
          "ref": "09557ac2-8a7d-440b-8ab4-2574bec6ac98",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "269ead7e-9aa9-4173-a65f-40e95b81ebcd"
        },
        "item": {
          "id": "dbb7b8ce-8e5a-49de-95b2-8b6050697351",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "39c2a0c7-d573-457d-8ab1-3089f4a05e73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d8f18f-8414-40c9-879b-d6dbb24336bf",
        "cursor": {
          "ref": "4cb4f428-067c-498a-b690-df516a31d577",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "77aab1bd-b8bc-4b28-84ed-ca92955b0902"
        },
        "item": {
          "id": "01d8f18f-8414-40c9-879b-d6dbb24336bf",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e9b7bff8-9ac5-4e96-9444-82e6f467db09",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813c41fe-1240-4f9a-9a7f-73e5ae080929",
        "cursor": {
          "ref": "7d80caf7-31a6-445e-89a4-56441770b7ca",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1cc75b79-8f53-4e46-ad75-ea1a324f2770"
        },
        "item": {
          "id": "813c41fe-1240-4f9a-9a7f-73e5ae080929",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5ab18270-31cf-4561-b0bf-deaa8c31d5a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd07d1be-a737-4a5c-961c-250f997465d6",
        "cursor": {
          "ref": "9d0ff2eb-30d1-41b1-8b9d-ebf5df8f65c3",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f1331194-a7a7-4883-9c53-1de49e2ce185"
        },
        "item": {
          "id": "cd07d1be-a737-4a5c-961c-250f997465d6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8781092d-583e-4236-8620-cf743c63da17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3386f5-3f02-4101-89e5-45267a5ed618",
        "cursor": {
          "ref": "6be70849-f90b-49f7-a6b9-53b1df6f12bc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ee306d24-05f3-487a-b9e9-379899fcfca1"
        },
        "item": {
          "id": "2a3386f5-3f02-4101-89e5-45267a5ed618",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "250e009b-dc77-4eff-889a-8bb73762eea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0072a4-3bb1-43cb-b282-bd06a45a2cfe",
        "cursor": {
          "ref": "f1538f19-fa4b-4dc4-bd23-42fb378e1878",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "22601288-42a3-439e-9071-4a358d62b9a8"
        },
        "item": {
          "id": "fe0072a4-3bb1-43cb-b282-bd06a45a2cfe",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7cd26f87-556b-4a25-abc2-c79db4c4d4f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a28aea-e38c-4896-969a-180bcd81047a",
        "cursor": {
          "ref": "453a5830-e9ba-40c9-9921-10ecfe53337e",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "22ed22b2-a75a-4124-a6c4-ed8b02a2c3b7"
        },
        "item": {
          "id": "22a28aea-e38c-4896-969a-180bcd81047a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8fa618a2-5ddd-473d-86b0-2e27d8d3e7c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d297c65e-ce7f-4b8d-b0ec-6c19e7d75fe4",
        "cursor": {
          "ref": "26005c2f-71df-4241-a893-92d699c9f984",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f1809a10-6f7a-4a6b-86eb-090dde1b88b8"
        },
        "item": {
          "id": "d297c65e-ce7f-4b8d-b0ec-6c19e7d75fe4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45c2a834-89a4-4210-aba1-524d85a2283b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48c6f5f-75f9-4664-bfcc-6a2bd77dfc04",
        "cursor": {
          "ref": "0f65032a-9ab7-4ddc-bb23-241c43a27e3d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f33a5e9d-eb74-438c-a26e-25e0db39397d"
        },
        "item": {
          "id": "f48c6f5f-75f9-4664-bfcc-6a2bd77dfc04",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "283de6b8-faf3-47ac-b7a6-8d76975c945a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca2fb9b-9dd3-4e09-8224-c123f5553190",
        "cursor": {
          "ref": "c3d3a335-a6d3-428e-a5db-ec752fd2ecd4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4893c721-205d-4da0-8065-0f8db79ae72f"
        },
        "item": {
          "id": "cca2fb9b-9dd3-4e09-8224-c123f5553190",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5b52cf6d-c977-45ea-a8f7-801e3017d3a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1314a219-dacd-4d50-8e55-736c461f47ee",
        "cursor": {
          "ref": "3464fc84-cafa-4c0a-86a9-f135b4228a38",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "cf825897-bb1c-49ed-80f0-e0ed9d908a13"
        },
        "item": {
          "id": "1314a219-dacd-4d50-8e55-736c461f47ee",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a0d9336c-ae94-46b8-ae5c-c0497e0c016a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cd8448-fdcb-4d30-8bc1-ed00f97f957b",
        "cursor": {
          "ref": "acd0a2be-5db8-4409-ab81-624b49cce694",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1a336505-0ed8-4dfa-8f3d-6ebd35206ece"
        },
        "item": {
          "id": "93cd8448-fdcb-4d30-8bc1-ed00f97f957b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "47c08e42-0031-4125-904e-fb0eb4e01e7a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d78125-f9ef-4d2a-9b47-f0e625f88090",
        "cursor": {
          "ref": "219cebf5-7fe1-45ce-ad99-9275ca9e76a7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fd039238-2bda-410e-bc93-fe5bb6b3951a"
        },
        "item": {
          "id": "54d78125-f9ef-4d2a-9b47-f0e625f88090",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2fa47ee5-c9d0-4311-8e03-bc1f9a420652",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec0f71a-70bb-49d5-bf5a-4b5837668b15",
        "cursor": {
          "ref": "02f2f3d2-93ee-44b4-a8e2-6bbf332138c9",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "5d5e4881-3345-4261-aa3e-2d4d47b2ed2c"
        },
        "item": {
          "id": "aec0f71a-70bb-49d5-bf5a-4b5837668b15",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e5dd0de5-670f-4129-b6f4-fbb7f1df2ae5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e669b36-bf20-4053-aa2a-a311c4c9fb24",
        "cursor": {
          "ref": "6b31deab-bc1b-4ee5-9a28-d29e812404e8",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "64f2647b-df7f-4beb-8f68-23658af4dfea"
        },
        "item": {
          "id": "7e669b36-bf20-4053-aa2a-a311c4c9fb24",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fdb87256-e441-4698-bf18-03aab8fa9c29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff270dde-5091-47f0-9611-8a005320b423",
        "cursor": {
          "ref": "b2f14f44-2966-48e7-bb01-5e6b49000753",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "184d4627-1893-4d70-b501-28c6138618dc"
        },
        "item": {
          "id": "ff270dde-5091-47f0-9611-8a005320b423",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "103d908f-84bb-43d3-b17d-18d087a3e869",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1182aca8-9546-424d-8372-08fafc40c3a1",
        "cursor": {
          "ref": "028d55a0-6b02-4b07-93fd-1a132085c949",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d35ddf21-98c0-41ea-a1c7-b801f88b84ab"
        },
        "item": {
          "id": "1182aca8-9546-424d-8372-08fafc40c3a1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "58d02f74-73b8-4985-b010-35e70db372a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be0bf27-3d13-4c8b-84a7-0d0660953111",
        "cursor": {
          "ref": "de1cd30f-06a0-4884-a9ec-78c7a3cbed29",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "32508fcd-e759-40e6-9ecf-2cbf18c2287e"
        },
        "item": {
          "id": "3be0bf27-3d13-4c8b-84a7-0d0660953111",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "28e06260-9a02-4410-ae01-12e6ebb2e3c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ceda2f1-4193-4125-8361-948f6eaa420a",
        "cursor": {
          "ref": "1f0d4222-14a8-4adb-b279-dcf6a15dae9c",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1d51b6f9-7732-416c-bc7b-9baee48f7dfb"
        },
        "item": {
          "id": "4ceda2f1-4193-4125-8361-948f6eaa420a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4152dc2f-3dd9-4ccf-b42a-557ee700ef51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc37d25-37b3-4e16-b24b-2834ed0cc275",
        "cursor": {
          "ref": "a72c7bfd-5983-4a08-935a-6cdb8ac8a0d2",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ded4fbbd-5cad-4e3b-8fd5-1e5bd9e5cafb"
        },
        "item": {
          "id": "ecc37d25-37b3-4e16-b24b-2834ed0cc275",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c7ac09ad-b06e-45e6-9bd4-059d110da675",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9037672b-7120-4fc2-aa39-de0a4d4fd26b",
        "cursor": {
          "ref": "84154f4c-1b34-4a65-b48d-bc3f52d8bdcd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "322d9d53-6f5b-4168-a071-64c1f2d94c39"
        },
        "item": {
          "id": "9037672b-7120-4fc2-aa39-de0a4d4fd26b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "49214b53-3539-4b7a-80a4-70b98c9dc838",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa3a2f2-343e-4fb5-8289-14e5eb27fc99",
        "cursor": {
          "ref": "0136b7a6-d214-411b-95ee-7f4f5e3e9fb4",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "613443fc-1338-4b38-b4d9-b0e8c14ca2cd"
        },
        "item": {
          "id": "6aa3a2f2-343e-4fb5-8289-14e5eb27fc99",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "def3c262-cc22-40fb-b1bf-bc4c0242b520",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bcba01c-df4b-4abd-9a0d-eb2d9a503127",
        "cursor": {
          "ref": "54e71287-a286-4853-b409-decd13a14825",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "52b6c8ca-b364-4143-9352-452d22a2474f"
        },
        "item": {
          "id": "5bcba01c-df4b-4abd-9a0d-eb2d9a503127",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "841e7911-989c-462f-acf5-523835da19fb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f75862-2c22-4e24-9a44-7514eb209892",
        "cursor": {
          "ref": "54db616b-81f0-495a-bbf3-fc17c60ee952",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c13c8afa-5187-4149-991a-e20f2daefe8a"
        },
        "item": {
          "id": "30f75862-2c22-4e24-9a44-7514eb209892",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e1b0d45c-7c0c-4d77-8235-724ffabf6ed4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0750e207-2ba0-48d7-a961-be9c121fbce6",
        "cursor": {
          "ref": "e5d2fb74-b5a4-4e7f-b043-e3e4af18885c",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dabf30c4-6f13-4914-b0ec-a465e684c537"
        },
        "item": {
          "id": "0750e207-2ba0-48d7-a961-be9c121fbce6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "91d4f9b4-4c3b-485f-9598-01b5a90f0815",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf94e9d-0b93-4e38-b625-785f62c74ff6",
        "cursor": {
          "ref": "6571b35e-8760-4001-8fca-e40610a2a00b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d0a5f554-6f6a-4167-8230-3221ebab146f"
        },
        "item": {
          "id": "dcf94e9d-0b93-4e38-b625-785f62c74ff6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c2d14321-5750-4051-acae-49710e4ee089",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e9ef59-5eb5-4270-ac9a-580ce48c6c4b",
        "cursor": {
          "ref": "09979140-1900-419f-a62a-58da743d2de7",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "68a3a80a-dcdf-4681-95ca-1336d13fc18a"
        },
        "item": {
          "id": "a3e9ef59-5eb5-4270-ac9a-580ce48c6c4b",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "44b7fb6d-5c8e-49cf-a138-13efa17c8aba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd7d657-5666-4373-9b9a-476509b1267c",
        "cursor": {
          "ref": "a3848dff-bf40-408a-b191-2408588f03f2",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "48fbce2c-a255-4f61-b407-416a9c527be4"
        },
        "item": {
          "id": "7fd7d657-5666-4373-9b9a-476509b1267c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0485ad4d-8759-46e3-84ff-a46bb43da97d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f15cac-76b7-4ac5-8a83-202872f7acad",
        "cursor": {
          "ref": "6cbfd734-1751-449e-9b87-e86fc71eb307",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "59f77fd3-9bef-4b51-b09f-fcdf736fc878"
        },
        "item": {
          "id": "d0f15cac-76b7-4ac5-8a83-202872f7acad",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e322d249-733e-48f1-b5bd-01ad4b0f1b76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86c5087-e625-476a-aca7-268cb9c44d5d",
        "cursor": {
          "ref": "49fa3fa0-c1c0-4a5a-9f89-ad07599f2168",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "47042ab1-e7b9-44d0-9d09-c91dfa877007"
        },
        "item": {
          "id": "c86c5087-e625-476a-aca7-268cb9c44d5d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ff42978a-9631-4800-a779-ab94fa1af777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d891b0a-5fb2-4f3d-8682-8ffa2c69d7d5",
        "cursor": {
          "ref": "3a07d829-4f5b-4bd3-9eb0-90b9f15615e6",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2f105677-2253-44d9-8608-0936cbdb2158"
        },
        "item": {
          "id": "3d891b0a-5fb2-4f3d-8682-8ffa2c69d7d5",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f48b854a-11c2-4fb6-b787-715ae6b12da7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c99316-8ac5-48d8-8f03-73348c6a55c1",
        "cursor": {
          "ref": "0932cd11-d8b2-4f23-8e59-9bacde8743d4",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "61315fdd-c79e-4d86-89c1-47725b5813c4"
        },
        "item": {
          "id": "55c99316-8ac5-48d8-8f03-73348c6a55c1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b971995a-39aa-4c85-b012-2351e4290755",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f10ee23-4354-4942-8e32-42b21b2bf316",
        "cursor": {
          "ref": "bb9e8f6c-40bc-48ac-b5b5-e7b0a904e043",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b76d0ea3-bb1c-4fcb-8664-0c8ff352ea5e"
        },
        "item": {
          "id": "7f10ee23-4354-4942-8e32-42b21b2bf316",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "3176d1f6-c107-4bc1-8018-8754becc3389",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e49f0e1-a6ea-4abd-8e78-646c53b179d6",
        "cursor": {
          "ref": "533b84ca-23d8-4a12-8e8f-85970f75c94c",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "135fd21c-e7e5-43dc-9337-4cd8e5b919df"
        },
        "item": {
          "id": "7e49f0e1-a6ea-4abd-8e78-646c53b179d6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d006d5ea-a6a1-44c2-81a9-dab73247ec91",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6f03b4-09ae-46d0-9f86-6542d3aa0777",
        "cursor": {
          "ref": "a9607530-fe6a-4dbc-aba7-fe43fa657caf",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f953de84-2d67-4c37-adee-f6bbc08fd8ec"
        },
        "item": {
          "id": "9e6f03b4-09ae-46d0-9f86-6542d3aa0777",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a0fa644b-e39f-4e5c-ace2-d92a152ddfee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab81ea5-1a5e-4b03-bd2c-514846256bfb",
        "cursor": {
          "ref": "203bd98d-f92d-4ec1-a19c-36ef391cfd69",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "54f1599d-80fb-4189-87fc-ee98b9211f02"
        },
        "item": {
          "id": "eab81ea5-1a5e-4b03-bd2c-514846256bfb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7b82adf3-f8b7-4cb5-8cb9-59518578adf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d708b743-9d46-4959-a8b9-d15ee3b7d304",
        "cursor": {
          "ref": "502273c2-148e-4d73-b13a-db4412d971b2",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "14767558-6bf6-4764-a5ba-9f387fa17cfa"
        },
        "item": {
          "id": "d708b743-9d46-4959-a8b9-d15ee3b7d304",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "804f75f2-ec02-4b24-88ef-ff3533cded18",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f93f84-7dee-4bac-88d4-5d246c338e51",
        "cursor": {
          "ref": "7cd75cc9-429d-42a2-95bf-1db7b5089ba9",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "774131f9-15be-4546-aa14-913c5d8eae66"
        },
        "item": {
          "id": "17f93f84-7dee-4bac-88d4-5d246c338e51",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "56872631-7ea8-4ee3-b2df-af94d91ba51c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eee4ea-29a2-4972-abbb-260daa9c6852",
        "cursor": {
          "ref": "6f29510f-e06e-4901-8570-af3ad134c597",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "08a1fdbc-0a74-4c5c-ad15-a955c789b4a2"
        },
        "item": {
          "id": "40eee4ea-29a2-4972-abbb-260daa9c6852",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2eeef75b-efaa-4080-8140-c65ecf129eed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d82a48-9d43-4ede-8335-ecc544e1e1cd",
        "cursor": {
          "ref": "e0e9c2f9-06bd-4d66-911e-7a9d2ea3b8f5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b4121047-3e82-4573-8835-936b8e014a64"
        },
        "item": {
          "id": "64d82a48-9d43-4ede-8335-ecc544e1e1cd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6231f420-dcfb-4777-abc8-8c43ca4be94d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c060c15-46b9-4ee8-8b29-67b536f81f0b",
        "cursor": {
          "ref": "ae8ee706-bd98-4cb5-9a67-fc73ef694ef8",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "66b17b7e-1dca-4491-8e2e-88e552ed07b5"
        },
        "item": {
          "id": "4c060c15-46b9-4ee8-8b29-67b536f81f0b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8b87a2e8-f9f9-457c-b700-cc760103fd05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e0d450-75ad-4664-b343-d41efb02a99c",
        "cursor": {
          "ref": "9b436095-5086-40b0-a3a5-30db61c93b13",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e0a0c470-7512-4e68-b19d-cb777f81972d"
        },
        "item": {
          "id": "36e0d450-75ad-4664-b343-d41efb02a99c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6d13459a-b3ec-4318-8ce9-837287957f42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b40435e-220f-4708-9c67-d8f1a76eadfd",
        "cursor": {
          "ref": "58e0051f-8e9e-4e3e-a85f-0f4fe9ef0710",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "25f9c088-cb90-4a72-b6ac-3db0174e5653"
        },
        "item": {
          "id": "0b40435e-220f-4708-9c67-d8f1a76eadfd",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "20ac0e59-3efe-4bf1-8dcd-1c41fa3e017c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24b9856-5918-4b19-a2eb-ce61c9043146",
        "cursor": {
          "ref": "eaafb0cb-2a61-4b22-9c9e-3bb89cace84d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d38bada3-5317-4faf-88d4-50101b062456"
        },
        "item": {
          "id": "f24b9856-5918-4b19-a2eb-ce61c9043146",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ccc9f83e-8d9f-4977-93df-a766d8ae2aa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49e662e-a84b-48da-be7a-0a5c734ddfbc",
        "cursor": {
          "ref": "eaf87ccf-86ea-447f-9afd-9f690474e1a1",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ed52fa4f-1e1c-4d0d-9dea-c234beb1835f"
        },
        "item": {
          "id": "a49e662e-a84b-48da-be7a-0a5c734ddfbc",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "11a3fe4b-8baf-4bad-9f1c-f403812fef6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d08a71-98e2-453b-b1ae-92bc3631411b",
        "cursor": {
          "ref": "426d24ba-2052-4389-a64d-6c684952d65d",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "257edb35-53cb-491f-9d85-b5e3dcb03736"
        },
        "item": {
          "id": "35d08a71-98e2-453b-b1ae-92bc3631411b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "72c087ab-8008-49dc-adf0-b02c06dffd1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e52d03-3e8d-495e-bee0-f24bfaa81710",
        "cursor": {
          "ref": "aa05bbf2-d5e9-4f57-8f7b-07d9bebaa7e2",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0aec49c8-32c8-4264-a014-9606cd934496"
        },
        "item": {
          "id": "32e52d03-3e8d-495e-bee0-f24bfaa81710",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "bb68bf40-d22a-4c83-b92a-4f1233004ab7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acff46f-4f80-40f9-b6d3-8b3b7cbfd537",
        "cursor": {
          "ref": "a8930f7e-32bc-4d6a-81ae-c17421efa1ab",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b5bb50c3-57e7-48e0-9b36-6e30f1172cf3"
        },
        "item": {
          "id": "1acff46f-4f80-40f9-b6d3-8b3b7cbfd537",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1a50138b-d88e-451c-8ef2-9227f6e6d72e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53adee38-86aa-4f89-ae81-0ecf3f03e260",
        "cursor": {
          "ref": "f2237798-f578-464d-b074-ccb7f68fddaf",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1d232cc4-f632-4c1a-8652-1e8c5bf0da25"
        },
        "item": {
          "id": "53adee38-86aa-4f89-ae81-0ecf3f03e260",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "65eb6345-28ff-45f8-9bbd-57563fceb51e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4632d6-3c3a-4b13-950a-3e618d9075c3",
        "cursor": {
          "ref": "6df693f9-8a1f-4e62-b9fe-3f14e1159371",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90834a40-a282-4566-9b0b-4a90e92ffbc6"
        },
        "item": {
          "id": "de4632d6-3c3a-4b13-950a-3e618d9075c3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e38dc54c-4e16-46c4-bcc5-e07f0a9e1bb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5013d22c-f564-4ecf-860d-ce0cb69b3167",
        "cursor": {
          "ref": "10511086-5d6d-4f67-b2e9-856a0b1e6b09",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4ca7ed61-8fde-4785-867b-9987a24059a1"
        },
        "item": {
          "id": "5013d22c-f564-4ecf-860d-ce0cb69b3167",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "e21e8033-676e-42d5-9b47-75a29e17962d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa9f603-98c8-4d45-be6a-ba224986728d",
        "cursor": {
          "ref": "ed2fdde6-438e-4698-8e69-96a92c826358",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9f0e4d05-4025-4af6-8f37-d7ab3c87cd45"
        },
        "item": {
          "id": "2aa9f603-98c8-4d45-be6a-ba224986728d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "39e7ade5-954f-4fc4-a37f-d522875971c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974c5571-e3e7-41c9-b2ab-a189aef1beb1",
        "cursor": {
          "ref": "8f37d21c-6414-47e0-862f-0aa4c4322eb3",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "455fa9fa-9fc1-461f-ba76-3dc23589bf08"
        },
        "item": {
          "id": "974c5571-e3e7-41c9-b2ab-a189aef1beb1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4f104cbe-30ee-4333-89cb-88649ea3df84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab5a225c-1612-418b-9af4-14079e6bb7b9",
        "cursor": {
          "ref": "db2b4af2-6360-4acc-9ead-b69796dba05d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "992610de-8aa7-43c4-baf1-c40f018aa9f7"
        },
        "item": {
          "id": "ab5a225c-1612-418b-9af4-14079e6bb7b9",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "cd7e9520-a6df-4bf0-8b6f-2d1cb198d978",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f17f79-1350-4ef5-8489-1a717e4e2472",
        "cursor": {
          "ref": "bb7359bd-f147-4c17-bf80-2bdb9bd676b1",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "58453fe1-2e73-45bf-90c9-f55357716e6d"
        },
        "item": {
          "id": "42f17f79-1350-4ef5-8489-1a717e4e2472",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e850daa2-aaf1-43af-b446-d97f90a09cc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7578df36-c426-4144-ba24-8c95822ff7a7",
        "cursor": {
          "ref": "7ca441e0-1acd-421f-bbc4-bd376f3ee4bd",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37e7e9a8-1bde-48a9-9671-5a3694c6e3cd"
        },
        "item": {
          "id": "7578df36-c426-4144-ba24-8c95822ff7a7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "222393a6-7e31-4992-99a9-7dd74e8a9423",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b093b7-24a5-4fae-a32e-4e62332451f1",
        "cursor": {
          "ref": "ff5cfa7d-2ca6-4448-80af-85124513089f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b5151f81-9986-47f9-8e69-1f4283e13dc2"
        },
        "item": {
          "id": "c3b093b7-24a5-4fae-a32e-4e62332451f1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4ff62dee-e99d-4f79-b5cb-7e8ac308a67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9cd905a-5615-4b5f-b487-42b5cb75c2bb",
        "cursor": {
          "ref": "65a2ae8c-1b19-4dad-a610-7b589ee5aa24",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c56706a0-0dea-43c9-a16d-81fd032e7e52"
        },
        "item": {
          "id": "f9cd905a-5615-4b5f-b487-42b5cb75c2bb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "aad75690-2729-4200-9648-13a753727dc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4848acda-473f-4b36-a9af-960f1987edd7",
        "cursor": {
          "ref": "a897ebb9-0d20-4a95-add2-17b7aaa33e52",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b8a5d636-c247-4388-ab73-ded7947b6326"
        },
        "item": {
          "id": "4848acda-473f-4b36-a9af-960f1987edd7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "90bd7de4-9fbf-4ab1-8cb5-52443ae42a6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7c17b1-4427-4194-89f6-73adde8a3740",
        "cursor": {
          "ref": "d79c2c09-b8c8-4f13-ad03-e84f73bd9cbb",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c59be222-1c99-4047-aea6-a9ebaf1f78bc"
        },
        "item": {
          "id": "9a7c17b1-4427-4194-89f6-73adde8a3740",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d23c387e-c399-4e03-bb6e-cf6cd3712c6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ec36c4-a97b-451d-90b6-5cff37e5d946",
        "cursor": {
          "ref": "d906c3f3-7fd9-4bb6-918b-e7b550e6b169",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "224fef6d-0d02-4abe-b559-80d3d0ccbeb9"
        },
        "item": {
          "id": "84ec36c4-a97b-451d-90b6-5cff37e5d946",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d0cb1587-30d0-4be9-9833-6115daf1fb2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2756c36-d999-416c-8cbc-cb9d06444ff7",
        "cursor": {
          "ref": "674265a1-c23d-4a89-8578-db4fd62ef562",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "22319d0e-f9af-4051-9fb2-5adbb99916a3"
        },
        "item": {
          "id": "b2756c36-d999-416c-8cbc-cb9d06444ff7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "77000811-f1c2-4b53-8bf2-6d5ec1cae2a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964368f7-5816-4cb1-b0d6-08a7680be1d3",
        "cursor": {
          "ref": "bd49a7a9-6242-4d57-a53e-a2310ea09b04",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3f86ec7a-aec0-4a5a-9c46-a8723b96e9df"
        },
        "item": {
          "id": "964368f7-5816-4cb1-b0d6-08a7680be1d3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ff9f235-7ff1-4325-af5c-3a36b40e250a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c84e92-be1d-4924-be0c-9e445cbacea4",
        "cursor": {
          "ref": "fef8c662-fcea-473d-a601-0609652f1f74",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d02502fd-d585-40b3-90af-5bdd4665f419"
        },
        "item": {
          "id": "04c84e92-be1d-4924-be0c-9e445cbacea4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d705bbf2-1068-4f01-a892-6dc9da8af4a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe42b083-b542-4098-91b0-c05990a25b09",
        "cursor": {
          "ref": "b0109b1a-2f23-4222-9b61-571b5f0a190e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6af517b4-a269-4a0b-9834-f19bc3f41d22"
        },
        "item": {
          "id": "fe42b083-b542-4098-91b0-c05990a25b09",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9ff3dcb6-da77-4e39-8543-40fb421888d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 112,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d823a34f-c6ce-4cce-8a74-dc5f0b585490",
        "cursor": {
          "ref": "e6ccee34-2a80-4199-9370-f0c317c71d26",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bba46123-387e-45aa-b651-925c02d137cb"
        },
        "item": {
          "id": "d823a34f-c6ce-4cce-8a74-dc5f0b585490",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "041d2fca-2679-4470-8d4c-56c0c35f1c87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc4c263-c28f-45df-b3cb-c44ad1818aa2",
        "cursor": {
          "ref": "b9156f93-9161-40a3-aa88-28785fc8989d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c8fccefd-4376-492f-99d4-48514fa8fe45"
        },
        "item": {
          "id": "ddc4c263-c28f-45df-b3cb-c44ad1818aa2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "73310305-ce74-4f9f-92f2-e306cde504b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b80b32-6518-45f7-9df2-4aae59bf23c5",
        "cursor": {
          "ref": "98ce8d24-5a20-410d-bfe8-66c3cac50741",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "17c12efd-a834-478f-b693-22f664b5088e"
        },
        "item": {
          "id": "f4b80b32-6518-45f7-9df2-4aae59bf23c5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c7357872-c9ed-4b5d-89b7-4cbb1d39c227",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb5a2c4-d6a7-42b4-aeb7-d1e49a2cfabe",
        "cursor": {
          "ref": "30db8deb-cd02-4f18-bb8a-ff4ad4d3af9b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2a264244-e0c0-43d2-959c-97eccd374056"
        },
        "item": {
          "id": "8eb5a2c4-d6a7-42b4-aeb7-d1e49a2cfabe",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c998a99c-9f6a-46dd-9f57-29bd360b06ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85906c8-3d3f-4ab3-bcc4-3edf64d9e70b",
        "cursor": {
          "ref": "eeaea09b-0795-4574-9574-f1718c25707b",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dffb7e7b-1969-4b59-9c4a-b8e7edc85357"
        },
        "item": {
          "id": "a85906c8-3d3f-4ab3-bcc4-3edf64d9e70b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "0295d263-c30e-4a23-a130-95ecfd8e90fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554279cf-25e9-44c6-b2cb-b06c9a9f72bf",
        "cursor": {
          "ref": "8cbff7bc-aeee-4ed2-9964-69db0f5545c6",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c617f440-c5c2-4402-8f7d-84fc7cee8d32"
        },
        "item": {
          "id": "554279cf-25e9-44c6-b2cb-b06c9a9f72bf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3b4a6e02-2c39-4b54-a6b7-f10716b403d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8702a6-cc6e-4b07-accf-af504b8ec6cf",
        "cursor": {
          "ref": "0fdce239-625f-4514-abda-05d9b6cd1198",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a5e0d0b5-ce4b-4e8e-8f58-4570604bca75"
        },
        "item": {
          "id": "9f8702a6-cc6e-4b07-accf-af504b8ec6cf",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6c7be92d-24d5-4fe2-9783-744fa871a434",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae4431c-0498-4d3f-809b-d96d57cb4b5e",
        "cursor": {
          "ref": "fc158939-ec6a-400c-9eb4-00f09aaa9075",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "adf8be53-3f38-4921-bff6-1fe030c56367"
        },
        "item": {
          "id": "4ae4431c-0498-4d3f-809b-d96d57cb4b5e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "6496d588-1099-4d84-9ef6-2908133b1506",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ad5b12-2975-4cdd-9a89-6dd8d03cd5fd",
        "cursor": {
          "ref": "f7a181bb-9e43-4511-8d98-3b94a355d9c5",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0e08bc19-24fc-44b2-8679-e00f2b32df60"
        },
        "item": {
          "id": "02ad5b12-2975-4cdd-9a89-6dd8d03cd5fd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b975d1c5-ae6b-4e1b-b3a4-1f789a40e734",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11e23fd6-7bae-4093-b2ab-3550ed6f5cfd",
        "cursor": {
          "ref": "7b50fd9d-37b5-4f5d-b7cc-fa6dd2d512e2",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "158854a2-3d8d-4bf3-b53a-f332336d07c7"
        },
        "item": {
          "id": "11e23fd6-7bae-4093-b2ab-3550ed6f5cfd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5b2783cd-99f0-449f-8c70-af103805ca1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a62f6c69-2415-44f4-8289-9afec0b59622",
        "cursor": {
          "ref": "7d76b224-f300-4777-8a41-e7fb1d96d638",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5542169a-36e1-49f7-a121-219d2050be84"
        },
        "item": {
          "id": "a62f6c69-2415-44f4-8289-9afec0b59622",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "89d7b015-6fd3-4ea6-b755-1f9f8644fe3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ba6941-6ae0-4e32-884a-0653c9718b44",
        "cursor": {
          "ref": "7221e8f6-ad8a-46c5-bbc9-3b1391b118bc",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "192cd225-363e-41ed-b46a-24b3b80ec9d5"
        },
        "item": {
          "id": "a4ba6941-6ae0-4e32-884a-0653c9718b44",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5e78dd98-be5a-431d-87af-d0dd7aa058e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2189efd-1def-4d2a-a562-a16a73b1b673",
        "cursor": {
          "ref": "0dfacae2-cc19-4cd9-8798-9e58778c73cc",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5e2e7877-e695-46b1-800f-8c5f340880f4"
        },
        "item": {
          "id": "e2189efd-1def-4d2a-a562-a16a73b1b673",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4bd3a261-a908-47f0-a0b9-63806f5ccd20",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "135074be-de2a-49d3-b111-a9acaabd7cdb",
        "cursor": {
          "ref": "a0dcda84-12bd-4dff-8f78-ae74e9a10b7d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d84b9183-aa27-429f-80c5-6dd97f9e62e2"
        },
        "item": {
          "id": "135074be-de2a-49d3-b111-a9acaabd7cdb",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8b4c174c-01c2-4fe3-abc0-36f1ac043fc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84902530-6539-4642-bffc-80d33fd78a6a",
        "cursor": {
          "ref": "6b5a4fa9-843c-4f7f-ad7d-de124b10f24a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cf2c0a15-6bb2-4363-9a58-7e043169f186"
        },
        "item": {
          "id": "84902530-6539-4642-bffc-80d33fd78a6a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b736b782-e6b4-471c-932a-c225770e43cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3129180-cffb-4f47-b6e0-02bbb9f29b40",
        "cursor": {
          "ref": "c53de6fe-4a02-45ab-9c46-8b38f01dd028",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "49036461-6ff0-41e3-8dc3-114f39c44676"
        },
        "item": {
          "id": "e3129180-cffb-4f47-b6e0-02bbb9f29b40",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "651af6ea-435f-4f52-aae0-798a8d1372f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c15a16-a3ad-46a0-a672-d3a8072ee6a0",
        "cursor": {
          "ref": "7bd4caec-69e3-4df5-86da-09a5406e39f6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8d4503d0-188b-4eee-b431-d3c93eff596b"
        },
        "item": {
          "id": "51c15a16-a3ad-46a0-a672-d3a8072ee6a0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "0388c8e7-c68c-4d0c-934e-b62e597d8127",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266265ea-bcfd-4362-9928-7df86bd25175",
        "cursor": {
          "ref": "498a78bd-e21f-4417-a12d-b044c1d96716",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4988bc5b-42b7-4341-9cb2-80b9ec12b9ab"
        },
        "item": {
          "id": "266265ea-bcfd-4362-9928-7df86bd25175",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f2720737-747c-4996-98f2-e1082d267ada",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df406b45-a97b-41d3-b73a-d2f1cbc62c8a",
        "cursor": {
          "ref": "c5a01dde-a8a2-4535-b931-427d3923d1e9",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "02cdad5d-2627-479b-b18f-6ebc95e21b91"
        },
        "item": {
          "id": "df406b45-a97b-41d3-b73a-d2f1cbc62c8a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aa78d788-56f8-40f0-8e1b-852982f21787",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 28,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24635fc1-c44b-421b-9166-ef6621703d3d",
        "cursor": {
          "ref": "6d3c44e0-6c1d-4485-addf-f8cf05f58a45",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b9de0c98-2349-4c5f-9699-bde81f51a1bf"
        },
        "item": {
          "id": "24635fc1-c44b-421b-9166-ef6621703d3d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dfc88705-6e48-4665-b340-51228664f1ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67111cbf-7b02-444b-81b6-58c28a1c0364",
        "cursor": {
          "ref": "ddb07d90-e637-49a4-85ba-dc61534ac98a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "64420d61-ce52-4eb6-9b2a-66fa2ba3ebf0"
        },
        "item": {
          "id": "67111cbf-7b02-444b-81b6-58c28a1c0364",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c967dc64-aa70-48ab-8b04-ed3dd6ace993",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961a7f93-77ec-4aba-8b88-4cebd890ee2b",
        "cursor": {
          "ref": "c0402623-40d4-4883-b87a-0d1e7f199da7",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2721daee-fd3d-4406-817b-8d6d3067d897"
        },
        "item": {
          "id": "961a7f93-77ec-4aba-8b88-4cebd890ee2b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "82185b20-ff1f-4fce-bc2b-e91fd3d40c21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73bff3a-fa39-4f6d-8aa4-ac6c023bb8f1",
        "cursor": {
          "ref": "3f23f06a-2b64-4f0e-ab6c-0b8c6e3a5e4c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "93068055-a3c8-4bc6-a2bb-285d8f60a937"
        },
        "item": {
          "id": "e73bff3a-fa39-4f6d-8aa4-ac6c023bb8f1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "80dabfc5-4d6b-4609-84a1-74d0e7dc7356",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c33b0a6-0c7b-4c29-9dd3-ed0f47232358",
        "cursor": {
          "ref": "f6c6b537-02b4-4d56-a763-6c8cfeb1be2a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "78fac020-1863-4620-8013-2868d25a874e"
        },
        "item": {
          "id": "1c33b0a6-0c7b-4c29-9dd3-ed0f47232358",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cd94230b-342d-436d-879f-c80c3c97c22d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9393da03-7f02-45e9-8bbc-3aee0b9e3b8a",
        "cursor": {
          "ref": "5655ea9f-d92e-437d-a51c-c5b89b201e0d",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e076192c-96f2-4442-b8c1-8a1f985d58ee"
        },
        "item": {
          "id": "9393da03-7f02-45e9-8bbc-3aee0b9e3b8a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4461eae6-590b-4769-94f9-4f845dedec48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcac45af-c732-4bdd-87d8-eb02feaf7625",
        "cursor": {
          "ref": "d2bef4dd-beac-47e5-9a6e-07f2798c7798",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f30ec0e5-5a7a-42c6-8c27-d0255ec25fdc"
        },
        "item": {
          "id": "fcac45af-c732-4bdd-87d8-eb02feaf7625",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d53e9ed4-7b47-4349-92fe-215985826479",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3694a533-e80a-4d86-915e-5e5989402ab2",
        "cursor": {
          "ref": "0b428733-640f-4afc-aeb3-13a188d7659e",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "544d4372-0fdf-4802-a3cb-d6d22c1172fd"
        },
        "item": {
          "id": "3694a533-e80a-4d86-915e-5e5989402ab2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "616221d2-5e2d-4859-9add-2b7b61c1bb6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25a5ed5-7ecc-4d7f-b1aa-d87de7708799",
        "cursor": {
          "ref": "34bf341d-c62e-4b70-aead-724cd5dd26e8",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b8bd2cf0-8c17-4b38-a970-b0f8e89a9d96"
        },
        "item": {
          "id": "a25a5ed5-7ecc-4d7f-b1aa-d87de7708799",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "41280e90-b446-434a-9b02-29e2d971651a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ee2a96-c770-441e-8468-640041077c61",
        "cursor": {
          "ref": "638f5379-6d8e-43ca-8ae7-11c1506714fc",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3e4ecc7a-6ffb-4257-8920-e8968b636481"
        },
        "item": {
          "id": "94ee2a96-c770-441e-8468-640041077c61",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4c388b4f-d65d-4d64-9d3c-c9a1e2c3e109",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad14f422-cde6-49a4-9665-0f51bac3f796",
        "cursor": {
          "ref": "1dc38031-bd66-44b0-82db-14dbc218d223",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ef0b7901-b7a5-4001-a65b-c2a1adae8191"
        },
        "item": {
          "id": "ad14f422-cde6-49a4-9665-0f51bac3f796",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "48347730-dc7e-4302-9317-336a96aa0c7b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7e21f9-40f0-4a28-abd8-a01c2398a7e6",
        "cursor": {
          "ref": "f212b420-2529-47da-8aea-8ebbf5e07bca",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d5af740d-9c9c-45f2-914d-d91c9d640087"
        },
        "item": {
          "id": "0f7e21f9-40f0-4a28-abd8-a01c2398a7e6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "acb99ac8-18a4-40a2-994b-1e2d7f4c93a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a839a654-fc61-436e-b3ec-22b269db133f",
        "cursor": {
          "ref": "00545b3b-367a-435f-9c10-933d42254553",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "965c19f5-7d5a-4427-8f1f-f103d1fea7ef"
        },
        "item": {
          "id": "a839a654-fc61-436e-b3ec-22b269db133f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "baa6c399-c2a5-47b9-94b2-c5bc028a8a27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fd4551d-c999-4969-ba9f-c0dc86e0127c",
        "cursor": {
          "ref": "62220647-e775-43f8-a79c-2ef536805410",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "43ff938a-231e-43a0-975c-43974edd1f32"
        },
        "item": {
          "id": "0fd4551d-c999-4969-ba9f-c0dc86e0127c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "47399452-6f79-46cd-a85a-c0dc2483810f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17aed19-8d7a-4e92-90a1-d1f6c48a6951",
        "cursor": {
          "ref": "4685302c-067b-45ef-9d44-e3c49c8502af",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "62e41665-3bbd-480d-8e7e-735342eee554"
        },
        "item": {
          "id": "a17aed19-8d7a-4e92-90a1-d1f6c48a6951",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41861ebb-4441-40b4-91dc-1e2817e655f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348b4eb3-8913-44e4-bf36-8600a16ebe57",
        "cursor": {
          "ref": "a2f59b87-0a5e-48a8-998e-f31d984bd64c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "dce3ae79-5250-4306-b7bd-c57f47d62af5"
        },
        "item": {
          "id": "348b4eb3-8913-44e4-bf36-8600a16ebe57",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ef99fc40-b376-4d39-a5ef-0edd0c4b3c34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91da6c9e-aa02-47c6-8548-4cb01be6b204",
        "cursor": {
          "ref": "eb983bb9-8f33-4242-bbd8-545d32de8ce7",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "954b9f5c-a1b9-4877-9271-05d0bacbccbf"
        },
        "item": {
          "id": "91da6c9e-aa02-47c6-8548-4cb01be6b204",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "52bab795-7599-4235-927c-0d2afc798d0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d201b0e-055b-4e2f-bebf-c2719daa84f4",
        "cursor": {
          "ref": "54424826-e953-421d-98d2-7795febba804",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2d561aa0-903f-48bd-a1b5-fb61d5ae28e6"
        },
        "item": {
          "id": "0d201b0e-055b-4e2f-bebf-c2719daa84f4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "467afeb0-d50e-4225-8acf-7f231d8ee958",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de55b32-f1a6-4ad5-a93d-c4824f88934b",
        "cursor": {
          "ref": "79035982-3397-4433-ad47-c6d2c067e6f0",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "74562004-c08e-48c6-b0e0-12f9a93c5b61"
        },
        "item": {
          "id": "5de55b32-f1a6-4ad5-a93d-c4824f88934b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "96952628-d457-48a5-98d7-75c181176f21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6c6795-3aa2-472a-9ffb-de882a1f2db0",
        "cursor": {
          "ref": "dbe9dfab-082d-4e85-957b-d9567ad55271",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "add3e151-6ee2-44fc-907e-59a809fdf45a"
        },
        "item": {
          "id": "fc6c6795-3aa2-472a-9ffb-de882a1f2db0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e16a721f-7200-4a0b-82bd-93fc38957a3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "656501c7-282d-4d44-b3b1-38ffc5ca1667",
        "cursor": {
          "ref": "9aa18cd4-a2ac-4fdb-b693-35d66e224586",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bb5c2a6e-2efa-4a2a-8de3-6063d18df52f"
        },
        "item": {
          "id": "656501c7-282d-4d44-b3b1-38ffc5ca1667",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "735dbceb-3b78-4ac0-af6e-22a7d2d3d7d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851baf0c-a33f-4e63-852f-9d7eb543ff8c",
        "cursor": {
          "ref": "59ef7c1d-0f58-46b2-8792-db857b49759f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ed794e99-8e34-4e48-ae76-80669de4ae0e"
        },
        "item": {
          "id": "851baf0c-a33f-4e63-852f-9d7eb543ff8c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "42ad9601-dd8b-4be8-925f-0eb8b5b0af40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856b31ec-ab22-45eb-b506-a722a0c2d2f2",
        "cursor": {
          "ref": "7c327d5b-f5a1-43fd-be01-26bb597d7445",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "3d2257e9-f1de-42b7-97ec-d6a3c045f8c3"
        },
        "item": {
          "id": "856b31ec-ab22-45eb-b506-a722a0c2d2f2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f490df8b-0115-42d9-b15c-9335e888c6c4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9f7bff73-a427-4425-8483-d9eef3253825",
        "cursor": {
          "ref": "4a458598-656c-44c9-aa82-af7bb6f9ddc3",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "49289854-712d-4d32-9829-a39109779c07"
        },
        "item": {
          "id": "9f7bff73-a427-4425-8483-d9eef3253825",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fca52c4f-d305-4c78-ad7c-06c02b2c098f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "afd78cc8-22f5-4972-8375-926709301ec5",
        "cursor": {
          "ref": "d2c5b9f2-7b51-44e9-a395-74877b24d6ab",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3a0df3b6-db03-49c7-8572-65434793437d"
        },
        "item": {
          "id": "afd78cc8-22f5-4972-8375-926709301ec5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a27bfc31-7701-442d-81b2-25036dfc8dd8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "a6ec8b65-db03-4f54-9e1f-f42015f1013a",
        "cursor": {
          "ref": "6c62153c-bbcd-4f1e-8c5b-bda11c377bf6",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e2e1f356-599a-420b-bbd0-5bedb32c0316"
        },
        "item": {
          "id": "a6ec8b65-db03-4f54-9e1f-f42015f1013a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "47087cd1-8832-4bf5-9fbb-c1667fa12661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ec8b65-db03-4f54-9e1f-f42015f1013a",
        "cursor": {
          "ref": "6c62153c-bbcd-4f1e-8c5b-bda11c377bf6",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e2e1f356-599a-420b-bbd0-5bedb32c0316"
        },
        "item": {
          "id": "a6ec8b65-db03-4f54-9e1f-f42015f1013a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "47087cd1-8832-4bf5-9fbb-c1667fa12661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae52525-7585-4855-8f30-de1ab85d33d0",
        "cursor": {
          "ref": "0420677f-bd00-4b0f-acc1-e57aae943351",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f0b45643-591b-48ea-a736-a3d833ed4a6f"
        },
        "item": {
          "id": "cae52525-7585-4855-8f30-de1ab85d33d0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4b8a8eac-3478-4279-85bd-8da38da5fbc5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6923b2ab-7ef2-4c2b-a2a5-99f2bd58a06b",
        "cursor": {
          "ref": "887d5f59-3f85-46d4-94ea-34857c9ba7ea",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "50a14d0c-5c7f-4e89-ace5-e65e1a022d3b"
        },
        "item": {
          "id": "6923b2ab-7ef2-4c2b-a2a5-99f2bd58a06b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "95796706-43de-47db-b46c-50a613597a34",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}