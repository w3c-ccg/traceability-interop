{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f778c487-6008-427e-afc2-7c8bb08d2d19",
        "name": "Clear Cache",
        "item": [
          {
            "id": "00be31e3-7f43-467e-8253-4f88a4a0fe7c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b1b400a1-a255-43fb-baba-35de3da88c79",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "681f0fdc-280f-47f2-b9f1-87fede484861"
                }
              }
            ]
          },
          {
            "id": "b1818ead-9d3a-4c79-9f1f-db666a08bc3e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f86009a-5327-4f7d-ab18-d38efc17d8f8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d5d6c799-b64f-42ab-b649-03acb053047f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d5a575d0-6b87-4d82-8322-f3b38c93ea81",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "972c58bc-bbc7-4826-a454-b80c958d8fe7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fd4855c-7353-456a-be40-940bd172de15",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9558045-6b0e-44e4-934d-02baff7bfa51",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76bb0260-8cd0-41c4-ab61-0fbb9fea3fd6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8fef4e34-c505-49de-8e21-2be65c4cde0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7eeb4139-e896-4934-90b4-0537a3464309"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d5aefb1-d615-4fb9-b640-4b19df4c90b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4091c63c-6837-4765-b340-f5adf94df757"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba783f80-9101-4e57-be40-7afaffafe789",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "514ac427-6e8a-450c-b23b-11921ad272dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a411b74-2ff6-45de-afd6-3e811bd93335",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc9361db-088e-4166-9372-a139ba290c78"
            }
          }
        ]
      },
      {
        "id": "c4ce8e94-ee0a-4204-a291-d9cf833628b1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "50937e2c-f313-4fd1-8a88-1358cb44dd18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8b07fe8-fd8a-4f40-a63d-fdedf369d64e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3db9b52f-264b-475c-be09-723df0f4a34a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188822b4-ed8b-45b1-8da1-bb2f4b312418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "686423d6-029a-4809-af17-a6f108a0c874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e163884d-2fc8-4855-a2ca-1a28d4008415",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eaaa66-051f-4fa9-ae07-a7c436f8045f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "639c9028-cc16-41b9-b94b-6ec715e97c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1e050e-de43-42e8-a1f4-21a79a7b1f1a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3bcf80-d026-4251-bfee-010947b7eeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8647531-830d-4b9b-955c-544858b0c2d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3358566-6294-4c28-84f3-641889f212d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "91151a15-2bbd-43c7-88c3-ed49e635d74b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f4d206-fdb4-4f9b-9b80-7fd254cf7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08e16493-184a-4a24-b775-fd7ce99528e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3283b3f0-870f-4314-a16f-1ccf8140c80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c30e0c-4c81-4457-b72b-3541f36acbb1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "58a7258d-acd2-4101-865d-44c6fe15d0e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1fc4e3e-331a-4aab-8987-2c9f8756246b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "063d71fb-ab6f-4cdd-bcc9-624773462f88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "778f7dff-2c5b-4f59-9def-32458fa41133"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "378355e1-bdc5-4cbf-9bfb-294ca4e3e567",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3115f544-0fa5-4916-a5f1-4769fb0fd4be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ba3f459-8a2c-4f02-9c91-61fd19f6b865",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1951bb5c-9ed0-4825-b960-82391d0f510d"
            }
          }
        ]
      },
      {
        "id": "0c7225ab-c8ee-4597-bc80-2623964e6ea0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "08fc8378-3531-4878-b9bf-1232bf87a1ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a9f83c05-ae67-45d2-a6cb-5f1ca15357e4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "80d068c7-6bf0-428f-8f89-da14b69cfe48",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0e18fe-5c01-4039-9e85-8cb6fd811bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7550f09-d782-4405-812e-9c2fceb4bdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c6468a-5039-46ee-a2fb-c0875c885efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bebf1e3f-db7d-442e-8fc4-64e733965644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50884081-5e37-4b35-be7a-0631c456e3f5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a38967-9f08-405d-90c4-46704772e8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbe13dc-59d4-4477-90b6-ab7ea872a64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7190f7ac-8bd1-4924-a262-781c507cf674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e34c018-8c93-484e-8b92-68ac5a21014e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad829df9-e7a4-480d-ace2-0187d7af2b94",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "743e1847-3d5b-4d50-84fb-13c504eb30d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713afdee-1f40-4bed-861e-d1b013f7a291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0db1256-73a8-4dc6-a674-e859ae049f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0c225a8-0441-49a5-a4e2-fc88d0f7bece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b32564-32c2-4712-a527-16069961f861",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74dc5a6e-3afd-400b-ae74-1a0be5bb61b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf310ba-02d8-4a0e-a4ea-2a362f203408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88072727-2610-4dc1-93f6-85fc2e5590db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b2ff7ec-72fb-4a7c-8b3a-02f337774585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec470ba-2df9-44da-9ddc-6f6931bbcece",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9076619c-e9f6-4809-8982-a81db7b06d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e3e438-c5e4-4baf-8f53-ded97d1e3b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44102091-69c7-4693-b351-83b199f2b0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e23896d3-2f62-48d9-97c3-58ca3692d5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7771af51-3fec-4b3a-a114-e776cb94bbaf",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5babe0-cd0f-4075-9504-a310b1033134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca10474-733f-4b1e-887b-32b08174f232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3654b6bc-aee6-4dd0-bdfd-ceaa93ef60a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dbc9c68-de08-47ca-93ff-37775179085b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec042f4-3284-46da-97fd-9b36e0cd0bb2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11878101-01c1-412e-9ff6-0d9cb992a962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18b89b8-1b22-4d93-83ad-173b7df72e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20acd82c-23ac-48d4-b836-3e2125c3530d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0c74378-de21-42cc-85d9-1d53f2474bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d544d47a-b8a4-4b23-a450-652e5108db99",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b916759-5193-4506-88bc-a8f7f0c7f957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce133dd-dfbd-4e73-8543-90298dc27acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06fcb47-7ccc-4819-bd3b-9f071e27ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9abdb027-d972-44ad-9a84-0dd02cf8f542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aae4391-14a6-4f10-afe4-9f6b4cf88a3e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45475a16-29c8-4709-a7cb-5259dc50676f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398514e2-02a7-428e-a29d-cb94c96eba86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d531aeb1-aa65-4aaf-ae60-f2adc1224bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cfc3c01-7983-436c-a386-a8836bb8322d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ffd12c-787b-45b1-abf5-1221ff7462e0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c054dff-9582-4dee-b30c-d8aa0c95dd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592be485-f3df-4b12-bf4d-991977e6e30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553e11bd-53f2-458a-a2a4-d07f6f2e195f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31371736-02b0-4fff-8108-2c1d8a054283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6315a75-7c62-4929-ac7e-32b157950064",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dbd3f8-c407-4755-97c0-a558afcf6c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fd0649-b3f3-4ca1-a4cb-c9a3d8a58e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e336f2a-d963-46df-b51c-11df3cdee579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef955c99-4bef-47e0-a59d-94d4813c63e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311a7282-d1b2-4f0a-9387-26ad0e48abd3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa88607-d515-441d-9f4b-b961434fa074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3227f74a-ee3e-4413-8b1d-670c536dac54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74acefd8-8376-4d78-a547-50e9da1270c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d7528f3-c019-47d5-82e4-890720eda8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cca8043-6f30-42f5-93fe-0cfb6451aa52",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fc7982-6add-42bb-a11e-f07eb1b7a93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701101d7-125a-4ea6-9106-45f071002946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44323495-3302-42d4-b97d-e06c9dd378d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d58aaf2c-db75-48eb-af2a-1377fcefca6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7825e2-cca3-4867-86b3-f5ae4f0cb432",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17768e94-93ea-44c7-8b84-5253d49e1d3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfdb7d08-c66b-4eef-99a8-9f200d11fcac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1195bef-8dcc-4a8f-a677-5302fc17d424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8422bea-7d88-40e8-acfc-400f40bf3cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5ccf33-b3e1-4a26-9a17-a7ffeb987b57",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1acab5ec-17bc-4c6c-941f-d4bcc5026f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1d07c8-83fb-48a5-9bc8-5a8a03d15a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9edb999-9ac6-432f-b4ef-f851b3055f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfd2fb79-38e6-4d0e-9f3c-a09f8ac75e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d9c926-5e31-49fd-8c67-d4323282909b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37bd67c-caf9-4a50-b50d-b74c96afe0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f26f28-fc6a-4038-918f-a67074012df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57d34a5-d38b-4e27-a290-a054ffbb7520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d570413-810f-4377-adc4-86781eb996a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754d5132-f62f-4b9c-a2d7-238494dd6dea",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09617686-202e-47c2-8c57-52ee99929cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e179eb-2e63-4227-9aaf-a545b8e138c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4bcd81-7b04-40d6-866e-417d3e285283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0195a100-1ef8-44ac-a729-516de68fceff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75dd323-ff50-4b2f-b9e4-493152acff51",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd3f92b-e1ca-47d6-ba97-cc0d86d30662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2badc0-63dc-4dd3-ae2c-b8a56f68a802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12cf89fc-0976-4e53-adfa-6d3eb1b08e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "33d84372-181c-477e-9b25-fbdb85c25b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfa4e5c-5568-4fd0-afbb-0bce899e2cdd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7dfdd6-e678-4f00-9f72-9898b8cabc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ae6125-ea5f-4388-9601-0d403eec7f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba16805f-fe96-44d7-9155-a8f086e58b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44841b3c-c149-4661-8089-c20739b7466c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba486927-3baa-4cbf-ba03-de5afdbfde3d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30178eed-34a1-4510-b93d-448fc62a91c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b536cd7-64d5-41b4-9b86-34a599bbd68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7790d31-4c5c-41b5-96f9-a4fe9b2b4b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f0b302-2b81-4f4a-bc21-ede151438d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c68239-3de9-46e0-8569-e8573c9d499e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d7b1b6-b643-46c3-9bd5-4bc3b4861129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa47a819-4363-4b7f-bf7d-8f0345ee5aba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860d05a1-6e90-463e-83d2-713ea53b197e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5161e6f2-e040-47f0-99e7-db494efdf9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284dfe2c-3d0a-4f03-b76d-3089e8683c2c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a1c68e-10c5-4ad9-a06d-f47196162f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f3b495-a30b-4be8-b1c6-2fe6903d7075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de2c0b3-3195-460a-b94f-f695100a6b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07de9947-3eae-48d4-b001-407fdb28a23f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f178f568-4484-40ff-89d3-7da25d0042ff",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef36d85f-6e84-4f69-9b03-3302a919963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a4cdf3-18b2-48cf-ba62-b3750b439210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6733fc-73bf-4ff5-9ee3-63bfee3e2d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8429ae96-ee3d-4aef-ba05-e6fc65488cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684ed096-6dfc-4a0c-94a8-d6ee5155d12b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea68e8a5-b6bb-4f57-bc2a-8d55dfcd2b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63bfdc9-c078-4a10-ad7b-baa09f2825a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8860f7c-eec1-46ac-bee3-8e120e7e84e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ad0305-2d25-48cc-a5ed-6bec512733de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26b7977-2b5b-424a-9488-e0cae2862001",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eea1501-0f82-4149-932d-c114a754b046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88c6f23-4f89-4a10-ba6d-58975ed5d750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993a8a4d-3d81-43cf-a457-a826c078fda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d335a18e-b41b-4d41-b5e7-de40df691eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4372594b-4f78-491c-9704-73a5886084c4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6704f42-f180-4ac2-bb82-09a383761e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf49331-04c0-418f-ad34-db14ce8c726f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1d6c7e-c8a5-4114-8aa1-1a08259686ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82bdaf8-c227-4208-8fe4-0aa25a495143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c6ea78-cd1c-4697-87e5-2f568204679e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8e7100-a4b6-4fbb-ae4e-7c90e70a3b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "befe17a3-0b80-4298-9b7d-1fd1dc6049dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf33ab7e-c8b2-4d64-af1c-ed5e940bbde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a72bedb9-f54f-4f4e-977b-744280bd297b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884dedec-25ec-4e39-9c6a-93048ec759da",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ffd037-6f98-4372-8647-0a5786eab1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450b4369-a754-4d91-bf86-5327d6f1b1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b86c1f-f3b1-4856-a3c4-d72455d1a8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8d148f-f0bc-4d24-8a98-aa5180d69a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb165ee5-49e7-4a5b-9a7b-10cd2b43edbc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b855bb9-5709-4a69-aaa1-0beef6797d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d880fc50-22d2-41e9-94a2-beaf0cb7f9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69254051-6d6d-4cd6-bea9-1ad20580a421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be22218b-699b-4c98-b034-024e2afff083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e46636-5cbb-4fdb-8aec-c64500c4d815",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c97e6c-b2b1-43ba-b9ce-a0f6cdfe62f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6eab10-a9bd-4a4c-8eb2-1f9444cce683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa039e4-5a40-4cfd-8fd4-e053ea766f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6752650e-8b5c-4d51-a563-e5fbdee55752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a3e523-34c9-4a75-8eee-7331de89a8f1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1eb5eb6-d026-48aa-b283-414c635bd526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed75e8c8-4933-4e11-add4-2a8d46b7f4f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40838b78-388b-4fa2-9acf-b315310273c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbe13ba-6422-466e-8af4-25bd8e303a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f685fe7-077a-42ee-912e-5854cf7137d3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298f0c89-df59-4d92-8f6c-ed8e66264b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03984f13-c0f4-43df-b28f-c3050768bab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981ca5db-e023-487d-a7fd-877de7043e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4b5830-4ccf-430b-b99b-7a75ec5a8ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e7ccf6-2a6b-4681-a092-2a3c815d4900",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dac1516-b71e-40b6-9f73-954244292e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c56bcf-73eb-4291-ba5e-847a6b725f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f3d623-5938-4457-81b8-c476cfffcdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d077044-72a6-4370-a6e8-09f27115cc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d25148c-de90-41a1-881d-e0a60c89a762",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e7435d-29d8-415c-b44c-1e8410006031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10de4dd2-c99f-4510-ac5b-86b43a837e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9d8cc0-699e-4bc2-969e-e2eae0ee7d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd24fce2-a527-40a0-b691-acf2acb2ca61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a413c79e-9f1e-4016-8bbf-e0c5b5303239",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb0866e-b1b9-4b8a-9a59-fe2a3b0ef2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9323ccd6-d49a-4cad-8ab8-ad84db72896a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711c87e4-9bde-4250-8d7a-6d434f2c9c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8b639eeb-4d0b-4f88-8fba-2322d11e9a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6738a411-54cf-439c-b31b-c3cb9d1f340d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "031eb709-92a5-4424-ad72-e37826a3a803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dd5b5d3-7ae3-4f2f-b33f-b5001fae763d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03be1181-c3fb-4920-aea7-b07733319473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "916d12ca-680b-48d0-92f1-a8f3ca8f0337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20e4126-ee21-40bf-a348-737825785222",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913304ee-fa8d-407b-97f4-ed700532289a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1f99d9-e86e-49e1-88bd-1f9acf29bfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3009ef78-a7f0-48d3-8227-db4fbe824f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "626afb2a-83b5-4f8a-99b3-da2ebec94d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df26d433-f1e8-4147-a23f-644d9171fb9e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e2b85c-dced-4c4a-9e32-d476e8e8f1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dbd6512-c243-4d74-8630-1cebe22ff05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67ba09e-c5b8-4562-a565-1b2959dffe27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15745199-2508-4099-b389-ce00f33d479b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f9ee46-ff37-4d7f-9053-1d7e488676bb",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73749b61-d8aa-4d57-ba62-6c777851c3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f382e63e-dab2-4eca-bec6-5bf9781ed334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76b9332-a6be-4304-8fdf-c0b8878520a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cca63277-8980-4978-a365-ce8ce5d31d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f616492-1a17-4efe-9c79-a8adca61d56b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669b2b31-010c-44a6-b25d-c5d48e514045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "087198e4-2843-4feb-ab70-b6305b48bed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d987f5-885b-4b36-9c64-ec0532d9de6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac30f63a-71b2-4b4e-b0b2-759e57b2886c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435828d4-a678-41de-bd0a-e0347f266292",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847fd2c0-05d5-4754-8234-fdf47609cd8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97bc333c-a673-4502-8269-0e172a65912d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e57afc1-e80b-4225-8ecf-930becfea16e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2661a98-87a5-4c00-bc68-a3578fb9d058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac506c2f-70ba-4863-8036-64efee962ed9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b371307-83d8-4275-ae0b-e05eb539242f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1455c22-a367-425a-bcc2-ff53c61dc111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f08bc2-030e-4a64-ad54-7067a6f206e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "84648292-ccec-466b-9016-94fb5586b781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b75ace3-20a8-45ca-b8c0-00b870af7b9b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a590aaad-6344-481f-aac7-4acd4bb4238d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d42e35-f0e1-4227-b849-b31cf31b22c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8691c7e3-7b6c-4333-bf75-6cdb8d85ea28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "66345001-49a0-4ecd-822c-bbffdff2f422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aeea366-54ce-4dc3-9ad3-3f825e718334",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b7d0ee-1c48-4a68-8ac5-9e6106a451ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c96bb03-e34c-4052-b70e-13fb953c0863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4942490d-3182-4873-bac9-fb2067b3dcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae54aa6-0071-469a-a6ac-e4628bdaf37c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbb6640-614f-4ef4-862c-8651c7dbe627",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78779624-c3d0-43e5-9847-45b90a39db9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8929c45f-0d55-423a-9601-0d8e86dff43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b545de-9c5b-460b-9152-6f112fd21e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "81bc6fa8-3e4e-46cb-88ae-d13d81eed672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfa3101-717a-41b4-9bb1-287bf6df21e7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb808a2f-68a0-4a64-902b-6de2d652d0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081a6d8a-c7ce-4997-aa36-9bad3bc485ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1494dad-b183-4842-bb39-88d054588746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e8ee834-669b-4ff7-8a33-2aaf980e7fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b62933e-5f39-4247-b3d6-27f782d85254",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab29d695-52c4-47a0-a972-81ded324ec48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c857367-e069-44b8-8f33-60cdc6412b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2e18c7-e71c-4b2f-a241-c9c008158688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad6b746-9bd6-4ffd-97f1-b9664e5f9dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84030d1d-f1ec-4310-8486-a4326d826326",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c06bb03-850a-4346-9208-80fbdf6d8c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "143ed212-7da2-41de-bd84-23506cb7f428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eda18c6-29e0-41fb-8306-b2a8f889be64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa2d9bf-122f-4a32-a399-31a208683a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d00c25-0ac5-452f-9df4-a6b044044205",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e0b8248-16f6-450b-bce1-17f39dff03cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c87a166a-5132-4120-8c3a-28a12d23e4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef5b6f8-941a-452c-8575-3c260b31efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "eebafa10-2ec4-421e-93dc-64c04a069abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7404d6-d1ee-43c3-88a1-c60b93621776",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20950de-f559-459b-825c-1aeb9028c1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ff0bb0-c6d6-4fc8-a919-c23f281e85ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dee603f-884c-4d3c-a9c3-0726e8ce033d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "295caead-62c3-4e4e-a33d-6ddb58f722a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50657b3b-a17a-465a-a214-00f47fcab0a8",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbb1bb1-9c23-45c6-b94b-9350aecafb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1166abf5-d31d-4a00-a42b-88186761ed4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12deedb2-ffb3-44b5-88c2-cdf59c297278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d483ebd0-f02b-425e-9b87-41a261fba3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d601b0-f1ca-45c7-acfd-72737c62e9a5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4158682-9c24-413c-9662-fbd2888ce66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af480e9c-e372-408e-b0ba-1b712a75a2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cadc6e7e-72d5-48ff-91d2-e7e330c0de49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "682e7c9f-4a25-42a9-9d3c-1474ae6cd195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca089091-f7b9-4c33-b0c4-2028157b794a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211d9a57-5fb7-4636-8e23-877787ab1e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766add74-7f38-4aaa-9382-7bda4b7e94b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b7daeb-0330-4a38-a601-c0170a43d8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "885538e5-e712-4c20-8a70-e139757d9b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06d7ea3-f5c3-49ac-85ca-7e0b23001ac3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "692e2df3-99c0-47b1-8ba2-fa790e8b6b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59347be3-2dd5-4049-b362-b923ba9b7af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb7907a-4c78-4020-8dcf-1f628cc62eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a327b7-eac3-4d3d-a03d-52e7c8d48f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdecc852-c009-4623-8ac0-46ce0f804157",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b46df75-8507-4f17-8d3d-76d564c0ab6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a91e41a9-6c57-44f7-a15e-805147bad6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8e742e-4b2f-42dd-b977-f9729c807148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24626b34-d19b-404f-80c9-d2ca81ff8577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b73ab6-4e6a-4157-8720-26cf5f53ad77",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72052c89-6cab-4c72-bbbf-9f1df52c9b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791bc190-6ef8-4a3e-a6e3-9a9aefcc1d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd470e86-d2f5-4a7b-b790-7c4ba3271d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a3863dc8-180c-4c23-91bb-4072eec6d17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d399bb1b-b39b-4718-85e8-e01fe1020dbc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86853e5e-6b69-4aa2-b443-bd99b0677ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bc4fe6-89a1-478d-bfd3-9c90c8d87452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736e5a26-71cf-4282-bb5f-c32fd430f489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e59e4a4f-9939-433e-aa42-8966d98df247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5593e6a-ab67-471f-accc-60edd1714f6c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749b0fe0-133c-4561-a88f-5e7c0d29ad70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9f9151-91b8-4ada-b37f-447a7623006e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c92b93a-6766-4275-a004-8d4007d6a5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "43445f17-caa0-4ce1-9cf7-a4603e18ca8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4479cb-d978-46a1-90b6-932b361eb9bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb35c913-436e-4ab8-8528-0b8deea48a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510c89b7-7b58-4ce2-98c6-9357638f5bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec91db2d-7a0b-4842-8415-c0058a52b8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cebedd75-27b1-4f85-9bfa-c4263b55a92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc4e65e-6b2d-47cc-9815-3adcdfe96362",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f9cf05-267d-445b-a59d-7c9b9b179aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77da4d48-fcb4-46eb-aa33-2c11d9a8e454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cb1c21-6b98-4419-b6af-389f36664f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "75fa19ac-cba1-49e8-8dd0-f8dcd0803f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e8adeb-e785-4a65-88d0-aaeb2f46ba25",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeee45cc-4e74-4491-aac1-07c13aea4867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ae4f2b-22e9-4486-9c10-d56975eec554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab1f594-ea96-421c-8441-7ce08c047154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6ab5cd-09cf-4486-bebc-9773c5be0cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7772e6-5cf9-4b05-94b9-1bc7781faafc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd09702e-c95e-4936-a559-c0b9e145f692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96a37c5b-d318-41ae-832d-cdc23e716b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "666a2744-f449-4695-a245-5cde8ee0ef7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac721234-8804-4741-a8a5-56e08703e46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047934e6-d988-4d8f-8b80-c29041535c48",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0863569a-1b11-4e3f-9509-69b48e3626a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b21ca8-6d35-4873-bc4c-7e37ec46d26c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70aed58b-6a5a-4bbe-a565-c4833d1382b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "99654bc8-0403-46a0-b05f-f93d5cf2d80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17ffb34-9436-4e75-b97c-eaac0bd7f18b",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae925a70-954e-4546-86ba-d2e96a07da6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d4a5cc-1e0b-4ffc-b95e-e233b4eb1de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0a6e0f-bb27-48b7-ae5c-ec3ec3dd2645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7213e40a-ae74-41ea-adf9-5ec52bc9e9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44b558c-4b02-46a7-a152-a9431a65410f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ae533e-408d-4ef0-86e8-7d9d04e5a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5e9586-9e19-43d4-91cf-5c120713c91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5557e296-248a-4d1d-b4e2-3ba62a0e8a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e2715f0-fb48-4c01-af2d-f2ab3189c836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4498a4c4-0313-4349-af5d-dfa9b5274aed",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20e11d56-a10e-42d8-addd-adfb0244d640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71ac82d-3764-4fc4-8081-41275e4d7974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8d2912-3719-4ffc-bafe-04145cad828f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "566abe5b-821b-4d15-bb36-ddbfe044227e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726d8d09-defa-4f0a-b425-ab079e794737",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff5c928-59e3-49bc-9f43-131dbcf39737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "224502b6-59fb-4149-8b50-7dc757e88698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229a91cd-a75e-45d7-a988-bf85c577910a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "549b6851-927a-4944-99c7-cee11c7b1289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a026314-6f8e-45e2-9edc-028261ccda20",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ecabf8-5315-48aa-90cb-a8b08b9c0411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63d8fe2-0760-40ad-accf-5127c54da4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76c4d6f-50d3-4610-b263-c1333469694e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a4bf6f-1a48-4471-87ba-f8398f24e227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75f5481-8ddb-46e2-8960-9637f216722b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452d4f2c-3b60-4116-9f4f-bd5489ed35bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef862939-529f-40ec-8c4a-29ebee7c1f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad2eb05-4993-4cda-b211-0307f1be7977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2a1dfe-302f-4a1f-b397-272d16954c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb07eef9-1d5b-49c8-8472-9c662cae0629",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d3c416-ebd3-4bc7-b81f-b98b090ab42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11811d50-3c87-4cc9-8bc8-6024185804f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a0cf9a-f922-41d4-b45f-31feab9040ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae16d2fa-4610-47ca-aed4-fe6923ba36c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8f0bcf-af1a-4014-ad90-6db6c87440f6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f7df92-be81-460b-8986-700a5e473422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24605f4f-d1ff-43c5-bf49-a837bae03416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f51f504-684a-49fd-ad3e-9bae9838bf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa52795-5767-4641-bfc9-ab95a4df618c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4e2f9a-d4a6-4999-b1c2-e5488d81bb32",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0f03da-fbd7-4b25-9e70-2d16f9162c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00d092f-c8c8-4c8f-b27f-276d047ef337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3b40e-8960-4dfa-82d3-9947ec5a7ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3496a300-570d-41d7-bd11-1b039b4717e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0be791-e56a-447d-a234-9a6ef759d0ab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12a807e8-e39f-4bd2-bf9f-fe03037684d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c7eaf3-6483-41f2-b4c3-ace4e4fab1ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e504d6f3-3ca0-463d-a2cc-f9c7d3ab5093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a02a01fd-7387-49e6-8d39-84acd1755ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113f32c9-9cb7-42c1-9a6a-a22bcdaacdfe",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a017ef-4793-44d6-82b2-3268009db6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12a565f-fd62-4399-bdc4-2b6be621973e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a06015-cc43-4ec9-ad88-0a6b2560253c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b7149c-ccff-465e-87bf-b0abdd4613d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf00af80-0524-4e22-ba11-946180b49a13",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3858be-4d05-4549-8288-09665d78c796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823abb59-d742-468c-a6c1-fa69f33ff978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f1887a-6a43-411a-8583-ae8716f4585f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ac34261-e63d-4e63-9f45-9a53404d15b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d86bb0e-b2eb-4bfa-8952-0b9c055752f6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcaf1e0-a74f-472c-92aa-241b4ab58efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d113a4a7-9a73-4699-aa55-3a502430d1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e0c29d-4391-4f62-b80d-852768d55bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "180bc7c9-df4c-4417-9341-b98319f14e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a8b033-b00b-416f-a853-2365ee4b3fc0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf50bf10-4f58-4e43-91c9-4b933b70a038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e5c0b3-8722-44c9-9d48-02257d08248a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9dc503f-8b66-48f6-9229-8896d81eb08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4c0674-9aaa-4d7b-b8eb-458025c7f313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251f1d58-cf08-4902-b081-0ec38e3f340b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c736bc1-d86d-40ef-9882-5e21d3a43395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa10bc82-604c-425e-bf83-b839832389fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09701fd8-550e-499f-97c7-8c6954419a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc157f84-6de9-469a-9f66-c3dc60e51565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0661ea-1648-4b10-8b02-6d755a40ddfb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480cfede-3986-4a92-89c6-50534619947c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ea0eac-8863-4349-bb6b-1b5ec1b32d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304f2fd6-c8c6-4b97-b906-2ee7f48b66e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4da2cc8-a2e9-4cba-af29-3cbf0362631f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c56d02e1-f6fa-4ed8-9796-2c8338f9906c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069629ef-4875-4df0-86ba-4b93c00d3aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fc2fca-ff21-4e69-bc5d-c8c3be1114a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2142ba-9b79-4ee8-b92a-a1c72ef83bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d23c6aa-0211-4b6a-a138-c108baac54c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1505ba-f66b-49b0-9ebc-7903fa7ceca3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "121d6d45-afe1-455c-9458-ff73146bc039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea72da6-fd14-4b3b-9dfb-28db7cbed776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10912d7c-b012-4e5c-8f0b-c4270d0aa86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f54874ad-8e50-49d8-b3ca-3015256fe4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c26213-7102-4a8a-ba33-f47b2d9d6a81",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1476ede9-77d8-46b5-854e-c73f28d40112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14f56197-cb38-4956-be7f-31d24c08b332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0d562-4c4e-4672-81a8-436cd9bc5071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03ec5d71-5494-42b5-adc5-c91569281f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeef6fe7-5d27-4360-9103-1d85cc1462ba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a4ae13-6304-4827-a2d4-4e9e0973a9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e158129e-12a6-42b9-aeca-7d4ddd979e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3220b9-a7db-45e3-ac60-9e940e3814bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa893e4-a0ea-4a12-8576-37a34d6ea373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5699b148-8a0b-461f-9067-873039f70592",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0901fad-cd5c-4042-84cb-445a9a61a9ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78992692-101b-4b06-a208-6b712ff15cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cc830b6-348e-4fde-9c42-68197154431a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "671480c0-b53b-4fcf-9dd0-a22567fe7108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47220671-d164-42fe-86c3-48d933fbeeb5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d13f83-e4c0-441b-9e7d-1b6c9b29a76e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec319a7-d00c-4858-acd5-045c10c89308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4529e5b-2694-43fb-89bf-983870cfe1fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b7519f9-35b6-4d35-bb7d-48a4df6c18b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d3c030-87db-4089-87a0-de0ee63878ce",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cec223-c13e-4df9-bd36-4ab47c2e7215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e837ac2-8fbf-4191-bb67-a56246393cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a843e3c-5f3c-42f1-948d-e361afcfd13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bcfe04cd-f9a8-448b-b9a5-bf97beb7f94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52050938-6802-4d66-877c-30b0f67690c2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ccd95e-3cc4-4786-8176-e89e9b4ea08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d3396e-5a34-4ccd-826d-644d8c6ccc28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd77f8de-24b6-4e18-9bd0-e47817a92b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f23c40-c1f2-4e7b-9d83-b26fddd473dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e797af91-e4ce-48af-83a5-4156d362835c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb40e65-0d36-4c7a-a970-ef15807cf1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c12f92-533b-4144-bb3b-5f8c045a6de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8d640a-06c2-4b3f-9bfb-f0b6768e4a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "578daf05-1782-47f2-8469-90e0a4f83a39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b1a88d-0def-46c2-b1bf-b373ea8d542c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd250df-af66-45e6-9053-80338b81712c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb814981-96bf-43e7-af8c-ad647d2a0d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ffc289-c85a-4e9e-b817-0ea884911b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd4e72b-7dd3-42a4-be78-84475b9b2cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb12fea-3ca1-46d3-9e06-b0015a19e35c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a8ac18-d8f1-428e-9375-6ba21f8bdcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a589ec89-44d5-4eae-8a5c-676fe657a1c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce9ae7b-e09a-42ab-9e94-d6c50d10486c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca3926a-7bfa-4691-a69e-36c07781aeb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60bdf164-87d6-4c11-872b-aa100e6e079d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa70468d-7a76-4804-9d30-74d286449587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78361de6-cad8-46b9-a3bf-5b1a027bb3de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7fa9ef5-02d1-4163-8f26-10a868d75fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca262d2-7b75-448f-b1fd-600b212a8401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc86721-f059-44b5-8521-104581d35688",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64cec19-ddc6-4d8e-b9ad-83a0e7bff025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cb064a0a-3e44-4d30-85c2-5fa80c6691f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a1eedfc-acda-47fd-a2f7-f5ae65bf318b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ceb8bc-1a2c-44f0-ba6b-28771354f03f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3f3406d4-7ef6-47dd-bca4-dcec9d63236f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c07c2be7-5f69-46b0-b9b2-1b0f60fe505a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b4208-87c1-400c-9c45-ffb6ff49ef30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2807c845-261a-423a-b0da-13c6c00d5a74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d91afb3-a195-451f-aeb0-e7c1ca22d426",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a90d016-deea-4d1f-9f77-79230be85626"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e57dab0b-0ce9-42f3-91d3-ad67e080dde9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be54d57-9e20-4ed3-ac90-d733da571569"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "148e8268-371d-47f1-ac53-5ef5cfec2e9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bae1beb4-c158-40f4-bc83-558ca4dd1434"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ecfab66e-ec07-49ac-875f-8712964424b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc708e0c-9bb0-423c-a916-709f49f864d3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1cab851-f488-482e-ac25-74c40e745a1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f9d8f5d4-94e5-4378-b5df-ea6b2ce23f69"
                }
              }
            ]
          },
          {
            "id": "7c44bb4c-f744-4e82-8fa3-7395e65265b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3e2d497-55da-4ebd-beda-aa2748234562",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d6c90f7-f22d-4e94-a0e8-fa43e04c55f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5748eba2-b86d-4b30-b65d-0f3b356e4faa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51f04fdb-c87d-4be8-a75b-a86ff249ab22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "30a9a867-8e44-4e59-ab90-2138f98a21a6"
                    }
                  }
                ]
              },
              {
                "id": "5b868bc2-2154-45d2-a0ea-5d1c56055d49",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d25282c3-e324-4ffa-b0c1-cb702ce1ecd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "519c2fdc-858c-4597-b8a0-895334e88aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bacae78-83f1-4825-a52c-1cbf8dd5e1ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "508e71c8-f11f-4b7f-bdb7-fb40449f72f7"
                    }
                  }
                ]
              },
              {
                "id": "99c39e0c-b9c3-449f-8af5-ee1995153f22",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59e96386-44aa-46c4-9125-1d3a089d96fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0baa711c-3e8d-46e0-a49c-e3d525a0b714"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f07ffdba-d8d0-4e96-bbbd-7b517a67859b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "acf596bf-e709-4073-b171-5b8405f89298"
                    }
                  }
                ]
              },
              {
                "id": "9709155c-e954-4ca5-83ff-e7e419911c54",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78cdde01-1a28-44ce-8135-129f07cf72ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71b4f4cf-80cb-44fc-ab0a-cdfaa07f4b32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7665e4ee-c61e-409d-8c75-8434b34dbc4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "33bdb1a7-cb43-4d96-b98d-b001153134d1"
                    }
                  }
                ]
              },
              {
                "id": "d2bb8e61-bfa0-45a6-873c-6153e07d2101",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "35860f09-cdec-491d-995b-c1e1591963d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a9b74f3-c1f2-419a-982a-c3acde8c7aba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f047414-d50e-4b52-9d32-8bb6addbfec7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "296b4bbc-6c94-4bff-ad16-25ae047cfdb1"
                    }
                  }
                ]
              },
              {
                "id": "2e6f6a8d-17a1-4323-8eed-cca4f3a33b46",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2aff7903-a3b9-4692-bd8c-fd5f96097298",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d1917305-b855-4cbd-aefe-a8cc5a940b52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf01b0cb-45b8-4cef-a6ab-1c7f2f73b390",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ad1c28a-9fdf-40fd-86c3-0d4241fbac36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e18532d-007f-44cd-abf1-6d8990c4423a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "757f5c56-209e-4c8a-8643-de736e16e061"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "23062bf8-1e89-40e5-9674-034c4b51b725",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "061e177e-f92f-44e1-8076-332bfc82cdd6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "509eb32c-4bd2-443e-a62a-ca0a176adf26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "700a9f29-6c5c-4ba1-a8d8-c674cc467c21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1e2de5f1-2d47-46f6-a70d-e968d947618d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3c12842e-ae00-4156-a540-7519b9915d61"
            }
          }
        ]
      },
      {
        "id": "5ce79927-7681-457a-8c32-e689ebfb4eff",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d494eec7-6c8e-4361-a61d-18d246d8227c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0c257927-46f0-4f29-9dd6-25acb2bb788a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "871a571b-00d6-4cfe-80e5-0f9308c34554",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b249eeb-7108-47c8-b7ad-615ad8ebf1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c15f8aef-791c-4f9d-a7df-9ad8072a7f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2594e-7e67-4d97-82db-29415e933a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "af489160-e186-464c-b8b0-6874ee9e2610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6ea59b-a674-4369-b3f0-1d682c06ee8a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a533a450-d50a-401b-b2ce-c1a513682b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f62371-e605-44cd-b7e2-8312c872642f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f26ab0a-fcc4-409d-99e1-0440acaef64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a789890-a611-4d9c-9347-2f50b0203bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8434f2-0a51-4209-a30b-c51fcecfcfd2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d643e33-559e-4e56-8a67-62753e5503c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b132c9c6-1885-4261-b04f-54e9bc89d472"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20190964-8466-4890-8875-6a2663b1574f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38363a99-16ad-4fc6-aba3-88767f21bbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e18b78-039b-46ff-a5ec-08181c9fef7c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375f95cb-936b-4a91-9584-38de91971fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337402cc-4043-4c9d-9137-f272e68e49f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba19ea9-09c1-4f3c-a3cb-010a7be8eaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "412023b2-aa27-425f-a7cd-2400580eee21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f50a27-3f71-41a6-b4f1-d60a75f88948",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8aa673a-e204-497e-a794-795983925dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c2ed06-ac60-4757-b937-b8622ea54d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0ebafa-55c6-49db-a75c-0efe6667ac54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7687cb9a-52ca-4562-8ae2-07a32153f431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84ab2e6-37d6-4ad8-a13a-51c254491d65",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b409991d-58f8-4357-8f71-cd8d598c401c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07eb9604-9103-45ad-894f-09e408204eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce6e7ca-1d0c-442d-9502-756cca0ab6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "304988bd-1eff-4fb7-b746-3dc5530b5f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2c4422-d200-4c8b-b604-e2b74ae03b95",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e337f9e-1c25-427b-902d-646a2d6de23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f78fb127-309b-4004-939f-bb01637fd5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bba807d-1ecf-4ab0-af81-8f07f21ae668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8a9d8e7-9c1e-4c88-b955-aa094a9ee88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2cc590-b6bb-41f5-9618-4bbfe71a345b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4079d986-9eb0-4a08-9e60-84305ce5f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a61b2b8-56b9-4855-a780-9d019743c127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408d76d3-b694-469c-a3ae-c72b07cad765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d989237-c957-4870-8271-cbd2ceba21d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3abed8b-6855-4236-9c9a-822e836176a8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67a197b-8d07-406e-8004-d4d30b5c3edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac12c704-9e93-4a5c-8a50-081ca334773e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213f6b2d-f4c5-4dea-8127-46108bbdaa42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2944c35e-c28b-4ecc-9869-9ca300f09785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e6a425-5322-4e74-9084-108ce7da4f0e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f7ac48-74ff-4591-be06-0dce2575319b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ed930c-f881-4102-9bc3-4b19dfa6f1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541f7182-a692-464d-bb7a-b810b079565a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c329344-a0a3-4775-9987-db9123d1e56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8657bd3-6065-46d4-afc9-eab8efab1e06",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9c924d-a785-4515-a208-da8fe1a743b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc5281c-9451-4e09-b53c-224d3614468c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e67542e-d8d8-4dd0-9b3f-7b7819d65ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c24d35d5-f249-4b6e-b28d-88f2f1c3871c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dd917a-9425-4134-b23b-b10dc5ab50be",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96e0fea-f2aa-4b94-b0d6-b2e0a468203b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6137fc-13f1-4167-8eee-81d991e56794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35edda4e-6724-483b-bc10-3b13489ab2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2dac9ce8-d912-48d3-b1f1-e382d21e5820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb65a5b-3dee-4f9d-9703-45b172c3a7f7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c5fa76-376b-456a-be79-e3bc6861f75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7542f72c-39e4-49ab-b930-57f11ee879ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802bf90c-0864-4a1e-8fe3-8b18652f7936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd4fd3c-e54c-477f-ab64-9770d0920b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8a4e91-dafe-4d83-a3b0-d386e9529cbb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8264ed81-17c1-4b7a-9c8d-03ddd15d594b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5dbaec-dbc0-49f3-ba0d-f9289fb299e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2754ff21-f5cb-4e34-b0e5-0e704e56eeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a525eed-54c5-4c85-939a-3f75ad91d3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4bad56-2704-43a2-8045-265a0dbb794e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893c8d74-0a63-4798-8fd4-418f987fdd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180698f4-be4b-4d37-95fa-80d8f5b3fb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4eddff-1bd9-41e8-b69b-9e7aa3341edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d988a9bb-16b6-4eb5-bcb0-573cbbc815e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9fef5a-8a78-4776-82c4-c3da4c1467ef",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b027d23-ceea-4eb0-9e5b-324c840831b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d3ce03-4fcc-4f3e-98a3-fdd0d4962e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8aba45-612d-4830-9531-798c3cc3f4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "73ec0adf-12eb-486c-bac5-d44069f9f5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb9cd55-351c-4230-bb35-6cd4d0c5a21e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d62b8e4-e039-4c96-81e0-8fd63a6030d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a317b3cc-20c9-43d8-92dd-2327b9da8d59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f9d7b8-390d-40f4-9879-15173e9daadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3a759b-6bd6-4ad0-bcbe-872abb4270a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c018bc-0786-4c30-a511-d1b3a47c4acf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e62a746-1c6a-4729-ae1c-2cd030dc71ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d037f75-29c0-40bb-96ab-a0f5df1cab70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67bf651b-cb0e-43b4-82bb-f0ccdddcd79e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3926a1ee-7074-4fc3-b797-e163ba61dbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0955f53-646f-4d40-90a4-c31a5ade41fb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95611b6-0c84-4ad9-865f-46651915ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d070c0a-4831-43ea-984f-f086f8ef7180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169b1d39-068d-43ac-b72f-b09fdc085efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "196f6f29-89b7-4a6a-ad67-1a12b73f2d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b84d8f0-26dd-49b0-b661-dcce7de03eb7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a7a792-2b89-43f0-a85a-3b02b6fbf670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244876df-529d-410b-8451-4f17f7a96ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6457e25e-9ac9-40ec-8dd6-3c73a2c9cc9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8739f7d7-003e-4e2d-b695-97b47ca50417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcff0980-3b6a-43b9-891b-6c3367433cee",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086d0014-a493-4ea1-abdf-8cea3edc10bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf386137-7adc-44d5-b52f-13d8fe7f601e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a5777f-e2fe-4619-b8b7-357b78017321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8170f7e3-83de-4694-ba34-f1eda87fde99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341fb85e-0049-4f3e-b9d4-20af5ad92921",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a89f446d-0c73-448d-b4fe-dcbf4faa6c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab05de4-bdcb-4750-84a2-8fc1b8e35c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01dd467-3949-42cc-8801-57f6bf7d9ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9ed10d7-9285-4b3a-b338-40ca011f0b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e901160d-3d87-407d-8c59-0fe4e75191c6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b99a36-4b89-4422-8e9a-13261f922175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a23aa9d-5ac6-4b4d-9076-986da7433aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a58bcd-4cea-4f9e-bda0-8c0ed324f3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef58c143-db03-43ff-9cac-86014caaa3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f68bd6-6c04-4477-b3a1-60e1d768aa50",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d14b73-dfe9-454b-93aa-7435e9dd1885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a0692ac-274e-4b98-b0e4-892986f536e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d076b1a7-2f67-4fba-97ed-69588c1871eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a1d9dc-f78d-41fb-8ea4-fa40bb7205ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085557b2-a9c1-48fa-89ee-3d4ffca94a88",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "069c86e1-831f-4560-b099-a8a6782e2c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0adddf6e-8f54-4bb8-aae5-419d8bedc5b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8b0c16-cede-4af5-b298-c08110eb9900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9c7288-d5cd-4eac-8d94-49233fc13f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0fd8fd-f94b-477f-85d5-9223f10d77f2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d4bf251-5b5b-450e-b536-a480611916af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764775be-cd18-4a5b-ae8f-e3757e8dd4c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa83be02-970f-4122-9ef9-1865e1d2c27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61e0303-40be-4425-89dd-c302cdf2d5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c4d88e-a68a-48ae-b37e-7058bfff2cdc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f0586d-df04-4dbb-9a3b-fb3c530ee90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7c18dd-0e90-4e28-9812-26356f572823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d515b682-9025-4a49-83ec-fbf8fbd0110d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3edd8b48-a34b-44c6-a537-1975b9d57008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab8082-45e2-4190-aa64-97711606cb65",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739cebff-469c-40a2-bb15-f5f927bfa7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1e1dd40-a1b1-4ebb-85a6-b9e238c27111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1584e62f-c26e-4499-b85d-5bad5bfcbaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b0c162-95db-4c00-8f46-6f965ca88149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ef6981-e9ee-4472-8caa-97a60830160c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1920ac29-d2de-4516-8b12-7772f2a7f10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ecd49c-450d-4945-82d5-56e2c79c2973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea147d0-5fb1-4424-bd0c-ac9f71d45627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ccde976-69a4-4059-88d7-351ee824130f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7ffce28-902a-4b1e-8688-1e03a73a7b87",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a7f900-a3a0-429e-b440-31d075cef654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c834308-faf8-49d5-b62f-c307044ec21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35cd253-5ec9-4227-b867-d27b1b06cccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e45359-7cd4-4e33-9d6c-0688844d5ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea9f747-fb57-4284-9c0b-c4f8da4752a4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2be26ac-5386-4706-bc5d-e2ada3c7695d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c032149-aa78-4b5b-8ca0-10f2cee4d1f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d671962-1a96-4818-b723-410fc0151126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07adbe44-4f55-4f92-9500-ffba8f050c59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5408a1eb-42bc-47ed-81e2-956dcaddbd11",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5612c04-4a8c-4a67-a584-512ea0fa542a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74154144-cc08-4f87-984b-6722fae60a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2fa6d7-8cf6-4990-b94a-720ffc6929a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f04dba9-b2d6-4595-8e6d-9d654f787254"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73ca9431-c028-40b0-b981-9b0e864aee7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7d1a623-df13-4e76-a7b7-f149b71fe391",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838fa815-6546-4ecf-a0c7-007a13249d73",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d163c347-7532-430f-940b-50d6606fbee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143f1558-4104-4e3a-af5a-3ad56f85aa36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50395612-62f3-4a89-86f8-3271c9f8953b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b51af292-f8cb-46bb-a463-af7028856607",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe5dcc03-addc-42d7-8b83-caf292412a11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6baaf239-b161-4359-8032-e76c0090c58c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3491d975-bad4-4b2f-ba49-7e98790f9fa9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d1a2705f-8ae2-4118-a01a-491140b15c12",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8c4db40-7a67-4994-9bff-7eb8751c86de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f47fb98b-347d-4203-95fe-79baf3f09fc1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4a147ba-3142-480e-9a5a-838fa0ab572a"
            }
          }
        ]
      },
      {
        "id": "d5a505fc-f92f-471d-b6a0-ce2a66cb759a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4c76b8f8-ef8f-4eb4-97d2-0d7ab331d6e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7afe5dd9-cedf-466f-8513-568169969586",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "113dd4e6-40f5-44be-8f6d-26226e319268",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a95e0c-3598-4251-a1f4-ae3036b77b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451fc9d9-d96d-47f0-b591-5e090d5e875e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de40e036-d9b6-41ed-a738-c3445988e0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f839e20-95f5-4252-a2d8-571fe8284dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d940db9-72be-47a5-976d-f5ef9697c15e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b47959c-8de6-4a0d-95c2-a70617a178ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1cd0de-636e-4b25-9749-33ff42ea2d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b6732ea-f9ba-4d7f-9c01-31a2e1cd7083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1c0e34-9e54-4099-8530-7c9c114530da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25925a3d-c847-4df0-aeca-fae00bf51d97",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0766484-a005-4752-aecb-f3c2e24f6280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d807164d-f5f7-4ebd-a2e2-a8886784efdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20093168-2a19-4892-9a72-123ae925be70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9106112e-c89f-4f65-94df-0272b0fff14e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358475c5-ede6-4bc3-97a0-f097443d018f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0c433d-7a02-4bb8-960e-0f6da8c61a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c53f07-7f2d-484a-8ac8-bfe5d4cf318b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24051c59-f8cf-4a4d-8774-51df0bc1bc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6288574c-a5a8-4ecf-933b-e029bbe2cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417d31ef-b041-4236-b566-12fadc85cab9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c426e4-26ea-41ae-9b42-7bdd2fa59bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113c0676-950f-45b1-a347-c171eb5c1c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae0ec74-4db1-4c5d-8c4c-1174b380c516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "97890d42-ff0d-442e-b610-0ce82b1f7bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2438f246-036d-417d-84a4-090ca48d87e9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a8acef-1740-4ac3-af21-b2f4a02c6a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f874dd-91d1-4fbe-8b3d-32a8efdb6db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632fb49a-86d0-42bf-8b7b-fae2b95b45eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80278431-e65d-44cc-98e6-4114c07241a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035c95c7-1ee4-46b3-8b40-f8cbfbf9b08e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976f47e5-b790-4da3-b954-d5427cb28581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7303965d-fe94-46b2-9dc4-5968226ec658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa1a814-998b-4694-a1a9-048fc9ff0bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "498833c7-403f-4f0d-9131-8aa8ea5e874a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2713babc-b92e-4aad-9d7e-8e6072885a51",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e8e60b-6bb9-4071-aa32-cfa849502f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c77ee0-ae1f-4553-b836-9469ac2cf114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a59df7d-4431-43e1-823e-bf0973fb4a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "308f323d-1e36-4d07-bdcf-39693b76b382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6aa83e-a925-48a3-afbd-e87d008d2622",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fe34db-017c-4a47-a3f9-0a526aa04bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f52e93-46b6-42a6-97ce-3045b564f211"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab0e46-6c04-485b-81ce-3f752aa7e767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98b8145b-8c47-450c-9d01-235972eea758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646e70a9-6d93-4248-b777-c5ae7c259f08",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95565100-a4ae-464a-8bc6-d052ff2fb07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43fe9cc3-9f59-42c4-ae94-261f156d3c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39370fd-8a28-4a10-9110-5ccef695d8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab69d329-7a12-4c50-9cbb-42e7643ddf0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c9718f-a6eb-49fc-97e0-e6b36009b767",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b14f667-5f28-47da-9cc6-9bbb3f489ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dbca5a-2a76-4933-bb0c-214903abc33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a977105-8d42-4fd3-8a6f-2ae62eb8b4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0eed3bbc-2b99-47c5-849a-5e0c9b2ebe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c73b06-3a7c-44b2-ba71-f4e2107effdf",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac35bec-9866-4767-a108-4c51a467735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c1913d-adc9-4f62-9aaa-08a9cc353a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3234b01c-9d6c-4c82-950a-10b3e80f1572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de36f37e-c8f3-4d08-bcad-a8bc8247bcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64366e4b-b561-49ed-9b7e-3efd25341d19",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ae22e6-11df-48f9-a9c7-8f3366598edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601a1b33-a5a6-4571-955c-fa15cd71c659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234a71f2-96cd-421b-bc13-c796e017ca04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca90a13-8750-4530-93e3-b3d0cf0d3ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c683d706-fa8d-4b5d-aeff-52154b9ab6e4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9ae5a3-6347-4770-848c-ad400374268e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ebd8fc-2707-4a0a-be30-1510ac65a0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8668a5dd-8a3e-4d12-8e92-1ffc8621bde8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8066b6-6282-4cf6-b4d9-c7b2589da3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47762ebc-9819-4ec8-a5d0-49d0e3d63ed9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923091c0-4a39-414f-b3c2-a2004fcb329a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eaa673-963d-42e3-8132-163396d34fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09313aa5-ecae-4a61-a5b1-465d32158708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c4c7ee-af6e-4768-ae9a-ed93b4f4d7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98d89d9-52cb-4931-80ac-0d150b5e8d7c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e310d680-ca26-488f-ac06-f8b7615ae6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99241a20-b998-407b-bb80-7fd887b3fb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f799a74a-1ece-4ae0-a4a7-9a820c69c112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "da7d8523-f147-4542-b79c-9e217efc8ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e14e343-4504-4375-81f3-bbc7ea1d13c4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c596da-d93e-4887-a50a-99d48350cdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdff091-e2ea-400d-a6d4-74ca31cd9c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ad2e2a-2698-4df9-946b-3f2fcdfaad2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f13a76ee-29df-442b-9699-7619826fc839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e884525e-9f26-45f2-943b-ad141d637283",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba73e837-eedc-4384-95e3-7a2acaa71a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aabde42-05b3-455e-a05e-8bb3ae30387e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bb4ef7-68d7-4e11-bb02-876c51f13ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5797c8-7f2f-49d9-aa4b-a1a9f037ab1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1d3ac9-88ea-41ef-90ff-7ceea69c6940",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de685234-f7f3-4b6b-944f-7f1a96083569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56835c3-c890-4735-8028-5c84a378e9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a427661-6685-4107-a0a7-c3ef6289ba1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29adb4b8-3ce0-4030-b705-180c2c8b0ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8322f9-aaee-43f7-9e17-9be9b11af2cd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8ba3f7-c284-4e8a-a1d8-064fc6a8b3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36518283-6d02-4c46-bd50-8685d4165b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41015976-552c-4dae-afdc-71ca2546b5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a395c502-b814-416f-a02c-919d0b5c2859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd068ded-141a-4563-ae9f-29e3a798c1c6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fa5643-c1b6-476f-b277-a0545043a1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be4392b-f57c-4bfa-9ec3-3cf058672d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089d7706-5e41-4fe8-9576-1fef9c72cd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "974faa3f-bfcb-41d2-86e7-e623aabb0172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6838c7b-2546-417b-826f-823f13c8ba09",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff61deb9-c635-4b5f-a7bc-c9c05957824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b19e219-9871-4925-8455-bc3e99fba63b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc417c7-8f79-4aed-8762-33fcc56ade93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "459e83eb-2dcc-4ca7-ad09-3f893a90a9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae32a9e-ec3e-4950-8bb6-d2ce3c167a88",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc2201c-fb4c-42ab-b3aa-41c6c3098a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0949024c-24cf-4eb7-b5a4-90911fac9c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fde9e2-2295-404d-a1c7-7799d3f0aacf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "588fd6f5-f1a3-456b-98e6-dcfd3a5ebab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375262b2-f693-4df8-a270-f508c5b9c33f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f13126-5fc7-4f38-9a7f-cab859d07c1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7652f4dd-a38d-47c1-9769-162de4275e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263ff463-cb2c-4536-a9c8-6409a93e3fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "479004a1-d257-40cb-99ca-6d176e3c5e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d971225-b418-4e4e-a384-8cb25cbdcfe2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c8101f-3873-473f-b1d1-98f5453343dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0607eb-d8aa-4f0a-ba9d-725729079ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68de6c65-a39e-4dd9-8774-88b7bd61a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6e80d88-f424-4bc4-9da4-8c8dcd930433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad39b4a-48cc-4f54-82d6-bc150879b02e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86cc8dd7-dd0c-4e0a-8e5c-74ef44d00be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b126159-01ca-4ad7-aadf-8fcf464bbe0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceeddcd2-914d-4b6b-9bcc-7873b21de7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "064a4c29-52b0-4111-8457-9587834dcaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9facde-2e25-43b9-8ce3-38b719d6e2e7",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4f95c6-9a54-49d5-945e-8b81cd9f9cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c27d2c1-d7f5-4933-a165-874ae9011d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f17eb3c-c992-4906-90cd-98f2a5193bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61885448-fa67-45ff-bf21-cc2938449f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d800dc41-40e8-461a-9920-3ebc4fb3b78b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d762bf6-5f1f-4a3a-9893-abc5392fb33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1015741-5076-4ce1-8a2b-dc1231cbffdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18288953-f4ba-4250-a8aa-145934bcf869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24c7fb1e-fe61-448d-8ed5-76d9cd157c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57975ef-1af3-4b10-a009-875be5215d2d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7a3d11-8da1-4542-97be-772d7fbb4353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cf5732-bc37-45cb-8982-bda159b95e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0aca83-0470-4279-a465-590939cb48da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3226a9-18ec-45ce-9a61-e9ff09a1356a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1600639-8b76-419f-aae9-e530bfdeee98",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533400c1-83f6-4d0e-9ebb-9509a81e5271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a8a8357-a2d1-45d2-aa90-c413032da408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a55517-d7de-414d-b7cf-317e7ef12bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f40310-83e7-448d-8608-74db4d3f09e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd6a20c-9caf-4fbb-b8a6-bb64cc30b67f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e5ef0d-f111-4f02-b121-70e6d4bd0c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264960ea-7183-4397-b384-352c9ad129c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af468a01-0b93-49bb-931b-2dbf31a8e8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37631ea8-67c8-4d84-b90f-826ee58e7f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "315e2c41-9c0d-4e4b-9232-0c947b0c5c4f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf19855-ac1e-4a0b-93d5-a5f18a9d1dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355a917e-90aa-4de6-b901-a5e8afd8531c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04942a42-fde5-491b-bc24-5e5950efbace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1e0e64-856b-4cb1-8293-1f2c0ad33ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b42676-5b8e-43ac-b551-10cbe1a3e173",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff29cf3-7532-4301-86b9-67c72c94982c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aeab3a0-45ce-4c79-8dc9-37c4010b5331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30389b07-3d1e-4b73-9371-72b74ec504f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b650c2c-977f-4d7c-bf5a-5c4c762496aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938d57f2-d451-4fea-a103-51676e85c4c9",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491fca7d-faab-4911-abf0-d277299b0d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df4ad650-c399-4652-9ebc-1529aefc6823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48940d6-87f1-48ec-8e2b-5f6ff16772d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71801199-87b3-489b-aaf3-ac0f3d4c3782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3690788c-a0de-49b1-9857-8909f438dfe4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad02e6f6-6e40-4982-8b11-ebdc2c19034f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8a7ad6-7d47-4370-b9f2-080a58d2bbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff7145b-429d-4472-9a29-bf77bfc6a949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca77619-cbac-409a-ae05-56d73df20434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07147547-4ccd-453f-91ca-8e13142cd3f0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d273831-5222-4da8-99d7-1c010172437b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b54c946-d7fd-4055-823c-ef396ca11908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49584003-3e86-4634-815b-d0d38b980d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35dda187-5c8b-4316-a7f1-1b7cd65f62b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db38a96-6c02-4b61-856c-2fa2e6b5fbd6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be35ef14-ed9b-462e-9406-b204c3c590f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5436bfc-e9de-42d0-a783-228563c36618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5236c554-6815-4eac-87ee-4abc3b751d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebf8e75-eeb6-4579-9613-9d34e3c274df"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8060da39-00ee-4bf5-af87-80598627c06c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d431e74f-844e-4481-83f1-d5db7239ae93",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf7c300-2c03-4168-8021-9a8dc3ddae53",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "83a2664d-b8ca-44c7-b8e0-6146430cf771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4346a509-23a6-4b54-b4cc-46f8d2671946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e13e68a5-6892-47cc-aa0f-6a5369887be6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25352a3f-9025-4894-9cbf-a3ad0ec63ce6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9047dc13-274a-40b5-af88-cbb32cfb9742"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba2db8be-7bba-4d95-8630-a79f064edf9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "667767b8-664f-426a-a086-8021121e835e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22daf709-2300-4420-9a6f-70a7b1464d79",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9607f198-a799-4fcf-9ab0-b28419cd33ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "850fd5aa-d710-4590-aaee-4a6b6f823797",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "953f931d-d88e-4251-aa72-4614ff44e36e"
            }
          }
        ]
      },
      {
        "id": "269031aa-9000-4d20-b3f8-f7122ae9b926",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "14b07105-7bfa-45eb-8f9b-09a823194de6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a051a6c0-4a1c-4042-b097-adae1386a52f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d32b1c4b-9de7-4d2f-94a6-bd301e647800",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034a700e-9a14-43fa-b44e-abcebc08024e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e152277-e426-4a43-9f81-ce5e344a3435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483dab89-6a8a-4e18-8815-04db1b1e66f6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec37b257-0fba-416e-b314-f4d4a960ae3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4fa4155-cad9-4def-bef7-a0db76f1343c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57157f38-6ec5-4ef0-9087-bc7c85d232de",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d6471-62d7-4502-9769-3031c805fd8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788f31ce-9202-4e98-bfe0-19370434379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46fdd5d1-2df1-491f-bd7e-14f4b5c0a02c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1d15f7-7a98-43bf-8c6c-29737b013847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22363a8-8c00-4d1b-9b92-18c71bab3c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f760441-b975-4f4d-8f5b-69de2736b316",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da55c035-c980-4c61-a0e3-484d57308d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381b83fe-3d89-46e6-8498-5867fa952150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e57dd26-f732-4924-acc2-6132d055607f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75c18da-6865-455a-b500-27ecdb483d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412385c9-c1af-44a6-9f16-c3381f092835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ff3c12-f72e-457a-8bd8-4e09112b8bd7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc457d7-907f-406c-a5d6-1113e5ba5c57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b7fc30-fa23-4748-86e3-c725bc17d578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573e6a91-aba9-4166-89d5-3da63eb0dbca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfc3737-8acb-42fd-a158-09dc8c9097ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd77e9bd-29b4-499f-82fb-b324a571a8b6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7484b3e-d6ec-4b2c-bf41-231cb2407c85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88fb2420-b337-4f1f-9868-bc0c1b361550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe52f573-2105-4dbb-a2a6-a259587c8348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75ec20b-4fd8-45f8-9aad-476b0822ff54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a1629d-b4b3-4d91-9adb-29eb69b8010c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17ad7be-9ec8-4a96-bc7d-df903686383f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a68870-6afd-4839-8c5f-a584d4f7d9b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82c060c-8290-4aff-814f-1c64631b030f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d566bb-75c0-4ef2-866a-73de1af6c6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524aadc0-1b45-487e-ac27-f3828bf2f9ef",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cd17e0-32e3-49d8-9b16-184e1e87771c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eecb75a-8601-451e-9513-aaecc52426c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddb20c6-d3b3-4b3b-a933-2e825331a90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495f547c-8852-4db5-8c62-80229ab567ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb7bfbb-fd58-482a-baf3-8c463aa88b8a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fcb8f1-1fa3-4735-bf12-2a2ebb1d32b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f62d5b-f685-4ee9-8208-23c5d206d227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4451610-97cd-4c7b-9e35-94d1e8e1e16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad66977f-f275-4b4d-a992-f07857159ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c5b4e5-4473-46c7-ade0-6efdc04d23e9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "192c41e7-bfc9-4890-915a-2a8d2ba189a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f07917d7-0629-43c5-83bc-279044bce5ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac4296f-35a0-4538-b3b2-1b6c2c8b294a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7effb72e-2e06-4179-99a1-b70d19f4476f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15231c5-4f48-4beb-81ef-55d219f02153",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9621c9c3-db2b-43ec-8657-4db4a33a4657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "656d7f58-e59e-4be0-beaa-4541d8ffdd40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfdaa84-5927-4dcd-a178-90434dd22830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72391317-fb33-4f9c-91c5-1da131136e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9870e105-1577-4aa2-b7fd-e3300ddeebd4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52c4898-fb9e-4018-9fe4-1303ec122f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8e1f57-652c-44a8-a723-95230c6e79ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55aedf79-63f5-43fb-a3d4-4cf5cd37cb97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c772d3e2-ea01-4f09-8ab9-789d633b32f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe187c5-1451-4ea7-be42-145cd02a8a53",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca023781-f5d6-46c5-9bab-1fce513f7f2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662209ad-afc9-41fb-b90b-42a959958519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8616df3a-019a-4432-b24c-4bff194bd6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976643ba-20c8-41a8-8487-78ce50ddcdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2b12fa-0400-4ff6-9131-b9c8d0d6dfd6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934fe26b-aca0-4fbf-a771-ea4b1df2ee28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49aa36d2-7925-42ce-9615-4ca462d77aee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a873bc29-0c97-4f24-8543-70f6c4f73198",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ee41b52-3aea-40ad-9000-fcf68b65101d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b6db97-9d2a-400a-9f2f-ae8641ef04ae",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5b2631-0c8c-4a24-9042-c684a53e8c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59155798-f906-4638-b622-5bfe3051220f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee116dae-fdc5-4762-ae1e-4519ce45b2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a4c1be-3849-4f1c-8d84-2000985ec272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93856571-f2b7-4692-8ab7-42b764ecf675",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd720158-534c-431c-b303-e36eb2f39997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b8e4f4-d405-41a0-92eb-eebb4ac079a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7726a51-ada4-4cba-a7c0-172b2f92590d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8538190-3d46-44e4-a7ad-309fd4765331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc52717c-9d31-4bcf-a44a-fec9a94a9c06",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400c40f1-4293-48e2-8736-51bed4d39395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7830d0e-d0c5-4461-b538-cccfcc7b9510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c5dccc-b756-4644-a231-9eddf0638958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df17884-906f-4816-a842-3158d249d3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70479335-ce39-49ee-88bc-e4f78b0e60bc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e2e1a4-28bd-4952-be58-adfcabe82ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5a40cb-4ec2-42fa-a1ee-620767767493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4acf8e-3899-451e-b28b-d4006bf1068b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40683de1-92aa-4a36-b741-2655e2169aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396065c7-dde7-4867-8401-8783a1d33250",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53b05a3-c694-4a99-8a79-77605dc85353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b5fe88-d8d8-454d-832e-7274e3ae9b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b399d4f5-896a-4f31-a5bb-91eae347ae8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfc7ee1-243e-4611-a30e-741e6ccd7ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c43680d-d7ce-4ec7-885d-9a6a403224d7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba3b89e-e384-4066-8450-13d4e61abef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b995f9-fd45-4cbd-b452-37f13ca46757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13f38886-9728-43e6-b807-703871c9c4ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ed3557b-80cc-4206-8b37-12f8d78c14ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "178d5736-c91e-4f1e-b43a-26a64b4d4330",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4194979-6ef6-4aac-8ebf-69ec6d72a3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56b7469-c567-44f6-916f-211659419448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9bf4c8-9d76-4e96-8840-4f0aa1d5d565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba502531-d233-40ca-8ab7-4a39ac8f3cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8fcf08-3290-4515-b077-edb952985ee8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71e0c61f-f56d-4bb5-b291-a48021efda8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae3a13b-0411-4298-afb7-b36ad642832d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ff8bd3-db2f-4821-a102-5c800f92828d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7042d29e-1a0d-4370-a161-906daa0a2f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e46e0c-cb93-4e81-b815-c4d728086ed9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc28d9ca-e47e-4839-87fa-f706c801148a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36258c18-9a6c-40d8-9910-5a67475d2dba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0313839-ccff-4441-905a-34bc8f94ab38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef8bc86-e51e-4d7f-9be0-9e7de68c82a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef0c81f-6eac-4ba2-850e-4e18ce962f8f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3dbde63-72d3-4694-87c0-6ec8beb2e27f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d90d1e1-8138-4f48-9c2c-09e002a51408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39cba0a-8375-4a49-81af-4584f995a674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59257cce-3067-4c68-9b46-2e12873542ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bbfe85-220f-4ab5-9e4c-28ec49d0026d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae790c64-5da0-47ab-8618-874ae918d340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adb10707-b869-4480-b7e2-c32e5b1b7bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f12044-f795-46a3-8ff0-25751a9f4027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808fff3c-f6d4-4c5d-8af1-7399b838d3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d70f86e-48b2-47ae-bba8-ea2eb39d112a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "386439f6-7bb4-46fd-a09e-c969ead06a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4c6e5a-c627-4363-a4eb-17fc323e222f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25b5c93-c36c-48c4-a354-6c4dc49c5368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4afdd2-6d07-4f73-ab8d-ed43e6571741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46cd78de-3a5a-4ba5-b281-1f86b0f7db94",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc1d80-4abf-442c-aa6f-97644883504a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f6d64e-8ccb-4bb0-81ee-1d93abc74a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e4f240-885b-4899-ad2a-dc518b091af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43bd96e5-2d10-4a69-a1ae-05d8ccd11d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10dfe1b8-af53-4aac-b461-ab4648da051e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a4e1397-acba-4f3d-b484-de0be00a43f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f69e276-c65b-4481-a22a-d39e692aaa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d77880-489b-4ce2-a7b0-12a2de194075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85111947-3fb8-482d-bb45-fdc592a70edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d52b732-1509-4f05-b57b-fbd157b30d46",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b02c20-5bae-4060-92c4-ff4ee65ca78c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8328ef2-10eb-4760-8eb0-ede320c2de0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e66b73da-64be-4df0-b4b6-36e69e5fdf6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a1daf7-5d8e-4e9a-a85d-e058362a5164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f4c25f8-bf6f-42e1-9559-a08a34d94cf5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402e6d99-0d82-4cd1-bd67-9512ee2f2f66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8756209c-20eb-4cfc-969d-b76abfb8b4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d68e37-3c54-4662-bb9e-6ee48d180075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc911b1-09ff-4e44-bcc4-3299032f9e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28dabea5-ef86-4804-849d-d22fe5649c34",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f38d29-341e-4acb-be64-7fb51cc28828",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc24944-40a6-4d5d-8ae6-b28eaddccfd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc14ce1f-cc6e-4558-8899-ce59cb4f419a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b832fb-44af-44c7-96da-04d029a4621d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e80e29-a560-4d8d-9d12-7d032d5f091e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f1bc29-e281-4ef6-a4fa-3a4dfff1106a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a621274e-8f3b-4bf5-9cfb-ab941e330f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8df8b9-e772-460c-8465-e153e8939d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f92a06-d1bb-40c3-9f54-3d58df59b80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b073e0f7-e493-4c56-b51e-2164eb471f2b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ceae092-0b0f-45a3-ae70-789c41a0163e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fe5758-db0e-4f79-9330-8b65fb0149d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2268df-60ae-4fc9-bbb1-2d2d9e672f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79c605a0-e2c3-42b9-92e1-96e83efc35d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911a28f5-d053-4533-a5d9-2c4771219bb5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc7184f-e90c-4610-b2a5-0cb070cd95a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b396ca3-4334-431d-91ae-ee16212a8d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe072c8-d288-4908-943a-27f54dfec567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d274399e-2dec-467d-be40-b9dde5a32f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24eb45b3-62a3-42f3-b2b5-0f5fd0b35d84",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86d7677-8b96-448f-a4fb-a69a3df5ab0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c77ef9-0d4c-4eae-95eb-d85de4f877f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5e7b38-57fa-400f-b2a2-0341b0d5744f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a464e1d-21f1-4f91-86d4-523544183234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b37c4d3-aea7-4491-b15a-2ca8f3aa3a3e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074b1a98-5469-4fbc-9855-315c5bb12935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d40d62-e87e-4107-b642-d8fd2b4e8ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49151a14-9b18-493a-8b79-3848331c194d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58eec9ae-f505-4e45-acb2-52d2a3548c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6d9c05d-eb67-4254-9934-613276fd7d35",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cf3d5f-36a6-4e2e-8816-82fbf55ef202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d943a14-52ab-459b-abca-ce02b94ecfe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aae8fdb-1c28-48e6-b616-c942a20e59f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfce64cc-a3d3-4971-9eec-58a16a831b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7757f2-9f51-47d5-b2aa-53520a8be306",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223512cd-c794-4f95-96e8-c0bb83ff9893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38b059d-2525-401d-8c90-4ecc4bb226ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771104c1-7c1c-44d4-88a6-270b62ce0c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5280b038-352e-4c0d-8e31-1bfa357401cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e72a489-0fe0-424a-b83e-841407340c2a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b75608-5ee3-4349-a7df-fdfc41682951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16556427-5985-48ae-b21d-452ee55b90c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b0d902-4808-41e0-a5ac-2446a0efc816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af3c25d-82a0-4c02-8292-270e6f59ee95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb10f9f-03b9-4b4e-ab0f-41cf855b842c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1988d6-be73-4296-a310-13cc02c207be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2fb4fef-293a-4f60-af9e-6f3e90acb34b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c929b742-aef0-41b0-ac52-38bb266c379e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16587c52-5db9-4f97-a76a-8db9964c4e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250a2488-418b-47f4-b283-277bd487ce87",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48cc5bf-8783-4a71-b08d-474e1c65647a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f89f26ee-2c9b-4443-a7c8-4007aa5fd79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4bd842-afd7-411a-badc-05769ee74397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30dc8aa-9f8c-44ea-87a3-730bd5075cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9651cd0b-ef02-4193-9a73-f73ffbf6a3ff",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c360876-34d7-4e0a-a00e-a8415a081ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3134b14c-1955-407b-b5e2-3b3d973e11b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09ff7e4-8e7d-49ab-8698-474ad920a020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b8eb152-adf1-4cea-99a4-e675f4c936fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c56bea-eb5b-4d3f-b364-0a3f6a86d77b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a83942a-b434-43f7-acba-446f932dbb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970a2710-0dd5-4cd8-8206-97817583c97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af22eaca-b0ee-4625-8079-6494831b5740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7b063e-dede-46b4-bbbc-01c16b3c8353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf18ae6-ed57-494c-ad70-7b575c142b23",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b06e161-71a3-4a26-82df-cc07dcfbf0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26448f8c-8294-4dfe-acff-10c9c002e77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f72d82-0bc7-4ae9-9b44-38c2eb68d4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4e73b52-2c11-409d-aff7-2ee304c8b6f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a37a7e7-c0c9-4ca2-8bfd-3b9ba2c32b42",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d383b5e-d265-4ba6-be21-443f7165c096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7339e7b6-d4e8-4103-9b9e-808b70b34b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8a301e-bb2c-4516-930e-911518f85beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf81d86a-adcf-4807-ba20-b2efbe0e0503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c9b610-a7ea-4d91-924d-784c818bc5dd",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1801f5-2775-4706-8aa2-46ba34a252dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21530798-511e-429c-bb78-968cd5ba3d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c386a05f-a970-4090-97e1-2e0927476d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927e30f9-c14e-47a2-a349-73e1d59ffb1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "121f844a-2ba5-48ac-968c-e5e4fd4bd575",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f86f92-fc72-451f-a568-6fdb28c3982b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0c9523-7eb8-433b-955a-baf0fd468fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c09521c-b89a-4005-9454-4099a3db68d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681e0f57-ac08-43f1-ae5c-7fda2eeb5849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8de5fdd-dd04-4933-8a18-13867c3e712e",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8794a165-1efe-48ab-a02f-6c98d40e7cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1812556-dd18-4d11-87f0-6dca6aa9eb83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "499c2afe-e0ae-4ceb-995b-675ed5e3daa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76d57f6-f944-479e-ab80-80459f9bfa24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e834d2e1-5c36-4182-9d06-73bbcb034646",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf32eee-51cc-4fdd-aa2f-40f18f688d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ac71c01-2a30-4c50-baad-7afa37096e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dfaec5c-9b19-478d-922a-6aa0c8c8cbf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc98df96-4df8-4605-b2be-6eb0fd0c35cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0647e889-7562-4935-8b62-9021305af728",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c94381-9da9-4127-aa4e-2185d0faee64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c1528c-f02e-403b-9e28-92cafe43d30e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711347ff-17f6-4d09-9cf9-78efe6fa3435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "035d28b1-97b8-4251-91f9-78d80d8210d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32898116-c4ca-4bb9-9183-25185dd602ea",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f1bd7c-af3c-47ad-b1e5-4d051a456a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064ca4de-23cf-422d-b137-f8248996ed78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be5d127-d37f-4df4-9087-2bcc54a1c0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6690d1ef-8b63-4638-9080-6753c891851a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301c8541-2abb-4d81-883c-42eaff40b7f7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c901d0-706b-4492-9f43-e140bc3ebc75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08bb73ea-b6dc-4e91-ade8-3a399248c534"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938b880f-cb40-4712-bf9e-c7ef3286e4d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1070a2-fda0-4a4e-bdbd-6d525072266c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b11e97-f0e9-41c6-acd3-90619ccc7257",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2de5190-3c48-4cd4-abb4-f9184a929887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51daff5a-d450-4af0-b103-22c636b7975d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcd5850-7c7a-4260-97c0-2ca7284219ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ac655d-ca9b-4737-8329-8400542f0522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0ab06b5-d11d-4164-b955-8444517093da",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0242b99b-1538-43f4-9844-d97a286bd04c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb48b0e-8414-49b2-bd88-cb2c8b70e45e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0856a185-7f4a-4487-88f2-a3fe829e8a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94af6f19-ac4d-4c09-8793-ee6ad4e8e61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f35508b-96b7-45f7-965b-86f53a1e8abe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb7beef-2287-4cee-b4fd-911715f69759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212276c6-f7d8-44ec-9d8d-d61a7c1f0f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b01cd22-2e3f-46d8-9ce0-40fd7df46311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c948802b-82a3-47a0-ae6b-b4fef9f9c2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891995be-7668-4c3e-b0c0-80be5245b901",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5619561-8acf-4b51-966b-d1a58d53b9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2563c18d-0980-46fc-bc36-9022a7a1ce46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a79a2b-b236-4371-815b-355f06195935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c79460d-d105-4f33-8337-aebb401cf911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48de52d6-6d34-42ab-bc20-366722558a80",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d5cd28-31f5-4686-ad9a-8d76d482357d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b2249e-0755-483c-a422-f5b5fb0afc94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fbd0d69-78e1-498e-bbc7-434711fd2ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51dae418-e35c-4dc6-bbea-8d7ccdd91563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1038e0c-2e10-412b-968f-ba8a39d34307",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db97025f-1bd9-4ade-a635-6f0e2237d726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760ec17b-d466-4aca-9f34-5a3f87f7d157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874d449d-6f26-4ec4-beed-58f61129061b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e6724d-9b00-4b5d-b314-cd1eeab1b8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1446198b-6ae3-48a4-ba51-6f318d64bd9f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c980db60-c327-4a9f-87c4-c046d4b1ba77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b61752f-8ede-45cd-a79f-dc764dcc96dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e393bd6b-81e1-4cab-9bb3-40b290518e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b6843c-b0e0-4927-bbe9-a5bb94419e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77f6c86-3d09-4bd0-ab99-5f85b31d5f23",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4b1a83-2c18-4e18-a4bc-380793999d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50d4b74-e079-4c49-b35c-38da8f05b190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89978020-25ad-4c99-92e1-533b4f335d84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481b89cf-b49a-44f2-8378-152c4c07b8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7641a2-61ac-4a6d-b362-7f537b30fbc0",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8236f753-b0a8-4bca-b268-4080e5d4b796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3355c2e9-f5e4-4dfc-8c19-5b7c7d9a90d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cb77ae-692c-4ab6-a013-ff6f460d4e2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f52602-b7f3-4e3b-a1f5-d5919a8914c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6bfb0f-9ab6-414e-9c0a-7b2a5ed13e85",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d1df72-d42f-4be1-833d-a1fdf8e9cb20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c396147-d9db-40d5-a3e1-b185455f55eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd327d3-ad37-43a7-bae0-cb9427228b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbee52ee-cd6c-40f2-8b22-7b68899f4939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d0e64f-d9ff-448b-8c29-74105cf880e0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41d6458-d854-4e1e-8627-e7484c245ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c095c5a3-cbb6-44b1-af37-c9bf7215c177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e2749b-d844-472d-9407-c6748095a440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30433183-c80d-42ef-8ee7-d65aa9d187ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75090b9f-a44c-44ca-b2e5-055b6aacb274",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4c3e58-4b16-44f2-a9c1-6c7c96582889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "999355e8-111c-4b45-9a37-31dcbdcbe9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369ede90-5737-409c-a601-f8145127d098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47530646-6d99-4dc7-a73f-99ac981bcf57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89d9a35-ddc7-431e-868b-dd5828f40fc1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cca95a-d8b2-4d07-9b1e-95bd027057ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "571b16f2-9c92-44fb-a290-e8facea7d95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ddb0d7-0f4a-4734-a1a1-a8e5b504f899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853827fd-ac0c-4d28-bef5-85097a9b9165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ae1fbd-9b7a-44fd-a961-11e65163f5ec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e35a97e-d155-44dd-9dd4-67950f2c73ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0bcc713-af85-4da0-a108-31d79d7e1ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a703044b-ea13-469e-8711-c155697ab74a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b05b4d5-7b5a-4433-89bf-eac2f6b18ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3105f3-2f36-4684-b49e-798ad4c98798",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eace8f6-82bc-4457-a854-3390e40cffcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df1ae5c9-6c6e-48fe-b7de-ffa4d2df8d87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8244cb77-8a29-420d-b240-3a9450a8e23e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e151a28-bcbb-42c8-b323-bee1f27546ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072ad556-59b1-4f4f-8bd2-efc4eb8e1fa5",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1a36d3-c517-4c8e-b100-e512739d570c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ba2c85-f1e0-4b80-b19d-8ac75764a44f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ae34c6-69b6-44cd-93fb-4c6d21cd691d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ed78c2-42a7-4554-bc2b-88139d18049d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f751e2-fa37-4574-88ab-2226bcbba2b8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aec8a93-92a1-42bd-9407-1d8a8bc6b2a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d5ab2a-029b-453c-bb66-1637a1306b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97bb53a-40af-4d1c-8d94-78c777af668b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ba45d9-9e81-46e2-95f9-ebca94fecff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0aee95-1fcc-4225-ba7f-bbf2f2e3466c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f12cc1-2cc0-4c19-9736-c43a865f6706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3473737-3ccd-4a2b-9d3a-a8ba2d8c5d4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f4aa3a-af01-4d04-845c-48ea2b05a19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c2a770-510e-4352-ae1a-ac0b373d7713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbed79a-abc6-4ce5-81c8-6e870e9333ff",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197560fe-eaaf-4715-927a-b43a0ff5f09a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f243991-d796-4d90-a1c9-90508402d306"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5429eff-05da-42b2-aa5d-bc52f7f6e2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c8acdc0-9eb8-47be-875f-e56c9c7a8ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd2d6897-6a0b-4b24-9f28-386790d8fd48",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a49c2e0-b2af-46a4-a8e3-d3bf01043e8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a6f1b76-d431-4476-ac08-8fcfc7cd4caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a8cfd3-7ff1-4c54-95c0-564ab341de19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbd83ac-4ccc-4481-8ac1-3e0870f65df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec6f8d5-a30b-4c8b-a9a7-33ec0ee4bc93",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219e1ecf-d8e3-4a45-bcbc-a096ac20b742",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edfe5ce3-2bd9-4367-b725-d90f95a5a6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1747c7b-efbd-4f98-bc0f-8ba60053867a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696e8e8e-17d2-4065-bdfb-ea3783ddf9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e55e75e-458c-45d4-8983-bc3bfdf9d34b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3427e5-e683-4ed1-bdbd-5a5b1457dd6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a960ae2-eec8-47be-bd9f-36992e21e927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9947962b-6363-44ab-8a68-2acba72d3c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043bee7f-5f13-4915-aba5-28e3757d872c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba9b374-5a40-412f-9570-536ba67d1464",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3849322d-e46b-43bc-9030-b41eadfd3bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cac70de3-79bb-472b-a6d0-8a30ab875b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d36e40c-2176-4a07-8169-d2fc401c2e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fd94e7-1957-4dfe-aa33-30087c434de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc79fc2-568b-4aad-bd71-a19d9588c6e1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aebdeb6-cf1b-4b3f-b84f-c5a745c282c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d43bf0-082a-4f3a-b29d-776e9c945392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3ea504-dbc9-47ac-a0ce-1d7c6ab1bedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3b6a08-9653-4a47-ae4e-8dbf400afe04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b265156c-539b-4403-ba2e-722d7d5c687e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8454409c-cd0a-478a-91af-970275600108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "928ea2e2-bc0b-4868-add1-dc058c2086ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a275a1-22a7-441e-a040-a3d8767dd4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a91b15-5880-4bd8-8724-95e081cb3e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1a14ae-899b-4fe5-a619-2477b29d38ac",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71cefd7-100c-406c-b47c-4e923f819d36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b440ba8b-52bb-45d9-b625-384454edb1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf4099a-7f51-4b06-9426-98f19a62e2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977890cc-8fb8-4869-8e77-eaf2f37eefb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c35988-a271-497c-a93e-474660912cb9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a10bcd-21e3-4717-83b4-ae17a834901f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c2ae00-64b8-43be-93e0-8f9c9270e8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc2b398-6711-482d-a5b6-8a64edf1e532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e961e0d-c360-442b-b0ef-b2df87aba125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4867d074-be12-49d0-aea9-372d6949bcd2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd6126d-4ee8-4997-bc11-006cd2f28c74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f669f6-1f33-4373-8baf-67c5fcc0728f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b290b9f2-9129-4cb2-9db9-e553624ca4c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44796ac4-2de6-4681-a6ce-b491f258551c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04e4ed29-dcd4-4a79-9ff5-c16fc30642b3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d8561f-9506-4753-ac99-616acd70dafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b211de80-3c7f-4ba4-a190-86ec03e4c13e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf794ae-1e83-4b68-a6bc-11f33adde59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8aa1ce3-2b85-42bb-baf2-99bdd98965d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8788c7-10ee-47f8-b735-12d48020bf69",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7c3c4a-cee0-443b-88f2-b90c7d58d21b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecab49f6-6775-4963-a18b-238d7eee42ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff18a89-beb8-4b44-9ae5-cfd95fa759ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "988361fa-1f8a-4bde-86f6-3c51d52e7746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230401a5-2853-4220-bdf7-0abf5c62c291",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d45bab-d4af-45cb-a08e-f8c14302a841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88078f07-d156-4719-bdf1-06e59be69d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbf6716-ed90-4583-baa6-7f7907845a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77a9a5f-3278-46a1-b178-4541310a071d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7098e5d-e662-4d75-bed0-ddfbadec58a5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76acb73b-96b2-4c00-9d89-f46ac501a20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65be3244-bb8e-4beb-93bd-3ef8c4ade894"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "307ad7d5-0096-47c8-b4b0-5fde0df5399c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f52fb9-d05d-42c7-9aca-fbb4b7413aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e09b482-3c86-4749-b1e0-86f5d87ef7d5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21345b0c-9b0a-48a1-a321-665085584620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af0b7ae-3070-472d-968d-7b063a023b9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "043bc6cc-3bfd-43f2-8dc1-4e0e67ba287d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f13f343-663d-4260-8b92-2502820453b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96860c2b-f26f-41ee-baea-4533a634ac37",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8379e348-7843-4b96-a9c3-c711904a635d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fa8c351-e863-4e9c-80c0-c9d0035bfc36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5116dd0-3ba1-4cd8-a144-857bdd222926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b9c8ea-31fd-402b-b032-5b7ad5e360c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e0a728-8371-4222-8081-c47ecdf406bb",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f34cb08-f030-4181-ae10-73b0df74c8d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79a7f65-358e-4b66-9c2d-2aa2add484f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab88ef88-3f31-4aee-be63-28c38a6fcfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341d681e-2385-4a9a-9583-fe2cba8b1ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b7f332-6ed7-406a-8a6e-15ade8550c12",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1396dd1c-5a95-47a6-b056-59096bc7c8bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd089c73-a8f7-4658-b128-de196e7ec0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b9ec7e-74a4-4ecf-8338-52081a85ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192d5889-306a-431c-995c-3f121c108d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6bcfab-1b35-4c4b-9595-9622ba2aa9b5",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee06313-bcf4-4795-b2fd-0aa636288c4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef6a3f8-563e-4a8c-8df7-fb7b02a8fca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21de384e-c008-44c9-8640-e97679b04173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce532985-4f41-4937-9c80-b112e10cecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0902acd-f152-4b8f-a992-1d5b4386e88d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79ff63da-91de-4a06-b8ef-2318352f3887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271ffcec-324a-485d-9d65-b3071eb76b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845752f3-31f6-43c8-9420-607df6923f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d09a1264-e7ca-4e2d-9233-73f9dc6d5171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7d324c-eba8-4a64-b0ab-38184d858d8b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224bbf70-3c57-4d08-955e-c6f030bab49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9200620-795d-4814-80f5-b36a228dcc4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e1bd8-d793-4c5d-9e3a-b204a6ace189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0738c98-ad50-44bf-9dd6-4d9316d2f51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e95ac9-ec82-4946-883d-5bb41228327a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d26ca12-dc0b-43f3-8b0d-e9ac4ac9825e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37741b86-5354-4aab-ad48-903cddc72703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3888aef5-59bf-4f7d-93d9-7487029abd53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da0ad14-1ccd-41ae-bebf-509ba8b9466b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e11d40d-36d8-4e12-98d9-3d8d33129a89",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e1b1c0-043d-4a9e-9cba-e2d06a223a08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0b8e6ac-93ca-421c-bfc3-ffb0b616fcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b28626f-3df8-43dd-a861-23eb82455db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9e582f-c4bf-433d-9156-249e0da3d2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835a74d2-123a-4d70-9426-31a392140fc8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7241a79-508a-4e97-bd8b-8fd4026b5d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ddc0c37-83f9-4c69-b50e-adc95efa0762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ac663f-9652-4da3-af8d-c5d40281e5cd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670495d4-ac46-494f-9ee6-4b0eaecbcf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350590f4-e756-4cba-9f0c-67a64027765c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f56d34-89fa-486b-97db-ecc5f5a56f45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a8f6d64-9023-4fc4-9b10-f39fda1b4be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9ef3321-3af4-42a4-b54e-4ac85c82d25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7a47ac-fbd4-411a-b5db-b4fe9b78c3c6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c99dbf06-7f8b-4fc7-b13e-f9171f9436a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a7b746b-71aa-4967-aa0b-e0a6333f983b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9587e768-6574-4433-a444-bedc0bdb7645",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea95f869-3c9b-45fe-a16b-af2910315497"
                    }
                  }
                ]
              },
              {
                "id": "a0a42a16-d7ff-4366-8f50-99524b302c56",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "93c4354f-5989-437e-a6a4-d72eaba49422",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a82acf5-f4fa-4ffb-aacb-5ca0d543b4d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ed2cd22b-7e05-4ce9-a92c-813582b6ff68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e641f0c3-be58-4565-9e96-526cf7ee842a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d5b9e6b-b2e8-42b7-a1a5-c429eba6a4ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db23282a-f643-4e02-bd85-03df6a1a9750",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e069d21b-c421-4ab7-82e1-5afd84ae35ba"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64cc1d45-ceff-4c09-ac45-4a9aa44651b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6866cf9-3f8f-4758-87fa-159f3afe81f9"
                    }
                  }
                ]
              },
              {
                "id": "57595288-59b6-4884-8482-4e45da8f7992",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "32002672-652d-4214-a717-ae574678594c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa263d29-ea17-4fe9-8ea4-621769b0147e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e95fd67f-cf9f-4e57-a62d-6d876b6126af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac76968-1997-4144-9ebf-a4d39bc982cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ffc625-2654-4018-baea-81861ecaf6a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5c19a5d8-a4fc-4b4e-9457-1439cf82a855",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e6014b34-7532-4a36-9c7f-df2ffb34947d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e06985e-9f08-42b1-8eb3-95b3d27858aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "55d005a1-a515-499c-a1ee-bae195e63ded"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c44e60f6-99ee-4e4e-88fb-0117833667cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f6264bd-1122-471c-8d10-6bb800be5b91"
                    }
                  }
                ]
              },
              {
                "id": "b0ceba82-9704-4874-b4cd-2f18161726fb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02c32868-498e-4e5f-ba3d-98ff4fafb8db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a475df27-4183-4f8d-a6e1-cef34845beff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55d71867-7cfb-41fb-afc0-14f4742e5c1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a74399b-8259-4da7-a961-dae5177f8f82"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9a18429-f234-4cca-9d5e-4aec7e7abc2b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5e3e21cc-4a64-4ddd-9623-cd1641dcb288"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d65e00d5-4034-49bf-85a2-71585e6e1c5d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b2e1263-49f9-4629-ae98-6297be061716"
            }
          }
        ]
      },
      {
        "id": "15b49091-5f62-4d98-b5c1-327014a46dcc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f7753de6-a3bf-4279-bcf4-1cf017f52274",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6fe13171-b8ed-414f-9a1c-8d2907af2a08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5fc0919e-7476-4ca3-b8ea-d2ffbe236dd3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c100eea0-c68d-440a-a08c-a0134611e365",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fdaee319-e574-45bc-ac86-df7d08e9548c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c545e4f-2bb1-4d78-b4c1-d6faf17f70af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40a0bf3c-db33-43dc-ace3-480d0f55db1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3646c79c-050b-4434-9151-55ddbd38b231",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9be8d58-6769-4701-b351-43f26a26a7ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52cb3c34-ae85-4f0b-9d28-8f5755b8ea9a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c01d3a1-d69b-439c-90a1-a1abb646a45d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17b68215-6a96-4a9f-894b-bfdd80609361",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9b0fc6b7-713c-4632-8c86-0f689e740065"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f5a33ce-bd73-46b8-9f08-2abcf7bd06aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d792edd-af6e-427a-80d7-8150218793b8"
            }
          }
        ]
      },
      {
        "id": "f047e71b-dccb-49cd-965c-6a23285ef441",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "20a181db-6667-4416-867e-70e897361142",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f79dec2-ec19-4c27-8019-d87d3c8783bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8e1db3b-81e6-41b7-835b-d955240746bf",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a40f77d-2f53-4b00-ac25-c66149ca27c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d37bba5f-8fcd-44e7-908f-8534c2183944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee2382-eaf8-4187-a3fe-836fd176c978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b268558-4260-42d7-ad6f-63fb41e631ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6869bb93-c1a2-4351-8f94-0daa9e02b37d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a351a2a4-9fb1-4686-b647-0a4bf5cdf258"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b172d458-4fbc-491b-a14d-f526826d6d83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74b91401-662f-42ea-b60b-830f23fcb2e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ac919ce-06d6-45c1-b04f-c2c3ee5bdc88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcaf3a4c-d9bd-4343-885e-7aeffc66683b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2e67972-dfd6-4b0b-ba1a-4b3c7ec02370",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec7c3c6e-2488-437d-a28a-1c18cdd45030"
            }
          }
        ]
      },
      {
        "id": "ff8cd237-fff4-410d-85f1-3a9714b9d626",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c7bb5a09-be3e-4e4b-89a2-7f17dfa7c7b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbbbbe77-094a-41cf-9be1-9a652b3a676d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b42ca040-05c5-4fab-b02b-70414d4781c5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d11328-a474-4e7c-b1c9-d6b0330e1062",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "084e8f76-6f12-4130-86e2-8febe61e6ca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d14984-7e3a-4f23-a1a7-74bded5ebb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "009bda23-7eb7-419a-940b-69628a436c8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92305bc7-dec3-4ca4-afed-542472539ad6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51f3461d-89e6-4365-990a-41a79e95943d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a6507ae-44aa-4be4-bf3e-aa4d02f65f3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63551785-de7d-425d-8908-02d936ffad68"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6a3d9af-e55a-4bdd-a2c1-4dc17373ae0c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11f73193-7ac8-43b1-a76f-47aa57958c02"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "628ef033-d514-4d3d-a16b-0b35011e496a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ab65b23-ea0c-4ca2-b06b-64442c993182"
            }
          }
        ]
      },
      {
        "id": "41390eb9-0c61-42f9-b47e-f9f1af5951cd",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e51dcd97-43ef-4411-b121-162003e9ee65",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "667809e8-5ac2-404b-af79-d84219796ce6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "71dda8be-6ea2-4a2a-980b-34fd7948d72e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9f84f840-f097-4364-9a2f-565c61eb83d0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c18382b9-5e7b-4892-91e0-6cde8fbdfa0a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 227.23943661971848,
      "responseMin": 21,
      "responseMax": 6237,
      "responseSd": 661.8395983451807,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688690945232,
      "completed": 1688691021568
    },
    "executions": [
      {
        "id": "00be31e3-7f43-467e-8253-4f88a4a0fe7c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "00335a8d-2d93-44f0-b417-c1c119fc4cbe",
          "httpRequestId": "ae4de1cc-5dbe-44ec-85a6-6ccd2cae0617"
        },
        "item": {
          "id": "00be31e3-7f43-467e-8253-4f88a4a0fe7c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dba84b9f-bd6b-4b6d-b427-7d1e7cbf40d7",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 0
        }
      },
      {
        "id": "b1818ead-9d3a-4c79-9f1f-db666a08bc3e",
        "cursor": {
          "ref": "55b412b3-be0a-4399-9a06-c992adbdb48f",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "32204574-7167-4ecb-ba83-01110e26637d"
        },
        "item": {
          "id": "b1818ead-9d3a-4c79-9f1f-db666a08bc3e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f3c5975f-743f-4439-8338-1524dd62ceca",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "7fd4855c-7353-456a-be40-940bd172de15",
        "cursor": {
          "ref": "6ec5df16-a2c8-49eb-a337-69b93255d9f6",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c4012e6a-bd7a-4b52-b951-06ccc9515d98"
        },
        "item": {
          "id": "7fd4855c-7353-456a-be40-940bd172de15",
          "name": "did_json"
        },
        "response": {
          "id": "8237c442-2d54-4000-873a-fd0844b6ba86",
          "status": "OK",
          "code": 200,
          "responseTime": 511,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db9b52f-264b-475c-be09-723df0f4a34a",
        "cursor": {
          "ref": "4431f2c9-ec06-423b-be2e-36c5add9afc6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eaa81221-f32a-4876-b286-2497a72f8c75"
        },
        "item": {
          "id": "3db9b52f-264b-475c-be09-723df0f4a34a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fb72b87-8ad7-49bb-b322-181f3c48921b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 997,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3db9b52f-264b-475c-be09-723df0f4a34a",
        "cursor": {
          "ref": "4431f2c9-ec06-423b-be2e-36c5add9afc6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eaa81221-f32a-4876-b286-2497a72f8c75"
        },
        "item": {
          "id": "3db9b52f-264b-475c-be09-723df0f4a34a",
          "name": "did:invalid"
        },
        "response": {
          "id": "6fb72b87-8ad7-49bb-b322-181f3c48921b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 997,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e163884d-2fc8-4855-a2ca-1a28d4008415",
        "cursor": {
          "ref": "f24f53ef-73ca-46eb-bebb-38cfc8dbbcff",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ea1047dc-cd80-4482-ba01-fd94ef788837"
        },
        "item": {
          "id": "e163884d-2fc8-4855-a2ca-1a28d4008415",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d11597ff-d262-4dfa-8a4e-765aaf394e29",
          "status": "Not Found",
          "code": 404,
          "responseTime": 62,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1e050e-de43-42e8-a1f4-21a79a7b1f1a",
        "cursor": {
          "ref": "7bc6324b-0b5c-4a00-ab07-ce9582a40cde",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1a18e9cb-b18e-426c-9065-5afd5b95615d"
        },
        "item": {
          "id": "7d1e050e-de43-42e8-a1f4-21a79a7b1f1a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "72af555f-7374-4aa7-a910-c80550aff2c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91151a15-2bbd-43c7-88c3-ed49e635d74b",
        "cursor": {
          "ref": "30918359-e17c-40c6-99e9-f3cf0ced81b0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "96bb9d91-89ab-4cf5-985b-50de39aa7898"
        },
        "item": {
          "id": "91151a15-2bbd-43c7-88c3-ed49e635d74b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bdf81b5b-ae83-4481-8cea-dedf66e40148",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e1fc4e3e-331a-4aab-8987-2c9f8756246b",
        "cursor": {
          "ref": "7106dcec-ce2f-4545-936a-34457576f9bd",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ca5c6af9-a094-4c29-8ea1-4bae4dd142e7"
        },
        "item": {
          "id": "e1fc4e3e-331a-4aab-8987-2c9f8756246b",
          "name": "identifiers"
        },
        "response": {
          "id": "57f756eb-a0ed-4e7a-b02b-c0eb209fec41",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d068c7-6bf0-428f-8f89-da14b69cfe48",
        "cursor": {
          "ref": "6d1dbb61-9dcd-4faa-9ba1-3f8d22d476a4",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f23fcabb-40a5-46f0-ac1e-12759a9d2fa4"
        },
        "item": {
          "id": "80d068c7-6bf0-428f-8f89-da14b69cfe48",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "61620225-0172-4ec2-96bb-3ed952c2c930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50884081-5e37-4b35-be7a-0631c456e3f5",
        "cursor": {
          "ref": "767c15eb-39d6-4ab6-a5f9-605eab96bb34",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ef6b323b-8a53-44db-b2ed-45377248d1b7"
        },
        "item": {
          "id": "50884081-5e37-4b35-be7a-0631c456e3f5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "18f217a4-4b80-46f4-ab3c-5f1d825335b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad829df9-e7a4-480d-ace2-0187d7af2b94",
        "cursor": {
          "ref": "297562f8-49ef-4ff8-9e50-7e4a8a4c85b9",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5167b593-6f57-4c7b-a979-6f372df7c615"
        },
        "item": {
          "id": "ad829df9-e7a4-480d-ace2-0187d7af2b94",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8a2bdc87-f13a-4b69-ae8b-727ce43d4693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b32564-32c2-4712-a527-16069961f861",
        "cursor": {
          "ref": "4e70db55-b075-4ab0-9400-f96277fb8fe5",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a480e541-e55d-4975-9640-8114dc093ea3"
        },
        "item": {
          "id": "e9b32564-32c2-4712-a527-16069961f861",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c7658b9b-7fe3-4c21-ba38-d06a11fd86cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec470ba-2df9-44da-9ddc-6f6931bbcece",
        "cursor": {
          "ref": "60f55bc1-dbb9-4304-a87f-6908d14f1733",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7dac6193-5919-4b74-881f-414cfbf86824"
        },
        "item": {
          "id": "8ec470ba-2df9-44da-9ddc-6f6931bbcece",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dbc066af-a7da-4d91-917d-671fc55699b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7771af51-3fec-4b3a-a114-e776cb94bbaf",
        "cursor": {
          "ref": "c753268c-f6fb-467d-b9c2-6f805e5ad730",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "197f1221-f6a8-492b-a338-71c5da2d0255"
        },
        "item": {
          "id": "7771af51-3fec-4b3a-a114-e776cb94bbaf",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "d60aadd6-3cb5-432b-a100-c87cd9e13a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec042f4-3284-46da-97fd-9b36e0cd0bb2",
        "cursor": {
          "ref": "603a7b75-6e65-4b64-9b61-ac1659939c79",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8606c931-7a82-483b-b804-7f3e212a81e3"
        },
        "item": {
          "id": "fec042f4-3284-46da-97fd-9b36e0cd0bb2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ba19cede-5b85-4354-adf6-0a9f65f16e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d544d47a-b8a4-4b23-a450-652e5108db99",
        "cursor": {
          "ref": "a4a53965-4836-4746-b69f-94783aae8251",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ee1a165-1c21-4a6d-963f-237ea0fc0d25"
        },
        "item": {
          "id": "d544d47a-b8a4-4b23-a450-652e5108db99",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "2b471d6d-e23e-406f-abc0-70af502aba42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aae4391-14a6-4f10-afe4-9f6b4cf88a3e",
        "cursor": {
          "ref": "cd04fa45-59fe-42fc-898d-92cc0ada6a50",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3deb4003-89c3-467d-b3c8-be1199c0c9b7"
        },
        "item": {
          "id": "6aae4391-14a6-4f10-afe4-9f6b4cf88a3e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cf15e268-ba38-4766-abd5-f2d6c9a52635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ffd12c-787b-45b1-abf5-1221ff7462e0",
        "cursor": {
          "ref": "ec3c7841-79d8-4131-a92d-6d057cd33176",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4f48e8cb-ba13-4f95-a1d4-d31246babef0"
        },
        "item": {
          "id": "38ffd12c-787b-45b1-abf5-1221ff7462e0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d29d5687-c73e-4cde-81b5-a7c5c5c96ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6315a75-7c62-4929-ac7e-32b157950064",
        "cursor": {
          "ref": "157c431c-0f14-4669-bda3-4ec5aa5de162",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ccbe462f-0061-4273-a9a0-27f75a20adba"
        },
        "item": {
          "id": "a6315a75-7c62-4929-ac7e-32b157950064",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "937e991b-c82f-4f0c-8c54-450aede8da11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311a7282-d1b2-4f0a-9387-26ad0e48abd3",
        "cursor": {
          "ref": "668a1e4f-5567-44f2-9509-46e92c1d282c",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "06ffb221-8320-4ce9-84c1-e8269daa9a15"
        },
        "item": {
          "id": "311a7282-d1b2-4f0a-9387-26ad0e48abd3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "691f7719-7adc-4ba2-90ec-07ceeb52c651",
          "status": "Created",
          "code": 201,
          "responseTime": 790,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "5cca8043-6f30-42f5-93fe-0cfb6451aa52",
        "cursor": {
          "ref": "b6b3ad88-3b6d-4bb2-b249-43fb830a107e",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "59009725-510c-438a-9da6-f3e3c3402e21"
        },
        "item": {
          "id": "5cca8043-6f30-42f5-93fe-0cfb6451aa52",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3d278a2b-c1c1-4cb1-afb8-d605603f92d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7825e2-cca3-4867-86b3-f5ae4f0cb432",
        "cursor": {
          "ref": "6a24add3-e4d8-4f6d-9de1-526b56c96ff8",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f1fc907e-05a8-4b4c-9275-b8beaa156086"
        },
        "item": {
          "id": "fc7825e2-cca3-4867-86b3-f5ae4f0cb432",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b4894863-ca2b-4390-bdc7-0fcd0a21efff",
          "status": "Created",
          "code": 201,
          "responseTime": 6237,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "fb5ccf33-b3e1-4a26-9a17-a7ffeb987b57",
        "cursor": {
          "ref": "100ac8a9-bf9f-4800-918f-ff9f0c121597",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "abb34804-54ed-46c0-8724-a46c00b565f1"
        },
        "item": {
          "id": "fb5ccf33-b3e1-4a26-9a17-a7ffeb987b57",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9ab84db3-f11b-4940-b60e-e0c2d1361e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d9c926-5e31-49fd-8c67-d4323282909b",
        "cursor": {
          "ref": "9d457c87-a19d-4348-85ef-38719bf44d59",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0f746e1f-57f0-4c30-8cfc-058faa55159b"
        },
        "item": {
          "id": "f2d9c926-5e31-49fd-8c67-d4323282909b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8bdff43a-ddb7-49d8-8bff-100f6cbd880f",
          "status": "Created",
          "code": 201,
          "responseTime": 3343,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "754d5132-f62f-4b9c-a2d7-238494dd6dea",
        "cursor": {
          "ref": "7af4eebe-2cd9-4e70-b1ce-dcb914003fed",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f4b89e5e-f773-4247-b8a8-fc7d9eea55a8"
        },
        "item": {
          "id": "754d5132-f62f-4b9c-a2d7-238494dd6dea",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33b15c34-680e-4f29-97bc-22bf4f403655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75dd323-ff50-4b2f-b9e4-493152acff51",
        "cursor": {
          "ref": "b78278e2-8967-4f06-8f3e-afc6b94eaa52",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f04f0f4c-95b9-4450-b141-9e5eaf6d9e10"
        },
        "item": {
          "id": "d75dd323-ff50-4b2f-b9e4-493152acff51",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "56aa77bd-4ca7-4282-bf7c-64ddccc7d421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfa4e5c-5568-4fd0-afbb-0bce899e2cdd",
        "cursor": {
          "ref": "03d0e1d6-17f5-4e26-a734-2206927b787b",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c9df0f6d-2d3f-4c5d-8e4f-67780c2c5721"
        },
        "item": {
          "id": "cdfa4e5c-5568-4fd0-afbb-0bce899e2cdd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3c3f41a2-b323-40b9-a1c0-34319da5328c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba486927-3baa-4cbf-ba03-de5afdbfde3d",
        "cursor": {
          "ref": "600e2e5f-8979-4a85-bba2-cb0696ac5c44",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b886d342-1c64-4625-8e18-2ca77c833830"
        },
        "item": {
          "id": "ba486927-3baa-4cbf-ba03-de5afdbfde3d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2d93ba89-c389-4536-b704-aecb06fbdd5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c68239-3de9-46e0-8569-e8573c9d499e",
        "cursor": {
          "ref": "99853ea8-2d76-42d9-b741-98d94dba21fb",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d4d3b8a3-0ee1-4c9b-9c81-f211f796a87f"
        },
        "item": {
          "id": "b1c68239-3de9-46e0-8569-e8573c9d499e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e3244f2f-2563-4d35-87e5-83feca503b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284dfe2c-3d0a-4f03-b76d-3089e8683c2c",
        "cursor": {
          "ref": "3914d321-0fa4-4f04-851c-042d5526745e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e3c12853-1b79-49fe-8ce0-868ebe52f300"
        },
        "item": {
          "id": "284dfe2c-3d0a-4f03-b76d-3089e8683c2c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8b49b452-9341-4f55-bab4-05d077ea19a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f178f568-4484-40ff-89d3-7da25d0042ff",
        "cursor": {
          "ref": "52b9e4ae-5785-4779-8c33-131e84d841ba",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3c16f09f-b89b-452b-90d2-0d79d2108d3d"
        },
        "item": {
          "id": "f178f568-4484-40ff-89d3-7da25d0042ff",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c3eef8a8-e2f4-4c99-a6c7-9b24398c0d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684ed096-6dfc-4a0c-94a8-d6ee5155d12b",
        "cursor": {
          "ref": "20633bb7-232b-4bbd-98ee-258ce28bac74",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "721742af-6b32-4c0a-92cc-c0f4730238e2"
        },
        "item": {
          "id": "684ed096-6dfc-4a0c-94a8-d6ee5155d12b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "23da960f-0944-42e5-97d6-4f74dc7375fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26b7977-2b5b-424a-9488-e0cae2862001",
        "cursor": {
          "ref": "21080148-7bec-4131-969e-a2939b80e6af",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1bc04048-dbb7-4db4-ba1f-0b7f6c554d7b"
        },
        "item": {
          "id": "b26b7977-2b5b-424a-9488-e0cae2862001",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd11fd30-1dcb-4423-a607-07bf7c44f381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4372594b-4f78-491c-9704-73a5886084c4",
        "cursor": {
          "ref": "dc808d1f-95dc-4a6b-9204-0357557ea0c3",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d956a8a9-9415-4e6c-953a-4828d659b32c"
        },
        "item": {
          "id": "4372594b-4f78-491c-9704-73a5886084c4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f3ff4f73-d69d-472e-afca-3fb5fd0e2ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c6ea78-cd1c-4697-87e5-2f568204679e",
        "cursor": {
          "ref": "5c296292-83ab-43ec-89ff-b200f3d7ff82",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bf21d3f4-700a-4c15-b2a9-d751e43181ab"
        },
        "item": {
          "id": "07c6ea78-cd1c-4697-87e5-2f568204679e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ba3616cd-6da5-466f-934e-d67fec1732a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884dedec-25ec-4e39-9c6a-93048ec759da",
        "cursor": {
          "ref": "162c8c6d-590a-4322-9214-350d47988b57",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9b62e8c8-f06a-4239-b4a3-11d2a5a691ee"
        },
        "item": {
          "id": "884dedec-25ec-4e39-9c6a-93048ec759da",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6a976f78-1437-44b4-9700-0d27992c3ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb165ee5-49e7-4a5b-9a7b-10cd2b43edbc",
        "cursor": {
          "ref": "5981b7e2-0b09-4eca-8d22-9da799ce0b24",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "78982d3a-413c-494f-b3af-7c06cc01c40e"
        },
        "item": {
          "id": "bb165ee5-49e7-4a5b-9a7b-10cd2b43edbc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "52b65691-af3b-4a8f-8b30-9fd360c177d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e46636-5cbb-4fdb-8aec-c64500c4d815",
        "cursor": {
          "ref": "b56e3a57-1f67-4eec-b861-0e54448b197b",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d9945687-6af0-4f9a-8b21-853ec810431d"
        },
        "item": {
          "id": "97e46636-5cbb-4fdb-8aec-c64500c4d815",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "aad3ff60-a4ec-4816-9a86-4cbbfc9c6683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a3e523-34c9-4a75-8eee-7331de89a8f1",
        "cursor": {
          "ref": "1a551c9d-7cb7-4b91-a64b-ed481b181e70",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3bba2469-0eb9-4761-9bc3-778cefc80552"
        },
        "item": {
          "id": "28a3e523-34c9-4a75-8eee-7331de89a8f1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d8a688aa-8364-46d4-a48c-a1eec1f40c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f685fe7-077a-42ee-912e-5854cf7137d3",
        "cursor": {
          "ref": "8e345b24-94f4-401c-99e8-a0a5ac66c63e",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d6fe1fe4-badf-4256-976a-c729a068cb20"
        },
        "item": {
          "id": "9f685fe7-077a-42ee-912e-5854cf7137d3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8060a916-a7f9-4660-a22c-01348da46f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e7ccf6-2a6b-4681-a092-2a3c815d4900",
        "cursor": {
          "ref": "1fd91f92-d784-4543-899b-99699b483c25",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7a015160-9a56-432b-9803-36372e58323f"
        },
        "item": {
          "id": "14e7ccf6-2a6b-4681-a092-2a3c815d4900",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ba62f0c9-1a9c-437a-8409-fb7a8681d5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d25148c-de90-41a1-881d-e0a60c89a762",
        "cursor": {
          "ref": "8a857cb2-a7ed-43fe-9195-9baa1a91a98a",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "71747b13-ae1a-4187-9a5d-c7cbcdedf7c5"
        },
        "item": {
          "id": "1d25148c-de90-41a1-881d-e0a60c89a762",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "03d21bcd-5dea-4862-8ae3-774672c7f8d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a413c79e-9f1e-4016-8bbf-e0c5b5303239",
        "cursor": {
          "ref": "86ab05a3-137c-4117-8bcd-074b7c8b1ad3",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6ab34eb4-0ee2-4eee-a7a3-2906cc848e7b"
        },
        "item": {
          "id": "a413c79e-9f1e-4016-8bbf-e0c5b5303239",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0cce50c8-82d7-4ab4-abed-37e9f8bc4653",
          "status": "Created",
          "code": 201,
          "responseTime": 3039,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6738a411-54cf-439c-b31b-c3cb9d1f340d",
        "cursor": {
          "ref": "122db3b2-8cc7-46ca-924a-006580d39c6c",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bce9fd7b-a315-4eae-b32f-c462df3e17a2"
        },
        "item": {
          "id": "6738a411-54cf-439c-b31b-c3cb9d1f340d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6d099c43-46d5-47f0-b3e8-a67f27c4f0a1",
          "status": "Created",
          "code": 201,
          "responseTime": 2812,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e20e4126-ee21-40bf-a348-737825785222",
        "cursor": {
          "ref": "24340f81-91d4-4cef-afec-bcfa970d8c6f",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9888eed5-637d-4c27-94fb-7c47e5f5e9ca"
        },
        "item": {
          "id": "e20e4126-ee21-40bf-a348-737825785222",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "84c6ebe5-a113-4c2c-8604-cbb5540d89f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df26d433-f1e8-4147-a23f-644d9171fb9e",
        "cursor": {
          "ref": "72234c7c-d0be-491e-a9a7-4ddd652e9a82",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "dd9337b7-16cf-4312-a7ec-641c6de3f699"
        },
        "item": {
          "id": "df26d433-f1e8-4147-a23f-644d9171fb9e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3bc728d3-22da-4334-b600-cd758ec0dd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f9ee46-ff37-4d7f-9053-1d7e488676bb",
        "cursor": {
          "ref": "dae9f36f-d51c-4ca3-af73-bf3da299be6d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "074f8745-aa2e-4ed6-aae3-14e92dd1dfd3"
        },
        "item": {
          "id": "35f9ee46-ff37-4d7f-9053-1d7e488676bb",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6af73e6a-50a9-465e-abc7-f6137c6dc80f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f616492-1a17-4efe-9c79-a8adca61d56b",
        "cursor": {
          "ref": "184790df-0361-40de-a3ba-774a05eaf4dd",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4cdebb75-df4f-4b26-8ae5-5751829de202"
        },
        "item": {
          "id": "1f616492-1a17-4efe-9c79-a8adca61d56b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "48b3b817-5f17-460f-a5f6-43b20842e71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435828d4-a678-41de-bd0a-e0347f266292",
        "cursor": {
          "ref": "94da203b-a598-455a-828c-a227a1d2ce5d",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d2a7ea6-8fc7-4f5e-bf44-89f10234bf0d"
        },
        "item": {
          "id": "435828d4-a678-41de-bd0a-e0347f266292",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ef30879c-b05b-4586-9f58-0fb0ad631727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac506c2f-70ba-4863-8036-64efee962ed9",
        "cursor": {
          "ref": "971381ff-e7f7-44ba-9434-5c4c07ebe362",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b39372cd-22be-48cc-91db-73fb4ad8ba50"
        },
        "item": {
          "id": "ac506c2f-70ba-4863-8036-64efee962ed9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9730d494-0ccf-4731-bb4b-fce76014ddcd",
          "status": "Created",
          "code": 201,
          "responseTime": 2186,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9b75ace3-20a8-45ca-b8c0-00b870af7b9b",
        "cursor": {
          "ref": "8081ee4b-a645-44bf-9e04-3dbf49a74792",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "59a2e206-f223-4af7-9570-71fbd673ff07"
        },
        "item": {
          "id": "9b75ace3-20a8-45ca-b8c0-00b870af7b9b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5209ac21-fe56-4cd2-9937-25c034e3a362",
          "status": "Created",
          "code": 201,
          "responseTime": 2397,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5aeea366-54ce-4dc3-9ad3-3f825e718334",
        "cursor": {
          "ref": "eff176d8-ce20-45dc-af41-e18b523a41f8",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "98a3fdbf-9bb2-4296-9aa5-3171511c3280"
        },
        "item": {
          "id": "5aeea366-54ce-4dc3-9ad3-3f825e718334",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ddd75689-8ea7-40a5-a1b2-09ac845f1162",
          "status": "Created",
          "code": 201,
          "responseTime": 2398,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "5fbb6640-614f-4ef4-862c-8651c7dbe627",
        "cursor": {
          "ref": "85e4af3a-d78b-4c87-9f69-026c9f3c9e75",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6dbacac2-d924-4c0c-949c-b42dc0de7902"
        },
        "item": {
          "id": "5fbb6640-614f-4ef4-862c-8651c7dbe627",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fac2a34c-f0da-4c00-9fd3-e7d5ebb6ad7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfa3101-717a-41b4-9bb1-287bf6df21e7",
        "cursor": {
          "ref": "9bbe5748-542f-41ea-9c7c-0d9dc64476db",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "51529693-af10-49ef-96aa-23b960f9e195"
        },
        "item": {
          "id": "fbfa3101-717a-41b4-9bb1-287bf6df21e7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "aab4dea8-6cfb-4cf4-b0b9-9ca468a8344d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 137,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b62933e-5f39-4247-b3d6-27f782d85254",
        "cursor": {
          "ref": "5c1e054e-0e35-469c-8b16-c7818a20e825",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ad27e5e0-cb9f-4cc2-ad5d-04e2a55ceaf6"
        },
        "item": {
          "id": "8b62933e-5f39-4247-b3d6-27f782d85254",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fc76c864-7507-4bfc-b4e5-47c33d9ad36f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84030d1d-f1ec-4310-8486-a4326d826326",
        "cursor": {
          "ref": "301968f3-36a0-4a63-861f-ea1f47bf669d",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d840ed6d-c4ab-4bc2-88d0-bc0e8a1f4618"
        },
        "item": {
          "id": "84030d1d-f1ec-4310-8486-a4326d826326",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "40c93ae8-2dee-414f-9272-a0205fa0a513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d00c25-0ac5-452f-9df4-a6b044044205",
        "cursor": {
          "ref": "02a9a419-a36d-4f90-85e1-f637f38e003d",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8dad0528-36d7-4582-91af-9e998b75e196"
        },
        "item": {
          "id": "74d00c25-0ac5-452f-9df4-a6b044044205",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1f17d151-070d-4f98-b8a3-b95db4e28590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7404d6-d1ee-43c3-88a1-c60b93621776",
        "cursor": {
          "ref": "2c0849b8-4c6c-427d-990f-18200201f9f9",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "37aa8a47-7cfd-4192-b7f1-d1311da7d5c8"
        },
        "item": {
          "id": "bb7404d6-d1ee-43c3-88a1-c60b93621776",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "92319951-4cea-414c-b209-d6b552880c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50657b3b-a17a-465a-a214-00f47fcab0a8",
        "cursor": {
          "ref": "ddab2d15-1f94-4cec-a4e2-610352944f8c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a0ee8d4c-a0f3-434c-98f1-6646a6f8db48"
        },
        "item": {
          "id": "50657b3b-a17a-465a-a214-00f47fcab0a8",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c0ea2b4a-8489-49af-ac00-57c4e398122b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d601b0-f1ca-45c7-acfd-72737c62e9a5",
        "cursor": {
          "ref": "feb41b62-72c9-4a33-91cc-e50e104f9a9a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a35ef1c3-027e-4476-8458-b8414828e5a5"
        },
        "item": {
          "id": "d5d601b0-f1ca-45c7-acfd-72737c62e9a5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c662706-6c55-4a07-99b6-c82771d3c660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca089091-f7b9-4c33-b0c4-2028157b794a",
        "cursor": {
          "ref": "c4b687d0-25d2-48a3-a4f2-8d612b72da56",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "602c9676-317b-426a-b5c0-8d307ec0f21b"
        },
        "item": {
          "id": "ca089091-f7b9-4c33-b0c4-2028157b794a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6e4c5096-46fe-4961-a692-f5507e3bed29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06d7ea3-f5c3-49ac-85ca-7e0b23001ac3",
        "cursor": {
          "ref": "d219c58b-4544-4571-9f85-4255ae589e71",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2852399f-fee4-4786-adf3-c40609e81586"
        },
        "item": {
          "id": "e06d7ea3-f5c3-49ac-85ca-7e0b23001ac3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "60ece18c-4784-431a-aea7-1476e91fd296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdecc852-c009-4623-8ac0-46ce0f804157",
        "cursor": {
          "ref": "50aef4a9-9581-42b1-a14d-6683ede48169",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c5732f88-9a02-4479-98b9-0ca94eeeb066"
        },
        "item": {
          "id": "cdecc852-c009-4623-8ac0-46ce0f804157",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "083752a5-0490-40e2-b350-dbe823f24937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b73ab6-4e6a-4157-8720-26cf5f53ad77",
        "cursor": {
          "ref": "0eced779-f3cf-4f55-a579-6fdafd748f2f",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7ab1ccb0-dc81-4720-8356-eac6d2839cad"
        },
        "item": {
          "id": "52b73ab6-4e6a-4157-8720-26cf5f53ad77",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0b8b80d5-a358-461f-9799-8beb42f5fcfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d399bb1b-b39b-4718-85e8-e01fe1020dbc",
        "cursor": {
          "ref": "134dc550-15e2-4e2d-b092-345e80d5f0bc",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "419a2dca-4e84-4ead-a2a9-d882d2a063cd"
        },
        "item": {
          "id": "d399bb1b-b39b-4718-85e8-e01fe1020dbc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "00d105b9-a908-4504-955b-d89ef95ced92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5593e6a-ab67-471f-accc-60edd1714f6c",
        "cursor": {
          "ref": "eef24a98-36c2-4c70-bdf4-86cf67ae1f0d",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2fc81200-3325-4274-bc37-4024de4c5982"
        },
        "item": {
          "id": "b5593e6a-ab67-471f-accc-60edd1714f6c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b55545a8-4f34-44ac-bce2-a5de732efd4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4479cb-d978-46a1-90b6-932b361eb9bf",
        "cursor": {
          "ref": "9d785f7c-96ab-4298-a518-785e2d6184e8",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ec7dc06c-4760-4656-a0f9-c301bf346f69"
        },
        "item": {
          "id": "cc4479cb-d978-46a1-90b6-932b361eb9bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c563f039-bc80-4084-bd2c-eeef73847eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc4e65e-6b2d-47cc-9815-3adcdfe96362",
        "cursor": {
          "ref": "e43cbda4-449e-4a27-be3e-ed1f41ca2d46",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "46127bb7-2844-4b6d-bbe3-4136c7037e32"
        },
        "item": {
          "id": "8fc4e65e-6b2d-47cc-9815-3adcdfe96362",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7f980507-c10c-4834-94f1-57dd64df8f48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e8adeb-e785-4a65-88d0-aaeb2f46ba25",
        "cursor": {
          "ref": "c722ea77-1260-4952-891d-97c015c20c11",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "da1857ed-e332-455e-9788-4001547c2cca"
        },
        "item": {
          "id": "18e8adeb-e785-4a65-88d0-aaeb2f46ba25",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "8fe2b51b-d661-4fb7-b079-32cd042f4bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7772e6-5cf9-4b05-94b9-1bc7781faafc",
        "cursor": {
          "ref": "e7e8cd00-f227-4223-a522-2464fdd88479",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7b2c297f-d3af-43fc-9180-26233a196320"
        },
        "item": {
          "id": "5f7772e6-5cf9-4b05-94b9-1bc7781faafc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "03c9a4ef-41e4-47dd-9b39-23e78bf5f7fb",
          "status": "Created",
          "code": 201,
          "responseTime": 2473,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "047934e6-d988-4d8f-8b80-c29041535c48",
        "cursor": {
          "ref": "a7b2efef-ebcb-415a-bf20-f1769401ac46",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a455791c-7cae-41d5-94ab-e78beaeb1994"
        },
        "item": {
          "id": "047934e6-d988-4d8f-8b80-c29041535c48",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "979c871e-caba-406f-9493-3eebe708a205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17ffb34-9436-4e75-b97c-eaac0bd7f18b",
        "cursor": {
          "ref": "b11651f8-709f-4efc-b3fe-105643d273f5",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "53aab01b-1525-4de3-a331-37775d7627c4"
        },
        "item": {
          "id": "a17ffb34-9436-4e75-b97c-eaac0bd7f18b",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "95550c2c-77c8-4e5d-ba42-c4ea0ff5bfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44b558c-4b02-46a7-a152-a9431a65410f",
        "cursor": {
          "ref": "0a69681b-7117-457b-b944-149b3e763503",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d5632b23-1140-4a4b-8c49-39b07b3def55"
        },
        "item": {
          "id": "b44b558c-4b02-46a7-a152-a9431a65410f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c0ca51b3-fd49-45cc-9562-91892a8b576b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4498a4c4-0313-4349-af5d-dfa9b5274aed",
        "cursor": {
          "ref": "8299a53b-9120-4907-8029-b87803e0a564",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d8a56261-7569-497d-8816-927b710abc78"
        },
        "item": {
          "id": "4498a4c4-0313-4349-af5d-dfa9b5274aed",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "654a9249-cdde-459b-91f5-31fcbf3006dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726d8d09-defa-4f0a-b425-ab079e794737",
        "cursor": {
          "ref": "664c9f20-b5e6-419d-9d66-b154ddc18371",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9180b2b7-9bf7-4d70-a6e4-4a414907ef6c"
        },
        "item": {
          "id": "726d8d09-defa-4f0a-b425-ab079e794737",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "acd1b098-831a-466d-ade4-d9805be4ac85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a026314-6f8e-45e2-9edc-028261ccda20",
        "cursor": {
          "ref": "a79cc620-3b89-40f9-899e-ae9349ea8d83",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3a384a49-2fd0-4cb0-93a1-820d694c4259"
        },
        "item": {
          "id": "1a026314-6f8e-45e2-9edc-028261ccda20",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b6f94ddd-938a-48a4-8353-54590e80fe8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75f5481-8ddb-46e2-8960-9637f216722b",
        "cursor": {
          "ref": "863a39aa-d1e2-4718-8d61-3f8e7fc271c1",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b92ce546-bc9f-40d3-a264-000a82b08b38"
        },
        "item": {
          "id": "d75f5481-8ddb-46e2-8960-9637f216722b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "618e1a1f-0ca9-4c5d-b615-d133c0ed33ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb07eef9-1d5b-49c8-8472-9c662cae0629",
        "cursor": {
          "ref": "b3e24daf-30ba-4a77-9167-570a80f5cf40",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "07b941ba-fe69-411e-864c-60a1dcf182aa"
        },
        "item": {
          "id": "bb07eef9-1d5b-49c8-8472-9c662cae0629",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f0eba2e8-84e1-40ee-97cb-6c2d0c866e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8f0bcf-af1a-4014-ad90-6db6c87440f6",
        "cursor": {
          "ref": "02765324-c432-41f6-a162-ac58475634af",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "91ee560e-7ec3-40d1-85c0-06ebed734db1"
        },
        "item": {
          "id": "ed8f0bcf-af1a-4014-ad90-6db6c87440f6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "717e1174-907f-4efc-9405-de4bbb386580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4e2f9a-d4a6-4999-b1c2-e5488d81bb32",
        "cursor": {
          "ref": "f92754ee-7dfb-4fc8-b827-594129c38060",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c737d9c9-b3ed-437d-985a-785752ec3dfd"
        },
        "item": {
          "id": "5b4e2f9a-d4a6-4999-b1c2-e5488d81bb32",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c02431e8-e2d4-4ed2-8cf6-78065f1cd465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0be791-e56a-447d-a234-9a6ef759d0ab",
        "cursor": {
          "ref": "66198c1b-bc1f-4bb8-a700-a199bfda08b2",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5eb01e2a-6028-4ffa-9937-9cffd9f79919"
        },
        "item": {
          "id": "ee0be791-e56a-447d-a234-9a6ef759d0ab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "bcb8e0a3-9404-4f01-b7dc-3491863488ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113f32c9-9cb7-42c1-9a6a-a22bcdaacdfe",
        "cursor": {
          "ref": "67498c8c-b515-436f-a0e2-9a6ad6bfbe25",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ba1e9ea0-a8ac-4e53-bb90-82e1ba1f5451"
        },
        "item": {
          "id": "113f32c9-9cb7-42c1-9a6a-a22bcdaacdfe",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8f10c4bc-33fc-44c0-a661-62cd41456553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf00af80-0524-4e22-ba11-946180b49a13",
        "cursor": {
          "ref": "cf8e9a3d-4ef5-479e-9bc4-8410ccd40401",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38489651-643e-40c9-8b38-d234f9aa4ad4"
        },
        "item": {
          "id": "bf00af80-0524-4e22-ba11-946180b49a13",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4768b3df-b76a-4300-8df6-4221851c5a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d86bb0e-b2eb-4bfa-8952-0b9c055752f6",
        "cursor": {
          "ref": "4fb63114-2e97-4fb3-836a-882267d3763b",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "a5624f90-4eef-42a0-ac43-fffc96b28108"
        },
        "item": {
          "id": "4d86bb0e-b2eb-4bfa-8952-0b9c055752f6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c534dde9-d9fa-4267-b8b8-6c1904946db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a8b033-b00b-416f-a853-2365ee4b3fc0",
        "cursor": {
          "ref": "cd8920d8-587c-4283-a836-393dbbdb191d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4f77d066-6519-4aec-a54f-f6697089bb4b"
        },
        "item": {
          "id": "44a8b033-b00b-416f-a853-2365ee4b3fc0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d0344490-144d-47d1-a846-9bc34764c5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251f1d58-cf08-4902-b081-0ec38e3f340b",
        "cursor": {
          "ref": "45d42181-eb38-4582-985a-f740aa126a31",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f2534f8f-c00a-441f-8b5c-c504cf304f3c"
        },
        "item": {
          "id": "251f1d58-cf08-4902-b081-0ec38e3f340b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "49fe2ff7-172d-4143-adf4-6f16419e30bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0661ea-1648-4b10-8b02-6d755a40ddfb",
        "cursor": {
          "ref": "92c2dcb8-b00c-4413-84be-c27c1d4d21d4",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bcf575c5-9c63-4659-a300-cf6bfb8ec20b"
        },
        "item": {
          "id": "8f0661ea-1648-4b10-8b02-6d755a40ddfb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "11bfa34e-cb39-4353-ad04-20281ad42594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c56d02e1-f6fa-4ed8-9796-2c8338f9906c",
        "cursor": {
          "ref": "bda58929-b3d0-49e1-a9e9-1d9642931d07",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5b9881a9-f02d-4f58-ae9c-4c9fac851c64"
        },
        "item": {
          "id": "c56d02e1-f6fa-4ed8-9796-2c8338f9906c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "778e75b0-4537-4079-b758-78a76c4894b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1505ba-f66b-49b0-9ebc-7903fa7ceca3",
        "cursor": {
          "ref": "7ddba57d-c723-4dac-83e9-cdaf8e7b416c",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "26f14b86-8bed-4ef7-ab20-c2171c3135a2"
        },
        "item": {
          "id": "2e1505ba-f66b-49b0-9ebc-7903fa7ceca3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5b8263f0-d265-45c8-8356-3cc1054e7bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c26213-7102-4a8a-ba33-f47b2d9d6a81",
        "cursor": {
          "ref": "346bb2bf-caf4-480b-a51b-f89d5404eed0",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "676dfe95-e4d3-485d-8a97-b7ef4453fba9"
        },
        "item": {
          "id": "58c26213-7102-4a8a-ba33-f47b2d9d6a81",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "69d28718-6692-4b3b-9ca0-a7dd7c8f4123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeef6fe7-5d27-4360-9103-1d85cc1462ba",
        "cursor": {
          "ref": "88854f39-9d93-46bc-8b07-352fe79fc094",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ad7a4a66-a5e9-49bf-90da-68c118943992"
        },
        "item": {
          "id": "eeef6fe7-5d27-4360-9103-1d85cc1462ba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3796c86d-67b4-47ae-a089-427c26d6d042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5699b148-8a0b-461f-9067-873039f70592",
        "cursor": {
          "ref": "ec9ddbff-a486-4941-8366-2781402ddc50",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b40dd7cf-dfcc-412b-a6a7-f33acd015280"
        },
        "item": {
          "id": "5699b148-8a0b-461f-9067-873039f70592",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "014c0059-4b26-4c83-859e-589f54d1ade7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47220671-d164-42fe-86c3-48d933fbeeb5",
        "cursor": {
          "ref": "9db41a05-38d0-4dab-a039-bbb17ee1cd27",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d858f39d-ceab-4d9f-83a3-f47c42427d2a"
        },
        "item": {
          "id": "47220671-d164-42fe-86c3-48d933fbeeb5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f58ea797-50e1-44ff-a08c-4ad828716ec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d3c030-87db-4089-87a0-de0ee63878ce",
        "cursor": {
          "ref": "b5056b1f-b6de-469d-9857-da5086a6f67c",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "b3fe94ee-2da2-4eb1-b82d-9bcad0010b8e"
        },
        "item": {
          "id": "62d3c030-87db-4089-87a0-de0ee63878ce",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b138f874-9380-4b88-9c03-7f7a5df5e338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52050938-6802-4d66-877c-30b0f67690c2",
        "cursor": {
          "ref": "5270eecf-72ed-448f-b008-03499eaa752e",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d61727f2-1ecd-4153-b486-3cf67a1d894c"
        },
        "item": {
          "id": "52050938-6802-4d66-877c-30b0f67690c2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b6dd1b8a-2395-4cb9-b125-00300909a966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e797af91-e4ce-48af-83a5-4156d362835c",
        "cursor": {
          "ref": "4c7e6658-31d4-4d10-a655-1d60abd9a7e4",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d444e61e-9426-4c51-a74d-e0437761d806"
        },
        "item": {
          "id": "e797af91-e4ce-48af-83a5-4156d362835c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d4c2ef9c-1da0-4e26-a4fd-a55f0a86dada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b1a88d-0def-46c2-b1bf-b373ea8d542c",
        "cursor": {
          "ref": "be262a66-db0f-46bd-bca1-6dcae2bead22",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "78023c06-b109-4863-aed2-092106b39568"
        },
        "item": {
          "id": "67b1a88d-0def-46c2-b1bf-b373ea8d542c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "91831064-4b1b-4c27-83a7-2f42a0c6a4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb12fea-3ca1-46d3-9e06-b0015a19e35c",
        "cursor": {
          "ref": "08bd9109-fb45-4c28-833e-a4f19a5ee982",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0c59651a-ba11-435a-a82d-2b9b7bd012b2"
        },
        "item": {
          "id": "ddb12fea-3ca1-46d3-9e06-b0015a19e35c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ef01a0eb-f001-4f18-9227-6423ebe1e982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60bdf164-87d6-4c11-872b-aa100e6e079d",
        "cursor": {
          "ref": "e0a21167-2766-4f2e-8f72-d0661d26daad",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1923466c-c059-40bd-8a98-30efc5e6e4a9"
        },
        "item": {
          "id": "60bdf164-87d6-4c11-872b-aa100e6e079d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f8cbcf1d-5328-480a-8a54-39a08136832a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc86721-f059-44b5-8521-104581d35688",
        "cursor": {
          "ref": "a0edb4bf-4712-46fe-9769-bbfb542d1e23",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c12f7321-55a3-4eff-974f-ff051205b74d"
        },
        "item": {
          "id": "4dc86721-f059-44b5-8521-104581d35688",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7d5f4a5e-bb1e-4532-907a-74dead191271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07c2be7-5f69-46b0-b9b2-1b0f60fe505a",
        "cursor": {
          "ref": "25be62c2-117b-4de0-8151-232f3873872e",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "078f9b7e-237e-4da8-b4d8-8e88d9450753"
        },
        "item": {
          "id": "c07c2be7-5f69-46b0-b9b2-1b0f60fe505a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "84f94a2c-aa26-40e1-a561-d24bdc40db66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f3e2d497-55da-4ebd-beda-aa2748234562",
        "cursor": {
          "ref": "225d5513-94d1-45b4-ab8d-529b8cc342df",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "33427c6e-40fe-49fd-8619-a57ba648d758"
        },
        "item": {
          "id": "f3e2d497-55da-4ebd-beda-aa2748234562",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b4942565-f0d7-4798-9178-197ba4527f72",
          "status": "Created",
          "code": 201,
          "responseTime": 2123,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b868bc2-2154-45d2-a0ea-5d1c56055d49",
        "cursor": {
          "ref": "6cde0e19-d4f1-40c7-b516-f9dbdfaa8911",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0103042a-331b-44d7-a449-745a24b773c6"
        },
        "item": {
          "id": "5b868bc2-2154-45d2-a0ea-5d1c56055d49",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "91e9e253-57e6-4a2e-8fff-b7b68b24ca30",
          "status": "Created",
          "code": 201,
          "responseTime": 2414,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "99c39e0c-b9c3-449f-8af5-ee1995153f22",
        "cursor": {
          "ref": "0f1b6718-28e3-449c-8649-31ea72e317c3",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f976c018-c8eb-4987-92e7-5416a6a881a8"
        },
        "item": {
          "id": "99c39e0c-b9c3-449f-8af5-ee1995153f22",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "13a45aa5-5b13-4549-80e8-95a0e03cf01d",
          "status": "Created",
          "code": 201,
          "responseTime": 2594,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9709155c-e954-4ca5-83ff-e7e419911c54",
        "cursor": {
          "ref": "bc02cf3a-e974-4ca9-af14-fbaa950d58b3",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5b27d7bd-0600-46b7-952e-c3f310648100"
        },
        "item": {
          "id": "9709155c-e954-4ca5-83ff-e7e419911c54",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "998e52f7-e254-485d-b89b-8fa54bd9c5e9",
          "status": "Created",
          "code": 201,
          "responseTime": 2418,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bb8e61-bfa0-45a6-873c-6153e07d2101",
        "cursor": {
          "ref": "198317b2-955a-487b-bfcf-d2fc5520de41",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c3dfee4b-ec6e-4035-ac22-c38e43c4d830"
        },
        "item": {
          "id": "d2bb8e61-bfa0-45a6-873c-6153e07d2101",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9c1ff874-3b72-486c-ba97-9d342a1d35f5",
          "status": "Created",
          "code": 201,
          "responseTime": 2973,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-07T00:49:54Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-07T00:49:54Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2e6f6a8d-17a1-4323-8eed-cca4f3a33b46",
        "cursor": {
          "ref": "0b3a976e-1179-4bd5-8c1a-d4666856e5ec",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a5f35f51-47e8-445d-8b5a-d0966da4b29d"
        },
        "item": {
          "id": "2e6f6a8d-17a1-4323-8eed-cca4f3a33b46",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "23bc6c58-aaae-4e19-bc3c-80c75042adee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "871a571b-00d6-4cfe-80e5-0f9308c34554",
        "cursor": {
          "ref": "2fef808b-a04b-4e9d-b4c7-fa9d57cdbcf8",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ca1687ef-f844-4b96-96f9-fc48e9d8ebe7"
        },
        "item": {
          "id": "871a571b-00d6-4cfe-80e5-0f9308c34554",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fbeb8dc2-4503-4557-9c58-3210f1f850a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6ea59b-a674-4369-b3f0-1d682c06ee8a",
        "cursor": {
          "ref": "f46d181b-59b2-44df-b000-4504232a9733",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "042ce0eb-461c-4ac0-8304-09721200091d"
        },
        "item": {
          "id": "ff6ea59b-a674-4369-b3f0-1d682c06ee8a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "93e2eb48-dce0-4a56-97f0-bb7839ce48d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8434f2-0a51-4209-a30b-c51fcecfcfd2",
        "cursor": {
          "ref": "b93f5b90-a89a-4035-8387-aa3a059b0b92",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "692c2b1c-960e-4626-a333-eddc8d4b7d67"
        },
        "item": {
          "id": "3d8434f2-0a51-4209-a30b-c51fcecfcfd2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "edcb5d92-90db-4eb3-9d27-9997eceadd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e18b78-039b-46ff-a5ec-08181c9fef7c",
        "cursor": {
          "ref": "df4e4cad-d396-4357-a019-7d176aa5b4d4",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c69302f5-527d-488b-a1b7-6b11392a40bb"
        },
        "item": {
          "id": "57e18b78-039b-46ff-a5ec-08181c9fef7c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "82cca614-3752-4fe1-a8f1-f64af4167c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f50a27-3f71-41a6-b4f1-d60a75f88948",
        "cursor": {
          "ref": "de05e7e1-7ca7-4c36-86f9-9f84375a07b5",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1d2f833f-1e64-4223-a4a1-cd046bac0c90"
        },
        "item": {
          "id": "31f50a27-3f71-41a6-b4f1-d60a75f88948",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a3686ed9-f7b9-4023-ab5a-516e26c3ac64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84ab2e6-37d6-4ad8-a13a-51c254491d65",
        "cursor": {
          "ref": "e8967a98-de89-4442-b5fe-1aaf81ece7a0",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6b0425f5-14d0-4838-9710-8fe53af32087"
        },
        "item": {
          "id": "d84ab2e6-37d6-4ad8-a13a-51c254491d65",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a5dfca44-1523-4937-9464-7439efb73296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e2c4422-d200-4c8b-b604-e2b74ae03b95",
        "cursor": {
          "ref": "3d1ebd98-5340-45d3-9331-1f1d7ba99e21",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "aef10251-2bed-4d2b-b709-185f868b0a13"
        },
        "item": {
          "id": "8e2c4422-d200-4c8b-b604-e2b74ae03b95",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "60d2df72-1e86-49e4-a3af-8935330ec2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2cc590-b6bb-41f5-9618-4bbfe71a345b",
        "cursor": {
          "ref": "2671097e-ac31-442a-ba35-ec6046b1f881",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "25023ddb-372d-4956-baf3-abb9de9e1a68"
        },
        "item": {
          "id": "bf2cc590-b6bb-41f5-9618-4bbfe71a345b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7179be42-9a8f-4e88-819d-cf12f4ed636c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3abed8b-6855-4236-9c9a-822e836176a8",
        "cursor": {
          "ref": "84d93b6f-b497-4dc8-9458-3a4330c224cc",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "00d36e55-ff08-4156-ab3d-3a85f81c544d"
        },
        "item": {
          "id": "f3abed8b-6855-4236-9c9a-822e836176a8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "21246454-1206-4d8f-a374-d7d67e7f8cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e6a425-5322-4e74-9084-108ce7da4f0e",
        "cursor": {
          "ref": "2e819d47-b5e6-4692-bb50-bd80c3024a96",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a62d7aa5-4f74-4f08-8d49-d0845b9925af"
        },
        "item": {
          "id": "f2e6a425-5322-4e74-9084-108ce7da4f0e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1d6ed601-9e42-47b2-8d41-124bfe479b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8657bd3-6065-46d4-afc9-eab8efab1e06",
        "cursor": {
          "ref": "274a8421-da37-4177-90f6-a53ba726c406",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8d2c11df-3732-4186-9cfb-84328b6a8cb8"
        },
        "item": {
          "id": "a8657bd3-6065-46d4-afc9-eab8efab1e06",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5d8b8fbe-0b74-4f48-9795-89e920b01467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dd917a-9425-4134-b23b-b10dc5ab50be",
        "cursor": {
          "ref": "dbb34ae0-6ee0-4e62-b4fa-352b1d246a5e",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "270243e5-d667-4fe4-a2e7-7886b58bfeea"
        },
        "item": {
          "id": "61dd917a-9425-4134-b23b-b10dc5ab50be",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a80fff2c-2e9b-4a9c-a518-e013be673bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb65a5b-3dee-4f9d-9703-45b172c3a7f7",
        "cursor": {
          "ref": "29ce1cf4-d170-4799-97f9-508247272831",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "2830a415-81b2-4a8d-9ef6-6aa8cbad1ca7"
        },
        "item": {
          "id": "cdb65a5b-3dee-4f9d-9703-45b172c3a7f7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2fd3ecb7-4abd-478c-bdd4-71bd5ef34b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8a4e91-dafe-4d83-a3b0-d386e9529cbb",
        "cursor": {
          "ref": "3ba0a25e-dbc6-4419-95f7-c7da5ac56905",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d208be37-a67b-47a5-b861-5f5a440e4d0f"
        },
        "item": {
          "id": "9b8a4e91-dafe-4d83-a3b0-d386e9529cbb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3cb88912-b575-461e-b0e4-be232e853f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4bad56-2704-43a2-8045-265a0dbb794e",
        "cursor": {
          "ref": "13b28207-dc43-4928-b74b-f2f1100f6768",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "25a50175-0f87-48f5-827c-a1a10a210f7d"
        },
        "item": {
          "id": "be4bad56-2704-43a2-8045-265a0dbb794e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1d568aea-d95a-4f2c-a27c-2ec949f7eef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9fef5a-8a78-4776-82c4-c3da4c1467ef",
        "cursor": {
          "ref": "6995678c-6c20-441f-832e-3c172279b875",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b5c91088-095a-45f5-a15c-8fddfe4c436b"
        },
        "item": {
          "id": "fb9fef5a-8a78-4776-82c4-c3da4c1467ef",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "abb8b59c-79a7-4195-8de0-5ac4dbeb026f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb9cd55-351c-4230-bb35-6cd4d0c5a21e",
        "cursor": {
          "ref": "5121fa02-8df4-4395-bd58-d5e964064e8b",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0b5d5e07-cc56-4807-ab88-b188d88bf6ec"
        },
        "item": {
          "id": "2cb9cd55-351c-4230-bb35-6cd4d0c5a21e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d3b651d1-5a83-4f47-a842-e4da44990d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c018bc-0786-4c30-a511-d1b3a47c4acf",
        "cursor": {
          "ref": "bdf1f09f-b8e7-48dd-96ac-33632c5a6d19",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "55b1e6c1-e621-40b6-8a81-35d74466531b"
        },
        "item": {
          "id": "e0c018bc-0786-4c30-a511-d1b3a47c4acf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c8310043-2a44-4a5c-9f11-f3d8d135a5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0955f53-646f-4d40-90a4-c31a5ade41fb",
        "cursor": {
          "ref": "05e8917b-44e2-4321-abae-446c1ba75e37",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ae3dd507-8839-4848-8b9d-c6aaabe74304"
        },
        "item": {
          "id": "c0955f53-646f-4d40-90a4-c31a5ade41fb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "22676812-f8d6-4347-b537-04d5d368e1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b84d8f0-26dd-49b0-b661-dcce7de03eb7",
        "cursor": {
          "ref": "728f19c4-3e96-42df-b098-9488b0112345",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7d8b46de-b6af-4e96-be42-65faf24f6e02"
        },
        "item": {
          "id": "5b84d8f0-26dd-49b0-b661-dcce7de03eb7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "44872c31-e72d-42d7-b95f-a49050e8819a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcff0980-3b6a-43b9-891b-6c3367433cee",
        "cursor": {
          "ref": "a3f800b8-0302-41bb-984d-5fb08584a5fa",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "72df85d6-faae-4141-b97b-fe012a74f0d6"
        },
        "item": {
          "id": "fcff0980-3b6a-43b9-891b-6c3367433cee",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c9c104c9-dacb-41ed-9236-cb40a652b40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "341fb85e-0049-4f3e-b9d4-20af5ad92921",
        "cursor": {
          "ref": "4436cbee-d41f-431c-89bc-8dca873bfe6b",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8de082da-7dff-4b77-870d-8c50fab0390c"
        },
        "item": {
          "id": "341fb85e-0049-4f3e-b9d4-20af5ad92921",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c18cbd51-1d54-4317-9ca2-09f78dd58708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e901160d-3d87-407d-8c59-0fe4e75191c6",
        "cursor": {
          "ref": "4d37078c-123a-4875-8022-a993b5229bfa",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6d302b66-8c60-4569-b9a8-7c7892ffc324"
        },
        "item": {
          "id": "e901160d-3d87-407d-8c59-0fe4e75191c6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7fec7279-9159-410d-a82c-854da0935ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f68bd6-6c04-4477-b3a1-60e1d768aa50",
        "cursor": {
          "ref": "91f9920c-1b2b-4205-a0f3-70f4ff98a483",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d6b2f3e9-62d8-4851-a382-4cffe9993ddb"
        },
        "item": {
          "id": "e0f68bd6-6c04-4477-b3a1-60e1d768aa50",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "56c9120f-8fe8-409f-87f6-e205a60883f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085557b2-a9c1-48fa-89ee-3d4ffca94a88",
        "cursor": {
          "ref": "ddc9a80f-d3a5-45b1-9d65-413ee0fee9d3",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e54750e3-c3e2-45f8-9e98-676b7a43f444"
        },
        "item": {
          "id": "085557b2-a9c1-48fa-89ee-3d4ffca94a88",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "06ec38a2-0f2c-46f4-a3fd-34b111cc9caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0fd8fd-f94b-477f-85d5-9223f10d77f2",
        "cursor": {
          "ref": "3a597cd7-bee8-40ca-8530-63e71c0b3d1d",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8f3dc73f-8be6-4158-b841-07657f8d7d68"
        },
        "item": {
          "id": "df0fd8fd-f94b-477f-85d5-9223f10d77f2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3603354a-94c5-4985-b7fe-79c1bcb60fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c4d88e-a68a-48ae-b37e-7058bfff2cdc",
        "cursor": {
          "ref": "72ef8ce4-30bd-4254-8ab4-2b4d9f983693",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "926895df-60c6-4434-bead-79e1b243674e"
        },
        "item": {
          "id": "e3c4d88e-a68a-48ae-b37e-7058bfff2cdc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "57c1765e-250f-448c-a964-3842e3dcd103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab8082-45e2-4190-aa64-97711606cb65",
        "cursor": {
          "ref": "8cd8deb3-1c8e-461a-bf84-fe86ef93572d",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "351cc9a5-0f6a-482c-8e93-5d2407a4e8a9"
        },
        "item": {
          "id": "73ab8082-45e2-4190-aa64-97711606cb65",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "834d6379-143a-448c-a177-2a6206288f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ef6981-e9ee-4472-8caa-97a60830160c",
        "cursor": {
          "ref": "164af2a6-9f3c-4bdc-a126-e0af2ec39349",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "800a60c1-6c8c-43e9-8af9-494ad2bccc49"
        },
        "item": {
          "id": "79ef6981-e9ee-4472-8caa-97a60830160c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9e6319a-d297-4bb4-bdff-1efd0eafb0d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7ffce28-902a-4b1e-8688-1e03a73a7b87",
        "cursor": {
          "ref": "96a51892-dfcd-443e-b128-802fa3d8a6b6",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "711e88ef-063e-4608-aa39-7bb7fe94cb52"
        },
        "item": {
          "id": "f7ffce28-902a-4b1e-8688-1e03a73a7b87",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "498bed05-fe42-4be4-acb2-3525507da77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea9f747-fb57-4284-9c0b-c4f8da4752a4",
        "cursor": {
          "ref": "a6d59c99-111a-4b1d-acd1-59bcd8fc964b",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "20660e9b-71e3-446e-8e31-60478081d53d"
        },
        "item": {
          "id": "4ea9f747-fb57-4284-9c0b-c4f8da4752a4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fd07eaa0-8da5-400d-9a96-aa873231ae74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5408a1eb-42bc-47ed-81e2-956dcaddbd11",
        "cursor": {
          "ref": "5816e097-e329-4ba6-99ad-20080715b007",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e9970c4e-9945-454b-a355-fe26fecb3d50"
        },
        "item": {
          "id": "5408a1eb-42bc-47ed-81e2-956dcaddbd11",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "19d57179-bedb-40e2-bd0b-70d808330cfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d1a623-df13-4e76-a7b7-f149b71fe391",
        "cursor": {
          "ref": "4972c1e6-9bee-4994-ac7d-adc425d34997",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7eea72ff-f36a-4466-ba2b-7f0cdb02982f"
        },
        "item": {
          "id": "c7d1a623-df13-4e76-a7b7-f149b71fe391",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "de66de92-501b-4c04-9122-7738208e7f07",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "113dd4e6-40f5-44be-8f6d-26226e319268",
        "cursor": {
          "ref": "e71aadb0-713c-42e9-b7aa-cfe1bb7c54d6",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dd345e31-405d-4320-a38b-0717d3b692aa"
        },
        "item": {
          "id": "113dd4e6-40f5-44be-8f6d-26226e319268",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "00fd98df-368a-488a-84fe-1060093b2f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d940db9-72be-47a5-976d-f5ef9697c15e",
        "cursor": {
          "ref": "6cda2569-b140-4dce-afaf-8d5c72beb336",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d5800f82-4e95-4251-8039-0a0c58d1641f"
        },
        "item": {
          "id": "0d940db9-72be-47a5-976d-f5ef9697c15e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c9e185cb-4cb0-447a-bec5-0ff4296ed045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25925a3d-c847-4df0-aeca-fae00bf51d97",
        "cursor": {
          "ref": "4c0413f5-239b-49a7-91a6-3581ebdccb17",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8a227253-41f6-4363-8afe-69aaf620588d"
        },
        "item": {
          "id": "25925a3d-c847-4df0-aeca-fae00bf51d97",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "fd995b02-52eb-46dd-80e2-5e8b6b09e5c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358475c5-ede6-4bc3-97a0-f097443d018f",
        "cursor": {
          "ref": "7c9b4f13-dbfb-4362-9491-bda7f396795b",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b3421f2e-d59a-4d2a-882d-2b238ee6ad79"
        },
        "item": {
          "id": "358475c5-ede6-4bc3-97a0-f097443d018f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a08c7726-eeb2-48d4-9071-0e69dbe7de7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417d31ef-b041-4236-b566-12fadc85cab9",
        "cursor": {
          "ref": "4b4a64e8-2d46-4be5-9206-af6a8ca2c5a6",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2e134701-bc78-43c5-a043-a9e309b3d923"
        },
        "item": {
          "id": "417d31ef-b041-4236-b566-12fadc85cab9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d75f5836-9617-47dd-b3b9-d3e66ccdc5d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2438f246-036d-417d-84a4-090ca48d87e9",
        "cursor": {
          "ref": "29d8a670-c70b-4f23-a341-057ad92e156c",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1027f7c3-4705-4c78-82dc-2c3fef169693"
        },
        "item": {
          "id": "2438f246-036d-417d-84a4-090ca48d87e9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "79cba0fb-0bad-4162-aade-284beb389990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035c95c7-1ee4-46b3-8b40-f8cbfbf9b08e",
        "cursor": {
          "ref": "fa58e41e-51e4-4885-9866-ccbbefbfdca4",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b459c144-7586-415a-b078-4ddc9c7681a9"
        },
        "item": {
          "id": "035c95c7-1ee4-46b3-8b40-f8cbfbf9b08e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "91a4f861-1bc8-42ad-997d-f79f9fbc791d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2713babc-b92e-4aad-9d7e-8e6072885a51",
        "cursor": {
          "ref": "fe50f1b9-4c27-4ab4-aa9d-bdcdb86336d6",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fe1c8caa-45e0-4e69-add9-2043f43f01ec"
        },
        "item": {
          "id": "2713babc-b92e-4aad-9d7e-8e6072885a51",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "119a9ca7-2a46-4a43-8421-6617fa328f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6aa83e-a925-48a3-afbd-e87d008d2622",
        "cursor": {
          "ref": "f469cf86-8e44-4bca-b247-3fc313f1ef08",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdd01a19-ae45-473e-b4fb-6e539317f6f5"
        },
        "item": {
          "id": "dc6aa83e-a925-48a3-afbd-e87d008d2622",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8deb397d-d1de-47c9-9705-e6240e659b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646e70a9-6d93-4248-b777-c5ae7c259f08",
        "cursor": {
          "ref": "8fc57325-0ede-49df-8cc5-8052f80dc0c3",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "8671bf8c-a46a-4dcb-815a-a42705ef8486"
        },
        "item": {
          "id": "646e70a9-6d93-4248-b777-c5ae7c259f08",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "106a15cd-f2a3-44b4-b5d5-8697a162349f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c9718f-a6eb-49fc-97e0-e6b36009b767",
        "cursor": {
          "ref": "3fd2ea02-f6b5-4e82-8097-2bb5891fa595",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3d188690-f2ce-4f30-9177-44569b7ced55"
        },
        "item": {
          "id": "09c9718f-a6eb-49fc-97e0-e6b36009b767",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ef779fe7-8afc-4fad-8577-28a866cb7bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c73b06-3a7c-44b2-ba71-f4e2107effdf",
        "cursor": {
          "ref": "60d68e97-9851-4ae3-95ab-82a03e1d4eb0",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f4c11bdc-ee1a-4337-969a-127e7f2c7aac"
        },
        "item": {
          "id": "e4c73b06-3a7c-44b2-ba71-f4e2107effdf",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5078bebd-74ca-4ece-8ef6-987569f126de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64366e4b-b561-49ed-9b7e-3efd25341d19",
        "cursor": {
          "ref": "ddde2f03-2e71-4763-bbf1-0a52b2de594a",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "db969f9e-a8aa-4b46-93e2-aa11dfe37b76"
        },
        "item": {
          "id": "64366e4b-b561-49ed-9b7e-3efd25341d19",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aa62d8f4-11b2-40a5-ad59-8c8abc790395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c683d706-fa8d-4b5d-aeff-52154b9ab6e4",
        "cursor": {
          "ref": "3021cae2-265a-4b60-ba39-955c03bc0d4c",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6c68d576-e323-4cff-935d-abe0c3aebd7b"
        },
        "item": {
          "id": "c683d706-fa8d-4b5d-aeff-52154b9ab6e4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fdd7bd2e-27b4-4394-ad73-3fdfb633692b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47762ebc-9819-4ec8-a5d0-49d0e3d63ed9",
        "cursor": {
          "ref": "129203cb-29fb-4a73-a303-b952fcd70ec1",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "654bbd8f-5876-448e-a672-2ee9e68a98b2"
        },
        "item": {
          "id": "47762ebc-9819-4ec8-a5d0-49d0e3d63ed9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "04025e3b-8f61-41a8-8703-c574501baa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98d89d9-52cb-4931-80ac-0d150b5e8d7c",
        "cursor": {
          "ref": "cfb1acb6-3bb6-4ea4-a17f-e8e4179b0990",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2a9eac2f-ab89-451a-bbcb-5edfdf357311"
        },
        "item": {
          "id": "a98d89d9-52cb-4931-80ac-0d150b5e8d7c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "32ba58e9-f53c-45ba-8916-622794def07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e14e343-4504-4375-81f3-bbc7ea1d13c4",
        "cursor": {
          "ref": "b9e36553-69b3-4bc5-8572-1cb331296303",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0a48acf8-1b93-43fe-a138-955a7f7b53b7"
        },
        "item": {
          "id": "2e14e343-4504-4375-81f3-bbc7ea1d13c4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "76cdc427-15b1-4778-ba2a-6ce28b578c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e884525e-9f26-45f2-943b-ad141d637283",
        "cursor": {
          "ref": "cc7ae6e8-a679-493e-b777-00534f3cae38",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4274c8c4-772f-4938-a6cf-25f8ade34cf0"
        },
        "item": {
          "id": "e884525e-9f26-45f2-943b-ad141d637283",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d10cc9f0-1100-4af6-9d0b-3ee48e699196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1d3ac9-88ea-41ef-90ff-7ceea69c6940",
        "cursor": {
          "ref": "1b928270-53cb-458f-a731-68e33d2eb89c",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f2e56cb8-8e99-4d84-aab4-6f5719435bda"
        },
        "item": {
          "id": "1a1d3ac9-88ea-41ef-90ff-7ceea69c6940",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "da31630c-dc3c-40ca-bd74-258642b2b9a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8322f9-aaee-43f7-9e17-9be9b11af2cd",
        "cursor": {
          "ref": "6e68b25b-51c3-4a81-bf61-fe7d6223299e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5c41dbbf-04f7-4424-ac77-2dccc397ce01"
        },
        "item": {
          "id": "fd8322f9-aaee-43f7-9e17-9be9b11af2cd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24c762ce-3c1a-4089-864e-09efff7cf810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd068ded-141a-4563-ae9f-29e3a798c1c6",
        "cursor": {
          "ref": "8a669bc3-1c46-47da-a18b-9f733a939327",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "050125e1-1329-4f5a-84a9-96e5fff922cb"
        },
        "item": {
          "id": "bd068ded-141a-4563-ae9f-29e3a798c1c6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6e8cf032-b66d-411d-b0fe-96d12d0e947b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6838c7b-2546-417b-826f-823f13c8ba09",
        "cursor": {
          "ref": "a5b0c58e-aaaf-4459-bbd9-26dc5d714de6",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "67cf3657-fb76-4b19-822a-f42ee2e24dbf"
        },
        "item": {
          "id": "e6838c7b-2546-417b-826f-823f13c8ba09",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "16bf1551-c1e2-4217-a9b2-b18f3c534d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae32a9e-ec3e-4950-8bb6-d2ce3c167a88",
        "cursor": {
          "ref": "6a6f83e9-0c29-48c4-abf5-6fd24ec37cd9",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f03de52a-544d-4ebd-971e-47dda91dbc43"
        },
        "item": {
          "id": "7ae32a9e-ec3e-4950-8bb6-d2ce3c167a88",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3a501f3e-1964-4077-8d5c-8316121a7cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375262b2-f693-4df8-a270-f508c5b9c33f",
        "cursor": {
          "ref": "025916ff-7fc7-4312-ae11-0a570f1542c9",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c3d0a967-caa4-41d4-87fe-310c177de8d8"
        },
        "item": {
          "id": "375262b2-f693-4df8-a270-f508c5b9c33f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "067bdecc-31e2-4549-a469-ddb4abc13705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d971225-b418-4e4e-a384-8cb25cbdcfe2",
        "cursor": {
          "ref": "ffc294cf-36fb-4330-896b-74372c537b7a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b6461fd3-4fdc-4b82-8fc8-6285de49bcd5"
        },
        "item": {
          "id": "4d971225-b418-4e4e-a384-8cb25cbdcfe2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "57d14b26-b9f6-4f80-ae3e-8ac39e50b776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad39b4a-48cc-4f54-82d6-bc150879b02e",
        "cursor": {
          "ref": "48f08602-fc4f-4b88-84db-984f018a99d6",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1fdf79b9-4a72-4119-a40e-e5f747de69e0"
        },
        "item": {
          "id": "cad39b4a-48cc-4f54-82d6-bc150879b02e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "63c73ccb-b029-497e-ad44-506faeec304e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9facde-2e25-43b9-8ce3-38b719d6e2e7",
        "cursor": {
          "ref": "c2dbf95d-86d1-456c-aa8a-1fd20e444eab",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0a2f58e0-148f-4867-bf75-3e88ae8ac5f9"
        },
        "item": {
          "id": "3b9facde-2e25-43b9-8ce3-38b719d6e2e7",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c8caa3b0-770f-48fe-a85f-03d6cff7c8ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d800dc41-40e8-461a-9920-3ebc4fb3b78b",
        "cursor": {
          "ref": "e164d9f9-faab-44aa-a13f-ba24f886ca42",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "12f30692-f494-44e9-8d55-cb80f021a8de"
        },
        "item": {
          "id": "d800dc41-40e8-461a-9920-3ebc4fb3b78b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2fa03c1b-2261-4808-9633-4cbd3c407f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57975ef-1af3-4b10-a009-875be5215d2d",
        "cursor": {
          "ref": "4bd8bc21-60d0-4701-95fc-1015614a7971",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "89e0d8e3-31a0-4985-af72-22b28a16f437"
        },
        "item": {
          "id": "b57975ef-1af3-4b10-a009-875be5215d2d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2fa28fb3-8946-4c07-9b4b-16562f703e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1600639-8b76-419f-aae9-e530bfdeee98",
        "cursor": {
          "ref": "3975c1c2-aa2a-403b-885e-20905b9fab64",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2e26e7d8-8725-4a88-833c-bcf050501384"
        },
        "item": {
          "id": "f1600639-8b76-419f-aae9-e530bfdeee98",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b4728ea1-2dad-471a-acc2-dfa3e4751fdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd6a20c-9caf-4fbb-b8a6-bb64cc30b67f",
        "cursor": {
          "ref": "3a12f1f2-db2d-4a73-969d-5c7d8c067e58",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bf739f12-b739-4a19-ae96-be0300b10fe2"
        },
        "item": {
          "id": "9cd6a20c-9caf-4fbb-b8a6-bb64cc30b67f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a481d237-8027-4c8c-b896-3c431aff4638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315e2c41-9c0d-4e4b-9232-0c947b0c5c4f",
        "cursor": {
          "ref": "b00acd7b-cbbd-469f-af92-b69176745aa8",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6be57485-9b2d-4eee-992a-8b96122ce7bf"
        },
        "item": {
          "id": "315e2c41-9c0d-4e4b-9232-0c947b0c5c4f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "268b6368-078f-4f0e-b766-3be7d256c88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b42676-5b8e-43ac-b551-10cbe1a3e173",
        "cursor": {
          "ref": "7efd11ef-5423-413c-a7d2-f77486c6f01f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dadf0e2d-6202-493d-be8d-72f52ea4cbdc"
        },
        "item": {
          "id": "b8b42676-5b8e-43ac-b551-10cbe1a3e173",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3ac69a24-f5b4-4130-94bb-2e232f1fd715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938d57f2-d451-4fea-a103-51676e85c4c9",
        "cursor": {
          "ref": "64e6d2e4-7dec-4f17-94fb-b2dc62e9b0d4",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "29064cee-d8e0-42cb-beca-bf45eee68c5d"
        },
        "item": {
          "id": "938d57f2-d451-4fea-a103-51676e85c4c9",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "861badbb-fd5d-4a14-8525-c724c0900d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3690788c-a0de-49b1-9857-8909f438dfe4",
        "cursor": {
          "ref": "d59e6f3e-6342-45fc-8c79-64444f6abf2e",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "aedeab75-c7f1-4446-863f-448856aef77c"
        },
        "item": {
          "id": "3690788c-a0de-49b1-9857-8909f438dfe4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "8e57b5e4-e272-4d90-ba6b-a35b964876ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07147547-4ccd-453f-91ca-8e13142cd3f0",
        "cursor": {
          "ref": "86eacb03-7477-4160-a4d4-dc15ed7c8034",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2f3545dd-3478-4af6-8db7-a8c2b9da2d12"
        },
        "item": {
          "id": "07147547-4ccd-453f-91ca-8e13142cd3f0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5385165a-3fbc-4af0-8042-35f3704a5fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db38a96-6c02-4b61-856c-2fa2e6b5fbd6",
        "cursor": {
          "ref": "b81b6a43-a972-48eb-8a75-935cd8a604a2",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "209c80b2-62a5-461f-9393-f790039f2c36"
        },
        "item": {
          "id": "1db38a96-6c02-4b61-856c-2fa2e6b5fbd6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d7a77749-4ca4-4c03-b569-294af7dba551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d431e74f-844e-4481-83f1-d5db7239ae93",
        "cursor": {
          "ref": "af4b784e-858b-4b33-8462-971feb1bdbc0",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b23b33f8-295c-460d-a6dc-72d6cdd99e63"
        },
        "item": {
          "id": "d431e74f-844e-4481-83f1-d5db7239ae93",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "82593b1e-bc41-444c-bfa4-7f03b586c0fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "d32b1c4b-9de7-4d2f-94a6-bd301e647800",
        "cursor": {
          "ref": "f19d6f51-9312-449a-b19f-434badd4a194",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "687aa1ed-cee1-47a9-becb-caba3dce4afc"
        },
        "item": {
          "id": "d32b1c4b-9de7-4d2f-94a6-bd301e647800",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c5309130-c0cb-4e10-9d28-3e2a0c869dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483dab89-6a8a-4e18-8815-04db1b1e66f6",
        "cursor": {
          "ref": "b7681176-10f1-4a9e-9ef6-686632ef4d03",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "40d9f483-d0c6-4d93-b44f-28e69cea7ad3"
        },
        "item": {
          "id": "483dab89-6a8a-4e18-8815-04db1b1e66f6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a8cfd0a8-5d35-4173-b248-8fb92def6d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57157f38-6ec5-4ef0-9087-bc7c85d232de",
        "cursor": {
          "ref": "494858c7-ce4a-4125-b1fb-4b89eeaed777",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7b078a21-60b0-4e56-b1e7-a2081ca99bc0"
        },
        "item": {
          "id": "57157f38-6ec5-4ef0-9087-bc7c85d232de",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2e738231-bb80-480a-b47b-2d4f5f714024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46fdd5d1-2df1-491f-bd7e-14f4b5c0a02c",
        "cursor": {
          "ref": "1e008a1a-af11-4de6-bc61-c9f27612284e",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d0517683-f77b-41fd-be39-1cd489e4c971"
        },
        "item": {
          "id": "46fdd5d1-2df1-491f-bd7e-14f4b5c0a02c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fa8f188d-9c6d-458a-85b6-a40769ef74c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f760441-b975-4f4d-8f5b-69de2736b316",
        "cursor": {
          "ref": "fbde2727-4ef5-464e-b607-0f4db94c2e1c",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8c155e60-0138-4662-9ec5-8f66c98eb188"
        },
        "item": {
          "id": "0f760441-b975-4f4d-8f5b-69de2736b316",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "667cca2a-8ba5-47ef-a3c2-341639babb45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e57dd26-f732-4924-acc2-6132d055607f",
        "cursor": {
          "ref": "f0b2f2f7-2db5-44f4-b7f6-1186c63d2a74",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "aaaa8e3b-98e0-495c-ad78-2c8b029b301f"
        },
        "item": {
          "id": "9e57dd26-f732-4924-acc2-6132d055607f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6c798c6c-0d64-417a-be72-43313ee5cf7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ff3c12-f72e-457a-8bd8-4e09112b8bd7",
        "cursor": {
          "ref": "14cc39a4-39e4-4002-9502-1c828e32fa9e",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3532da9c-2b00-4e85-984b-269c0fe55875"
        },
        "item": {
          "id": "39ff3c12-f72e-457a-8bd8-4e09112b8bd7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bffa415f-b022-4c6d-a7aa-a7f0fb7a2f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd77e9bd-29b4-499f-82fb-b324a571a8b6",
        "cursor": {
          "ref": "19b70720-57f6-4405-b8c1-83857ab391c3",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b513c51e-a148-498b-88d5-2354f5cbc985"
        },
        "item": {
          "id": "bd77e9bd-29b4-499f-82fb-b324a571a8b6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d409acc6-fcde-4b36-85fb-0c66d7972796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a1629d-b4b3-4d91-9adb-29eb69b8010c",
        "cursor": {
          "ref": "a9fac634-ade3-4e09-9196-986ef34a2040",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "39a0d962-160a-4ff8-8ec7-b1f866583859"
        },
        "item": {
          "id": "91a1629d-b4b3-4d91-9adb-29eb69b8010c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "72c0dd2e-3c1e-4b37-b057-6b7462ffa8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524aadc0-1b45-487e-ac27-f3828bf2f9ef",
        "cursor": {
          "ref": "1ab9b660-a800-4930-a299-2aa49eca25a7",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a1fa017f-89cd-4a96-92a2-93a26ebc64e5"
        },
        "item": {
          "id": "524aadc0-1b45-487e-ac27-f3828bf2f9ef",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "90abca66-d5cc-4abd-b446-cf23e74e8a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb7bfbb-fd58-482a-baf3-8c463aa88b8a",
        "cursor": {
          "ref": "3bb468ff-acd0-478f-a288-a5f47641274f",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e863c0b4-7bd9-4b56-b3f4-6f3e53bd3daf"
        },
        "item": {
          "id": "8eb7bfbb-fd58-482a-baf3-8c463aa88b8a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "61483bc4-687b-4511-9f53-20034ffb5fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c5b4e5-4473-46c7-ade0-6efdc04d23e9",
        "cursor": {
          "ref": "7d1722ae-f617-46f9-b595-6af654dbc306",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2156506a-98d9-47de-ad88-271aa191a585"
        },
        "item": {
          "id": "82c5b4e5-4473-46c7-ade0-6efdc04d23e9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf68b9aa-d16e-4543-acf6-da96086e8401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15231c5-4f48-4beb-81ef-55d219f02153",
        "cursor": {
          "ref": "5775252c-4519-4881-85cb-b9004ea71801",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a1fb4d26-0243-4695-9bbe-740851afd5ac"
        },
        "item": {
          "id": "d15231c5-4f48-4beb-81ef-55d219f02153",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9c7c47d3-5d67-4079-aede-8514ce23140e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9870e105-1577-4aa2-b7fd-e3300ddeebd4",
        "cursor": {
          "ref": "20c32816-b479-43ae-8c7e-831a139738f2",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "7eb00c48-a82d-40fd-aa4d-56d23c2e5546"
        },
        "item": {
          "id": "9870e105-1577-4aa2-b7fd-e3300ddeebd4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "22e19ada-236f-438b-ac4a-704d887c4c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe187c5-1451-4ea7-be42-145cd02a8a53",
        "cursor": {
          "ref": "5d8fac04-29a2-4395-99e7-e33c22b3dd86",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3a1520aa-b71d-4a85-a343-212eab06c565"
        },
        "item": {
          "id": "1fe187c5-1451-4ea7-be42-145cd02a8a53",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1f05d8d1-f914-4ec8-8070-65a08ab14520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb2b12fa-0400-4ff6-9131-b9c8d0d6dfd6",
        "cursor": {
          "ref": "6d3bec4c-45d3-4ca6-92be-651bd5498744",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1a31700f-68c5-4747-bfef-c69e6103ceae"
        },
        "item": {
          "id": "fb2b12fa-0400-4ff6-9131-b9c8d0d6dfd6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c7a17942-12c5-45e9-aaa7-b44d87beee27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b6db97-9d2a-400a-9f2f-ae8641ef04ae",
        "cursor": {
          "ref": "96c1d8cb-c608-4aba-bcaf-257c5e58bb22",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cbeb9ad8-6b69-4917-a59f-ab8e0f3fb87d"
        },
        "item": {
          "id": "d2b6db97-9d2a-400a-9f2f-ae8641ef04ae",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2f223e57-e296-4840-8fc7-ca7ebb8335c9",
          "status": "OK",
          "code": 200,
          "responseTime": 287,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "93856571-f2b7-4692-8ab7-42b764ecf675",
        "cursor": {
          "ref": "aca47967-a50c-4ecb-a4e9-0b3c8468f57d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2ab8a40a-7a36-4e57-8fb0-247f7e91f8f7"
        },
        "item": {
          "id": "93856571-f2b7-4692-8ab7-42b764ecf675",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7110973e-bf4d-44f0-bc86-589af8e24dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc52717c-9d31-4bcf-a44a-fec9a94a9c06",
        "cursor": {
          "ref": "c1f01d51-de82-4f22-83b3-fc52b7ba6c40",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "895a2669-ec58-483a-9ad4-ce5a04dff158"
        },
        "item": {
          "id": "dc52717c-9d31-4bcf-a44a-fec9a94a9c06",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3e704cb1-d6e4-4fce-a28b-775f387bafab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70479335-ce39-49ee-88bc-e4f78b0e60bc",
        "cursor": {
          "ref": "e6a56048-7753-4139-92ba-0dbe9c1b9df5",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2c28425d-3b9e-4597-85a4-aeb94a477550"
        },
        "item": {
          "id": "70479335-ce39-49ee-88bc-e4f78b0e60bc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8c8ecaa5-c2f2-4a52-83a6-02c24f7fbe70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396065c7-dde7-4867-8401-8783a1d33250",
        "cursor": {
          "ref": "55fd338a-3c80-4284-b1ba-c03bf82200f1",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6605ab9b-65a8-4e0e-9211-a45b5af41ca8"
        },
        "item": {
          "id": "396065c7-dde7-4867-8401-8783a1d33250",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a3b59aee-85c7-4b63-aded-2115d7500a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c43680d-d7ce-4ec7-885d-9a6a403224d7",
        "cursor": {
          "ref": "daf36ff7-fddd-4a75-9c7a-785a31b04452",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cb2fa6c0-3fc7-4e09-8ad4-7ab0b2deac82"
        },
        "item": {
          "id": "6c43680d-d7ce-4ec7-885d-9a6a403224d7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ea2fd276-7684-4baa-be50-c6406246881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178d5736-c91e-4f1e-b43a-26a64b4d4330",
        "cursor": {
          "ref": "ddfae01c-c701-4f57-ae39-0aad451642b5",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d676a488-9a88-48ae-81f3-459d4acb0f0e"
        },
        "item": {
          "id": "178d5736-c91e-4f1e-b43a-26a64b4d4330",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "61fca5f1-3871-49f9-8645-f94b10d19620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fcf08-3290-4515-b077-edb952985ee8",
        "cursor": {
          "ref": "e4a0a767-8487-4b26-923a-b1167a51b1e2",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ae136a71-c294-4295-b279-9795aa3dfd33"
        },
        "item": {
          "id": "9c8fcf08-3290-4515-b077-edb952985ee8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f7e0fe0c-6ad8-48e2-9458-8d794fd6b3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e46e0c-cb93-4e81-b815-c4d728086ed9",
        "cursor": {
          "ref": "5188d39e-f522-4dbe-ae13-37d0a918bf86",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7ec209b2-a0bb-4314-86ec-7bea9ed22566"
        },
        "item": {
          "id": "64e46e0c-cb93-4e81-b815-c4d728086ed9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "47247cda-00a7-4838-8d82-c65750b08d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef0c81f-6eac-4ba2-850e-4e18ce962f8f",
        "cursor": {
          "ref": "71e1b508-a177-43de-9195-625b02d9df33",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d1cdd2da-b5a5-4d4a-ae99-f2d0dd3dba31"
        },
        "item": {
          "id": "aef0c81f-6eac-4ba2-850e-4e18ce962f8f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e9d248b7-3092-4b0f-9616-a306861176ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bbfe85-220f-4ab5-9e4c-28ec49d0026d",
        "cursor": {
          "ref": "b43ce097-7fef-480b-a803-7dc390a3c5fe",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "76c7ace6-28fe-4b7e-97ec-39085810b6db"
        },
        "item": {
          "id": "15bbfe85-220f-4ab5-9e4c-28ec49d0026d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "67ae1daf-893e-4ce0-b794-6eb1ea5e4d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d70f86e-48b2-47ae-bba8-ea2eb39d112a",
        "cursor": {
          "ref": "be132dde-e6d8-4759-8982-467223c72c7b",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a5b4ccef-7019-456f-87b9-c3c839afc791"
        },
        "item": {
          "id": "0d70f86e-48b2-47ae-bba8-ea2eb39d112a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "078ad441-e994-4042-8afc-9097da9f7e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cd78de-3a5a-4ba5-b281-1f86b0f7db94",
        "cursor": {
          "ref": "aff0cb4d-878d-49b8-aec1-af66fc060fbd",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c96aa4f3-f855-4a4d-a840-540d02a0cb0e"
        },
        "item": {
          "id": "46cd78de-3a5a-4ba5-b281-1f86b0f7db94",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c977b59d-eeb0-42e1-b60e-3cdbb35e07e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10dfe1b8-af53-4aac-b461-ab4648da051e",
        "cursor": {
          "ref": "1847d147-328e-4eed-81f8-eecf8ef94b57",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6736cbd3-47d1-4c7c-86c4-755f41920ce6"
        },
        "item": {
          "id": "10dfe1b8-af53-4aac-b461-ab4648da051e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a48231d9-b6a0-4172-a652-764202ac5a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d52b732-1509-4f05-b57b-fbd157b30d46",
        "cursor": {
          "ref": "d7267bc2-b1e1-43a9-8463-367105fa8f0c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cfad9bdb-2ac3-4e6d-90a5-69f31e395b0f"
        },
        "item": {
          "id": "4d52b732-1509-4f05-b57b-fbd157b30d46",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cd971779-484c-4526-9fb9-0e4a6f5d139e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f4c25f8-bf6f-42e1-9559-a08a34d94cf5",
        "cursor": {
          "ref": "5657e6ac-e03e-4274-97ac-5c7c73e4e99e",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "9d21b844-0775-4c20-899d-82021ea5c834"
        },
        "item": {
          "id": "7f4c25f8-bf6f-42e1-9559-a08a34d94cf5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9364c496-b0a9-40a3-aafc-4714df6497e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28dabea5-ef86-4804-849d-d22fe5649c34",
        "cursor": {
          "ref": "737882cd-7d73-4294-a508-d79b3f7431e9",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "65b4ff9d-d421-43aa-8a0b-075cea5b47b6"
        },
        "item": {
          "id": "28dabea5-ef86-4804-849d-d22fe5649c34",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "3b6e7f7b-cec7-40bd-9b51-6c645d761ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e80e29-a560-4d8d-9d12-7d032d5f091e",
        "cursor": {
          "ref": "b543d868-ec1e-4f4a-92ba-872a3e15fe46",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "758adf64-f6a1-48fb-ba28-619555d1bb31"
        },
        "item": {
          "id": "c4e80e29-a560-4d8d-9d12-7d032d5f091e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "cd612300-0b96-4918-8aa4-9eb4170a46b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b073e0f7-e493-4c56-b51e-2164eb471f2b",
        "cursor": {
          "ref": "7cd29480-81d3-4943-bbb9-761a4f719e89",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0af182d3-2307-41cd-8e9f-ba6a792a1cf5"
        },
        "item": {
          "id": "b073e0f7-e493-4c56-b51e-2164eb471f2b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "96e3e34e-292e-4eb3-b9c3-1a69b7f9335a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "911a28f5-d053-4533-a5d9-2c4771219bb5",
        "cursor": {
          "ref": "a861a0e9-32bc-43df-87bf-d586f3ae461a",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c72d6f7d-8583-4c67-a63c-307ac3f7642d"
        },
        "item": {
          "id": "911a28f5-d053-4533-a5d9-2c4771219bb5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "da146bb1-343c-48b0-b305-9d0743b38e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24eb45b3-62a3-42f3-b2b5-0f5fd0b35d84",
        "cursor": {
          "ref": "9acfbcb6-dc67-402f-8a5d-fbc768533c6c",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "326172ca-b9dd-4617-aaea-927d72aed195"
        },
        "item": {
          "id": "24eb45b3-62a3-42f3-b2b5-0f5fd0b35d84",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "18e2ff21-4009-43a3-a7ff-05130ef33f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b37c4d3-aea7-4491-b15a-2ca8f3aa3a3e",
        "cursor": {
          "ref": "290df7f1-7c42-43d6-9acb-320787141f39",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f5370edf-b68a-4c38-9903-66e117f4b807"
        },
        "item": {
          "id": "9b37c4d3-aea7-4491-b15a-2ca8f3aa3a3e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e451f9fd-8d0c-455c-81e8-7eb4f6204f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6d9c05d-eb67-4254-9934-613276fd7d35",
        "cursor": {
          "ref": "bda3fc47-a818-4dc2-a86b-479766c8ade3",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "40266f1d-7be1-44c8-8bf3-d5ccc8c81561"
        },
        "item": {
          "id": "e6d9c05d-eb67-4254-9934-613276fd7d35",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b82aaed5-5be2-4d89-b6f2-47a3aec95487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7757f2-9f51-47d5-b2aa-53520a8be306",
        "cursor": {
          "ref": "d81cd40d-9456-4d4f-b31f-8473d0c11654",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b7982fcc-50cc-4cd7-8a96-b53a48506c78"
        },
        "item": {
          "id": "9e7757f2-9f51-47d5-b2aa-53520a8be306",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "356627a5-01cc-4e49-9789-d6c9061e128d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e72a489-0fe0-424a-b83e-841407340c2a",
        "cursor": {
          "ref": "94e8a1af-289f-4a32-bb30-f9e33f0ae542",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "514d2d50-358b-4575-9ae1-352dc6113bcb"
        },
        "item": {
          "id": "4e72a489-0fe0-424a-b83e-841407340c2a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "247f11bf-7ddb-4fe2-b32e-10bc54e8b736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb10f9f-03b9-4b4e-ab0f-41cf855b842c",
        "cursor": {
          "ref": "d2594a9e-2d58-4314-b5b1-4931432e69f8",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dcb30cfd-f932-4375-a029-f19ed6a5984a"
        },
        "item": {
          "id": "eeb10f9f-03b9-4b4e-ab0f-41cf855b842c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5fd7d6e8-7726-40e7-9bda-7c20c78a2b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250a2488-418b-47f4-b283-277bd487ce87",
        "cursor": {
          "ref": "07882256-05e3-4f17-a238-880f61a09f4c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "316f2e5c-b9b2-4aa0-95f5-e375649c95ee"
        },
        "item": {
          "id": "250a2488-418b-47f4-b283-277bd487ce87",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5cbb004e-6ed8-4769-9c21-b423aa517c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9651cd0b-ef02-4193-9a73-f73ffbf6a3ff",
        "cursor": {
          "ref": "658c022a-276a-4aa4-bce8-a60609df6e72",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3de2f8be-2d91-4058-9b78-31c55d45a28e"
        },
        "item": {
          "id": "9651cd0b-ef02-4193-9a73-f73ffbf6a3ff",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "99bcbb04-d30e-495f-aa59-e12ade424f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c56bea-eb5b-4d3f-b364-0a3f6a86d77b",
        "cursor": {
          "ref": "1531ba22-2381-482c-9f68-1235ba13663e",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f03a639a-4093-4980-bf79-34316f889383"
        },
        "item": {
          "id": "05c56bea-eb5b-4d3f-b364-0a3f6a86d77b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "57089b19-5b47-4d13-aa0f-ff45eba60d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf18ae6-ed57-494c-ad70-7b575c142b23",
        "cursor": {
          "ref": "1cec5bde-8f80-4580-a460-e5980b1b1894",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c8501391-0ab2-499e-9a6d-4e11a704be8c"
        },
        "item": {
          "id": "abf18ae6-ed57-494c-ad70-7b575c142b23",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2550b72f-9ee1-4d80-a49a-eab959182f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a37a7e7-c0c9-4ca2-8bfd-3b9ba2c32b42",
        "cursor": {
          "ref": "a0a77ce8-4c0b-4a1d-ba0c-e9cead7cf04b",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "40dbf926-8781-4468-a44d-01035864329b"
        },
        "item": {
          "id": "7a37a7e7-c0c9-4ca2-8bfd-3b9ba2c32b42",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "61aebe26-f511-46d2-b584-915aaf6a2255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c9b610-a7ea-4d91-924d-784c818bc5dd",
        "cursor": {
          "ref": "00d27f22-2bba-46ac-8e34-cfa5267c7422",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2c95cebb-5c76-43df-b55f-36fdb4d5e54d"
        },
        "item": {
          "id": "a4c9b610-a7ea-4d91-924d-784c818bc5dd",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "18de4162-0a52-4b01-a8fc-be08c7c46dfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "121f844a-2ba5-48ac-968c-e5e4fd4bd575",
        "cursor": {
          "ref": "89b0f7c2-666d-4970-b1d2-74e64e7818cc",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f1ff9d3c-5558-42ec-aba0-170156548a06"
        },
        "item": {
          "id": "121f844a-2ba5-48ac-968c-e5e4fd4bd575",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4a9083d8-1c75-4cbe-bdda-48548d33bc02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8de5fdd-dd04-4933-8a18-13867c3e712e",
        "cursor": {
          "ref": "d9c66db1-e97b-403a-a35a-5958e6075473",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "44fe39e9-d1c4-4d64-b8d7-d06612be8ebd"
        },
        "item": {
          "id": "b8de5fdd-dd04-4933-8a18-13867c3e712e",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a1995b40-dd88-45d7-8146-752e2271f7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e834d2e1-5c36-4182-9d06-73bbcb034646",
        "cursor": {
          "ref": "b6d3e94f-c42c-40f0-b8b9-28021149dd0a",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "082678bc-438b-4edd-952a-4c708172cc26"
        },
        "item": {
          "id": "e834d2e1-5c36-4182-9d06-73bbcb034646",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "da59a528-ef06-46c5-b0eb-14751abdc867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0647e889-7562-4935-8b62-9021305af728",
        "cursor": {
          "ref": "752c8e15-3b2b-49e8-96be-e5292c4d8f39",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4fd44ccc-f01c-4259-8fda-0f63a182687b"
        },
        "item": {
          "id": "0647e889-7562-4935-8b62-9021305af728",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c85688a8-a984-468e-b86f-58e2b27e44a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32898116-c4ca-4bb9-9183-25185dd602ea",
        "cursor": {
          "ref": "3f6db94f-ffbf-434f-89f4-c2b6e56cca94",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "10a2981b-cb8b-4902-bd52-7c2fc0cd8975"
        },
        "item": {
          "id": "32898116-c4ca-4bb9-9183-25185dd602ea",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7b7cd3df-c014-4207-a0dd-a6f31ea2e534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301c8541-2abb-4d81-883c-42eaff40b7f7",
        "cursor": {
          "ref": "7e86432d-9d6c-4a73-84fd-ef84b9d9ac30",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2aa54c07-8c47-4de6-a394-0d6597eb9f38"
        },
        "item": {
          "id": "301c8541-2abb-4d81-883c-42eaff40b7f7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "30ae68c3-c8a6-4bff-8714-307080fdaa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b11e97-f0e9-41c6-acd3-90619ccc7257",
        "cursor": {
          "ref": "1f28b8f3-d899-449b-a895-f1bdb2e6d477",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e4059e7f-9f2d-4769-bbf4-5ece67a245cb"
        },
        "item": {
          "id": "55b11e97-f0e9-41c6-acd3-90619ccc7257",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ac10391-7162-4a10-807c-8c32db4c4834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0ab06b5-d11d-4164-b955-8444517093da",
        "cursor": {
          "ref": "9c566a96-3415-4977-b016-f034a9d729c5",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "539183cf-b7e6-426a-b141-6a00fad170b2"
        },
        "item": {
          "id": "a0ab06b5-d11d-4164-b955-8444517093da",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1ddbf398-eefe-4a4e-b69c-b19a677e8ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f35508b-96b7-45f7-965b-86f53a1e8abe",
        "cursor": {
          "ref": "9ed8e3ed-1c3d-4d51-bcf1-6d9cd8853eda",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "287bda17-4976-406a-9045-894bb100590e"
        },
        "item": {
          "id": "7f35508b-96b7-45f7-965b-86f53a1e8abe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "78da9bad-5cfd-48bc-ad87-b3362929e2db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891995be-7668-4c3e-b0c0-80be5245b901",
        "cursor": {
          "ref": "473225b7-6eb0-4afe-9c8d-e5b991e946f1",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bff657cb-03b7-4118-8740-ca1e5108a00c"
        },
        "item": {
          "id": "891995be-7668-4c3e-b0c0-80be5245b901",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2a7e03c2-1232-48ac-b8f1-91038016960c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48de52d6-6d34-42ab-bc20-366722558a80",
        "cursor": {
          "ref": "3337d44b-9f95-45b4-9bfd-148ef2bcd42d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a4aa0b7d-323c-4b8a-bf67-59d03636bd0b"
        },
        "item": {
          "id": "48de52d6-6d34-42ab-bc20-366722558a80",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3c122b0b-fd00-4df3-b6f8-d3a77207e022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1038e0c-2e10-412b-968f-ba8a39d34307",
        "cursor": {
          "ref": "461dc473-7dc2-40c0-b6b3-2c9813f194f1",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c78b449-056d-46dc-9324-9202102b7722"
        },
        "item": {
          "id": "c1038e0c-2e10-412b-968f-ba8a39d34307",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ba99ea2c-ca57-4ef6-9d73-5155f62ffdce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1446198b-6ae3-48a4-ba51-6f318d64bd9f",
        "cursor": {
          "ref": "de4665c7-7afc-48f4-86eb-b84df37aab17",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9f2cd147-8c7f-4ff1-8f5d-6a10987d4923"
        },
        "item": {
          "id": "1446198b-6ae3-48a4-ba51-6f318d64bd9f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "420c2274-d12c-4c17-bad3-86b8cea335ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77f6c86-3d09-4bd0-ab99-5f85b31d5f23",
        "cursor": {
          "ref": "63e81f7e-a9ab-485d-b007-2d4c1e1944da",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5bc99e39-a575-45ac-9f1e-ab77062ee721"
        },
        "item": {
          "id": "f77f6c86-3d09-4bd0-ab99-5f85b31d5f23",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "28d3f4f6-e9f2-4874-8c3c-2171cebcfd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7641a2-61ac-4a6d-b362-7f537b30fbc0",
        "cursor": {
          "ref": "d2ff88e9-00f3-4ef1-93de-2cfa9f09bf03",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9fb4ff45-ce7b-413e-89e2-d020ac920b45"
        },
        "item": {
          "id": "0b7641a2-61ac-4a6d-b362-7f537b30fbc0",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "fcd97739-7967-4156-8afe-943391fb6250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6bfb0f-9ab6-414e-9c0a-7b2a5ed13e85",
        "cursor": {
          "ref": "971c17de-b679-45ca-a091-905c8088d42e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "01074e40-7404-4825-9a9f-983b13cb96b6"
        },
        "item": {
          "id": "9d6bfb0f-9ab6-414e-9c0a-7b2a5ed13e85",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "70b4a74b-e733-4256-b61c-ea9ad6403154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d0e64f-d9ff-448b-8c29-74105cf880e0",
        "cursor": {
          "ref": "6ebb53ec-149b-48de-8cbb-76aa16b835b0",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "99e2965e-f720-4cf5-8318-8d3ed9c6061c"
        },
        "item": {
          "id": "44d0e64f-d9ff-448b-8c29-74105cf880e0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b2e9095e-392c-410f-b6ad-0bd9132fdf8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75090b9f-a44c-44ca-b2e5-055b6aacb274",
        "cursor": {
          "ref": "7901bfd8-f56f-49d6-b806-0f35925cedc8",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e73d274a-181d-4bec-b233-0c2e0991f3d1"
        },
        "item": {
          "id": "75090b9f-a44c-44ca-b2e5-055b6aacb274",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "29cbb660-5bab-4b8d-8fc4-fe4e5efa4fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89d9a35-ddc7-431e-868b-dd5828f40fc1",
        "cursor": {
          "ref": "9108c8df-f76c-46a4-89dc-49440a228982",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6980062b-b195-4d16-9dbf-0ae99b5e5e3e"
        },
        "item": {
          "id": "c89d9a35-ddc7-431e-868b-dd5828f40fc1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7fe88800-ec6b-43b3-9f77-9abe1b86d777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ae1fbd-9b7a-44fd-a961-11e65163f5ec",
        "cursor": {
          "ref": "f04b6ddf-7092-4b7c-a2cc-84e256f489c2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "92db5415-5f9f-4d51-ba13-9b72e287c6a7"
        },
        "item": {
          "id": "e3ae1fbd-9b7a-44fd-a961-11e65163f5ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c2ffe181-d1ad-4f08-87f7-ddd5d70f7587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3105f3-2f36-4684-b49e-798ad4c98798",
        "cursor": {
          "ref": "b71c7dad-eea7-472f-b156-637edce1e9a1",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5e92191e-62bd-4b2b-92bf-d2d4cdd81bdc"
        },
        "item": {
          "id": "8a3105f3-2f36-4684-b49e-798ad4c98798",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5755fffc-cfca-4bf4-867a-ffbea5f0a67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072ad556-59b1-4f4f-8bd2-efc4eb8e1fa5",
        "cursor": {
          "ref": "26eb12c5-efae-47ce-81a7-a37a7305e01e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5e9d787d-2142-42e5-84e5-93c35ec48b76"
        },
        "item": {
          "id": "072ad556-59b1-4f4f-8bd2-efc4eb8e1fa5",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e2f10898-a67d-4030-acaf-c3209a5bb646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f751e2-fa37-4574-88ab-2226bcbba2b8",
        "cursor": {
          "ref": "08953003-7f7e-4017-a669-3ce53a70321d",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f0f21858-055e-4942-aa69-e38af8655f88"
        },
        "item": {
          "id": "d1f751e2-fa37-4574-88ab-2226bcbba2b8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0e526e3d-b6f1-40eb-82c4-fa9541068da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0aee95-1fcc-4225-ba7f-bbf2f2e3466c",
        "cursor": {
          "ref": "327cb902-7043-4f88-bd72-3ea9cbef6df2",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4577860a-87e1-4818-8f02-c5fa3180a5d5"
        },
        "item": {
          "id": "5d0aee95-1fcc-4225-ba7f-bbf2f2e3466c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "56997f08-5dae-4522-b46d-7ea48cdbd1c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbed79a-abc6-4ce5-81c8-6e870e9333ff",
        "cursor": {
          "ref": "99b17a36-6bbe-4ce9-9c82-ec16d311a88c",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "31de3fa2-ee66-4d74-af53-7150fab9eecd"
        },
        "item": {
          "id": "fdbed79a-abc6-4ce5-81c8-6e870e9333ff",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2819d758-859b-4ad7-95c3-0896121b98d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd2d6897-6a0b-4b24-9f28-386790d8fd48",
        "cursor": {
          "ref": "aa61b0d2-1e73-400c-ad41-9d7725e04cf5",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ac36d6b3-c973-4479-aea6-56a99a00f3ce"
        },
        "item": {
          "id": "fd2d6897-6a0b-4b24-9f28-386790d8fd48",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5387b64a-4070-4400-9ac8-aeface893ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec6f8d5-a30b-4c8b-a9a7-33ec0ee4bc93",
        "cursor": {
          "ref": "0370a7ae-ddee-4ebc-a5bd-793d094aa668",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8d441fca-c7c5-4740-93b0-25f8e382a8d7"
        },
        "item": {
          "id": "2ec6f8d5-a30b-4c8b-a9a7-33ec0ee4bc93",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2d4c3038-5945-4126-86ca-fe48bef049b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e55e75e-458c-45d4-8983-bc3bfdf9d34b",
        "cursor": {
          "ref": "8b76f798-0a79-4528-bc4c-211e3b01b6bc",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b222fcc8-9e23-48f8-b4ef-dcdc7f2e6071"
        },
        "item": {
          "id": "7e55e75e-458c-45d4-8983-bc3bfdf9d34b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b71e7aa8-44d2-4d9a-a656-92a9310edafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba9b374-5a40-412f-9570-536ba67d1464",
        "cursor": {
          "ref": "217aed9f-6ca3-4525-9ee3-03eab36f5a40",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ad8d904c-67b4-4568-9408-6ef68d926a26"
        },
        "item": {
          "id": "3ba9b374-5a40-412f-9570-536ba67d1464",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c750ea9a-5e07-4ff6-b35b-7b50f0eec0e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc79fc2-568b-4aad-bd71-a19d9588c6e1",
        "cursor": {
          "ref": "b0f5b49e-bb7b-4191-8174-d409d8d41c2d",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ea680bb6-24b9-48d5-995a-fb74cc39a117"
        },
        "item": {
          "id": "4fc79fc2-568b-4aad-bd71-a19d9588c6e1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "3efa5033-65d8-4bf1-8038-238c9e78129d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b265156c-539b-4403-ba2e-722d7d5c687e",
        "cursor": {
          "ref": "94a569ec-44e5-4011-ad5d-70b74cdc2dad",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "cc7962f0-bdf2-447c-b639-6493c4560278"
        },
        "item": {
          "id": "b265156c-539b-4403-ba2e-722d7d5c687e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4e8f7e38-7418-4c12-b5d0-4945d3f0f283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1a14ae-899b-4fe5-a619-2477b29d38ac",
        "cursor": {
          "ref": "cd664965-9e98-485a-9605-2c6c5e4c2b54",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8faf257c-5fa7-4936-b66c-5e8a230c392c"
        },
        "item": {
          "id": "8b1a14ae-899b-4fe5-a619-2477b29d38ac",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8414bd96-d296-43c1-b55c-aa915013a482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c35988-a271-497c-a93e-474660912cb9",
        "cursor": {
          "ref": "dda1f0d3-2838-4a9e-a1d3-8b06d8d0af4e",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7e114c3b-9845-4f15-a506-5d60c98c34ef"
        },
        "item": {
          "id": "e4c35988-a271-497c-a93e-474660912cb9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "344d4b63-42e3-4120-976b-3b3b56e8dd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4867d074-be12-49d0-aea9-372d6949bcd2",
        "cursor": {
          "ref": "fdc1aa02-28e6-4cd2-9831-086a1032e455",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "69f683a6-fa24-4939-aea5-8afbb8004223"
        },
        "item": {
          "id": "4867d074-be12-49d0-aea9-372d6949bcd2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6942d5f8-e172-4fa2-87b9-66d1e3533bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04e4ed29-dcd4-4a79-9ff5-c16fc30642b3",
        "cursor": {
          "ref": "a8ad1ec9-797e-4e0f-bb6e-ce6f74834b17",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "0788350b-3b1a-439c-a5bd-c19279c71111"
        },
        "item": {
          "id": "04e4ed29-dcd4-4a79-9ff5-c16fc30642b3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4aeb6587-f742-458c-89bb-b9184b6e5376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8788c7-10ee-47f8-b735-12d48020bf69",
        "cursor": {
          "ref": "051f45db-5b16-41ce-b9f2-c38389142460",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5d34d06f-e288-4967-9451-6541123db995"
        },
        "item": {
          "id": "dd8788c7-10ee-47f8-b735-12d48020bf69",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e782c9c1-5aff-47d5-9bec-d4166809c483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230401a5-2853-4220-bdf7-0abf5c62c291",
        "cursor": {
          "ref": "f83661ac-cfa4-42f7-902a-8a123d26dc19",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a242adec-26c5-49d3-b9ec-ba99fbfe2ead"
        },
        "item": {
          "id": "230401a5-2853-4220-bdf7-0abf5c62c291",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8a85e29d-1e61-43f8-a33f-bb99d3f35722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7098e5d-e662-4d75-bed0-ddfbadec58a5",
        "cursor": {
          "ref": "626d2ba8-fa54-42b5-860e-53432834f62e",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3b43c47e-add5-4843-9d37-59292fd4f454"
        },
        "item": {
          "id": "e7098e5d-e662-4d75-bed0-ddfbadec58a5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9773844f-2feb-4949-b89a-e3cf988ce179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e09b482-3c86-4749-b1e0-86f5d87ef7d5",
        "cursor": {
          "ref": "98dd4094-6558-4487-a091-68aad7a7b4ea",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "34a533b1-7e36-477b-8f06-ec19bf7d6d1b"
        },
        "item": {
          "id": "8e09b482-3c86-4749-b1e0-86f5d87ef7d5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3f8d3909-8bb7-4acd-ba6f-12dbb1b8b621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96860c2b-f26f-41ee-baea-4533a634ac37",
        "cursor": {
          "ref": "082873c8-0715-434b-8726-d1b013ccde1d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7364c5c6-59d4-4cef-8070-e4b20e06fc76"
        },
        "item": {
          "id": "96860c2b-f26f-41ee-baea-4533a634ac37",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3e01a5f7-4b5f-428c-b0e7-25166ee213da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e0a728-8371-4222-8081-c47ecdf406bb",
        "cursor": {
          "ref": "afe990eb-e2d9-4690-86d0-a0aa129091df",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c3466d2d-7ed9-4613-a507-d73f9e900260"
        },
        "item": {
          "id": "92e0a728-8371-4222-8081-c47ecdf406bb",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6259c116-0452-48e6-a625-62f713488143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b7f332-6ed7-406a-8a6e-15ade8550c12",
        "cursor": {
          "ref": "4d827623-90ad-4ce8-98ee-4d12b61c7660",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "7855f840-8b8a-41a9-a4a8-54544103d3b1"
        },
        "item": {
          "id": "39b7f332-6ed7-406a-8a6e-15ade8550c12",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7b09d8ab-59ce-42e4-ae62-a1b16d64f09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6bcfab-1b35-4c4b-9595-9622ba2aa9b5",
        "cursor": {
          "ref": "85055cfe-ae02-4f93-8e94-142a8ab06daf",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "749c3b5b-4f11-4519-ae83-32fc29d7ec1f"
        },
        "item": {
          "id": "2e6bcfab-1b35-4c4b-9595-9622ba2aa9b5",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1f465ff5-aaa9-4a72-9491-896ef3538b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0902acd-f152-4b8f-a992-1d5b4386e88d",
        "cursor": {
          "ref": "86bf4f5b-7879-4d6e-8579-a37f1da3e587",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "89c451fb-aa38-4893-a7c3-5368618d57cf"
        },
        "item": {
          "id": "f0902acd-f152-4b8f-a992-1d5b4386e88d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8ba595c1-8360-459c-b2b0-3671d008082a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7d324c-eba8-4a64-b0ab-38184d858d8b",
        "cursor": {
          "ref": "8615d942-fe6b-4ed3-a401-e5bcab85c7ee",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bb09d20c-ee87-446f-89fd-1877ee17b687"
        },
        "item": {
          "id": "ab7d324c-eba8-4a64-b0ab-38184d858d8b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "84b1222d-30e1-4f05-b601-a17be182ac3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e95ac9-ec82-4946-883d-5bb41228327a",
        "cursor": {
          "ref": "be394253-36b8-46f4-9c2e-2b1cfbadc14c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "1143e541-aecb-4590-8dac-e61e4a231176"
        },
        "item": {
          "id": "63e95ac9-ec82-4946-883d-5bb41228327a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c8a18481-f65c-4ae7-8c67-ce8123143bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e11d40d-36d8-4e12-98d9-3d8d33129a89",
        "cursor": {
          "ref": "a37c66f1-e9cf-4a40-81ef-70ee14081eb1",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "62a18d43-75cf-4971-b9bc-566ecd54156f"
        },
        "item": {
          "id": "7e11d40d-36d8-4e12-98d9-3d8d33129a89",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ee14cd04-1cae-4d3a-b054-c3a9b4cf1cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a74d2-123a-4d70-9426-31a392140fc8",
        "cursor": {
          "ref": "458318c2-0e02-47b9-b39d-a95be3d90951",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bee6a5af-1d83-422c-a703-8fed8e9f1daa"
        },
        "item": {
          "id": "835a74d2-123a-4d70-9426-31a392140fc8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "402910a2-d655-4d36-874c-611fe5b8360a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350590f4-e756-4cba-9f0c-67a64027765c",
        "cursor": {
          "ref": "d469d9f2-0dbf-4179-b193-fed10b3e7d0d",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a326f910-d6ed-47ad-9afa-30fea3d38e51"
        },
        "item": {
          "id": "350590f4-e756-4cba-9f0c-67a64027765c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ca8d389d-8ef1-49cf-94e2-62ebaf27ae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c4354f-5989-437e-a6a4-d72eaba49422",
        "cursor": {
          "ref": "4dc902e9-ed3b-416c-8be6-1b6a13904700",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "834072f1-34ef-41b0-8ae9-369b41032f0c"
        },
        "item": {
          "id": "93c4354f-5989-437e-a6a4-d72eaba49422",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8ca4a13-ca19-4f6a-a7a2-d674b7c1fbeb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "32002672-652d-4214-a717-ae574678594c",
        "cursor": {
          "ref": "e27a93e5-8934-48c3-9a42-6dc2587283cc",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c5606140-3f03-48c5-91d2-b15512b90e6a"
        },
        "item": {
          "id": "32002672-652d-4214-a717-ae574678594c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9501c60f-d76c-4dda-9a55-022a0292e46f",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6014b34-7532-4a36-9c7f-df2ffb34947d",
        "cursor": {
          "ref": "7d55d2f5-fa48-4a4c-b66b-32bac6eefdd5",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "fad54bcd-4f52-48bb-9138-efa5b72a70c5"
        },
        "item": {
          "id": "e6014b34-7532-4a36-9c7f-df2ffb34947d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ef712e75-f092-4aa2-83da-c960c8ca3fa1",
          "status": "OK",
          "code": 200,
          "responseTime": 2396,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ceba82-9704-4874-b4cd-2f18161726fb",
        "cursor": {
          "ref": "55e6f533-cd3b-4eff-9025-86eae53ce041",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d500e8fc-d575-428f-96ba-36694170fcd2"
        },
        "item": {
          "id": "b0ceba82-9704-4874-b4cd-2f18161726fb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4f4035c7-d3d2-4a62-a152-321bdc1a0bde",
          "status": "OK",
          "code": 200,
          "responseTime": 2569,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc0919e-7476-4ca3-b8ea-d2ffbe236dd3",
        "cursor": {
          "ref": "3cf48dd0-ee83-48f8-9d3e-20a921742a76",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ec7f7723-b379-48f3-bcd1-9a3db33349e3"
        },
        "item": {
          "id": "5fc0919e-7476-4ca3-b8ea-d2ffbe236dd3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8fcebdf0-c126-4748-a6c5-0159cfe8649d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "5fc0919e-7476-4ca3-b8ea-d2ffbe236dd3",
        "cursor": {
          "ref": "3cf48dd0-ee83-48f8-9d3e-20a921742a76",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ec7f7723-b379-48f3-bcd1-9a3db33349e3"
        },
        "item": {
          "id": "5fc0919e-7476-4ca3-b8ea-d2ffbe236dd3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8fcebdf0-c126-4748-a6c5-0159cfe8649d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b8e1db3b-81e6-41b7-835b-d955240746bf",
        "cursor": {
          "ref": "74db9f96-44fd-4825-8b80-e18af69a8779",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "192e64a4-4b2d-4c27-b57d-56b87b09c8a8"
        },
        "item": {
          "id": "b8e1db3b-81e6-41b7-835b-d955240746bf",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0085d05f-383c-46a2-a3ff-0aad227510d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "b42ca040-05c5-4fab-b02b-70414d4781c5",
        "cursor": {
          "ref": "040c8ee8-6bd9-450a-862e-bff1ebd29df3",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "771667be-2749-42fc-baf2-5c4a27aaca25"
        },
        "item": {
          "id": "b42ca040-05c5-4fab-b02b-70414d4781c5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b3d88d9b-c205-46a4-885c-40f44d849152",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}