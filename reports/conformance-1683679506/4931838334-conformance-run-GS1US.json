{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9df3726c-42e8-4ac1-9671-cfbafde0502e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1b891771-c32c-4d3b-8127-c0617ed617b8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "859f4990-71cd-439e-8091-fe47c7637629",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9a06630a-e929-4159-9242-6e1f212254d6"
                }
              }
            ]
          },
          {
            "id": "204fb36d-a94e-4be0-aaf2-54fd971ebde2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e69d6674-fd3f-496b-a23e-bfebb814fd1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52ef01f8-1770-4845-9aeb-8716d54af957"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3f424ae-a725-4f7b-9e7d-1967923d661f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b5ded801-0825-4cc1-9d95-2aee1993c931",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0453f70-fc3a-45a4-83b4-6a262fc70fe7",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1027aaa6-9594-4c45-b7dd-72198e33b25c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a911a9fe-0b9a-42a3-8455-ecb44d066988"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a0c9618-817c-40e8-b820-95e788beb89a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b83f1b3a-f70b-4c33-a7a4-552b9f084af1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "21da73d4-cafc-479b-aff8-9596256a637b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed1b7e25-8929-4d70-acb7-8363914ae267"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "405f8091-5b41-45a9-8f29-b64957cd1f2e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "25af3b10-164d-41c0-b8f4-3de57f55d2bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "454a8efa-7bcd-461a-a5a3-a44ba91691dc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "47b2eef6-c6cc-4018-84cb-ca7dc451d0b3"
            }
          }
        ]
      },
      {
        "id": "48798f70-629f-474a-aedd-38d986839272",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a328c2c8-f910-4624-8e5e-ad97ec20ef96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7a3a19a-bc5a-4f94-a20a-5ab164cdba39",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "29ff615b-f5e7-4b45-afea-6fc9490d606a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e2809a-b9ec-402e-974a-6b03bbd8a2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a5bb1ec-1346-4980-aa6c-e45bba969f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3449ea93-7842-43ae-a92d-3473282971e8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b367c0-0ea2-4627-9f05-45cb6fbb1367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33bde748-f01c-43b3-a172-efca2d09d142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb8e3ab-faf1-4211-b6e4-bb80e65ad699",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02321d47-0fda-4e50-ba01-a8928335f7c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "111e4e90-5d72-4ddd-8d7d-60f62efa4fe7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2683a48a-44d1-420c-aa94-18fcee20bb25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd7eb28b-e85a-469b-b4d1-5811bd794944",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580a93f4-7466-404f-b196-a22987653fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a284e7d-d5fb-43d9-a4af-37e8c668d792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9171b3-db7f-4122-b973-0ed0621b42ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ba6e85-7c74-4ec9-bd64-172a01daa767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91ed8c3-a96d-46f8-8d47-461252d4ad61",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c68b8c0-5042-4576-ba99-eca286c3ef61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e88d011-a3a7-43c3-b6a3-3d02c82cc960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8819521-a13c-4129-a8f4-58bfea2c6c83",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "405f4561-b706-4696-95bb-58d9f0f70a40"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7da40db3-e15d-4c46-9377-c7a2cb7cb12c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "159c47c8-e02e-4af1-9fc0-1698bd4d979b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4d52619-7b2f-4e15-b383-645bd2f37357",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5da8202f-a719-4311-b38b-0bc48b0854ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b11ed51-dc7d-4f9f-9528-a1d1f1fc3c8c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "cca5c7da-e71c-4b15-8b9c-013077312214"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a92003f-be6a-451e-a131-091467b6cdc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1c57af3c-78fd-44ff-8f45-930bb69bd304"
            }
          }
        ]
      },
      {
        "id": "e778f71b-73bc-45c5-9916-9b40222f6c07",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "16ca4620-2467-462d-9b4b-d55191e485b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19e3357d-2b49-47db-8021-ebbf4f8e340b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7228d362-570e-4408-9ce1-6a80b8f119dc",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c993ba-f4c7-4abe-8ba3-f8b96b3cbf5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "804f5059-941f-404f-bbd7-cb3d5aff25cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b995e4a-2a58-4085-b547-8b9d7ee3a749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbcf815f-b91f-4d1f-923f-018b01c38ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3412366-edcd-4ec8-99d4-a9017e5f5509",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0881a47c-0031-4ac9-bf08-bec8f998d0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c93afdd7-fb18-4f20-9209-fcd75409a767"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f722b0f8-08b1-44d4-811c-c66c6a64766b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9872185-3bb5-4558-920b-43c7385543d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225c8a23-9358-4a3e-8fab-37e11500ca18",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bcffad-b046-4479-8916-537c8eb5ce9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d96935aa-ef1d-45ec-8062-21f7f7dbff3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047f6b21-78de-4337-996d-2a727e336396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cc97b0e-56a3-4f82-beef-57ced4d31d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65eaedca-c81a-4948-9a89-e1f736118d99",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257acd1a-68d9-4c94-8bbb-bff6c6a7c389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4affc72-2037-4182-a6a6-baff6618d399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d759a6-69a0-45a1-b608-d32a25218da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d4de23d-41aa-4c10-8ef9-afe42a0d5fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec5f8ad-8ce0-4e2b-9050-4f5301029c0f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215d6269-ea84-425e-82c2-872fed0b43b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21468187-54d7-42b9-881f-7b0eca571a2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865ddd51-e522-49af-b5f9-d0b5ff09313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71e8890b-32fa-4f6f-bdd8-45a57f8053fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fce7939-06a6-4e85-b102-abbf9057b71b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4dddb1c-2256-4a00-8d0e-b341fc693bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6183427d-93c2-4914-8703-9371f7913ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fa7957-4aca-4617-b779-3f47e6fbddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb069c56-877b-41ac-b4fc-085179f48bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0c44b2-6c71-4b41-a7fa-47ca12d1d0fd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a85d9be-4495-4578-ac03-b064e4d94405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3029109c-103f-4b8e-a7e9-dc0269515ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff178232-7bcc-49dd-95eb-595121269b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5ec9da5-bb34-4419-8059-be2808a49177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a61429-4a8c-4525-a672-39149472eed7",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74fa235-26e4-49a2-ae50-854fc4f22c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c1cdf5d-1142-4e6b-813a-44557d538792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c541e7f1-9746-49d2-afe0-2bde05f7eba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6bef8f08-be7b-41be-9ba7-31c28aec2be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c052c3-8817-4652-9277-db1d5edcca81",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b7807a-162c-4d71-b50a-3a7e783397b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c6c78-55eb-4a0a-9736-eb24ad757a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f1abcb-133c-407b-bacb-517cf4b675f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "826feb1d-7d47-40f1-a279-c568397118cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e3d404-284e-4ef4-a63f-a499a9f48e0a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91b8d13-148f-43b8-b20a-104922945860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ef18fe-6285-470e-ba93-444bb4040e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8d4360-6c89-496c-8475-25d675e0eb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c971a72b-a17b-4a7e-bc0e-b4574c51a424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ff6a1b-9b4b-465e-b7ec-f0728a1cad51",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d72021c3-42eb-4f86-827c-0ddca2c7b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc53fb61-6298-40d8-9b00-b9cfb0ff3bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71545115-b53c-4def-983d-7526829ffc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd1d04dc-723b-4ef8-b60f-5a0faa5610f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2de252f-06f8-4838-86ba-7ff351cb7323",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d954a7-0fd2-4f47-bd6d-d94c8027b9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2144b66d-b0f8-4c57-8548-4abeffa7a234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7a9d54-c8c0-406c-b344-1c2c3d8a1218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2fbeb30-72e6-4bd6-9bec-e8d9c39134f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78dba65e-f904-4cac-92f5-0310c78e7f81",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156017a2-f914-4493-b6dd-081ff8b309de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02ac77c-6ff5-46c3-b922-d2e3d7311b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47c6f15-3c6c-4ba1-b709-91488cd43783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bdee1035-b58c-4b27-b335-5eb5b1464275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af666b6b-d5b0-41f2-bcbf-f2e5c6e1add2",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8b4340-9aae-4d0b-82c5-14d7998a80d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213526f1-505a-42fa-b30e-2910ec5e2ea7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d217a6-3246-495e-891a-a75d789f824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a410c25-7b18-49fa-a014-b74f9854581a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51089a7-a08f-474e-899c-7b32c8ddc217",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24bbbfeb-c84e-4640-811d-4062ab301d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8144896e-527c-47eb-8e90-6ab4db3e4a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5c7b6-2042-4fec-86f0-77ef135b9915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1066c336-62c1-408c-9578-70ea13027883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3393bf99-7f74-4d11-aa31-a32712cc454b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a9be942-7688-42e1-b28b-adce97b0ed6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6fccb2-d5c1-44d5-b2b5-61044e696f4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "957e59e5-2993-43ec-a89b-40a20d17778c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36db3d4c-6f3f-4817-9b45-3ed5c6f7c38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a916956-3dde-48d9-9837-10a765854dff",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00934418-203b-4cdd-91ca-4ce5a7263bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8cf1281-c50e-4ddf-bdc2-39adc11ea7e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbb9638-dd6a-4911-9d3a-ed49a186df5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f300025-5b66-458c-9808-912fd9813dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05340e3-dc44-444d-b291-152c234bd077",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f890a6dc-7906-4e25-ae3a-896af020102b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5bfd65d-2f2f-4085-952a-b5a953e66dab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0970d437-028f-4441-b7d8-739446b08afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebc6377-9003-40df-8e51-f0592e03c188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b5c324-eb61-4d86-98e9-a6ad95b16da7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0bcda6a-4f55-4672-8454-ffc52c5782dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6939fc5e-d213-45c2-b30b-308ef7148cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81816fa8-b9c0-423b-8351-deaec6b482bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90137c4-6e26-44ae-bc8e-28ad82a273ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d241b48-217b-479e-8cc4-9b07a1ab7748",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e5cda7-1c01-4fec-9b4b-72e2663c5e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c6d956-58d9-4cdc-8cc8-a635c90fb517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f078a9-a74e-47ca-81fd-b7e4e45d3735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50ff6db6-51a1-40ec-acca-cc2cd44a61f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c97d3778-61f2-4859-a429-e5e102c1106d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3068fa4c-38d1-46db-98e7-c9d91b69730f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcc64a3-f51d-42c9-b0cf-14cbdeb5829a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0fe2ac-2942-41d4-8c4a-7d789da81232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aee0216-9996-4218-935c-63e0feab5f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318f0d4f-aee9-4d2f-8fe0-6880fbf57c10",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "433ca974-fa93-4c21-960c-06711acbcf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf352ad-db40-49e2-a43b-b6eaf3180d60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438701fa-a4fc-4304-be58-0eb0efdbc408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e3e30e-f8ca-4b9e-9160-7bca225f9b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4830cd3e-2b59-4db0-bf70-4898d0afb35f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f3fa0a-c7d4-4956-a12d-2b60740943e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c004b7-779a-4e68-8bd7-b2909783ed59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d492d26-313b-40e0-b6d8-e50b19030e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74303aad-e08d-40da-9650-15575a63b382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e847ae03-9abd-4313-9a6c-523b6926e29a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a98ec1-6c9a-4ab9-98a2-29ef58dd3338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abf38ce-71f4-4d29-b1b2-e90130668b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a01b85-093c-46ed-ac54-f9d24bc3813a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fd22810-0680-4c11-9056-4c4be0a39400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df00a07d-ad35-49e5-bd46-4806a7cea7e0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b448c56c-126b-4ab8-91df-8b71dcece54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4374391-3dbb-4817-ab6e-093944423a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb90f86-eee8-4cf5-9a13-03a435d3fe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc68a207-8beb-4a14-b2fc-873063c06501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79843dc9-d8f7-4b2b-8b68-18710ab028b4",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41acb6c-6f97-4f5c-87c4-b306ee0d3b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292fdf0e-f4b5-481d-825d-227ee207f35c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda0b73f-0404-44c2-b2b9-5d4c048b317d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11731e75-b9ea-425c-bcbf-28c166accc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6896fa5-77fb-432a-b15f-9befeb7d47c0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16daad22-9660-4b26-87b2-c49fcbe3ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f799270-76dd-4b36-899b-d38e73fef3cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683806bc-fc5e-4862-a939-60af69637382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "febb8c80-375f-41eb-8fc5-19a905a6a9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e243f94-bcc4-4bea-8696-892b0ae94862",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8a1b63-53f2-4d3b-96e2-3bb195e691ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7ec57a-11cb-447b-8675-226aaca1e61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36561c37-e1b4-4f6b-a0b3-48385b443fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84a154c1-f02c-458a-b13f-89dd1c8967c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf4b3a6-991d-4428-8dac-f7c2b2576483",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fa74c6-71ce-475c-877c-483ae4fe1c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d44bb9-3efd-4f6e-a3b5-1e4d36cb3bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e621d22-bb9e-4e6d-9fa4-92fab9547532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2271d6d-7bd0-4b87-8328-173012cd626e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbeb1e3d-4f69-4b58-8bad-503c33817ced",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507ffb3b-e9c6-41ac-b98b-6601bbd97471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67672b72-ede7-444a-b9e0-f4d447d7f6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c433bc2f-51bb-47c1-b66a-8b3cc4d0add1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "49c1dedb-1e05-46f1-a548-49de7fc6e3eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2702b3f5-90be-4d1d-9aa3-f38929e73b1a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29e300c-b7f4-4eb8-a3d1-57396539826f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9d5893-5430-4d20-8776-7e1fa9da5725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2263d6-e5da-40a1-a547-dfafc2681921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a201c17-641d-441b-8078-11b0dfdd6cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1e5528-5e04-48f0-99c7-c07037cc1871",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce0dff7-dc1a-4898-9db4-ac47040ce0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b67b391-1628-4d1e-a2e5-547fd27bc489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bf8f25-06b9-42bb-969c-21cc1c6fd423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b148ca-811c-4cf8-8d2e-b9746a423fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17655d2-023f-4081-91cc-238e55355959",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c56e238-4617-4b70-b1da-a0e370bf9b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2e8ad7-2571-445d-a001-2423039216be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955df679-028e-4358-9193-41b03ea96944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e4c4db-0c8c-44a3-805d-ea9c31627302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06870d85-f2d9-4d0b-af87-1dd0c8f347f7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fa4266-3261-4c06-8e63-c67365e75890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1b98c54-96fb-4219-9371-2c484036f23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d3432d-2f19-41f3-a1a5-f74df2d09bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de592fa8-29b5-491a-8a7c-249db394a5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d7985-afcc-4de6-b552-156b82084dd3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b31cfb-fac8-405f-ace5-24d3ec61a91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5bfb76-e49e-498b-a68b-72c4a958fd97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a27a6f-4fc1-4337-ba54-476d658243e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e475eb7b-a142-4540-b227-34f1232a6a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45013904-0ce9-4306-ab40-2fcd3d23dda4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fa1567-1775-4ae0-b035-91037b0c3db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e155d275-e1b5-414a-bc4b-374725dce4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb23b81-2b4d-41e6-99d6-156f5bfeb17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d4d8982-76ae-4cf0-bda0-65f7bf21dfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18950365-df8a-427a-b3b4-003b8d97ac24",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502d54db-8078-474b-84ef-1db6a2da0639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709fd794-49e5-4ea6-bb4f-4f5637a386d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ba5e64-e8cd-469e-bee4-0b56a19ee17b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5505b21d-be51-4316-b3ed-1d9cd00e5a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bc0f6b-d8eb-4983-89c0-54a27503ee74",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab86fd0-32cd-44ef-95c5-682f184ec583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0944446-7478-4ba3-818f-bb54e6af1218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1886abb-cbf4-4a84-a443-0a004a0c891a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "580e3630-d344-41c0-b227-06bf63af37c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06d23d2-eeec-4c13-b158-f25c037d4254",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24b117a-7757-4ce7-b7bf-ac291bf7b016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f8723c-39dc-46a6-991c-2579dd7792da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1641313-2714-46a6-850f-f9c8355d0e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2258bc-e643-4a8f-9791-a12446f0b9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffdda7a-cac1-43e6-846b-ca1911a42ce8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd865906-793d-40d5-983e-42f7f4fc9b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afad4c58-919a-42e1-9048-f7783619df5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb6e9b7-9033-425f-9457-1e41f3254021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "82af5d80-1335-44ef-bef7-59f23f5d7352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab903495-e6b1-4f28-9f57-b906552aaab9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3a10e6-98fa-4584-8d65-abf5561f82c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b6d16a2-8a8c-4a41-89f8-2b2505242e71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceab3de2-dda9-42ab-9160-50a6809b96ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b88c7475-dc97-4910-a1e2-7e9b415c83da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c35d4250-7e15-45b7-ade7-d6bcbaba699d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb4f536-cbc8-4f13-8913-13ffd3fea2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9210f44-4948-4aa1-bbab-7dc8b92186b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9d14bc-ed89-4b36-aaaa-3af1071f9a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbadefc-1175-441b-8ae9-909c51504d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a976b3-9b0b-4497-8cb4-95f419cce4d5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ff8753-8416-45ae-aea2-881cab92df8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5a1172-6e9a-4463-bb43-2cd7e73439a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f45b1b3-e9c0-48f6-9c81-55633d275ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "55743e4b-d7e4-477c-b328-661ad7d6b566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fb1e54-8e19-428d-9134-7bd76813c4e3",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29ac6a3-4f8b-4f5b-99e8-6d06ddadef8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ccc259-2c62-4bdc-b20a-538d4be8a6a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c08f23-3102-46d1-b8b9-299e3f277644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f275713a-4455-40ef-a3ad-2f71f8cdc8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e7df59-57e4-4b87-8ee9-c705523d6eca",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cded397b-865d-4cdb-87f2-5b32a2d61269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bab86e0-89ce-4103-90aa-30b9ca2e3c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4e57de-1554-4036-9cc9-30ac99cd526b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "302c1a53-b205-4616-9d5d-dcd140bb5fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b9a78f2-1051-4794-b918-aa0cf9b7ea0e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eed4da0-235a-4f28-91e4-9f66588011ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88d319e3-b6d9-4862-80f9-52ac6f082f43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff231aa8-9b20-4044-98d3-e71e40113c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17ba6c49-76b3-4b89-8383-fa33d93a76fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45dccbbe-099b-4253-8ff3-f26203d99811",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754cf868-0bbe-44e6-99df-0d5ca0d72f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2610b774-b5ae-4c57-b67a-10fbf576280b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9a5e68-ad10-444d-be13-0ae2753dad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9eba393e-d6fe-444d-93f4-9dbcb562c4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37de0e03-9415-4a9c-9dbf-6cc769fa45bf",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64f3b64-d21a-4a93-8ea1-37e65eebe9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17fa8f8c-5713-40ff-a590-2a3d060b36ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9225835-3659-4d1b-9648-40129638a4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04ac1074-1ae3-4a00-9fe3-dc6d31dbcd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da4d80c-ab8b-4f1c-9028-a478e64eb128",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4046f33e-f3c6-4a30-80e2-2e4fcf88d59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3029d41d-6247-416d-a65d-c8d0e79234c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5ad39a-bca1-4253-8334-626bfdc6556e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a68f3016-1310-4083-8a89-34909a1e7ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78916e7-4ff1-481d-8dbb-a3bd25a1f24e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92b43be-91e6-45a0-a11f-d47c1e540320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4955e514-d131-48c3-ba1f-41fe8998e233"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d288139d-bbd8-4675-a5ac-87668fd27a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02c16f63-c4b1-4f8e-867f-620dbfc2e17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b390a60-d747-4f5c-bed9-bab34fe08d7d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eaa415-5f0e-4d3d-8e11-7479937746c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff5b251-d805-4ec4-a10d-44c531c09426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2e13f3-1de2-412a-8d41-9e441e9ea304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "941a272b-2f74-4955-a052-e76ed87cbfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f4f380-42b0-4f59-a768-f496cee854da",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250e6d90-42fe-43f2-bf8e-0c90bc25ec7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081cb200-507c-4e84-bc81-5f90d16226d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5562a67a-1f6e-4686-b4d6-c4df7bd4b099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6fa647-8f22-4a1d-8372-01353a8243d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f9b998-e58a-4f73-833f-ce3ba20925f5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fadbbaaf-d66b-48d8-bf99-69e7b0513097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50fa1b38-2765-4746-a8c1-61523d706e36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31246c98-d667-42b4-943a-5bf231b8dde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59c571df-d20b-40d2-86b8-388b5a32af07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda4fb64-80e8-4ed5-9af9-b5d41f550e9a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb9da24-57de-4778-b52d-e09dd8c88345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb0cc19-80d3-491c-8bb5-d8b34e2a03d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b731066d-a940-4036-bfed-fc79e7dc85d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3451f9d8-b536-4889-b7d4-e933eb55ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b170ac12-c84a-40cd-988c-3e09275c10ac",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ede61a4-f5ca-469f-8cf1-4c6f7c8d5f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51e1902-3d5d-4b31-915f-45041beafe64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886e740c-6c10-4239-8b23-2b331baa7e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc043e78-fc89-49a9-9c89-2d393dd0239a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b3b429-d4a0-451a-a8d8-99a2a1ecb89b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3952286-de33-4e87-8766-dc081dafe672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a3f777-e7f1-4864-b964-d1626148e69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ae225a-9422-4361-bc4f-ece3bc43b5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "899640d4-8824-4c65-bbbc-96162010d56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a227d23c-50fb-4dba-ab9e-9ce4f94d96c3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71db8d2-f3fb-48ca-89cf-ce465f2b1a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3412229-4929-4cd7-876c-50b5c1485094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fc4979-4b9b-4722-8b4b-ea572302a681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0be2cc19-c2c5-478c-bc2f-0f3a662a8a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d9bbc0-0b19-41e4-b02d-c18b37bca74a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b14bb212-8db5-44bf-99b0-fa2327743686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3f36fdf-7f89-4996-a849-8e5d26b839db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b169f5c-148c-4fdc-aeff-3f9703236d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb7d7955-fa65-481e-9739-b10b96a59c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b989a-2c6c-4454-a3c8-5e8586b86b5c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba61db9-1a84-4bdd-821a-e827cce9aab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31203f1-a647-435a-970c-2f5058079964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f827ba4-2454-4b5d-a83c-e4de3c8c981c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6723e9-1484-4bf1-a664-34b53883ae0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4090466-1d49-4bbc-a12a-c5385d792684",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbafb93-4179-4a7a-a939-e5dfa2129e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a7d381-b078-4a0d-8d86-2662ea1764f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65d26eec-3682-4ab2-8790-3f1803d15c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d08329-dc64-4304-aafb-570731b6a836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a838b24-c148-4c9c-b68a-73c7ce96a94e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616571cd-c110-4c50-9000-8b9cddb8b3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f0c7a5-a809-4312-8bd4-fe005d1b0b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198d92ec-6cba-4667-81bd-d5590d511f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e54f49ea-13c7-4a11-a860-47ffc9d6157f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d43dc06-9f57-49d1-a022-67771a854125",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6f6e40-c11b-4def-9a82-888105a6eb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef71720-9262-4390-97f8-3f2bf5c8bc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a445fad-863b-4a6e-aec6-4ddd8458d7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4abd89dc-aa75-4a74-8722-6ca97540ffca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2379657-912d-4388-a907-6be609ece891",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dccffd3-94af-4edf-81a6-46346888d131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f742fbc-e5e8-407d-9bad-49e75cf3ee8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46c6845-5493-404e-a8b5-4bdb291ab3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e199ce-b3c1-49e4-95e3-c999fd12331e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fceb156-1fa2-4877-af88-de2937316c77",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7177285f-a7fc-41a7-83a4-b4af194e1730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21860caa-2393-40a5-9125-2f9312bf0534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a7d844-a631-4f55-95cd-f90e469cc9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66b9ee16-3859-4f91-b101-994ca66927db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9504e3-e318-490b-b04a-74d647d1093f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db660de-c54e-4f53-89ab-140b5cc47e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c693ae3-7c80-43ba-9684-71293718a635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4d5c35-50ce-4d23-afc8-84529d442d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5731531-98ce-4103-b956-c2dc54ea2339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fee9b8-e34d-4791-82bb-86bfbf335610",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7aeb70b-2a06-464e-a431-749c83754e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30dad1d4-4800-4051-ae3f-53df5d181016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6818177-037b-42d4-b1e0-bd00ba69eec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7d88c1-2a79-40f0-9f0f-65289cef2794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d2af90-041b-4f76-a1c7-68f2dfc894ea",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8480c634-8733-4207-b051-91e5ec1b3903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84040f14-a700-4a6c-b15d-81df2dc80e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc1d8db-69a8-4abc-a043-022f0c1e1dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1344a4-6304-415b-92a9-9ec02baed880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e736aa-9287-4e6f-abfc-0469bfe212d1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f898246-1fb2-428f-bcc5-83366539e60d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f1211d-d1b3-49ed-8cd1-447e3a6cd9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c0f603-0860-409c-9f8e-f17e3c0226e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99b131f-985d-46c7-8012-5050000912be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3cd1eb-e928-46c2-9f55-978fde625f8e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba5528d-ebdd-4b29-a6d4-d34d02ff15ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c814a8fe-323d-4863-9e83-33521bdff1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9bb98d4-5ea7-42f0-aa41-c4a564315e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "747f3e99-8869-48d8-8307-5ee1accb0a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb5ff016-52d0-4130-b6ed-6500ffce3ecf",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ebc8637-149a-4a99-bee8-6449c3b0fc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67001e25-78b6-4fef-9f45-4f2d5cbfb8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1036c24b-d388-4acf-ab49-bae95d963c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d160a369-922b-4db2-92ed-415abf6a5973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf66fad-8c26-4973-9617-857770b74f5a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a5103d-4550-4609-b427-6e676a8c63e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "985ed63f-91aa-43bf-8b17-decb3fad3ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e87e4d-00fb-4568-b9f8-d87b30da267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d73ecafc-8c6d-43ac-ad66-2e7ac9ccccd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abee6291-fbac-4ed3-acaa-2eaf2b572f2c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8710a0e-563e-458d-8e64-a3cf46718ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290f7cc2-71e8-4d94-9d56-3b49c6e8bad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031db59f-6d28-494f-a958-bac74522609c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4da2e793-bddf-456b-83fa-ca4b2afb4696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486fb025-0966-434c-ab59-95447b71533d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00680b0-aadf-4de2-b48a-4d3a8371d1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab8cbfb-0bcc-4387-a38d-e72a47afdee4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14eada66-34fa-4828-9068-4b93f038d05c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "988c2f19-be0c-40e1-ab57-351f485f3bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5438ca7-236a-464f-b2c9-a8e576cba516",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0866aae1-a022-4359-9b21-00a1008e85cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc19a758-a184-43b4-b8aa-ce9d7d3cc369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c9a472-7eac-4f4a-82ee-f0b87e8569b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3deb34-bcae-43a9-a3fa-0f1343d79ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccd9a18-291c-434e-960d-5f1004f4ff0b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e2c5ba-0d91-49d8-9ee1-f06e80accef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844dad66-c0da-4bc7-95fe-7528214a1ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48900daf-02d2-4b69-8c5a-b344459d0912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e35fc06-bfd6-4c96-8404-640fe899297c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84886a8e-519f-4775-b61b-99676b35ae4b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4791a09-4268-4455-90cf-b5372451067b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb61e22-f181-4ad3-bfa8-309731c26c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200979a5-bdc2-440e-b039-2e255c675888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81660558-99c1-4b58-b220-343508dc4515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a6b634-9249-4e35-b4c2-2de7be8724e3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c5a1ed-ecfc-4c88-8dbd-a63f12adeffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd4c3ea-dc64-4bac-8332-7b7e4db52818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc6285d-7fcb-4681-8667-e753e8420a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c05e0b-041f-4af2-b7a4-e2eecf52be21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9f9cb2-c9ce-47ed-a630-1072def92102",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c9901f-fa1f-4b82-98a4-dafd1cf780f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b1fcc7-9ef9-4256-afcc-558521ed1133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814eeda0-1bd1-4ac6-9d13-3a73c4704e5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f357581-d35d-423f-a4cc-8f72fbefe7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d8b7c6-3efa-4d67-9eff-66f41a960d63",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41560943-d1fb-413b-ace8-162011d4d74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450637cc-3a63-474f-a506-c7e4e0ddb72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb9bcc8-67eb-4fb3-ace6-cba3b0aff68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9df41ca1-95fa-4db4-b6eb-e6d279210fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5eae69-5892-411d-b867-48edb7e39c9d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5c06ba-ef68-4013-a290-efc636dd3242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3957b88-e8d0-44b8-b6c6-fab355486e10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3d4774-c7c7-43b7-9b8e-db880707c8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "198e4278-ab2c-46d4-9951-30b276eace2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c719ac-2a85-4534-86aa-1bd1c5dd8cd7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7163919-11e2-48ac-8b0a-d040ab701e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36112b36-b782-4944-abc4-10cccb73157e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21924a86-71a2-421a-becb-df4fd68fe163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4c9296a-04e3-41a3-a160-684d006c31c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6b2d55-e61e-4b4b-85d2-42ca850da417",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7deff50-ed9b-48cf-be24-3172f217b5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284c3c90-69b5-4af9-8737-ea833393a5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a62b59-c14d-408d-a91b-7bf89cb1416e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abeede33-4c23-430f-b875-7673317291d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "999d1efa-5023-4ffa-8b81-a44e6379c73b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2545ac-aa69-4090-b946-83ffdde73b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15afc9af-a6d9-4a2f-be39-0284b5c1dd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719f9604-974f-4ccd-b0a5-a1b0b7325f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5520a03-18b7-4d75-8772-74e3fc8c124a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33233e2c-fcbc-4416-84ea-a39a24ebeeca",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c381afb-927c-4d5b-9438-174d953cfd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927ddfb0-5f89-49a4-a258-033f2b31f5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7caffe4-3c73-4902-b25f-24b1317230a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "108ef4e1-10ce-4734-b7ae-6c76a3df8273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d541973-09a6-46cb-ad42-c3cfab52433c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f285eb-67dc-46b5-891e-604219b9923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58a7f9d6-1556-4750-bdab-2b4d0fb6677c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f98091-b643-44f7-8eba-ac6decd55691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87eeb7fb-5b93-4019-aa75-360c9045a160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03dca456-6499-478a-97ed-83aea42d7d8d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807debdf-8787-4bbb-a085-c406f1286b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608d2b2b-1006-4950-a3f6-397e8bde1483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd5e483-d253-40f0-8069-84c80ec4fef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8c999d-fcd4-4315-b136-af68a2a9d83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68851caa-7520-4e3f-92fb-95426cced76d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84d8117-aed2-480b-be58-c9f99b925f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4007c01-38e9-4335-8832-a455a3e8b603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745f01e4-1554-454b-8767-283770c76144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e571730-30c0-4f1e-a133-1aaa6e9ea70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2c33fc-80c3-420c-a00b-28cdc03406c2",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7f9efa-6c24-4c2a-8277-b20736c9d45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43db8cc3-b5bc-40f2-8234-3c5528d2936c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0914fd02-3ae2-4420-bb5b-406716e9590f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c80b2393-adbb-4963-a4df-ac7c53993496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2e4526-70e2-4f9d-a05d-b45486030079",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffcbde6-e48e-4dd8-b925-c08ebfbcf951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c559a2d-ed1e-4db3-80cf-96af9e903e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048cdecf-9f43-45e7-a04e-f588f4e4498c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "34c01b53-5af1-49e4-8734-245e527b1db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7854ab-09d8-416c-afb9-d27a993c29db",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca043a-81f5-466b-a6a6-e5b386b1c1ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70500967-f7d6-4ef7-a54e-b564fe120e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed35fdf-8932-4262-ba6a-b888a7791453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d645fe9b-2e36-47c5-b1ba-ff922f89ed6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960446b4-eff7-4601-a7a9-a00bb7f43b4a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4997cd1-1548-4512-8f37-eb42d1162c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9904ae0a-d664-448a-8d03-ed25d517874a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4bfc86-66cf-4e55-98a2-6f41ede3569d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "47840605-dc4f-41f0-b903-25c1cfe5b4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ecd814-f85a-4177-8d26-2116aa217d57",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384b4167-fef1-4ab7-9040-0ae435261862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fd089062-1f3a-4835-8562-90ec4ac1c6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed5ee79-de07-450b-ac08-f62b57ebbbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d74ea6b3-5725-4cc0-b73e-e2835bc7886d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "48f964a4-a27b-4faf-a14a-677a183934d8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0baa8045-361d-48a6-94e7-12f20ebde3af",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33cf55c-7b5e-4a6a-b1fa-7a8a56c952ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a2e819f-3af7-454d-9d1c-563274766f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c6e6e9-73e4-4437-a534-c5b65f5e8715",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3179768-991d-4519-a7cd-31e498284bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777f56c0-a470-432f-ba6a-c90e0af078f9",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c4a2d-d981-482c-8b4d-17837359b0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1352db3e-9e6e-4cda-abbf-2c02f81e5bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cec548f-0016-4cb6-912d-ba9756554fca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b95a02f5-8663-4c3f-b290-4a4609e5d9f1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4eb0598-ca29-443d-b545-7bd87d634496",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d957d7f3-56f6-4737-a651-456af0e25e27"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f4f14b2-68b2-4ba4-b624-6913e9f63031",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbf956d1-1cef-440a-928d-642ec932a5e4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cb0f424-536c-4c8b-a760-fb972f55f2af",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50a900bc-f502-4c99-84a7-0bcaf02154b4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "101bfc77-8ec0-4193-b9e9-2a605a87b56a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "23cd1ed0-4dd2-42ef-8842-8d28bb10c668"
                }
              }
            ]
          },
          {
            "id": "4e412b3f-bf53-41c3-8526-8fa539744c04",
            "name": "Positive Testing",
            "item": [
              {
                "id": "40efd3db-b4db-4228-9e2e-060713da10c1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4d1181c-2950-45d1-9aa2-b3372b7cf8c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9356dd07-c807-47b4-90cc-b7039391cc95"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce5073d4-dbb4-4700-a69d-68551e7be294",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa149d6c-ab0d-495a-9701-aaddb86cee57"
                    }
                  }
                ]
              },
              {
                "id": "0564e05e-57e6-4c8f-af4f-51da33e6f71f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44b8aef1-7bbe-4a33-9d75-cca565ac1136",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5007fcbe-588e-486d-80fe-42ed492fcae7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33d801ed-a89d-4997-8fed-e2dfda392bfe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c239b2e9-be71-491a-b02d-13f55358a3ea"
                    }
                  }
                ]
              },
              {
                "id": "d5af1d8a-4eec-4e2f-87dc-4dfe42e5ed8a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dcf81e6-cd9c-4cf2-994e-f487691341e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4919920b-c898-4e4f-bf80-b25d1aaa85f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "14d64a07-ffe5-4775-8761-05ad61f9e2cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db207dc8-ee67-4c25-b2c8-f8a4cb4fe86b"
                    }
                  }
                ]
              },
              {
                "id": "15d66297-9ca7-4603-a981-5c5c2d0799d6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6972a507-23ca-4646-bcea-f95d6ab7efc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dbd98dd-4cf8-4bbe-ad3b-ce80d3f41c43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3845cce7-7a69-4a85-8641-221e1537b032",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cc8c738d-facd-4e77-bb9c-ed3ec34e9eee"
                    }
                  }
                ]
              },
              {
                "id": "05bb2c65-398b-4d34-ac10-22ecf61be3cd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f262eef4-c1f9-4558-a24e-11da4c80c958",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "563c2f1a-f4da-4c4f-87bc-ccd7f23d7615"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f50ea13-37be-42ff-9046-c281f29d459a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e347990c-0366-43db-bf59-fbb2de84dc51"
                    }
                  }
                ]
              },
              {
                "id": "99b534c2-7769-4936-b5a7-a2edf6b22090",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25bf5d79-ed9d-4901-aaf1-28dc6dfc9af9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2c7c46df-be83-4c00-bc3e-909777da4ef2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37513c00-81f3-407f-b163-d944fe53309d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "894e0ca9-3c9b-4019-afc6-659c527c2834"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13e0a743-4b5a-4f45-8d9d-080c78dbee66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6389e84-1a0d-4a1e-9ca6-9db0955a411c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c209afd7-0a24-47d3-872c-1f513cc09695",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a5be7aa3-0267-4d1a-a45b-3d45362f4a4c"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d52cd384-9a27-4dbb-b13d-6d6aa040750c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "f6921e65-0781-427a-bc87-1300eb6408f2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a5cd0a4-9d21-4e7c-b8ae-3dc46f8fe13d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca6f378f-5f9f-4527-a156-075fe9a76c86"
            }
          }
        ]
      },
      {
        "id": "fa67c7ff-95bd-4b61-b983-c0973a6bffc1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "54b95024-9422-4b65-b1f2-ec29b1a94f87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "92dc01d1-6a7e-4f62-895e-7b9cd5d16378",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8ccdf756-83e8-4664-97a3-04b5a527e400",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b874c3-0a02-4226-8571-853f4cdcdd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0242c1c6-fb87-4dc4-a6b8-ae1e7a6918e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bed812-0dd5-44fa-9c15-4cf20de5462e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "accd4ac0-9c89-4fb2-b632-33e98688e060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97870cb1-2a18-4070-bc65-8843842c0ac0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223406cf-84aa-4187-a81e-b675071b8233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae86103-9ec6-428e-9935-9f7e8979a82b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68536d4-7344-4ea6-b029-e46b8a5200f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "60e6a553-8e19-4410-b4ab-4411edb665f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5026deee-bb04-4ac8-a7df-325d4327eeee",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5811986d-9f5d-49fd-83f8-62bb98075e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081da498-8bb2-4505-8794-a525fa7e1ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb31216-7e95-4516-98ae-8453c3227a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03c57e15-b561-423c-be34-3c4dced42bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da47ebc9-fbc5-4426-a5be-9f7724af1c21",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a85584-6e17-41d6-bb59-87903724764d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb07b23-c383-4de2-beab-29de62eacb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b2e62b-f48a-4c85-9306-509051fd206a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "627084de-1819-4f7f-9b02-39d71eba5366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ab92c63-b20d-45c8-a868-50afd65462bb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da85db0a-88b8-4b42-ae70-5560af395bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa203262-69b8-44c7-8b69-0e0073be6938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b74d166-35b3-436a-be1a-05c21419f79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85533a2b-0662-4112-852c-cfa9f78e4a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce13163-a69a-49d4-b975-a5db70602b12",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a212912-ffe0-4d09-9f82-7e895e367d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb1b01f-e0da-4611-8323-25ed8faeac99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05724681-b1b5-42e0-8425-a33ca678507f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e12a71b-8248-41e5-aedf-849ef6be6984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389251ea-f635-441e-838c-8c3e5a619831",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cb9608-2c16-41f7-af6b-42f5e23c471c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebde212-08c7-4b21-b414-0913b23b707a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96f8152-ccba-49a3-b921-01354924a5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "459129c5-6bf2-4104-b7b6-b17122f8a314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8e4870-952a-469a-ac7c-0bec42d5584b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f625e0-3168-43a7-83a0-ab521f50ff6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ca163fb-caa7-4367-b7dd-b99cb0540c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d3fa79-34d2-43f9-a7a5-dfdddfb884d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53014e84-dd3b-49b1-8319-38819cfed8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0240b53-fe31-4365-9bb9-b5e4819c641e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5a6c0b-564c-4ad6-abd8-798a5cb2374c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73a197eb-6804-4f6c-a095-17e59330e8d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2fdecd-6bab-4960-91cd-bb11dc464837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba9ad4e-d8b3-40f7-a1a3-fd897cfa8a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6c3d95-1e4a-49c6-9905-c12133106aaf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831b08c1-0b93-45ae-9e9c-f149240ec201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7653ad05-d03d-4526-a41a-7293d6561047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e12542f-2c75-4569-95a8-d60ace3906b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f64688a0-1b3a-4174-ac1d-64662dc554ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da4b38b-0a09-43c1-b81e-e63434c3b285",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847bd156-d61e-4114-8144-1b4cb6e59a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "badd1ec3-52e8-47d0-9b60-dfdbce576e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a9830d-f77a-48f9-8c81-34bce591fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f5036986-9d60-42c0-9f51-c7e7a27ce320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c0544e-2671-4be3-a242-4d28eb0a5f1b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9847917-33db-4278-806f-1843930bf5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01d30b7-c232-42dd-9223-afc93ade9de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7debd612-a734-42f5-9b4d-bd9f523a7408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aacff1f-edfb-480d-9642-58be19f33c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235477db-7a27-4fc5-9976-4aba97166150",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0aad60-0e70-4896-88e2-cd05034c8b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbb01e5-2401-43a5-a608-8a565c993b28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56cd3130-1804-4d37-957d-6c3b38f24173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0395b592-257c-45d1-bfc0-87bc8e4190ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f02d172-b8f2-4410-8405-be164b439813",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1320d2b-a7eb-42b5-9d7e-609b14222a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aace0b4d-1c7e-4eb9-b9a1-26afa84b659c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a67749-d964-47a6-9131-55d7eec59019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c423f6e-544b-4091-ac21-adf90b39dcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5320d84f-4a96-45a8-b5ef-e2a2c8ff564c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6a386e-66d6-4b83-bd1b-3a1dcc197023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4360b155-5451-4e68-8925-a2fd55066854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6481a365-03c3-4b67-9fa6-ea3ffc9bb738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2d1d834-569d-4ab6-9bd8-4fd8621ca7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f949df-0716-42df-9664-46cf975f2e88",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e10871b8-cf24-4452-ab7e-461416ccc8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5e37e18-e353-4768-869c-0162b3971a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8499056d-9b7f-45eb-974c-9551329b944a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "60532bcc-23ed-4ceb-b4be-8730c088e150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2413651f-95d6-4adb-85b5-21ab8fcacd41",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d8f364-30b2-4d18-b4b7-a4b609c85c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7655af-e1eb-45f7-bf93-80791c17ae93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26783f3-5847-412f-ae59-a08f9f9fa9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa2980b-c311-4d94-bedd-e48e617de0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47aaea8d-e2f7-403c-884a-cbd1ff840478",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf818ce-9c4d-4cd9-9956-99c61771332e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d38193-f915-4feb-b3c5-e5a96f2187bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248c1d1b-af13-4f45-80d6-03d1a522a938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "960f5f73-f66b-4c42-9da1-f00ee5dcefdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae91ccaf-cdd4-42eb-a9e1-d3511dd65d8c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c93320-b760-41c6-a898-c69b07257359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd97147-c236-41c1-a087-4447a072fa2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc668047-8caf-4bf6-ae24-86d15c484e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94e37e5f-eb8c-4cc6-899a-076e21302c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4db83f-0613-4af7-a8a5-faea08d7f26e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22479565-b973-40d5-87e2-a2b0b1d22f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffcf4cae-2455-44f1-ab0d-f47ea6a591dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40214084-5591-4fba-b14b-6e6269de0623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07271727-4a49-4647-ad56-5ed0eacaaa5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2e2336-8d39-4715-a3ab-c9cd7c060eea",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2917c87-dffd-4fcb-8a8b-59f554473caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c49486a-d10a-46e9-9eaa-aece37409f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c4e753-b4c5-4185-b5d8-0076d5a51936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "086dd795-00bc-4e4a-843b-02c01b2cf005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79daecc1-9493-4f32-819b-980270f223b7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb9b502-e077-4688-931c-899aac9cdbd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd2e0b7-003c-4a21-85a2-fcef70a088b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f0c6a8-75c4-412b-9dc5-2209bb429886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5794e64a-b579-4c28-8319-7e87057dd362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4390bee9-f93f-43d5-8fdb-8883a13ebd84",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1654631f-aae1-4b7a-be9c-d6b9851046cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bdd3d4-65f7-434b-b227-d22e09bbf458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "314bf286-5364-4ed2-8b9b-dfc9b4e51985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbafb4db-b262-421b-8588-3aea1dc6a6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a955144-4314-4e1e-a4ec-0871ff3c7039",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a8ed22-6732-4bc5-a5d4-f41c0f2ef87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e120a73-061e-475e-ac59-f9cc4d79006d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0202d44a-7591-4e26-b0ab-8cd1bd4a2743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "996bb03d-7bb0-4129-ba50-d20047018710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c383eab-24d1-4712-ae15-232832bf659b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13a4632-a4a3-452b-83ae-ba7a5a5cec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fc64c7-6ad4-4b06-82cf-7f3b3c83f06a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd93b25a-f563-4f93-9fc5-763906ab8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e93d270c-2734-465f-9e01-6ab4319f7173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e2a24c-aa1e-406d-b355-26cd9ef223d1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30efcea6-e58c-41b1-ab42-d42dc9cf1420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d149374-f616-4016-8a3e-fadcc50f17f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040413e2-9e92-4ede-adb7-982fa413bda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74992fb0-43c8-4ce2-90c3-d1617a18b986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efb7090-bebf-488f-9716-96d90c38ff3d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4c6a7c-d677-4f7e-95df-5f2c1a57f73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "137e3b9b-685d-4e6d-ae3d-050536fcccda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b41bec6-d43a-4329-9dc8-d729a062b9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfd42e5-678a-4d14-b400-2da147de7c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b6f240-61eb-4963-b4a8-a57044cd3a39",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090d5b21-d3a9-4cfe-b241-33087a5b3619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca22dda8-29d3-4977-92c5-c6dde8256f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34908f70-0191-43dd-9373-2889135e9fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9bf213-2643-43e9-b90c-d4fcd8272951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9ac10c-e0f7-41b6-9d9d-ad0464fc013d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77144a93-2085-4f6b-9d74-0ca6782a5397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e60f06d-353f-4e88-9b62-cd9bfd1de3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a48778-7261-46ac-b8b8-131fed911b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd61b617-c53b-4c42-8f01-c0038fb3b1a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0d146f-9760-49a8-9cde-d47c13795205",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bbd612-d708-4b73-88c6-789bd3c626e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2c3adde-f2e6-4ac3-b0a0-1b888bb0efbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95132304-11fa-44a9-897a-fa4a1d0ccc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a917a87-fa7d-4114-b8a7-ac26077b5ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8d0ed6-d454-4822-bdaa-f4b133d41cd0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e0c56e-b127-45a7-824c-8e0a82b38f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b2500d-65fc-488b-9bbc-be15c59304a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36e6204-ca18-4a75-8010-7bf487cc1361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd957bfe-08be-4c32-a868-ad6dae797060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3627e79e-9da7-4456-b7f1-0d3ae5d34a55",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8292953a-d5b8-4e98-a909-89ce81c69b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50588465-481c-4d70-8b16-a7749be50068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35104497-659b-4102-8cda-affabfca11b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28afe649-c713-4b2f-985a-8831f8ad4c3a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b22d9493-785f-4321-8efd-9e0a3aeafcaf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07d24f54-1254-4df9-b065-12be092cbb73",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d31c26-8f34-494b-98fd-3dbc9608643c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e6d1be70-edb2-4ef6-8c7d-c57dd2e19af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf01b52-a7c5-4b9f-b763-548c5a309a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1fe155ee-ddce-4bb2-8ad7-1c4d3b18c8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba1a5a1-1421-48a3-aa3c-64db8547855e",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef92f739-d434-4d4f-94f0-9076388e3310",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "cb6b310b-c70e-4e5c-8ccd-ef00d7fa8006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c50744-7893-4bc5-86ea-65e666d5f54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2c1a2f5-64b1-485f-984c-e40d98c80d13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "def91628-5320-48e5-8137-72a9858a1cfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79e844b5-8c90-467c-a3d3-db15d2d9ad60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48d41079-8ddb-49f1-9ec5-6d6b71facfd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97213ab3-b850-4c99-b557-76f248d6fcfc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0bc8e50d-2f6c-43e0-a1d0-08978ad1c6ae",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fec99473-c4c5-4d26-95f1-2f688b68ecff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27db765c-8d59-4dfa-95e8-63f2b29d64d0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "821e76f7-9a89-4479-ad50-7188764966c5"
            }
          }
        ]
      },
      {
        "id": "32f8e45d-4d51-4459-99d9-aa2f24a91b5e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1973697b-700d-426b-8631-a387a33adaf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "71a51754-598f-4e43-8498-6be18c43a4db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6995c244-4672-42d9-9c40-390d112fbea1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec75214-c8e5-431e-bbba-fc90f5afd71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf325b8-912e-471c-9974-44e3816d95a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c8256c-15e8-4b35-826e-89f3108e357b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f49812-8ffd-4678-86a2-01f9f4fbc408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f9b77e-17fb-4b3d-9adc-b297e99dbed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3435e96c-b301-4655-b26f-5aa150a57d05",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a74b47-b313-4edf-9207-c491a7787ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413c0769-acab-4b5b-9a31-c4c28b9b54e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718befc0-c57e-4efd-aa32-196ea7666467",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02be19df-4ecc-4523-a45b-9942ffa04fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb70e641-61f7-4d7e-ba9b-12c12347f83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e59913-6349-4b9d-a245-f53fcc51a44d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022fe86d-67fe-4c47-be97-7a3663fa102c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea362844-ca6d-486c-aecd-1d97c448b851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538fbd0a-6f03-4e99-88f4-8dae25245ced",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10309770-0ebf-4f23-8164-ce87d6490248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6caa2cef-3bad-4063-b966-43087c42d89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9616490-33b7-4181-984b-8db38e71e0b1",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701147f-6171-4373-bb37-e103d7cf9df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bef97858-b035-492f-b290-9c937b13f68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc8a0ffa-a22c-422e-850c-6483f2f98807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9224e9a1-86ca-4e7d-ac8e-f064a027c12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6637ac-0098-49f1-aba9-f04095f9a5af",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f801d0-74b8-486b-9cfa-02f4ee549ff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4627677d-e170-4a16-a284-f6a7a8c15099"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a0f922-44e3-4f88-acab-c44c0b4c841b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729f60e4-c044-4763-9bad-54241566c3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "771a61f5-7a9f-4610-b390-423212529239",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9a728f-93c2-4c54-884d-7a7747608cc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cd674bc-281c-4d69-8e5a-56ada834d92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e789646-4543-4245-b9b6-8e29b7bccdd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f63825-1819-444e-bfd1-3a4b04c0106f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fb5a6c-057b-4136-b4b3-1ca0b9408b32",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5276bde-e1fa-4e42-92af-b4bd4064fc51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56886913-e710-4367-858b-4b92aa091409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5ff7cc-b59d-48f3-bfa4-15956c4124db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c62a9af-886c-4669-b019-bd15bde3d84a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d48638-f75a-45c1-bf44-137c3c0ea119",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50767c60-7e7d-4389-aa70-adc8e5f5ced1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7026516-92e3-49e0-a824-950dbd089e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d371607-3786-4db3-9d0d-b398e610d0c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9468dce2-76fb-44bb-8030-1ac584c5b6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861b2f2c-291b-4f5d-b228-19b66fdbd63c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "535111c7-ef76-4adf-97b3-2d6a9ad36a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e80db2f-c348-487d-8acf-bad4d6862a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dc7eab-c046-4ec1-9ed8-b2d7c2346f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90619e4d-b398-422d-8e04-86d4dc86fb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f26759-de94-4cec-a8a9-bc0d5e5526b2",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c101add-26bd-4c85-9464-db5b66e5c9f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4fc6463-7a6f-440e-a60f-9ac3729272e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639f0a65-b0c8-4da2-8d20-28a197d207af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26697666-6ba9-4fa1-8bef-0fa63416b999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84858237-6bb4-4f64-91f7-7c653481beaa",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34b8416-9015-4cd9-ab17-1deaa67f603e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e83cdb9-ee80-451e-b6ae-e3dea94a7421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2829fe5a-9a91-44d9-9675-ec9093bad4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e812b1ad-bbf2-4f5e-a948-4b11d016cf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bf3b20-28c0-4010-bed1-f147baeb07f1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77cebacd-ae28-485d-81fc-6603cb362f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37945bbe-ca93-4ee9-bbba-d1a69ae9032d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "346a22d7-854e-4f0f-9cf1-721c271babc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1d3b73-36ef-4f92-90a4-1be23cb8f32a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a440d136-9817-480f-b828-b9e0f1c7fd0c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b4677f7-b780-40e8-b137-fccd2c169a8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c689395b-e6c7-4757-812b-8969a7764849"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db701b5b-9700-4ece-b067-0f3edaf3dd52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8e9ec9-c4db-4bbb-9f86-00783b116189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f622520a-66db-40a8-806a-90cbd5b909e9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cc75da-ae12-40e9-b26c-b4a8f7062ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c3690f-41dc-46df-8002-2733edabd29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa55f8d-6a92-4096-bc10-8d029052199f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70662dfa-d2ff-4d02-b519-ffb6cd26b055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b8dcad-2dac-4465-afb2-0e47f4e2fdeb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a0e6ec-b69a-4094-9473-0bdaf0ac43fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b25153a5-839f-485c-9b40-464ca28f3e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd14aa2-c0ac-4fb1-b752-a14c42a565cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bf08f1-5d56-4534-896e-095ab66bbb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b29aeec-68ac-4e20-8f24-b2f5095492fc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d55f4d1d-0989-4f71-acb8-e96d6af49039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4f1d2f-ce4a-4a3a-89bb-ef3bbc704240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79af9881-e4f4-467a-b2bf-e64c1360a78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e58646-a227-468e-a8d9-dc2fd13a19ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff8e1d1-3ee2-4851-af47-34cc753f58db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3890e25-1046-434b-9cca-9658f9781182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ed472f-5845-42d4-9092-fc63df720ff7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68895f03-ccd2-4757-bfbb-3bb5856a5b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f7cf7d-dfa5-416f-9f2a-bab41417f1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d33f9c-eb65-4557-885e-ba99057f6757",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c93bae2-98b1-4c5f-8e2f-3fc81dc90f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba31423-f27d-4359-872a-f72c4c066bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba0a230-2bec-4f35-91e9-fabf987e7266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474e9f27-3410-41c3-9bef-2c92d510795d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ae9dcf-fe3a-4a84-add9-9fe44e22ccb7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2134f9c0-b095-49d3-a9e4-e657d983b9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c6b8a2-e0da-4f1f-8846-66ec08968cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0c89e2-ba00-4b39-9216-0ad15d5eabbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2cafe8f-1122-4701-8437-dff1787640b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55c4cff-134a-41ec-9d37-2cebeaa8624d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508b516c-af5e-482d-a58b-3045691dcf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f41a3004-3887-4574-83b2-41aee2d5759c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a66004c-4834-402c-b40e-48269d1dda9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b92fa6-32fd-4024-8480-457a5e9341fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ae2def-86e9-4dca-bd1c-8850b2f58e3d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9351dc02-4f83-4ef8-b1c5-82f4f2f5fb2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0e275d9-6dc8-4e8b-a85a-c558346da8a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeac267-4d4f-4900-ae47-bd75c1beea42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4c6adf-156d-46f5-9790-08b4fcfe946b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb74763d-44c3-4ab5-ba51-4b5536504649",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029ac162-7cef-42fc-8a69-eec6133e2949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c6c06d-cb0f-4b66-8a59-b13b248e6fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cf1526-9e64-4f06-af22-d0d8c844ce18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e78c77-aa1a-46e7-8915-4e6e26495e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1127cd-5e2e-430c-a6d2-8c6cf90828f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78650647-fb78-49b2-ad91-b1cb4fe9b717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e849c999-e826-444c-a1c8-0ae75af12d25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531adf87-ce85-4b89-8b58-358b5695beb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f699c2cb-d823-4bf9-806f-9215aa8f4a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1694a1d9-91bc-483c-811c-3864f8583e76",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b3a1c7-86d8-4d25-b146-3e76a973d6af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "186b5869-5fd0-4e8a-8622-540fbab2c2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "884b210a-d125-4f1e-b920-bc95a0a2a973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89bc81a0-6004-413b-a707-224424805475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2622ec49-ed88-4e2f-9ba2-1d01f0efbc0a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3183eeda-3b35-4f4f-a29f-ed42f94f0b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118e4fbd-8362-45e3-9e08-51c582564de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749eab2a-48c4-4dfc-8f5e-ece95effc500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ac28c51-3a0d-4e4d-b1a3-456e84fba473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b0def4-ff5d-43be-9825-ecaa442fb559",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d3a121-5231-461d-8bd9-330d16485620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5378f71-b8d2-4079-86c0-9f87206ec65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383c3981-e250-405f-9bea-1274b77fc9a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5545159f-2f6b-45bf-a930-c7c905f9b306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ce89e6-2d71-497c-8257-c4b96dd5fed3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3ad59b-3852-43c5-a9f2-f3688805a946",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6db7e3-593b-4b6a-a5fd-e68541a5ab49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4074e9-1dba-4f8a-b063-9cd37038b40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ab01daf-1bfb-4fe9-bdce-c8447d4f6958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7defa0ce-8fe9-4011-a72a-518317e309f4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a03909b-ca0e-4b23-8ae6-856725657f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b73602-a89a-410b-9a3a-5de9b42d6907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec827eaa-aa24-4444-8eb8-596fc4060d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d741b45c-97ee-4f08-81ca-1dd8bab0cb22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c31063d-3161-4614-99bb-57b00ddec581",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ceaea43-10fd-4ec6-888a-a7874f6a6754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad2e4893-8051-4dfb-84d5-106c22c9868a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a497fbe9-a44e-4b8f-af12-4dd5d2e0fb2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e83fb6-ca75-4074-8ad6-43f52d87e197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6d6efa-8e7c-4684-8718-7a2d6171d3f2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f41a63ae-f179-4911-abce-24012384c8ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def7f11a-8561-4d41-ae88-2bebacbad4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a604be20-f248-4166-ab7e-a2d6a08f4dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d03ca960-baef-4dfd-b5e8-ec5c85dda413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5e2f33-4e08-4ecb-85e4-ef13961473a6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904ae770-80c4-4de7-9878-3884de807e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80cac488-ebce-4cd1-90db-25b5e24a337f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cf8ad0-1ab7-45de-90ef-3766c2da8f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae482b6-b9f1-4eee-9c1e-654c06d96582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97046e38-8386-45c5-90bf-c1f0e5e42b18",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34b1558-41c0-4407-bd88-5fdb928b7f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4111cf43-2f61-4051-9244-a307c9f46dc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0741507d-3148-4bbd-9f81-9eb781f26d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb68ddd5-1343-4b5a-a4a3-8302b40b4575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c996fff4-fb3d-48b5-8453-c77b1e86540b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0cbddb-096f-44ce-829d-68cd1fee46f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bae32c-22f3-4963-8188-b6c639bb6b27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ecaa2e-018c-43c4-a5f6-293956c1635d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6f0e6e-5505-4ab2-b235-998b798e4022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85f011ee-e3e6-4f82-a6ee-c23232f9b3f9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6887b691-bb75-466c-8df2-5aabc1bf3a45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a355ecf-710f-42c1-8751-8e6257479538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63dfcabe-ffaa-4a75-9e1e-0672aa227811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c8c049-fae3-4913-a102-8c7cfacf2923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b62e58a-c57b-41ea-8e2f-6df2fda0452f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69b83c3-2f41-46a5-b54b-f66e6bdbc0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "117c1eef-55f6-4664-b527-ff512861b43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf0334e-c135-4322-b8b8-ad0734e4e09c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98882828-c887-4fac-9055-a59cf908c80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd67cc8-9b54-43f7-8879-5ca2f495fbb5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e37427c5-bfed-4572-a8fe-a60b4d908d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996b0fb4-a56c-422b-8fa6-2485609fdf94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eae9f48-b676-4cc3-ae1a-61cb3a656054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd1e413-7850-47a7-a16f-c83b20948c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d584d7d-224e-4ecb-9fe4-c0a13c0082dc",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaba553b-185e-4199-b6f2-9bb4de9bfd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2556ef0-2532-404b-ae78-eb19872c658b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b060d97f-ee5a-463a-a38a-977055332451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a227e24d-1e3c-4abc-8ed7-72a62b5f3cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320780a6-57f1-404a-9a12-fa4ee9158c5e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb369ab-56ef-47d5-864d-a5abd560fdeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7affce9e-525a-451d-9756-611032b86940"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbb9ac8-c26f-4931-8417-28e4e1a86cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0e6f04-76b1-4f05-9716-cb4974a5bf54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1b809b-bf78-4ae3-82a0-ff39d1236cb6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bd3b90-3d2a-45f8-a4fa-ee667d63e787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9090e4-9462-4986-96d1-91f33ec5f627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09907ed0-e4d7-4be6-bd2e-d683c66b472d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad7fa21-125c-4099-a20a-dfe87bfcfbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3145bd-497a-4cef-a7d6-78c32d509a91",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89593f0-c7bc-47dc-b08c-daf217805f4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b427b36-55b7-40a3-8567-63b9a14f4cf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4e642e-d427-44ad-961c-503a8d1bd0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30029bfd-2eac-46ea-b6fd-50c54705d8cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ff81cc-5ec5-4c84-83eb-6c94cec42036",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce8db9d-f2a6-4509-bf1d-5b1a2d8b4810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7811a2f-e17e-42d1-a5b2-022d96404f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f09c98be-1779-47d5-b0c0-ce8a8378831d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df97caa-e474-4d03-beed-a6ab5af6e9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cca3f60-a588-48e5-a823-0dce28c022d8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3fea5-895a-4e56-b782-15f53c9ca7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bebad98-a7ed-4e1b-a866-75fbe048fbcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98bc326-1c51-4c39-a009-6924c7dd9c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e434d8-f149-474f-a90d-c3a8ae01eb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561b5851-399e-4c5b-a9bb-604f01ce0804",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356cb7df-554f-48c6-bec9-3ffa7785ec2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f9e2105-6328-4f16-8299-b091d281fcf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d1fa1b-0d46-48ad-96ae-5f5c9e7f5338",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70e0b13-3079-4cf2-a29e-7853fae022cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7954a78b-ab71-4ced-bdfe-3ce956ac439a",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df533fc-4e5d-4905-bd50-65a1ca24b574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "446edfcf-aca2-49c0-bb59-2e07f45e9864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa076ab-f372-4008-aedb-202a8c298359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4d62209-13ae-48c0-9758-edaf60fd7664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9649e8b2-5031-4200-b439-f1536fbc8910",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ee9215-af73-4f2c-a2e2-663935a2d425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f7e22a-0f5f-4672-88c2-de9c3d143066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df715ad-8405-471f-bcf8-2d197f845919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562aceeb-fb43-451a-8a46-04c7a70e52ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80759b9b-bd26-4305-9661-10c9f6278cc6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf64b72-2225-4e54-9cf1-5b0b8aa7ac43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215c53d5-43ee-4991-a885-16ac2c9b875d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cf7bbf-b338-4009-af11-d3736ac44a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ed31efb-c1da-4a45-be85-8a07d1237d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6439dac-b189-4c47-b8f4-771d0ca48053",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaca7ab-92e8-453f-ad77-6822c875022a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1a0a9f-f565-47d2-87d9-62c0218613d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cad1d8-45ac-4799-b2d3-86a7293819c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac04087-ad2a-48a3-8310-6b72143359ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29cc54e5-93ae-4196-b994-2b7224ad63cb",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af37398-7322-433b-bf52-c4e3d243b187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488bc929-a5e9-45e6-8e87-b6a4e43a6460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586d58fd-a52d-4737-985b-afbf3e0c7b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "909e5f39-43d5-493f-888e-7b4a0b749c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082d6cee-ff5d-4fa0-b7a5-7523ffab1368",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b6633d-c50d-4452-86c0-f5331e1b4e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922d0edf-0f57-4f99-9e30-97bf00a0743d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8b1abb-7a22-4450-b419-c7188bd32d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4922f6df-faee-4037-98f6-aade3d6c47cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f58cfd9-0831-43ee-969e-222d4c723b15",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf071186-8bda-4ca4-ba35-b89db2b5b3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa0879b6-0b06-4aaf-84a0-08f5a52ca373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9329e12b-dcde-4181-8ea5-8fbe5c734ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba95a071-0638-4f41-9898-b193e99e44c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec47b9bf-7ac4-46d9-9be0-f3cfa3ee4fe2",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ecdadcc-661a-4b13-8f46-6006b57cdd0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc58c87-ceac-4672-ba78-32cda26fbcac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f306a1d-9aa3-4b3e-a1b0-667c828525e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28fa0c4-9c06-41b0-8bb6-ec495955fe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9897f5d1-ef4b-4212-af9d-52d46d684f77",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fe85d1-81a1-4c1b-84d0-39bf8c20f3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c896699-3f22-4141-b86d-927db1cc4214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfec29e-a010-4176-a85f-518a982eb9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7e9fe3-65ef-452f-a68d-41bc33c9d17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71ae09e-eba6-466a-bd16-d8045bb082d6",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61cc303-92aa-4743-98ac-f041fb850bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e973837-fa1c-408d-b179-9f6cb46300ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd96f552-fbe3-444a-9621-ef1687ddc65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b130682-928e-4557-92dc-3b1f01c75520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3acf7fa4-4e94-4216-93d3-c98c8aa2461a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88762940-45ce-4a73-8c3d-65846786cd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a51ee10-0e94-4ec6-9af7-9b8d764c3f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22be079c-5775-4e4c-b975-eb141baf913e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ceaf251-9a6f-459a-8264-7028923d4136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7fd228-ae5a-40a8-89f4-806ac07a0075",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b370fc-3289-46de-921f-8cabe6e6a9c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70dcf2d0-2f54-46a2-bcff-86b0a6c2a5a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00084750-906f-45ce-9059-22fcd56b5535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79187244-e1ec-4aa2-8de4-0065d35e1f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a4e45e-07c8-4acd-9d98-79a69790f24a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2922b8-50f5-4e75-8e09-8ffe8f60b410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf21595d-c60e-4c1a-b487-03c675ca1c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b816e7bf-af92-4022-a4ce-14ee9f6eb0f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2a7700-94d8-467e-b327-fad016f64730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11e0329-0243-4ba5-a7fc-aab20a32be0b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cdb008-b228-4f76-9b6d-9887459513cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1138ab35-51ac-4048-9ba4-43c029ff7f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7be30d9-cae5-40d6-8d4a-7e0530ae3577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a78af92-6d4e-4f34-b839-c6768b819ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb98c24-3a90-46e0-b77f-965d2c5068e2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d2aaa3-eb9c-41e9-97c4-05b896f471a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9a18257-5f5b-426e-b480-9b0ffd0028ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e7b77a-6a53-4e8c-b37c-4a2bda4ff216",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7203b64-d020-4fc7-8932-a598b3699728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e01ccd-c2cd-4559-851e-6b28e1da126e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7769b1-db94-4efd-9d5d-3ef51c6ba68f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54feedca-7efd-4e12-bd5d-f959386120c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8f825d-c87a-426c-a4c6-e696e341aec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9c488b-ff80-47dc-92d2-d7eec85732d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca62073-12c9-4ab5-8944-5c518f374918",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191b9ea8-e9a0-453f-bc31-bf6dad72c49d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8d83bc-97ff-495a-88e1-4806c52ef7c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ffb1f54-0287-40cc-9a0c-18ee1c7582e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a81471e-e1b2-4e3b-aa7b-adcb6ede4051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4b0614-1c96-462c-ac40-590b6f0a5839",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668b99a0-70c3-4d86-898d-08c085a723b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5d4b8c4-422e-4a43-acb5-0f54e4bec3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "141ff24e-a8ef-4e29-9c3a-4993967d08d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49a88d3-7126-4ddb-9724-b2c707784886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b1c201-03b6-4e4c-9c0d-8b22d02c03ac",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c35255-b2d7-40a0-8df4-1cd48c558aa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98819650-f924-4a6d-914c-74e756ff4fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bce127-05bf-4127-983d-b144703b5ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a34ec3f-da5d-4472-82e5-1ef637f73456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc59b898-a4ba-4065-8e7f-5292b7076136",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eeb4d1d-046d-4bc2-8c3d-3cdae59babaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8fef278-f97b-4243-bbac-682af9a4e951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c9cc9a-96e2-4e35-895b-b4b0306c1065",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521f5b69-d8c2-496a-88a2-46529987e73c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c067216-b97b-4403-b4cd-dce4ff9f0611",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83881f9-e801-4a3e-8f78-75d691716ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b358cbca-ebdd-45d2-b9eb-a83a728e3c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2402770a-854c-4131-81e2-c50d8fbc3f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "756e7c80-4ace-4592-9059-4ffc08aa5753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6264937d-6ee3-4eac-99c8-b92a6cc5ce1a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539bdfda-b70e-45ff-9827-3b1aea705a50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec974bb8-eb05-425b-b183-06739ff322c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481b60f5-a74f-49ba-bfc7-71ac77656a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3fff3f-ce87-4057-af16-d72c02ff90ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b208ec5-84f2-4317-a078-1650da3c5459",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713e1d54-1430-4671-9f28-8270e2a85b86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6efc6e05-edcc-4ce1-9565-17b79713b815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47408fca-0d6b-4bb6-9cf1-053582fafa06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aefed5db-0c26-490a-8b98-949fe1e5b4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e37c5d-3ce9-4351-a4f0-92adc0c6282f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93bb1d89-acf4-4f37-a841-8827f28d20b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0595004-5b68-4aca-9704-7d7902828b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f4df57-a39e-4bc1-9511-79b853144128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0055078b-ff9f-4be6-8f87-6782176f2804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31310b50-3206-492b-a4be-2974e9e00337",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2be036d-5438-4b47-aba3-8572415c1f2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e64fc57-8a54-4e47-9389-4b1b863af2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7c9f63-658a-4b41-97a7-8ba3439ff97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f02b5b7b-f29c-46af-968c-7f5edd091329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd520b88-b323-4b10-8a1d-411b99e487a5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953ae9eb-3319-426e-b812-2764c7a562a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca9202bc-eee0-48a5-a483-70f34eb41fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad3c34d-838b-4641-ae76-074b73a8f655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "add19e6c-8781-4ecd-973a-f808413eef3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8b0747-fe19-497e-aa19-2189065ffcfa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3683fa-887b-4023-9b56-a3e2e0c70e13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4f6d317-7f7c-43d5-8c65-0ccf4d793c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f46389-1b18-4b40-bd22-0f2cd10e4118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4278cac-a271-469d-a725-2f37ddecb9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a9ffdc-0b27-4739-998b-3d73765b9169",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd470e6d-539d-497c-8348-759cf91d003d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3558aa9c-d0a4-4071-af8e-3e0cdf550f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adfb78b-cc01-4fd4-9445-cff153130829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f30f3f-85fc-4c32-9ad8-3859503e1152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09680ad3-7501-4e38-9554-1ac018022010",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31104afe-94e4-43b6-b237-4e75d6a44367",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ef0a929-2546-41b6-a64e-cff2bc7a643c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf52bae-e686-4d91-bc6c-bfa35507163a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52897b6-20e4-4326-b32c-1f26d2116a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e6245e-0c60-49da-8596-e6e6835756a8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c188ebd6-7350-4b6d-84f3-26c797f424ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca2dc1a-37ea-4d8d-948a-051c380e06bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37835399-79ba-4e7e-ba97-fea608199485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b91c6d80-fd01-46db-a935-3a675f75badf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac4ec7a-a431-495a-9d08-ca902981271d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936a04aa-fd18-4d6b-9048-c178f9637b7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2542fd3a-7715-414f-bb16-5cc71eb3bc8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b779dee9-5266-4dbd-af20-2a7bd64a00b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325798bf-5e54-4c81-8d3b-06faf173cf95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498b551f-3157-4fcf-bd8d-e9b36ff04d75",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5a29d5-4f86-429f-ad3d-c9bdbb86eba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf5ad8a-164e-4d5f-a502-6190ad476f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ebecc7-fe95-4aba-b7b6-19fbe6166a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0023754-629a-4405-94e7-c40414c80243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ebe218-eb87-42c4-acc9-0a7631e12486",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c484f1-a575-4559-92ce-9fe6aafb9ae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9ada168-454f-4e22-a328-e1d674aeca0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d407a48b-506d-43ae-8616-5361115680ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "003f4d17-f65a-4c7a-99cc-cb4710cac957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c894fe-1b1a-4e57-844d-9850cb834aed",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fd8f6c-be9e-41b2-b0c3-9c4ffae436f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "822abd7f-f817-44fe-bfb9-228822abace8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce88250-6bb8-4791-b703-832857834b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1dd31bc-398e-45ee-91b0-5fc16f41f54e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a26585-9445-4882-875e-56e903a672a0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79af4123-fc30-42e5-af2a-96b251764b11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b65d98-2e6b-4113-b909-469031ebd264"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33adff1e-3b0c-4257-96ca-08abe45c7757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fe3d4c-2a3b-451a-b7a0-75708ab68a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c9e49c-c862-48b2-902d-701b842fafb4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb8e501-acf8-42b3-9fc6-99a7851e6e15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffb731a4-6503-4eba-b9e8-98dc1715fd2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "770aa8e5-8d8d-430e-99dd-5e28a54648c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de7ab64-77a7-4e5f-8ac1-3a90aef9ceb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f42c59f-5a62-4bd6-9270-a24f84b618b8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3ad1c0-588c-4e79-959a-d1d63b8a6119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15a30c3b-a326-4f53-901c-188f6e58d44a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc12d38-b25c-4194-a6ec-943818ac1845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6253e5a1-810b-4675-a668-2ae088f615b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af70ec96-16ec-4737-896d-95266473f336",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0f2502-5934-47c4-a139-2d66c9e90fcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6af9e0-477d-4a95-ae72-870433ab4c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bfd922-2f32-4cfe-8253-35d7e2976a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edd02698-db09-43ad-9899-cd313ced2828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c064c42-2ce4-4a77-99a1-5a2ce725706b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ffd5f9-6521-4b87-a5fd-e61d1c9ff358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a34bed0d-b208-4ebb-8132-3f9757a728a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17557927-1dbb-4f29-b8e0-419b3eb936de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a604a3c9-3daf-4890-b3e1-4f0e86a79409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827151c3-78a7-4e42-b884-04a11b298b58",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f62820-921c-43cd-8a14-fb9dd4bbfcc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50f19851-bf0b-428f-a444-f96dbd6cc98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae37db8-1dc4-401c-876e-684acf0fbfa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902ba976-a6e8-4d05-99df-9ef2c5d7d2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda565a1-0476-4fdc-ae84-91296a11cf02",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75715086-1b24-48ed-9906-5e7452781f41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e46b88-74f7-42ce-a6c8-a8d810a7ca8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1678bc60-8f8a-4dd1-9a5d-c051ae38d673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b19b89b-1ba9-4979-8cdb-ef3ef4a2f3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cb5497-1b3b-4044-9157-65753224dae6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46645cb5-8121-4e38-8d76-db936907c111",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01f5f077-0f0d-46d8-8c91-d1d4fc7e06e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9033d7c3-1a3d-4283-b00c-ae1907fa1455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f71ad6f2-dd31-49ec-b09b-9549eb1b4d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4348b78e-8450-4b00-bf1e-d6a0db3371ca",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4497b681-9a25-4e2c-b173-30568c429d19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2248c4d-45a8-43c8-a50e-d3e1177da2b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60e7555-1f31-4a41-9081-26aabc4b8d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd3bdde-e659-4641-bc2b-b3ae6099499f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfa71f0-294c-4340-9964-b2a849552d67",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d281d74b-b4cf-446c-8bad-a1b3c3369b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cdeb746-26e0-40aa-913e-2851489361a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf975ef0-8767-49ea-908d-173f68f8d87d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9736a81-b37e-45fc-9103-6bb7c8fcd54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abb52bb-28e7-472f-b021-e447d07820a4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc05bc6-4be0-45fa-8457-39603a921b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d92395d1-6033-469a-b2c4-803e34c44f82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d4c3ea-a658-4144-b0be-6dd865d9180a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b0fa13-9152-4ae4-878b-7c8f199a6035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8cab2fd-416c-47c7-a316-5217a591bc2b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bf3153-ca34-46e4-b387-bccb3b0dcf5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31af0958-9140-431f-a7aa-3bd3cf65c783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a40a1c-7681-4a90-9168-b75b032db6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a25598-3b7f-4ae6-b57d-d25278352d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9872c51-108d-41fd-b3d8-93dfd28f6c4b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc7f06d-4e1d-4093-8711-dff85a135db0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e63dfb0d-2eb0-4560-ba3f-ca3011fcd3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5e07fb-a01f-48da-bb4e-5b0b81b3c41e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f840e52-a9e6-47e9-89c2-16e91405dadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc6d35d-e8c9-432e-9ea3-353f89d0f931",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31db4841-04f2-4995-80be-f2b7b4a64c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95cd200f-7936-46cf-93b4-2a08e130b89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41190453-ed54-44dc-ac0b-ece7fe8fa0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b0e899-a5e7-47eb-8d9d-fbc9b0c16fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dc8c77-51a4-4069-bff0-4299fac09616",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdc48ca-4c9c-4e51-97cf-fd49d8e9fb01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fa201ea-8d2b-44be-8b58-2ac1cf7da334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bac0c2-a4d2-4be8-a2dd-31d1bb00bf9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7214ff4-dc54-4f4f-9088-a73d3288a515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f094f05c-6130-4ac6-b757-9e10816401a0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398d62f7-d782-4849-82ba-774daeb7bad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e36adc76-a033-4333-acbd-482ebc9bb375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a625a464-2ef9-4b0e-a0e4-967e226b13e3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1837ba-283d-4608-b4e5-d8b39275149b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b6a839-33ad-4cf0-9d71-caa1ab8795f9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0724b5f0-a5d8-40f0-8fb9-fbf2657d8995",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a22b0147-560b-4174-8160-5da87f3e752b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad49a899-9fb6-4b7a-8d64-e4656814533b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fdd96c3-a8ae-4f09-8c95-a575e6814f12"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6402ca90-34d3-4b5f-b010-8e7c107b05a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6be668cf-6942-4f40-9813-295b4f58deec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2b3dbec-dae5-4c74-a712-8f51130f64d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0aae2ce1-2535-4150-b042-96c9dc5d8b8b"
                    }
                  }
                ]
              },
              {
                "id": "e896fc0e-08b9-48a6-a441-e521e046a027",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "162f5b06-5b61-4fc3-82e8-ced9faf3de79",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c77bd8a-cb14-4205-9a07-b77eabc89ceb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c8fd0fea-11fb-4456-a4f8-4b5436c08b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a22d77-5ce5-43d1-ace6-c6c175a23535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3264c85-30c3-4429-8ba2-67dee781d1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81fdc75-0348-48ce-9ca8-54c500ca87a5",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec7d426-3d2a-4777-9979-25e7c4e83149",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e06b0e7e-307e-4350-a00b-448e02a4f79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8300fd9-19f9-4373-880e-762f4495d2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bcb47ecf-58ea-4899-b0b1-7fffc3c29151"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7eeef40e-221f-40f8-88dc-d1d56ed464dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc5a3120-c85e-4cb0-82c9-f9e57ba9bd12"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec7600df-dcc5-42e6-832b-7116bc92da51",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "09bda6a5-44f0-4527-963a-9d56cdacec52"
                    }
                  }
                ]
              },
              {
                "id": "5883507b-6cf5-46b3-a4a1-469017ba492a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "07e48d10-e15f-4d63-9996-dbae53dc5f94",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1637fbaa-224f-4775-aed2-519b51f069bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0e1a2a55-f77a-449a-bcd6-3f86f2cefbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75476437-c118-4f86-9a99-b697a11ee6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14350665-06b9-4ae0-bf0a-25f72d39e305"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9b523902-04e2-401d-a015-90aaa44d88bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "242c860e-f2fa-4f0c-b3fc-f1eec9e8b8b0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "038a8443-3543-4c08-9b57-e502148c3a56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4e5ea647-4017-4edf-a6df-e9a503499908"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c9f967-7f5f-47bf-9469-eafbfc36102a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee24debe-d0f9-4ae2-aaf2-e194f745461f"
                    }
                  }
                ]
              },
              {
                "id": "81216c24-95df-4447-b5f0-f61a4b5ab7ab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be526244-c42a-4d2c-a041-7113d0a6ad15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a25fa737-07e9-4846-9e0b-e2893119f217"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d47b6be7-1279-4d53-b426-c9a7991d7879",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e84c7efd-8470-4310-8d6f-00d936e4f425"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e7fffc7-dab4-43f3-b668-77ac253d7930",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "52a9fec4-4a09-4c9d-b8a2-74f57752f75e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1b045a2-6f14-487e-8f8c-91046f0dbeb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f51fa3c-a4fe-4edd-b9ca-5616f06c47a0"
            }
          }
        ]
      },
      {
        "id": "aec39b31-7b39-4040-8a9b-026d50e3b7b0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "4132929e-f900-4421-bf1f-e51e2f267f5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ffc07d1d-c28d-4155-8130-929075a24cfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c580df6a-3df2-4d51-b4b4-2436b4735c3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f8f884f6-848d-4ac4-8a4b-f51bca84b613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88477761-ddfc-44af-8c19-1b5bd8c76d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e57013b-006d-4e45-9ec9-7e98e45a8e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f866bca-a5f9-4648-ac3d-72a3bdaffa09",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305d1007-308b-49cd-b809-45dbe943fb01",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f5f8df02-5773-4bdd-b108-feb7966b0775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3079b9ac-7563-4767-858d-6b64a3b96529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f19cddd2-bf6d-4cc7-9fdb-19cd769b657a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16e23ea6-19fb-4ff3-9743-f89cefdc0291",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f47565a1-ec6a-4c26-814e-1d3656fe0c59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c969d03-78c4-4fe7-8941-8ef815c5567a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "794fffcf-8bc9-47ce-80c7-03ccce1d3551"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "584b3983-f220-4c01-98d2-b75e0aee509e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a0d74375-5318-4d44-a648-20db3874adf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "714a52fe-f975-4402-88a0-aa14e7fdeba7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16e145fc-56cc-4227-b6e3-a18a4410847b"
            }
          }
        ]
      },
      {
        "id": "9426b79f-29a3-4358-92ff-6e5a54979332",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "099ffa9f-7aa8-4436-8012-8b28e890db2c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ec818b4-fa10-4f6d-a702-cbb1ff2d53b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f36ae44-aae9-474e-a9e4-52b7f5b7d659",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2553c4-d4bf-4f45-aa96-554fc42d68c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dad47033-f206-41ed-a4b2-64b90a2ad95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e143ec00-c322-42a1-b7dc-9db80fbb75ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e21266c7-3fef-4286-a4c4-48e19be723a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e3a6a1-b982-4035-b5e6-ee61ca538dff",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b0092b-1042-4cf5-a570-e2598d77f421",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "eace34ef-54e0-40eb-a6b6-09de1646a703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b103f67-59b6-4afc-889d-8d891bcccbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "78bf0165-21d7-4ab9-8cee-9fb72798f17e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6281abed-7b7a-4d28-b4d4-ef75193d982d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83e40a74-cf9e-4a27-9150-ca5abdaa613a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "42096298-601f-46ac-9d69-e52081b7af2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53289ab4-a43a-4fec-b572-e9b312a09959"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb3c0fe7-16e3-4f20-92c8-55f2ad3cb2c5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "34659493-274c-40d7-9f8a-8ac46c23031f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfd0ccd3-b9a5-4d3b-aab0-7df27cfc9233",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "285c3d31-a634-4805-a561-b94957063a00"
            }
          }
        ]
      },
      {
        "id": "5f66c76c-7ac9-45a7-9022-4d99f4bab6fd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fd8933df-8cff-4362-881d-23a1c0b85188",
            "name": "Negative Testing",
            "item": [
              {
                "id": "901c4783-bfc4-4986-9810-872f15740b22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a1d2f85-edc2-4ff1-991a-0f968ba0baeb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f6c607-355f-48cd-8bb6-accba40709d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d4e4c81-913c-455d-9b6d-6bcd09a14b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd797a1-ec8a-4c25-aa9d-c845b4bd751a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3f75400-7ec2-45c9-9d96-daf58357d5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16315c1-aea3-467d-8676-9d9f08fed732",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a729c7-bb94-4001-b327-1e6d16d151a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "de984d9c-c5d2-4481-996c-6cfd15087de3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b498dc21-2bf7-4d5e-b567-55ac7496d120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3956746d-fd58-46e8-b25c-af830bbb2bd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82bf454c-29b3-46af-888d-0b5512311093",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ad2086-5f3a-434f-b342-b45812be0576"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "88cfcb47-7da5-4c54-a1f0-9a475348952f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2353e688-d347-405e-8a39-7c0451342b4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bb89653-ebc8-4b78-8b99-7b56ac390fe5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "23b176e1-b5b1-4217-84fd-4356ec5bafc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d124ae31-1a19-4bd7-81e8-3946c422fa87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b27e097-85ba-4152-a012-8ae3097dee04"
            }
          }
        ]
      },
      {
        "id": "a79d6b26-9c0f-46be-9926-e804bf0bd2c9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49f8af66-1fef-4946-a32c-b30e1740dd33",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39ecc467-badd-44ab-adf1-de03a7865777",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c0446cdc-1ad1-4bd7-ac0f-50c741fe0282",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2fb6faa-7102-43c5-9c6e-ca37aaa61aeb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09b152c3-a588-4fe6-bb16-46f645796250",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 314.9115384615385,
      "responseMin": 15,
      "responseMax": 8564,
      "responseSd": 959.0224288814272,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683678998029,
      "completed": 1683679090323
    },
    "executions": [
      {
        "id": "1b891771-c32c-4d3b-8127-c0617ed617b8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "435a1bc5-033e-48e8-bf7e-0e7defc05ea8",
          "httpRequestId": "160810e1-2399-423c-b28f-109ed66d45c6"
        },
        "item": {
          "id": "1b891771-c32c-4d3b-8127-c0617ed617b8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c149e561-b065-4cef-a78d-c155911cd89b",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 0
        }
      },
      {
        "id": "204fb36d-a94e-4be0-aaf2-54fd971ebde2",
        "cursor": {
          "ref": "69a2068e-e2d8-4aaf-9c37-47db8760414a",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "78ce6ec4-c536-40c4-8d7a-00f5147d07d0"
        },
        "item": {
          "id": "204fb36d-a94e-4be0-aaf2-54fd971ebde2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a5742b2c-18ce-45c1-8ba6-981b84db9287",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "f0453f70-fc3a-45a4-83b4-6a262fc70fe7",
        "cursor": {
          "ref": "aec3b85c-b636-4188-b15a-be83d397b6d4",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "57ace044-4b62-4770-a631-85e0d3b46f86"
        },
        "item": {
          "id": "f0453f70-fc3a-45a4-83b4-6a262fc70fe7",
          "name": "did_json"
        },
        "response": {
          "id": "724ebe46-d9f0-4231-b61f-9a7598051c83",
          "status": "OK",
          "code": 200,
          "responseTime": 435,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ff615b-f5e7-4b45-afea-6fc9490d606a",
        "cursor": {
          "ref": "f457e8c0-afb6-4a9b-a2ad-e1c338b2486a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "591f5b13-3129-4345-a80c-ffa7d6998cd3"
        },
        "item": {
          "id": "29ff615b-f5e7-4b45-afea-6fc9490d606a",
          "name": "did:invalid"
        },
        "response": {
          "id": "63ad265b-a9ac-4542-beac-2213ca1039b5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1113,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "29ff615b-f5e7-4b45-afea-6fc9490d606a",
        "cursor": {
          "ref": "f457e8c0-afb6-4a9b-a2ad-e1c338b2486a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "591f5b13-3129-4345-a80c-ffa7d6998cd3"
        },
        "item": {
          "id": "29ff615b-f5e7-4b45-afea-6fc9490d606a",
          "name": "did:invalid"
        },
        "response": {
          "id": "63ad265b-a9ac-4542-beac-2213ca1039b5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1113,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3449ea93-7842-43ae-a92d-3473282971e8",
        "cursor": {
          "ref": "adb02f9a-6801-4bd1-8042-e4fc67a0db40",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cf1c33ad-9dfd-4d8e-9a4f-156b6e412762"
        },
        "item": {
          "id": "3449ea93-7842-43ae-a92d-3473282971e8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "34dfd866-f2e3-4bd9-aa90-1387b6bedfbb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb8e3ab-faf1-4211-b6e4-bb80e65ad699",
        "cursor": {
          "ref": "8aa06a58-51f4-4071-922c-c915ca44de22",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6fdf1faf-68dd-421c-9ed1-461fbe32c5ef"
        },
        "item": {
          "id": "2bb8e3ab-faf1-4211-b6e4-bb80e65ad699",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c1d8206d-d731-476a-9d5b-3958301a7b6f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7eb28b-e85a-469b-b4d1-5811bd794944",
        "cursor": {
          "ref": "0abaf0fa-fb0e-4d49-94e7-b8e7eac73e75",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a0ffcdf6-bb78-4d1e-b82a-244877f3bb50"
        },
        "item": {
          "id": "fd7eb28b-e85a-469b-b4d1-5811bd794944",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4b16206d-db48-4040-a3d8-a5ee2bb4be69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "f91ed8c3-a96d-46f8-8d47-461252d4ad61",
        "cursor": {
          "ref": "6fed8cf1-b802-486b-b973-99a0a822b9b9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "967fc89c-bbc4-41dd-bc7f-485de091642e"
        },
        "item": {
          "id": "f91ed8c3-a96d-46f8-8d47-461252d4ad61",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b7e59061-4f95-4c2f-9bc6-c252c9553bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "f91ed8c3-a96d-46f8-8d47-461252d4ad61",
        "cursor": {
          "ref": "6fed8cf1-b802-486b-b973-99a0a822b9b9",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "967fc89c-bbc4-41dd-bc7f-485de091642e"
        },
        "item": {
          "id": "f91ed8c3-a96d-46f8-8d47-461252d4ad61",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b7e59061-4f95-4c2f-9bc6-c252c9553bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "159c47c8-e02e-4af1-9fc0-1698bd4d979b",
        "cursor": {
          "ref": "4f739131-6fe3-4d8d-a878-c0aadcd2a5cc",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d189dd4b-deb5-48d6-bb46-b98ec6075613"
        },
        "item": {
          "id": "159c47c8-e02e-4af1-9fc0-1698bd4d979b",
          "name": "identifiers"
        },
        "response": {
          "id": "b76f2a97-744f-4999-a2dc-4a9efc98339c",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7228d362-570e-4408-9ce1-6a80b8f119dc",
        "cursor": {
          "ref": "a4e4fbd7-3cd3-44f6-aca1-c97c9db3d50c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "97437b0b-5408-405c-89e9-bc5b1a1035f9"
        },
        "item": {
          "id": "7228d362-570e-4408-9ce1-6a80b8f119dc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "63f41fed-bf33-404a-8308-a527bf5809bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7228d362-570e-4408-9ce1-6a80b8f119dc",
        "cursor": {
          "ref": "a4e4fbd7-3cd3-44f6-aca1-c97c9db3d50c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "97437b0b-5408-405c-89e9-bc5b1a1035f9"
        },
        "item": {
          "id": "7228d362-570e-4408-9ce1-6a80b8f119dc",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "63f41fed-bf33-404a-8308-a527bf5809bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3412366-edcd-4ec8-99d4-a9017e5f5509",
        "cursor": {
          "ref": "4a450861-b06a-4ea3-92bc-cb1ab23d34e2",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e1760d4b-d874-4549-8990-1b2aa5245f09"
        },
        "item": {
          "id": "f3412366-edcd-4ec8-99d4-a9017e5f5509",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "bffd59b8-ec95-4db4-95f4-86b55c52c73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225c8a23-9358-4a3e-8fab-37e11500ca18",
        "cursor": {
          "ref": "7550ec89-0393-4cd0-ba87-258b1f802a39",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "04102172-8396-41e1-a797-b4526d90cb35"
        },
        "item": {
          "id": "225c8a23-9358-4a3e-8fab-37e11500ca18",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b073af4b-e977-4662-9fb9-da387bd68ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65eaedca-c81a-4948-9a89-e1f736118d99",
        "cursor": {
          "ref": "cfea30a9-1f53-4a16-a0e4-42020313bceb",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "da5a9e00-eaaa-4066-9495-c26be2a47e69"
        },
        "item": {
          "id": "65eaedca-c81a-4948-9a89-e1f736118d99",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "19c79aca-6e49-4bb5-8742-45ba67ba2c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec5f8ad-8ce0-4e2b-9050-4f5301029c0f",
        "cursor": {
          "ref": "5fc30b82-d0d6-438e-abe8-373926f69f27",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2d09d118-8605-4f02-8a35-f110fd75242c"
        },
        "item": {
          "id": "dec5f8ad-8ce0-4e2b-9050-4f5301029c0f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4417186b-c4ed-44df-869f-401ab30cc5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fce7939-06a6-4e85-b102-abbf9057b71b",
        "cursor": {
          "ref": "443f8e13-95c9-4397-99ad-5e3f5e24a607",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "09044d16-4d84-4aa1-8876-a580e5bc044b"
        },
        "item": {
          "id": "4fce7939-06a6-4e85-b102-abbf9057b71b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7fddd155-a7c3-4bf0-a444-ea59e48f8b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0c44b2-6c71-4b41-a7fa-47ca12d1d0fd",
        "cursor": {
          "ref": "696e3546-b0d7-4fba-a903-9f4d56d58ba2",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "87a95ef7-07cf-4ad3-9e1e-28a991264ac8"
        },
        "item": {
          "id": "9b0c44b2-6c71-4b41-a7fa-47ca12d1d0fd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad624cc8-5a4c-4c6e-be13-902660153bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a61429-4a8c-4525-a672-39149472eed7",
        "cursor": {
          "ref": "049926f9-eba0-4930-9f68-4f2cc9b18e63",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e4909010-92cb-4105-9d24-b2001c471cf7"
        },
        "item": {
          "id": "11a61429-4a8c-4525-a672-39149472eed7",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "af9a5a72-df0d-4e4e-8de3-03b8a0d8ee8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c052c3-8817-4652-9277-db1d5edcca81",
        "cursor": {
          "ref": "c3c11180-0096-4f6c-985f-fba15d4446e7",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c0024a63-867f-46b4-b044-9a2b1148c3ac"
        },
        "item": {
          "id": "38c052c3-8817-4652-9277-db1d5edcca81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "4a121c2f-f814-445f-91bf-16a6e70c9775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e3d404-284e-4ef4-a63f-a499a9f48e0a",
        "cursor": {
          "ref": "008095ee-05fd-42ab-b050-52fac42b36a0",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fa9e0ec4-f183-4977-84e5-197e1703d932"
        },
        "item": {
          "id": "b2e3d404-284e-4ef4-a63f-a499a9f48e0a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9a8001e3-4def-4f41-9e27-bd5407fa034b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff6a1b-9b4b-465e-b7ec-f0728a1cad51",
        "cursor": {
          "ref": "7c1b105b-3eed-4c18-bbee-ad80f0078ce1",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4150925e-b000-483c-9839-5b36d133118b"
        },
        "item": {
          "id": "23ff6a1b-9b4b-465e-b7ec-f0728a1cad51",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "42664d4a-4455-4509-9636-9bf7c89e249a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2de252f-06f8-4838-86ba-7ff351cb7323",
        "cursor": {
          "ref": "895e5c2f-ae6d-4c62-bf45-8749089e95ef",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "545feeff-f092-491a-81d8-9490f48f644f"
        },
        "item": {
          "id": "b2de252f-06f8-4838-86ba-7ff351cb7323",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0d0a823d-9cce-4f62-9b5f-eaf2ab25b3fa",
          "status": "Created",
          "code": 201,
          "responseTime": 1041,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "78dba65e-f904-4cac-92f5-0310c78e7f81",
        "cursor": {
          "ref": "6c8b31a4-3d7d-4c60-a6c4-da616767f4ca",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec348ebb-3af0-41dc-b41e-f7c3ff4ceaa7"
        },
        "item": {
          "id": "78dba65e-f904-4cac-92f5-0310c78e7f81",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "58958884-b3ce-43f3-b402-7598541c2403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af666b6b-d5b0-41f2-bcbf-f2e5c6e1add2",
        "cursor": {
          "ref": "9f5371bb-6462-46bd-b063-740d6e51290e",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c1832927-efac-4d47-bdae-700b434e5b07"
        },
        "item": {
          "id": "af666b6b-d5b0-41f2-bcbf-f2e5c6e1add2",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d3513f5b-6623-4792-b792-6d9715aabb7b",
          "status": "Created",
          "code": 201,
          "responseTime": 5164,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f51089a7-a08f-474e-899c-7b32c8ddc217",
        "cursor": {
          "ref": "c95565e5-573d-4a4d-9b84-fe68c1a7e55c",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "36f72580-226c-4baf-b675-63c37078996c"
        },
        "item": {
          "id": "f51089a7-a08f-474e-899c-7b32c8ddc217",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "92d59871-4685-4188-8c59-2e1e3cc03541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3393bf99-7f74-4d11-aa31-a32712cc454b",
        "cursor": {
          "ref": "2585692b-d0af-4d5d-b162-0317a9ecdc2a",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c26e196f-6e9e-4066-be85-738caa21d3d0"
        },
        "item": {
          "id": "3393bf99-7f74-4d11-aa31-a32712cc454b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c0e454f6-a33c-4e6d-9405-29d444d63e7b",
          "status": "Created",
          "code": 201,
          "responseTime": 5491,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "0a916956-3dde-48d9-9837-10a765854dff",
        "cursor": {
          "ref": "ab8217fe-05c5-4bfb-ade6-39fb0d903e39",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7776cb53-eb48-4284-869f-e3cf0653c334"
        },
        "item": {
          "id": "0a916956-3dde-48d9-9837-10a765854dff",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f7dbea86-8e4f-43fd-b370-f7ee4bfb11bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05340e3-dc44-444d-b291-152c234bd077",
        "cursor": {
          "ref": "7195552c-4355-4ef9-8e88-00861c65bf57",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "180e56ba-7924-4d11-aae5-f1049503313e"
        },
        "item": {
          "id": "e05340e3-dc44-444d-b291-152c234bd077",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0101dc05-8330-473d-bcfb-ddf74c8a5e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b5c324-eb61-4d86-98e9-a6ad95b16da7",
        "cursor": {
          "ref": "37a44875-6b14-4645-879e-6b006663a5aa",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c746fb70-2235-4511-97f2-bdd072145dd5"
        },
        "item": {
          "id": "79b5c324-eb61-4d86-98e9-a6ad95b16da7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0d7dfe99-297e-4f6d-a65f-8367652087dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d241b48-217b-479e-8cc4-9b07a1ab7748",
        "cursor": {
          "ref": "f476411a-a157-4e3c-b99c-86f4d7ae6976",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9f8cf3e0-8a41-44a2-8a83-75258cdf79cb"
        },
        "item": {
          "id": "5d241b48-217b-479e-8cc4-9b07a1ab7748",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f21a0dcd-9aa3-4872-9f52-88f43dd01229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c97d3778-61f2-4859-a429-e5e102c1106d",
        "cursor": {
          "ref": "e9cec45e-6737-48ab-a43e-d80168535c35",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6712ad68-4256-4574-a767-630946d7d5f3"
        },
        "item": {
          "id": "c97d3778-61f2-4859-a429-e5e102c1106d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a914926d-1d83-4636-8b8c-d38530812413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318f0d4f-aee9-4d2f-8fe0-6880fbf57c10",
        "cursor": {
          "ref": "f5bef4a3-405f-4f95-8982-686f74cfbfac",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8506ff32-5135-41b1-b82f-4bc7a303f067"
        },
        "item": {
          "id": "318f0d4f-aee9-4d2f-8fe0-6880fbf57c10",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5267eb7d-4eae-45de-b11c-ab964424467f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4830cd3e-2b59-4db0-bf70-4898d0afb35f",
        "cursor": {
          "ref": "ec1bd213-742d-4ffc-8034-4fcf81ec2f60",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6b728920-81f6-4ece-8fd8-f0ee62e0f4ba"
        },
        "item": {
          "id": "4830cd3e-2b59-4db0-bf70-4898d0afb35f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "48855e93-8905-409f-81af-05793ee8fc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e847ae03-9abd-4313-9a6c-523b6926e29a",
        "cursor": {
          "ref": "612f6320-b712-4720-b6d7-60e6b2222d49",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3ad566f8-e636-4374-a8d4-fc5212600626"
        },
        "item": {
          "id": "e847ae03-9abd-4313-9a6c-523b6926e29a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "dfdf5eac-e23f-4daa-91cd-a58892edc855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df00a07d-ad35-49e5-bd46-4806a7cea7e0",
        "cursor": {
          "ref": "563bde63-1f47-4c7e-bbda-47d8c6df6fef",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "da6cc470-58fc-4710-902e-57419d646f20"
        },
        "item": {
          "id": "df00a07d-ad35-49e5-bd46-4806a7cea7e0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "171aa2e4-b956-4ae7-8b0f-2c84a1422fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79843dc9-d8f7-4b2b-8b68-18710ab028b4",
        "cursor": {
          "ref": "5bdb1947-aa40-43dd-bb13-130aac916ecb",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "199037bd-dcd8-4efc-b9fb-4c4ce07f5d3b"
        },
        "item": {
          "id": "79843dc9-d8f7-4b2b-8b68-18710ab028b4",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "800016e8-9ad4-4015-b463-c7d61a0d04ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6896fa5-77fb-432a-b15f-9befeb7d47c0",
        "cursor": {
          "ref": "1b236271-ba8c-4d1f-9579-1b83e78f56c3",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3c3b2e55-516f-4434-a538-e084293dffda"
        },
        "item": {
          "id": "e6896fa5-77fb-432a-b15f-9befeb7d47c0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "dc73a133-4120-444c-8f56-55373ed0f336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e243f94-bcc4-4bea-8696-892b0ae94862",
        "cursor": {
          "ref": "d45101ff-5d92-4582-9f76-d7604a6d3a61",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fbacc803-1366-4238-b268-5c73b88a2ea6"
        },
        "item": {
          "id": "0e243f94-bcc4-4bea-8696-892b0ae94862",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a26cf0bb-563c-47a6-bbfb-88377276426f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf4b3a6-991d-4428-8dac-f7c2b2576483",
        "cursor": {
          "ref": "328556f2-3327-45d2-baae-2ea8ce2fe5f7",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8d66b2de-69d3-4a70-8e2a-74822197cbf3"
        },
        "item": {
          "id": "bcf4b3a6-991d-4428-8dac-f7c2b2576483",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b630a5c7-7bd8-4886-8055-e0f7688f4dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbeb1e3d-4f69-4b58-8bad-503c33817ced",
        "cursor": {
          "ref": "e7712018-c691-4be1-bbbf-a32262066753",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "089e3c45-63b9-4241-8a33-a073aa838c3b"
        },
        "item": {
          "id": "dbeb1e3d-4f69-4b58-8bad-503c33817ced",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e38437a0-3ee6-437b-b4f5-c30a2e0f0d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2702b3f5-90be-4d1d-9aa3-f38929e73b1a",
        "cursor": {
          "ref": "13d95676-4582-43de-8730-4243ef058e68",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "769e5016-1061-4252-85d2-77400f28d246"
        },
        "item": {
          "id": "2702b3f5-90be-4d1d-9aa3-f38929e73b1a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d63beb1b-156d-45c7-8d16-14398e32256e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1e5528-5e04-48f0-99c7-c07037cc1871",
        "cursor": {
          "ref": "ef054401-89c0-4915-9ce8-9761570dcdbb",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "668e8ef9-97a5-4c5c-aaf0-02b35a294a08"
        },
        "item": {
          "id": "4c1e5528-5e04-48f0-99c7-c07037cc1871",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5359fb8b-a3eb-4856-aa23-034aa6f9532c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17655d2-023f-4081-91cc-238e55355959",
        "cursor": {
          "ref": "2154415c-19a1-4f11-91a8-71223ba8ae64",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2068c9c3-856d-45b1-ba90-327a4dac5c34"
        },
        "item": {
          "id": "e17655d2-023f-4081-91cc-238e55355959",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "410e794a-7f5e-4e1b-8e98-a16301ce24ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06870d85-f2d9-4d0b-af87-1dd0c8f347f7",
        "cursor": {
          "ref": "0a1cbf5c-ff2e-4910-b9bc-770cd1475742",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "348f2fa1-035c-4f46-bb27-3ed5a6a098c6"
        },
        "item": {
          "id": "06870d85-f2d9-4d0b-af87-1dd0c8f347f7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ea3f02b9-abb6-423b-93a4-3d57027710ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d7985-afcc-4de6-b552-156b82084dd3",
        "cursor": {
          "ref": "3cdefaab-35f8-4d3d-ac01-4c06b4826c89",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c9cbd69d-8ced-4a5d-b2f4-d37b474fc018"
        },
        "item": {
          "id": "a25d7985-afcc-4de6-b552-156b82084dd3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a349cfd1-b527-4d07-94c4-6ddc73e64033",
          "status": "Created",
          "code": 201,
          "responseTime": 4024,
          "responseSize": 968
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "45013904-0ce9-4306-ab40-2fcd3d23dda4",
        "cursor": {
          "ref": "a72573db-2011-44b8-ba1f-4d6f58e783cf",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6d6dc66e-d75e-4227-83e6-1ff9f3b3b7b3"
        },
        "item": {
          "id": "45013904-0ce9-4306-ab40-2fcd3d23dda4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "abd5da89-feca-4547-a9e3-3e5f057150c3",
          "status": "Created",
          "code": 201,
          "responseTime": 2501,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "18950365-df8a-427a-b3b4-003b8d97ac24",
        "cursor": {
          "ref": "7b81bf54-b2b5-4f10-aeb3-c2b216048840",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fc61c2c3-85cb-4ded-8faf-518b376d52f0"
        },
        "item": {
          "id": "18950365-df8a-427a-b3b4-003b8d97ac24",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bc830c07-3549-4b14-b3ea-0c2d6c6b1674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bc0f6b-d8eb-4983-89c0-54a27503ee74",
        "cursor": {
          "ref": "21fa8508-ff5a-4d09-ab47-18fe1e84a172",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "86b2ccb2-b0b3-4265-bc39-fc7c84bbdb48"
        },
        "item": {
          "id": "00bc0f6b-d8eb-4983-89c0-54a27503ee74",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ac0a203a-8380-4a51-a501-6862236a2e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06d23d2-eeec-4c13-b158-f25c037d4254",
        "cursor": {
          "ref": "99043080-e368-4883-8b02-598e0327e6d8",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1a95fbce-3c1a-4eda-836e-87b38c9ba3ca"
        },
        "item": {
          "id": "a06d23d2-eeec-4c13-b158-f25c037d4254",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "00cc25a1-b89c-4337-8b9b-1a64d8ed267e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffdda7a-cac1-43e6-846b-ca1911a42ce8",
        "cursor": {
          "ref": "cbde0bb8-44df-41a9-afed-6f28a1ada416",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4ce2978c-c520-40fd-a90e-90e2976ae82b"
        },
        "item": {
          "id": "4ffdda7a-cac1-43e6-846b-ca1911a42ce8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "739959ea-620c-4f57-970f-749807d6a2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab903495-e6b1-4f28-9f57-b906552aaab9",
        "cursor": {
          "ref": "7e394187-7385-4e3d-b03e-a31e875dbb8f",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b4ff020f-9a3b-4764-baf1-15b74cec6d96"
        },
        "item": {
          "id": "ab903495-e6b1-4f28-9f57-b906552aaab9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7c6f9c1c-e129-4efe-a987-c2825cc64ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c35d4250-7e15-45b7-ade7-d6bcbaba699d",
        "cursor": {
          "ref": "142de224-76b5-49c2-b5c1-0b4c6a9f48f9",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fd1b4d1a-22d5-4af5-a0e5-0d4380991858"
        },
        "item": {
          "id": "c35d4250-7e15-45b7-ade7-d6bcbaba699d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e37731a6-1faf-4100-9483-3f009a5788e8",
          "status": "Created",
          "code": 201,
          "responseTime": 3627,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c7a976b3-9b0b-4497-8cb4-95f419cce4d5",
        "cursor": {
          "ref": "3802e03c-3bf0-41c3-a03b-e275dd9be033",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "014bf8fa-5303-4c5f-a4d5-398b144d6bb0"
        },
        "item": {
          "id": "c7a976b3-9b0b-4497-8cb4-95f419cce4d5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3c014ec4-a2fb-4ce5-9aec-2a90ec04d0d1",
          "status": "Created",
          "code": 201,
          "responseTime": 4787,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "28fb1e54-8e19-428d-9134-7bd76813c4e3",
        "cursor": {
          "ref": "ba7c3945-cb3f-4f0b-bdf1-187596b15a4a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1354f41d-c684-4f6a-a46d-832298b49a62"
        },
        "item": {
          "id": "28fb1e54-8e19-428d-9134-7bd76813c4e3",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1f6cbbfc-8129-4bc9-b40d-9f0ac8989509",
          "status": "Created",
          "code": 201,
          "responseTime": 8564,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f8e7df59-57e4-4b87-8ee9-c705523d6eca",
        "cursor": {
          "ref": "27e0dbba-bb0d-49b5-8368-e9eec3fa9952",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a9e94f1d-26c4-4008-92e3-f95268f6194e"
        },
        "item": {
          "id": "f8e7df59-57e4-4b87-8ee9-c705523d6eca",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "84e5a869-5298-4807-8bde-d1095bc0000b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b9a78f2-1051-4794-b918-aa0cf9b7ea0e",
        "cursor": {
          "ref": "4d07cb8e-b7a4-4428-a45a-d4923bce0b21",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "24969a2b-9f81-4127-b302-3e7fcd406970"
        },
        "item": {
          "id": "5b9a78f2-1051-4794-b918-aa0cf9b7ea0e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cf15ccea-341e-41a6-be39-e537abbc1221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 174,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45dccbbe-099b-4253-8ff3-f26203d99811",
        "cursor": {
          "ref": "d155615b-2a13-4067-a51c-03b704a1cfd0",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6e6f074f-647f-43a0-b369-d5fb1815b639"
        },
        "item": {
          "id": "45dccbbe-099b-4253-8ff3-f26203d99811",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "97b0f847-4f6e-44f8-8425-d88241ce1e72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37de0e03-9415-4a9c-9dbf-6cc769fa45bf",
        "cursor": {
          "ref": "4c2a8955-fc3a-444c-be07-19a5fb3785da",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0585ceb8-3b26-43fe-854e-54c07cd1415b"
        },
        "item": {
          "id": "37de0e03-9415-4a9c-9dbf-6cc769fa45bf",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2bd9bf23-4174-47d9-add4-0c9b92e90714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da4d80c-ab8b-4f1c-9028-a478e64eb128",
        "cursor": {
          "ref": "6f4df3e8-2519-422f-85c3-352fb4a6b657",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "03b646cf-c559-4fc8-bdda-fe17679618a1"
        },
        "item": {
          "id": "0da4d80c-ab8b-4f1c-9028-a478e64eb128",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1cf1dd06-b6a1-4f98-9d41-e3aff7ed5a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78916e7-4ff1-481d-8dbb-a3bd25a1f24e",
        "cursor": {
          "ref": "e19459a5-2b00-4577-a37b-5fd06b9e488c",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b4e2c74b-939d-40e8-a7c0-f7bce1fc3374"
        },
        "item": {
          "id": "a78916e7-4ff1-481d-8dbb-a3bd25a1f24e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d8379c6f-b107-470f-add1-51ea2ea53b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 278,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b390a60-d747-4f5c-bed9-bab34fe08d7d",
        "cursor": {
          "ref": "0f3b325b-c1f2-480f-ba7b-8fd5d430b563",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "7fe7c051-6a93-4298-ad21-92cc00c52991"
        },
        "item": {
          "id": "8b390a60-d747-4f5c-bed9-bab34fe08d7d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "68b31cf8-0b1f-4e04-805f-d10b9e9d36ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f4f380-42b0-4f59-a768-f496cee854da",
        "cursor": {
          "ref": "ed0900e7-b139-4d1e-9141-cc3f81aeecde",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "afe2e36c-94e8-4b20-9b10-62be66eb3613"
        },
        "item": {
          "id": "a2f4f380-42b0-4f59-a768-f496cee854da",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ef2c6cd8-a799-43fe-ac1d-80f1a14ee49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f9b998-e58a-4f73-833f-ce3ba20925f5",
        "cursor": {
          "ref": "cf778327-f237-4e41-ab19-29d6c43b2cac",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c431d25f-e021-489b-8834-9fb82f398303"
        },
        "item": {
          "id": "d5f9b998-e58a-4f73-833f-ce3ba20925f5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8b66dfc0-1104-4d71-a2c9-da1e7400ab16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda4fb64-80e8-4ed5-9af9-b5d41f550e9a",
        "cursor": {
          "ref": "eb763240-eb56-4c8d-971f-fef388b90b1c",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "51738fb5-33ee-4e77-aeea-e97ba960fe19"
        },
        "item": {
          "id": "cda4fb64-80e8-4ed5-9af9-b5d41f550e9a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8b8f05f8-4245-45d5-9af0-bed0ed0eb713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b170ac12-c84a-40cd-988c-3e09275c10ac",
        "cursor": {
          "ref": "d99b1293-b2e6-41c7-9b3e-3bee2c6fd527",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "6588c688-a7d4-4811-94da-5f29433c5345"
        },
        "item": {
          "id": "b170ac12-c84a-40cd-988c-3e09275c10ac",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "49967a47-3c53-479e-aed8-b4c2cb898be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b3b429-d4a0-451a-a8d8-99a2a1ecb89b",
        "cursor": {
          "ref": "8c0dfdec-53cd-41a2-b048-5346ab7b6137",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "486cd0ff-f3e0-4683-965d-1b9b46bd6028"
        },
        "item": {
          "id": "24b3b429-d4a0-451a-a8d8-99a2a1ecb89b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c03c7881-51ed-4bbc-a81a-8f5c1491a6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a227d23c-50fb-4dba-ab9e-9ce4f94d96c3",
        "cursor": {
          "ref": "a3ede0dc-819b-4b19-87d4-0fae1d3ca9a2",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "99ca40d2-3f6c-4de9-8bd8-1971f2ead94e"
        },
        "item": {
          "id": "a227d23c-50fb-4dba-ab9e-9ce4f94d96c3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6216c77c-e16b-4e5a-8993-2ac5f8f8a729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d9bbc0-0b19-41e4-b02d-c18b37bca74a",
        "cursor": {
          "ref": "8914b400-ccb1-432d-a76b-14f887b0942f",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6b7a343d-0c34-402f-bc94-f01ac3e293dc"
        },
        "item": {
          "id": "45d9bbc0-0b19-41e4-b02d-c18b37bca74a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0f1af6cb-a1b7-4ad3-b630-6f3d32eb38cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b989a-2c6c-4454-a3c8-5e8586b86b5c",
        "cursor": {
          "ref": "f4574148-5fba-4cbf-8e64-3b55dc9d3639",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "af25575e-7aa3-4355-a192-26b94791e1dc"
        },
        "item": {
          "id": "cb9b989a-2c6c-4454-a3c8-5e8586b86b5c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ec1dfe83-761c-46b4-8257-2a758b210f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 169,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4090466-1d49-4bbc-a12a-c5385d792684",
        "cursor": {
          "ref": "9db505f9-5393-4a44-8601-3f2afa3bbf5c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "231fe944-37ec-4668-93ca-a3142ebba85c"
        },
        "item": {
          "id": "a4090466-1d49-4bbc-a12a-c5385d792684",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c5a57ccd-9ee4-42bb-8ba0-5d380113f7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a838b24-c148-4c9c-b68a-73c7ce96a94e",
        "cursor": {
          "ref": "da975fcd-f204-4696-b0b7-2998b77accc8",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0c7362ff-6de0-45c1-9e2a-35b448ec23ce"
        },
        "item": {
          "id": "5a838b24-c148-4c9c-b68a-73c7ce96a94e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "954e2044-6385-482b-8619-97bf7145c43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d43dc06-9f57-49d1-a022-67771a854125",
        "cursor": {
          "ref": "65a3963c-2c66-4d49-8e7d-2abe6fb69fe2",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e1d3bfe7-74c0-4483-b6a1-8da9984b00a0"
        },
        "item": {
          "id": "1d43dc06-9f57-49d1-a022-67771a854125",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "eba3cbb8-1f70-43a8-9d45-b5293781040b",
          "status": "Created",
          "code": 201,
          "responseTime": 4619,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f2379657-912d-4388-a907-6be609ece891",
        "cursor": {
          "ref": "0e0916e5-4926-4e05-8240-24acdf65ea6e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "61f3fbac-865c-4885-86b2-c169347507f0"
        },
        "item": {
          "id": "f2379657-912d-4388-a907-6be609ece891",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "44945e82-a40a-4d5c-b073-39e6a9370523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fceb156-1fa2-4877-af88-de2937316c77",
        "cursor": {
          "ref": "3a1f4c4d-a567-45e1-9024-4b5ed22a76bd",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "c0c19ff5-834b-4880-8f7f-6937a45d4728"
        },
        "item": {
          "id": "5fceb156-1fa2-4877-af88-de2937316c77",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "491b0880-c30c-4699-a8d5-b511793e7019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9504e3-e318-490b-b04a-74d647d1093f",
        "cursor": {
          "ref": "a914d6ed-506b-4dee-807b-16579b4b41ec",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1cd23d5c-e3a5-4d5b-8822-b3779f3d6440"
        },
        "item": {
          "id": "2b9504e3-e318-490b-b04a-74d647d1093f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c7cec42b-32df-4e1e-94ca-93963321be24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fee9b8-e34d-4791-82bb-86bfbf335610",
        "cursor": {
          "ref": "45daa5f0-e18e-4e27-b236-c1817838fdb4",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c47115d7-abb1-4b63-8466-c3b92b11b2dc"
        },
        "item": {
          "id": "e8fee9b8-e34d-4791-82bb-86bfbf335610",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "220e48a4-6d11-45dc-be3f-1b4b5e6b4b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d2af90-041b-4f76-a1c7-68f2dfc894ea",
        "cursor": {
          "ref": "92f2a2c6-6e9f-48da-b1a1-851755deb2f8",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18b20bc9-5b1e-4931-a9a8-ab2e918c246f"
        },
        "item": {
          "id": "a0d2af90-041b-4f76-a1c7-68f2dfc894ea",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "506b46ca-011b-487d-91b2-3d871c419e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e736aa-9287-4e6f-abfc-0469bfe212d1",
        "cursor": {
          "ref": "4bbd4be6-ff89-4d1b-834c-2807616bcc1f",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "33eca654-cd47-4504-8cb4-bd3cd58867be"
        },
        "item": {
          "id": "08e736aa-9287-4e6f-abfc-0469bfe212d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0b51d4ec-970d-45b4-b750-ed6ad10dbf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3cd1eb-e928-46c2-9f55-978fde625f8e",
        "cursor": {
          "ref": "9fdfb775-8856-45bd-ac72-eb307619151d",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "24017227-5d3e-4b2f-88be-0fcd9326ebc1"
        },
        "item": {
          "id": "df3cd1eb-e928-46c2-9f55-978fde625f8e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1272050a-073f-4635-bc1c-e8a51b56a0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1290,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5ff016-52d0-4130-b6ed-6500ffce3ecf",
        "cursor": {
          "ref": "71c3daee-b762-43dc-84e2-f061cf1171c4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cced6884-f5b9-4efe-bf05-9e2dad039d9f"
        },
        "item": {
          "id": "eb5ff016-52d0-4130-b6ed-6500ffce3ecf",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "45fb4648-3500-41a2-9b37-f28b4e25c601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf66fad-8c26-4973-9617-857770b74f5a",
        "cursor": {
          "ref": "97bfed42-70a9-4040-aea9-18d625ae3933",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "24e2aaa7-1012-4031-a31d-a63fc5831fb5"
        },
        "item": {
          "id": "fbf66fad-8c26-4973-9617-857770b74f5a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f7f74da2-6b69-483c-bdce-5908382cde51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abee6291-fbac-4ed3-acaa-2eaf2b572f2c",
        "cursor": {
          "ref": "d672e583-124a-4f31-b764-ebb111ce33bd",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f87c917b-fe7f-4567-8e52-7cee8556b545"
        },
        "item": {
          "id": "abee6291-fbac-4ed3-acaa-2eaf2b572f2c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "17414bc9-7894-4fdc-a43d-48a726a4fcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486fb025-0966-434c-ab59-95447b71533d",
        "cursor": {
          "ref": "532db47e-4440-4d08-8c65-3d0d8315b5b3",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1d669bfd-ccb1-4097-ba92-49116d386c5a"
        },
        "item": {
          "id": "486fb025-0966-434c-ab59-95447b71533d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "efe81e2a-8f3e-461d-90bc-cd6344070c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5438ca7-236a-464f-b2c9-a8e576cba516",
        "cursor": {
          "ref": "920e811b-85b9-41a6-bee3-bfc2e5683064",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bfecc027-5bd7-44aa-9379-0f7862d319f2"
        },
        "item": {
          "id": "e5438ca7-236a-464f-b2c9-a8e576cba516",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "15f626d0-2c58-4ffe-9fe3-813f94fdaafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccd9a18-291c-434e-960d-5f1004f4ff0b",
        "cursor": {
          "ref": "f2965eb0-6300-4fa6-8c69-669a3c760a7e",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bd95e380-a182-47e4-bac2-d87190eb0403"
        },
        "item": {
          "id": "cccd9a18-291c-434e-960d-5f1004f4ff0b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "68cd7ba3-75d5-49e3-a6f9-7601d5a75b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84886a8e-519f-4775-b61b-99676b35ae4b",
        "cursor": {
          "ref": "c7e0c5f2-a92c-4f46-9c1b-838743878106",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f713657b-0af9-43fc-86a6-959690f12c7e"
        },
        "item": {
          "id": "84886a8e-519f-4775-b61b-99676b35ae4b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f5df8b67-e459-4894-a3b5-6d9ef6c367d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a6b634-9249-4e35-b4c2-2de7be8724e3",
        "cursor": {
          "ref": "89526d4f-ea45-4c94-98c2-d187bc478ff9",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c07ef931-8e14-4afe-9089-cc88788332c2"
        },
        "item": {
          "id": "e5a6b634-9249-4e35-b4c2-2de7be8724e3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f57490bc-f698-42e0-afd5-e9194f568281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9f9cb2-c9ce-47ed-a630-1072def92102",
        "cursor": {
          "ref": "f4089483-2c1f-447c-b52e-ec114f7388c7",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "05b71101-dd56-422e-a93a-79eec2034cce"
        },
        "item": {
          "id": "bf9f9cb2-c9ce-47ed-a630-1072def92102",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "39a5f3ad-ad42-45bc-a9d9-ddd4e5afa3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d8b7c6-3efa-4d67-9eff-66f41a960d63",
        "cursor": {
          "ref": "1740bb7e-f6a2-4ea5-97e4-c568edda0783",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d88d8c21-b138-46be-880e-c5ad4a074c88"
        },
        "item": {
          "id": "69d8b7c6-3efa-4d67-9eff-66f41a960d63",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "06dd231d-8399-41df-81fa-75c3581001f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5eae69-5892-411d-b867-48edb7e39c9d",
        "cursor": {
          "ref": "815446d6-7921-4f60-a0a2-56ec5f4a0547",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a7ee19b4-8b9b-4b56-9619-401b970e152b"
        },
        "item": {
          "id": "0a5eae69-5892-411d-b867-48edb7e39c9d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6150e39d-6f2f-42f1-896e-8cee255b0b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c719ac-2a85-4534-86aa-1bd1c5dd8cd7",
        "cursor": {
          "ref": "9620c12d-e3b5-4caa-9c44-8daa2f172a0a",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9e425a79-860a-4118-b3e2-96655091f9ba"
        },
        "item": {
          "id": "f6c719ac-2a85-4534-86aa-1bd1c5dd8cd7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "30233fd2-263e-49ee-bbb8-913b3fa3f254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6b2d55-e61e-4b4b-85d2-42ca850da417",
        "cursor": {
          "ref": "0ecdb778-906a-4c2c-a060-d123d6b78d6a",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1cd6e2b7-490c-4dfe-a9bb-31ac0255b162"
        },
        "item": {
          "id": "fb6b2d55-e61e-4b4b-85d2-42ca850da417",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "705e16a0-9426-48b3-aa1c-e28b07511e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "999d1efa-5023-4ffa-8b81-a44e6379c73b",
        "cursor": {
          "ref": "c1cae5fb-ee45-4358-bdaa-b74abf78fe2d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "989dca86-99b3-42d8-8bf8-5ab21f660e7f"
        },
        "item": {
          "id": "999d1efa-5023-4ffa-8b81-a44e6379c73b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ffb6da87-0d00-4ee2-beef-20e85c92fa51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33233e2c-fcbc-4416-84ea-a39a24ebeeca",
        "cursor": {
          "ref": "0a31069b-c9b8-453b-b616-395eac2fb517",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9317c038-472b-4163-81c4-7925a9caa67f"
        },
        "item": {
          "id": "33233e2c-fcbc-4416-84ea-a39a24ebeeca",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f8ebd5c7-ec25-40a0-a8c9-163331fd6888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d541973-09a6-46cb-ad42-c3cfab52433c",
        "cursor": {
          "ref": "4d8821e5-ab17-4888-b256-800f836ba9de",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7885baa3-e13e-45db-9372-5cecdff9cd43"
        },
        "item": {
          "id": "9d541973-09a6-46cb-ad42-c3cfab52433c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1c52fe86-2cb3-413e-9856-0179078f0061",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03dca456-6499-478a-97ed-83aea42d7d8d",
        "cursor": {
          "ref": "aef38143-f72d-439e-a6f0-b5938c359422",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a5f22f02-dd4d-451d-8396-69cf8ae7c352"
        },
        "item": {
          "id": "03dca456-6499-478a-97ed-83aea42d7d8d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "35512b46-e0cd-4037-a90a-86c81e02477d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68851caa-7520-4e3f-92fb-95426cced76d",
        "cursor": {
          "ref": "d6c7a052-f5ae-4b54-b6b7-aaf25553fc4a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "cc4a6ef3-8a68-4379-9f14-fcdae7a06688"
        },
        "item": {
          "id": "68851caa-7520-4e3f-92fb-95426cced76d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0e0eba41-4763-4dc3-83fd-acb6aeeb40cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2c33fc-80c3-420c-a00b-28cdc03406c2",
        "cursor": {
          "ref": "e5b3d659-ad11-4100-b6e0-1281460e0893",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "acfe9937-5036-4610-b991-cab2a204be84"
        },
        "item": {
          "id": "9d2c33fc-80c3-420c-a00b-28cdc03406c2",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2426171a-fb70-4fac-b098-9586cc2734a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2e4526-70e2-4f9d-a05d-b45486030079",
        "cursor": {
          "ref": "21d05271-5402-41cb-87b3-633297e51c3f",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e5ec5923-b260-469d-8329-278e141729b4"
        },
        "item": {
          "id": "bc2e4526-70e2-4f9d-a05d-b45486030079",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "79281692-2cf6-474b-bc2a-e8b112823ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7854ab-09d8-416c-afb9-d27a993c29db",
        "cursor": {
          "ref": "21112f52-4301-4048-bafd-78de8b747523",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "213c8c8e-8aea-4f06-bf13-4ca156b8ec94"
        },
        "item": {
          "id": "6f7854ab-09d8-416c-afb9-d27a993c29db",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "72f01ba1-bf77-413e-adb2-dc0cbedf0387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960446b4-eff7-4601-a7a9-a00bb7f43b4a",
        "cursor": {
          "ref": "2443f0c6-55ef-4d81-8bb6-e3017e4a45e4",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a598a5f8-48b5-4e48-94d2-9130a7235b17"
        },
        "item": {
          "id": "960446b4-eff7-4601-a7a9-a00bb7f43b4a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73b7652b-318a-44d1-b37f-8009be662bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ecd814-f85a-4177-8d26-2116aa217d57",
        "cursor": {
          "ref": "048b9b07-42dd-4acb-8ffe-3b817400d33d",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7a189e19-71aa-4179-8f01-4ab7f0b0d16f"
        },
        "item": {
          "id": "47ecd814-f85a-4177-8d26-2116aa217d57",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e85668c7-ce9c-44a5-8d49-0dd0ef810687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0baa8045-361d-48a6-94e7-12f20ebde3af",
        "cursor": {
          "ref": "ab341c3c-7e8e-4e8e-a1e2-627ae8919928",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "31d2705e-c36f-4800-a368-3d2592799757"
        },
        "item": {
          "id": "0baa8045-361d-48a6-94e7-12f20ebde3af",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9d3afe29-7839-40ef-8d45-093cf250b6a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "777f56c0-a470-432f-ba6a-c90e0af078f9",
        "cursor": {
          "ref": "789b0458-f45b-43dc-869d-323a09109e8d",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "89b8144a-aa90-4d4f-a333-edd331d28b77"
        },
        "item": {
          "id": "777f56c0-a470-432f-ba6a-c90e0af078f9",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "74602fb5-dbf1-4a95-b7be-720618c16590",
          "status": "Created",
          "code": 201,
          "responseTime": 1954,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "40efd3db-b4db-4228-9e2e-060713da10c1",
        "cursor": {
          "ref": "309b0638-c704-457b-9246-e658d7f82581",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c9958596-4a23-4b49-bfe7-019eb483f9e6"
        },
        "item": {
          "id": "40efd3db-b4db-4228-9e2e-060713da10c1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f9cfea6-9cef-414d-8c59-72ec86fa7547",
          "status": "Created",
          "code": 201,
          "responseTime": 2716,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0564e05e-57e6-4c8f-af4f-51da33e6f71f",
        "cursor": {
          "ref": "5b20e4f7-5f78-4b25-bbf5-c42c8c08ae33",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e60da1fb-4ac6-41df-bdc1-f82979975600"
        },
        "item": {
          "id": "0564e05e-57e6-4c8f-af4f-51da33e6f71f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f442b5d3-4d96-4d41-86b9-3aa07067faa7",
          "status": "Created",
          "code": 201,
          "responseTime": 2145,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5af1d8a-4eec-4e2f-87dc-4dfe42e5ed8a",
        "cursor": {
          "ref": "75a23161-1a58-447d-9dac-1c7e7cca0239",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b57ded43-0e99-47ee-9a13-fe9d9e31142d"
        },
        "item": {
          "id": "d5af1d8a-4eec-4e2f-87dc-4dfe42e5ed8a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9662e132-2022-407c-b13f-4e2003f70dcb",
          "status": "Created",
          "code": 201,
          "responseTime": 2303,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d66297-9ca7-4603-a981-5c5c2d0799d6",
        "cursor": {
          "ref": "5c903dda-583e-4241-a35c-7e798a5a85b3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7ef1ccf1-efda-4e5a-afb6-ac30f2863933"
        },
        "item": {
          "id": "15d66297-9ca7-4603-a981-5c5c2d0799d6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "896618f3-2f7e-4dd3-ae3a-a93bdbfa2d87",
          "status": "Created",
          "code": 201,
          "responseTime": 2208,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bb2c65-398b-4d34-ac10-22ecf61be3cd",
        "cursor": {
          "ref": "6a83b567-e159-4afd-a195-edaba673879e",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "e425b3af-5cd9-4b47-a2ff-e49bdb01a085"
        },
        "item": {
          "id": "05bb2c65-398b-4d34-ac10-22ecf61be3cd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "79a9fa8e-7b58-4549-bdea-b75db7cd121d",
          "status": "Created",
          "code": 201,
          "responseTime": 2370,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-10T00:37:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-10T00:37:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "99b534c2-7769-4936-b5a7-a2edf6b22090",
        "cursor": {
          "ref": "fb2fbdf5-f8f0-4650-b189-ae914ed2468c",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "88415d9e-4139-406e-8dd8-e9041001da02"
        },
        "item": {
          "id": "99b534c2-7769-4936-b5a7-a2edf6b22090",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1f7f7d98-a7ba-44aa-a233-ad29886564c9",
          "status": "Created",
          "code": 201,
          "responseTime": 2236,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccdf756-83e8-4664-97a3-04b5a527e400",
        "cursor": {
          "ref": "7f011af7-2be4-44d7-bed7-349a2ec40621",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ea72d9e-df73-4302-9b3a-701e5c8f8cfe"
        },
        "item": {
          "id": "8ccdf756-83e8-4664-97a3-04b5a527e400",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "02ce605a-4c2f-4c27-b58b-f08e60105c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccdf756-83e8-4664-97a3-04b5a527e400",
        "cursor": {
          "ref": "7f011af7-2be4-44d7-bed7-349a2ec40621",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9ea72d9e-df73-4302-9b3a-701e5c8f8cfe"
        },
        "item": {
          "id": "8ccdf756-83e8-4664-97a3-04b5a527e400",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "02ce605a-4c2f-4c27-b58b-f08e60105c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97870cb1-2a18-4070-bc65-8843842c0ac0",
        "cursor": {
          "ref": "267640f3-03b7-4aa4-9fda-92481b6d0e5a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bc4aa35f-5c9c-4446-8717-c3efe65a56dd"
        },
        "item": {
          "id": "97870cb1-2a18-4070-bc65-8843842c0ac0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d76c2071-c969-48dd-aac7-32f930293663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5026deee-bb04-4ac8-a7df-325d4327eeee",
        "cursor": {
          "ref": "90ca4f46-8076-42f3-bdd2-fde94ce5a1b1",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4aa9eb23-10e3-4961-998e-232f1137d681"
        },
        "item": {
          "id": "5026deee-bb04-4ac8-a7df-325d4327eeee",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5e2f73d1-e4a8-4a0f-92c0-d7aa72888755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da47ebc9-fbc5-4426-a5be-9f7724af1c21",
        "cursor": {
          "ref": "19433622-d655-41c0-8ffb-88c8c260ae14",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "19cd7df0-aeec-4fdc-b8d9-77519e59f19d"
        },
        "item": {
          "id": "da47ebc9-fbc5-4426-a5be-9f7724af1c21",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0c851a39-90fc-47fc-a8a6-a6143a3f1896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ab92c63-b20d-45c8-a868-50afd65462bb",
        "cursor": {
          "ref": "12d04f82-c36f-470f-bb83-94d0eba2c101",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0a601d4d-6b46-4f6c-a504-f5a14a45fff3"
        },
        "item": {
          "id": "8ab92c63-b20d-45c8-a868-50afd65462bb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "26d802be-9af7-4d93-b5ab-c4ba9befa42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce13163-a69a-49d4-b975-a5db70602b12",
        "cursor": {
          "ref": "dc6d3d26-340d-40c9-9066-fc4ed372fe4f",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "19c0376a-5baa-4bfb-add5-b1f6ec130b0c"
        },
        "item": {
          "id": "9ce13163-a69a-49d4-b975-a5db70602b12",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "360cd096-5089-42b3-b116-464c9403a80e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389251ea-f635-441e-838c-8c3e5a619831",
        "cursor": {
          "ref": "c8f45038-bd45-48d8-be7c-c36d85902dd0",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4d109327-353f-467e-bf18-447ffd644a3c"
        },
        "item": {
          "id": "389251ea-f635-441e-838c-8c3e5a619831",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "32dbbee2-add8-430a-a767-b7da94c120b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8e4870-952a-469a-ac7c-0bec42d5584b",
        "cursor": {
          "ref": "2c740a51-cbf0-4057-af2c-6677aa13091a",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0e624618-145b-42f7-bcf9-32c52c927d06"
        },
        "item": {
          "id": "9a8e4870-952a-469a-ac7c-0bec42d5584b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "97fa6425-b50d-4846-b09f-51d767698eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0240b53-fe31-4365-9bb9-b5e4819c641e",
        "cursor": {
          "ref": "3f4be16f-9fcb-474c-a646-fe6ed6e916fd",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "493624e0-8a37-46e7-9787-a1fc23bd12c4"
        },
        "item": {
          "id": "b0240b53-fe31-4365-9bb9-b5e4819c641e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "83b1cdd6-97e6-47bc-ba78-88ac5caa0098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6c3d95-1e4a-49c6-9905-c12133106aaf",
        "cursor": {
          "ref": "ada16b56-7307-44a5-a5a3-2757b40fc081",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d8775d54-cd03-481a-9d25-b7d852b3db8a"
        },
        "item": {
          "id": "cd6c3d95-1e4a-49c6-9905-c12133106aaf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c8ad225e-068b-493e-a5c1-0ead265bb3bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da4b38b-0a09-43c1-b81e-e63434c3b285",
        "cursor": {
          "ref": "8cbaa236-846f-4659-8a60-ea60265c92d3",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "91c13d69-317c-4a4d-9a4e-ddcff69b90f4"
        },
        "item": {
          "id": "9da4b38b-0a09-43c1-b81e-e63434c3b285",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ae2ac91a-5894-44f4-aeda-8003c4cec934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c0544e-2671-4be3-a242-4d28eb0a5f1b",
        "cursor": {
          "ref": "3092ccdd-1441-4f10-9414-1f53e5c8942c",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "89548bdd-895a-420d-843c-ff259be637a4"
        },
        "item": {
          "id": "f1c0544e-2671-4be3-a242-4d28eb0a5f1b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ba396cf0-56e0-4d30-9a9f-78bbd6fef81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235477db-7a27-4fc5-9976-4aba97166150",
        "cursor": {
          "ref": "dbe30fa1-4445-4094-ac1e-ff20bdb09524",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ae89fe65-842c-4329-9a23-d65bb94b8d00"
        },
        "item": {
          "id": "235477db-7a27-4fc5-9976-4aba97166150",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a3daedc8-1ad2-46c3-bfda-30e233638a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f02d172-b8f2-4410-8405-be164b439813",
        "cursor": {
          "ref": "2ab2676a-8d35-422b-b991-0df710dd4801",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bae4882b-cf03-4a34-a0c9-0bc1abda76a7"
        },
        "item": {
          "id": "1f02d172-b8f2-4410-8405-be164b439813",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "4012744f-d246-4fa0-bae8-525c7a4bfa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5320d84f-4a96-45a8-b5ef-e2a2c8ff564c",
        "cursor": {
          "ref": "d8a54dc4-eaee-4756-9910-08e328c34481",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f002f321-e75d-4ee6-8d8b-5816904e485a"
        },
        "item": {
          "id": "5320d84f-4a96-45a8-b5ef-e2a2c8ff564c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "977030d8-4736-41af-9192-3c55fb6dbf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f949df-0716-42df-9664-46cf975f2e88",
        "cursor": {
          "ref": "6bfd704b-6b80-4871-b08a-d629ffc52207",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "faddee12-65e3-4d13-893d-61acdd11ad70"
        },
        "item": {
          "id": "d0f949df-0716-42df-9664-46cf975f2e88",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e2e23c01-ccba-4003-8f2e-f9a9969647a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2413651f-95d6-4adb-85b5-21ab8fcacd41",
        "cursor": {
          "ref": "74047b80-dc23-4e93-91e2-b74e84b4379b",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1c8c89bd-dd1d-495f-895a-796b2086fb13"
        },
        "item": {
          "id": "2413651f-95d6-4adb-85b5-21ab8fcacd41",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8af671f8-28df-4954-9813-d10025655d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47aaea8d-e2f7-403c-884a-cbd1ff840478",
        "cursor": {
          "ref": "4f2cbcbf-aea9-414a-8336-663ef3e87a5a",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e5c664d6-08c7-488a-9214-094b854ac32c"
        },
        "item": {
          "id": "47aaea8d-e2f7-403c-884a-cbd1ff840478",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "23b4ab05-527c-490f-8d74-cfdd90acca45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae91ccaf-cdd4-42eb-a9e1-d3511dd65d8c",
        "cursor": {
          "ref": "faa0a179-801e-4f10-9e08-16f5e3624cc9",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "53d969c7-e1b0-4845-9822-99cdfadbe7b8"
        },
        "item": {
          "id": "ae91ccaf-cdd4-42eb-a9e1-d3511dd65d8c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1a284118-7178-4d68-8b68-da9d0eb9bf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4db83f-0613-4af7-a8a5-faea08d7f26e",
        "cursor": {
          "ref": "1b43042c-d4da-4adf-be38-9c661d553e53",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f0bf5ffd-0487-45ae-b620-f4cb249a8350"
        },
        "item": {
          "id": "fb4db83f-0613-4af7-a8a5-faea08d7f26e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "be848744-81f9-4bb3-a06f-8e6240a8a713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2e2336-8d39-4715-a3ab-c9cd7c060eea",
        "cursor": {
          "ref": "e534b2ef-567d-49a3-b3ad-47089746259f",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ce2bf5e4-ab86-40b3-b778-19f049b62630"
        },
        "item": {
          "id": "cd2e2336-8d39-4715-a3ab-c9cd7c060eea",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "12171612-72ac-4921-bda9-cc85f19200c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79daecc1-9493-4f32-819b-980270f223b7",
        "cursor": {
          "ref": "fc44d4a9-1463-43fe-9729-b96399ee7a13",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8afdc4c7-d2ac-46bd-9074-0a7c62712707"
        },
        "item": {
          "id": "79daecc1-9493-4f32-819b-980270f223b7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8f1c8f4a-bde5-4121-938b-bbb3105243fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4390bee9-f93f-43d5-8fdb-8883a13ebd84",
        "cursor": {
          "ref": "b34a5e9f-221d-49ad-846b-55f9d64ed506",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4d3fe18b-9614-426a-9230-0b6c7a31d9bd"
        },
        "item": {
          "id": "4390bee9-f93f-43d5-8fdb-8883a13ebd84",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c6d7aec7-d7c0-46e2-bef2-a0cb8a9a1efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a955144-4314-4e1e-a4ec-0871ff3c7039",
        "cursor": {
          "ref": "b1acf4a1-065b-416c-9746-cd7f94b08989",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "01bca1e9-89fb-4402-8192-de1ad5e6d513"
        },
        "item": {
          "id": "8a955144-4314-4e1e-a4ec-0871ff3c7039",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0645c691-fe6d-49c3-90d1-5a52a6338aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c383eab-24d1-4712-ae15-232832bf659b",
        "cursor": {
          "ref": "4dea0309-6914-4755-90ee-9f9085155080",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "84d2ac9c-2aa2-4861-8e68-695d75288a07"
        },
        "item": {
          "id": "2c383eab-24d1-4712-ae15-232832bf659b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aafe1891-1827-433d-bea0-3943ec9dae57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e2a24c-aa1e-406d-b355-26cd9ef223d1",
        "cursor": {
          "ref": "ab7fca13-2464-40ba-87b1-8030b9c6828c",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d3422e2d-b51c-4484-b4d8-2d43de7f0f3a"
        },
        "item": {
          "id": "00e2a24c-aa1e-406d-b355-26cd9ef223d1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bc9884fa-c5b2-46ca-b06f-75f3a8a11714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efb7090-bebf-488f-9716-96d90c38ff3d",
        "cursor": {
          "ref": "db5a8d19-ece1-4b84-a86a-b43351a79973",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5cd871c6-1345-4f23-9851-3e94cc10b06b"
        },
        "item": {
          "id": "1efb7090-bebf-488f-9716-96d90c38ff3d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7e93f8dd-0b03-412f-ba1e-175c1d2ae7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b6f240-61eb-4963-b4a8-a57044cd3a39",
        "cursor": {
          "ref": "64242511-bc48-4913-b656-d9c8be364031",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a44f326f-e8c0-4c93-8981-619bc30a58f9"
        },
        "item": {
          "id": "12b6f240-61eb-4963-b4a8-a57044cd3a39",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3e436241-c151-4851-97bb-715e70c00ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9ac10c-e0f7-41b6-9d9d-ad0464fc013d",
        "cursor": {
          "ref": "d0f3fecc-b8e3-4908-8db4-0bd32cba5e9c",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c00970d6-e57c-4018-9f14-6e303c479a1e"
        },
        "item": {
          "id": "ed9ac10c-e0f7-41b6-9d9d-ad0464fc013d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "03c1e0cf-d97d-4058-868f-b7964c4fbcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0d146f-9760-49a8-9cde-d47c13795205",
        "cursor": {
          "ref": "8bf02d0e-f274-4797-b5dd-818cd106300b",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "60b8f23c-af5d-4509-a643-a72622cb4281"
        },
        "item": {
          "id": "be0d146f-9760-49a8-9cde-d47c13795205",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0c683959-7dc3-4e64-b565-f5d1ff9d3f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8d0ed6-d454-4822-bdaa-f4b133d41cd0",
        "cursor": {
          "ref": "568ea391-1b65-4193-91e2-0840611effd4",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "fd37870f-b906-4ec8-b916-c2bcd9fcd613"
        },
        "item": {
          "id": "0e8d0ed6-d454-4822-bdaa-f4b133d41cd0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e9ba677c-4996-4208-a1f8-363173f7ccbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3627e79e-9da7-4456-b7f1-0d3ae5d34a55",
        "cursor": {
          "ref": "9286e0df-44ee-4ac2-b5b6-4e5dfcda35d1",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "152ada63-ccdd-4195-a0ab-2ab884737dbb"
        },
        "item": {
          "id": "3627e79e-9da7-4456-b7f1-0d3ae5d34a55",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "77e00d57-7383-4b36-bf98-6164664f206f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d24f54-1254-4df9-b065-12be092cbb73",
        "cursor": {
          "ref": "ba14ac9d-1581-48ad-b634-b43cdf24a8d0",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "70b272a8-e63c-4e9a-8e22-01620842c95b"
        },
        "item": {
          "id": "07d24f54-1254-4df9-b065-12be092cbb73",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e875fedd-c9cb-47eb-a67f-a7d43f05d3db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "fba1a5a1-1421-48a3-aa3c-64db8547855e",
        "cursor": {
          "ref": "f84d56b6-03fb-42f1-9955-373293d2b9cf",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "32c0d591-e6d9-459d-8f64-511f21f9a326"
        },
        "item": {
          "id": "fba1a5a1-1421-48a3-aa3c-64db8547855e",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "ba48d02b-e962-400d-be74-77b086660742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "6995c244-4672-42d9-9c40-390d112fbea1",
        "cursor": {
          "ref": "987480d8-7e64-415c-a058-703ea40bff6c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "737ed4b1-1ac3-41e7-9417-528925ae26bf"
        },
        "item": {
          "id": "6995c244-4672-42d9-9c40-390d112fbea1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57a83fab-02ab-4cdd-9f2b-10b28ffec4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6995c244-4672-42d9-9c40-390d112fbea1",
        "cursor": {
          "ref": "987480d8-7e64-415c-a058-703ea40bff6c",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "737ed4b1-1ac3-41e7-9417-528925ae26bf"
        },
        "item": {
          "id": "6995c244-4672-42d9-9c40-390d112fbea1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57a83fab-02ab-4cdd-9f2b-10b28ffec4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c8256c-15e8-4b35-826e-89f3108e357b",
        "cursor": {
          "ref": "ce81746b-0e02-4897-937c-d6ad52380b6c",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "fc4f190e-2c9a-4a18-8dbb-235c18fc9cb6"
        },
        "item": {
          "id": "08c8256c-15e8-4b35-826e-89f3108e357b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5ce72c19-80c2-4323-a3d7-149d0ed2cc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3435e96c-b301-4655-b26f-5aa150a57d05",
        "cursor": {
          "ref": "335f844a-ec3d-4082-a4a5-5a63e6097ba0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "af6c5e9d-2ba0-4f3f-a25c-484820ad6f41"
        },
        "item": {
          "id": "3435e96c-b301-4655-b26f-5aa150a57d05",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "287f0423-552d-442a-b188-2d7c365a2b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718befc0-c57e-4efd-aa32-196ea7666467",
        "cursor": {
          "ref": "c1e44b37-11b5-4c74-8c3c-3d56faf91a4c",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b64734bc-6598-4d04-b02e-852424ce504c"
        },
        "item": {
          "id": "718befc0-c57e-4efd-aa32-196ea7666467",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0e0c961f-56e1-440b-bd15-20479740832a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e59913-6349-4b9d-a245-f53fcc51a44d",
        "cursor": {
          "ref": "22388bd4-d47e-4476-afe1-de6aee03e2e5",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2fc90a6e-06eb-4229-b2fc-ae2341a1d4d1"
        },
        "item": {
          "id": "44e59913-6349-4b9d-a245-f53fcc51a44d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2d837e0b-6d64-4d16-a746-44871e65cafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538fbd0a-6f03-4e99-88f4-8dae25245ced",
        "cursor": {
          "ref": "6b12701b-8efb-4fcf-a1a1-bd1c2ce3359a",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5ac3d7dd-eeae-4a1f-8545-dd39030c99f9"
        },
        "item": {
          "id": "538fbd0a-6f03-4e99-88f4-8dae25245ced",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f060f76f-a292-4385-96e6-6ccc6bfac5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9616490-33b7-4181-984b-8db38e71e0b1",
        "cursor": {
          "ref": "b65e62b0-9312-4256-bfc8-d98f80b526e7",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6f6265a6-28c6-453c-af67-826ebeada524"
        },
        "item": {
          "id": "f9616490-33b7-4181-984b-8db38e71e0b1",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d27d6740-32fd-4097-9182-1e1f081192a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6637ac-0098-49f1-aba9-f04095f9a5af",
        "cursor": {
          "ref": "a0d99521-a24d-4b17-a28e-5e77c2cfd587",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fa23e40f-895b-4099-a8f2-4dc24fba6835"
        },
        "item": {
          "id": "8a6637ac-0098-49f1-aba9-f04095f9a5af",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7561cd4d-b009-415b-a1cf-b76c128eac29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "771a61f5-7a9f-4610-b390-423212529239",
        "cursor": {
          "ref": "84fff217-64e9-4338-aa5d-a47f4f3a74a8",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ef86537f-3af6-47e0-850e-99d1fb6acd8a"
        },
        "item": {
          "id": "771a61f5-7a9f-4610-b390-423212529239",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "111c17cb-402f-4268-8e45-ca5792458bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fb5a6c-057b-4136-b4b3-1ca0b9408b32",
        "cursor": {
          "ref": "ab4b8db7-b8b4-4685-b741-a039b6f9de7f",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "73760a8a-d137-4f54-b2ff-db3b54e8fc32"
        },
        "item": {
          "id": "66fb5a6c-057b-4136-b4b3-1ca0b9408b32",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "773e90d6-bf50-4b99-9cdc-e91505b07f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d48638-f75a-45c1-bf44-137c3c0ea119",
        "cursor": {
          "ref": "5af64cdf-b538-41e0-9ac4-3c8890f391b9",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6d8b6c30-3b7a-4744-8839-c0cc06c05313"
        },
        "item": {
          "id": "d6d48638-f75a-45c1-bf44-137c3c0ea119",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "ebf06cf1-50d7-44ff-9451-d1cfb622300f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861b2f2c-291b-4f5d-b228-19b66fdbd63c",
        "cursor": {
          "ref": "51e209c2-308f-4117-ae1e-7a8c5e69f063",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4095dbf3-8f6b-47fa-bddd-d0bc9d58d9f0"
        },
        "item": {
          "id": "861b2f2c-291b-4f5d-b228-19b66fdbd63c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "568a41a8-aff1-4b6d-b52d-e60ef674963c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f26759-de94-4cec-a8a9-bc0d5e5526b2",
        "cursor": {
          "ref": "4809912f-0bda-4884-a44a-2fa03b6825fb",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "35e35ad4-41dd-42d0-b7ef-e0ed36a412c1"
        },
        "item": {
          "id": "f2f26759-de94-4cec-a8a9-bc0d5e5526b2",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "a53621a5-ec21-493d-840c-d44d4f5f858d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84858237-6bb4-4f64-91f7-7c653481beaa",
        "cursor": {
          "ref": "f5357352-21b7-4a11-80bc-a5bae1758650",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9b360e1d-8f89-4f0e-bb19-936d1caddee3"
        },
        "item": {
          "id": "84858237-6bb4-4f64-91f7-7c653481beaa",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "49d55f9f-daca-4878-9bc6-80c3327fcc0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3bf3b20-28c0-4010-bed1-f147baeb07f1",
        "cursor": {
          "ref": "9988f07b-60e0-4213-a804-ed583862bbd8",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "df2c279c-5ba7-49bf-a548-4e2aff88969b"
        },
        "item": {
          "id": "a3bf3b20-28c0-4010-bed1-f147baeb07f1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1ad5f198-6cee-4f19-af45-7eca66270266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a440d136-9817-480f-b828-b9e0f1c7fd0c",
        "cursor": {
          "ref": "dc0c9dcf-3992-4d7e-ac4c-a18f588ea546",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "2c6c2f8b-7148-47f7-8a95-92c7151f3bd9"
        },
        "item": {
          "id": "a440d136-9817-480f-b828-b9e0f1c7fd0c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6e6a40ee-def3-4b41-9005-e86277025fd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f622520a-66db-40a8-806a-90cbd5b909e9",
        "cursor": {
          "ref": "8624f912-68e1-4294-a0fc-e4df57e3c55a",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1443fcdd-085c-44ef-ad85-5614a4dcb40a"
        },
        "item": {
          "id": "f622520a-66db-40a8-806a-90cbd5b909e9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1c79be82-4757-4d15-a766-249cfae21834",
          "status": "OK",
          "code": 200,
          "responseTime": 325,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d3b8dcad-2dac-4465-afb2-0e47f4e2fdeb",
        "cursor": {
          "ref": "7b02e183-07e5-4ad6-862a-e23498779599",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "24475d3f-a533-4eb7-b548-7e159a3c0937"
        },
        "item": {
          "id": "d3b8dcad-2dac-4465-afb2-0e47f4e2fdeb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1319c15f-beec-491f-930a-5aed6109b92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b29aeec-68ac-4e20-8f24-b2f5095492fc",
        "cursor": {
          "ref": "f4145a83-e571-469a-8b68-a1884d39fe11",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ee1dc5f3-7d6b-4cb9-95c5-453aebcee3ac"
        },
        "item": {
          "id": "9b29aeec-68ac-4e20-8f24-b2f5095492fc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ae7c02f5-a616-4830-bf85-376d10ccb00d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff8e1d1-3ee2-4851-af47-34cc753f58db",
        "cursor": {
          "ref": "ec362ff4-1a55-44c1-9681-b7c86af1aa65",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "739b2b3a-dc49-440f-8442-39a6d2ae43f3"
        },
        "item": {
          "id": "7ff8e1d1-3ee2-4851-af47-34cc753f58db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "950acef3-96b7-4ace-851e-b988c2cbd01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d33f9c-eb65-4557-885e-ba99057f6757",
        "cursor": {
          "ref": "4a9650e4-830b-45b4-b4d9-2eaaf0f15adb",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0ac0f0ce-67ab-42b7-9c6d-d69754992c8d"
        },
        "item": {
          "id": "06d33f9c-eb65-4557-885e-ba99057f6757",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5e841bcd-d557-4792-a39c-e4f3feb0885f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ae9dcf-fe3a-4a84-add9-9fe44e22ccb7",
        "cursor": {
          "ref": "80987c0b-2d6d-42f1-b7f6-87da299ad170",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "94ac50c2-e89a-4031-843b-6e9e802334c7"
        },
        "item": {
          "id": "b6ae9dcf-fe3a-4a84-add9-9fe44e22ccb7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0dc1d198-affb-4912-8c5c-bd33e519ecfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e55c4cff-134a-41ec-9d37-2cebeaa8624d",
        "cursor": {
          "ref": "4bcc2bcf-b34e-424e-8c13-5f104a672840",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "af7ca850-24e4-4cac-a8cb-789a693e2ed8"
        },
        "item": {
          "id": "e55c4cff-134a-41ec-9d37-2cebeaa8624d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "10e234d6-d4af-409d-9cf6-0f209b57d362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae2def-86e9-4dca-bd1c-8850b2f58e3d",
        "cursor": {
          "ref": "d79f6fb3-6ac2-4098-a8ed-883925a065db",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5b8cc6b8-b130-4762-9e28-b4f88123b2e1"
        },
        "item": {
          "id": "12ae2def-86e9-4dca-bd1c-8850b2f58e3d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cf4f0294-805f-4262-b836-693a8863ee93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb74763d-44c3-4ab5-ba51-4b5536504649",
        "cursor": {
          "ref": "574d5ff7-89c1-4cd2-aae2-5c552cd97531",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "9558ed1d-3f48-4596-8e6d-18a2b8aaf1b8"
        },
        "item": {
          "id": "fb74763d-44c3-4ab5-ba51-4b5536504649",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d91367d2-3d74-4de1-b30a-35ea73247fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1127cd-5e2e-430c-a6d2-8c6cf90828f9",
        "cursor": {
          "ref": "71de0441-9fa4-4184-8d22-d699bff8a547",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "97be7723-cd46-4670-847d-81f0acc6ca97"
        },
        "item": {
          "id": "5e1127cd-5e2e-430c-a6d2-8c6cf90828f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "13545fe9-b480-4268-acc7-fb29beb1f213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1694a1d9-91bc-483c-811c-3864f8583e76",
        "cursor": {
          "ref": "1a0b1c9e-d2d0-4634-904b-eb4048632d39",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ff11110b-6449-4294-8df5-473701c1db12"
        },
        "item": {
          "id": "1694a1d9-91bc-483c-811c-3864f8583e76",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b221df7f-82ce-43a4-9914-870f3b6e44d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2622ec49-ed88-4e2f-9ba2-1d01f0efbc0a",
        "cursor": {
          "ref": "881b8652-ef82-4bb8-8734-187c8bf99b63",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bc9f3a6d-9c75-4348-8a8f-eb4718217dfb"
        },
        "item": {
          "id": "2622ec49-ed88-4e2f-9ba2-1d01f0efbc0a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "4ba28703-a2cd-4978-8a67-e1d4a57dad8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b0def4-ff5d-43be-9825-ecaa442fb559",
        "cursor": {
          "ref": "4e2cd9da-861a-4a3e-b4c2-fcc95ba0e370",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "af1f5299-0c2a-4945-8cf2-e96cdeedb69b"
        },
        "item": {
          "id": "d8b0def4-ff5d-43be-9825-ecaa442fb559",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32be4132-c0e9-45fa-9ffe-479614bf6668",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ce89e6-2d71-497c-8257-c4b96dd5fed3",
        "cursor": {
          "ref": "0dfae995-b36f-4a6c-a80e-2bbce7ee86a0",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "274f4b96-717e-4b44-ab78-52b5c48dc3e6"
        },
        "item": {
          "id": "d5ce89e6-2d71-497c-8257-c4b96dd5fed3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9e94ce9e-b44b-4221-898a-d2e036339b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7defa0ce-8fe9-4011-a72a-518317e309f4",
        "cursor": {
          "ref": "cad725a8-3205-4c9d-8893-1b0d906db172",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "19b05c93-40f1-4cc7-a719-639b78e72f5a"
        },
        "item": {
          "id": "7defa0ce-8fe9-4011-a72a-518317e309f4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e7329d1f-4bea-411f-bb60-7b2b8a4202b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c31063d-3161-4614-99bb-57b00ddec581",
        "cursor": {
          "ref": "8ef9b40a-c9ad-42bb-828e-4049e0d05c11",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "46157797-5638-49d4-a11f-01ba71db3920"
        },
        "item": {
          "id": "2c31063d-3161-4614-99bb-57b00ddec581",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ed28b3de-b765-4a76-8286-92c383295ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6d6efa-8e7c-4684-8718-7a2d6171d3f2",
        "cursor": {
          "ref": "5f12f084-6b03-4255-83b9-5658eed49eaa",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "32479201-f112-4fde-b4dd-7894b434d15f"
        },
        "item": {
          "id": "ab6d6efa-8e7c-4684-8718-7a2d6171d3f2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "35562a49-7379-47bb-b3e2-902ee2faec67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5e2f33-4e08-4ecb-85e4-ef13961473a6",
        "cursor": {
          "ref": "5f258b3d-bb0d-4e2e-900a-1926ba92fcce",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "12bcd18e-390e-4194-8f2f-c8165f476bd8"
        },
        "item": {
          "id": "ad5e2f33-4e08-4ecb-85e4-ef13961473a6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "da3f55cc-57b0-4da9-8475-40539fdabf84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97046e38-8386-45c5-90bf-c1f0e5e42b18",
        "cursor": {
          "ref": "1042f695-8306-4681-9742-0042ac1eaf59",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "8ac71c0f-d7de-4c27-ba4f-d3819495d7b7"
        },
        "item": {
          "id": "97046e38-8386-45c5-90bf-c1f0e5e42b18",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1b34e50-fc1f-46a0-bce5-b8ff662a0207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c996fff4-fb3d-48b5-8453-c77b1e86540b",
        "cursor": {
          "ref": "19392af8-9136-4864-aba6-685bf81c5d6a",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ec80cb44-2ab7-4d3f-add5-4d00dddfc8f2"
        },
        "item": {
          "id": "c996fff4-fb3d-48b5-8453-c77b1e86540b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "37cbb83e-282b-45b5-9b2b-9cd495827e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85f011ee-e3e6-4f82-a6ee-c23232f9b3f9",
        "cursor": {
          "ref": "933b50f5-bd1a-46d1-90ce-e5a207935343",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bb92c469-71ca-4aaf-8a7d-8c04dde0cec0"
        },
        "item": {
          "id": "85f011ee-e3e6-4f82-a6ee-c23232f9b3f9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "49670616-b1ca-484b-a19c-0e6ed51c9fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b62e58a-c57b-41ea-8e2f-6df2fda0452f",
        "cursor": {
          "ref": "c0e58653-71b8-4af2-8e2f-94bc6aa4bb4c",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4185136d-4aa8-47e6-ba3c-1c0f0ae633d0"
        },
        "item": {
          "id": "5b62e58a-c57b-41ea-8e2f-6df2fda0452f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "117c55dc-d22e-445b-952b-ef7405fd40a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd67cc8-9b54-43f7-8879-5ca2f495fbb5",
        "cursor": {
          "ref": "f3839281-cbf0-470c-8e02-39d0f598d1ce",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ea25d8a4-7dcb-4cd8-9d3b-0650851affe9"
        },
        "item": {
          "id": "5bd67cc8-9b54-43f7-8879-5ca2f495fbb5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "85f7e974-f0da-4535-a5b9-574e0490b8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d584d7d-224e-4ecb-9fe4-c0a13c0082dc",
        "cursor": {
          "ref": "600f038e-6ea7-4f8e-b029-9f4aeed11fb9",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fddc7458-633f-4abb-812d-10699c5da032"
        },
        "item": {
          "id": "2d584d7d-224e-4ecb-9fe4-c0a13c0082dc",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c0ecee0c-116b-4308-9846-64390f8c7bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320780a6-57f1-404a-9a12-fa4ee9158c5e",
        "cursor": {
          "ref": "cc1f6226-90d0-4c38-9083-efb311b47185",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0bbfdb7c-6a63-408b-96b9-ae58f5df6cc9"
        },
        "item": {
          "id": "320780a6-57f1-404a-9a12-fa4ee9158c5e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "33d974b2-3a9a-4e9c-86fa-5a90ba85273d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1b809b-bf78-4ae3-82a0-ff39d1236cb6",
        "cursor": {
          "ref": "62a01a1a-cde0-4c5e-a3f8-dc9c0558cca3",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "3a11340e-76a6-4cd2-8e63-ecd5549193ec"
        },
        "item": {
          "id": "cf1b809b-bf78-4ae3-82a0-ff39d1236cb6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "489bd033-e953-4d2b-bf72-92adc8d97238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3145bd-497a-4cef-a7d6-78c32d509a91",
        "cursor": {
          "ref": "d0bf6db3-b78e-4844-ab3c-392628376ff5",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "0fd167c0-2153-4f25-a66c-dea41082a929"
        },
        "item": {
          "id": "bc3145bd-497a-4cef-a7d6-78c32d509a91",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "32cc9ea7-ccd3-41bb-b00b-7b55fa22d5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ff81cc-5ec5-4c84-83eb-6c94cec42036",
        "cursor": {
          "ref": "cd97f7ed-f4dc-453d-9362-936ade663ac4",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "23dca9f8-397a-47d6-927f-a884a273c935"
        },
        "item": {
          "id": "49ff81cc-5ec5-4c84-83eb-6c94cec42036",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0f7fa999-0913-46da-b403-063fc7033583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cca3f60-a588-48e5-a823-0dce28c022d8",
        "cursor": {
          "ref": "4df7bebc-1711-47ea-85f8-6cab0fc09b44",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "946fd7bc-5941-4233-97bd-595e74ec687c"
        },
        "item": {
          "id": "7cca3f60-a588-48e5-a823-0dce28c022d8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "30e556bf-2d01-49b2-987e-43e95d6d0428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561b5851-399e-4c5b-a9bb-604f01ce0804",
        "cursor": {
          "ref": "fd79381d-cff5-473f-9197-e668ca1526ab",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3b3e2d72-89dc-4202-9447-5798110c48bb"
        },
        "item": {
          "id": "561b5851-399e-4c5b-a9bb-604f01ce0804",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1c92267c-f49d-4156-905c-2add6cfc5854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7954a78b-ab71-4ced-bdfe-3ce956ac439a",
        "cursor": {
          "ref": "eaa18643-574c-48be-81c9-65c4b429778a",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8c0e4882-98b0-4e2a-b152-560b7de514df"
        },
        "item": {
          "id": "7954a78b-ab71-4ced-bdfe-3ce956ac439a",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4d6ee4b6-d45e-4dbe-bf48-b9e40cdbf9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9649e8b2-5031-4200-b439-f1536fbc8910",
        "cursor": {
          "ref": "7b2e93a9-dfdd-4d1b-a6a8-13cf6c8f789f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ffec69d5-3f63-4cd1-93d0-37d852597ed4"
        },
        "item": {
          "id": "9649e8b2-5031-4200-b439-f1536fbc8910",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b55d7088-7276-4f8b-8d90-f825f28daaaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80759b9b-bd26-4305-9661-10c9f6278cc6",
        "cursor": {
          "ref": "85e73b4e-489e-4727-abe8-e7b9a557e9dc",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e83919b8-7a9c-4a7b-857e-b4e40397634c"
        },
        "item": {
          "id": "80759b9b-bd26-4305-9661-10c9f6278cc6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9decd050-49a1-4e32-ae4a-9c02e1ff3222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6439dac-b189-4c47-b8f4-771d0ca48053",
        "cursor": {
          "ref": "6454a0a3-18d7-4c67-80b4-6982bc0e0a51",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6841d3d4-8ccd-409e-a758-5b298f54d816"
        },
        "item": {
          "id": "d6439dac-b189-4c47-b8f4-771d0ca48053",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "daf1111c-d170-450f-bd44-6d8f72d7cf13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29cc54e5-93ae-4196-b994-2b7224ad63cb",
        "cursor": {
          "ref": "af3bfd66-271a-4e00-830e-c9c5396164e4",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "96321be2-ac43-46f1-8687-44784ba29748"
        },
        "item": {
          "id": "29cc54e5-93ae-4196-b994-2b7224ad63cb",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cf6f304b-1c6c-441e-82d3-8a0aa177a1c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082d6cee-ff5d-4fa0-b7a5-7523ffab1368",
        "cursor": {
          "ref": "08cd4add-97e1-4de7-894b-e11534ca288d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c2e38c69-c6c7-4df1-8183-fb8c0bacf6e1"
        },
        "item": {
          "id": "082d6cee-ff5d-4fa0-b7a5-7523ffab1368",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "93b35fec-f21d-42d8-bc94-2a1a68876849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f58cfd9-0831-43ee-969e-222d4c723b15",
        "cursor": {
          "ref": "a7401f57-aa7b-47cf-9cd6-1b27aeef7409",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "be503be6-9917-468f-a832-64a5cc1f9905"
        },
        "item": {
          "id": "3f58cfd9-0831-43ee-969e-222d4c723b15",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0c5a3c1e-6719-4348-812c-3570ba27a5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec47b9bf-7ac4-46d9-9be0-f3cfa3ee4fe2",
        "cursor": {
          "ref": "4ca237c4-e192-41e3-a7f4-a940657915bd",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ab0d248a-1322-4976-a6a1-736601d43a14"
        },
        "item": {
          "id": "ec47b9bf-7ac4-46d9-9be0-f3cfa3ee4fe2",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "45bbe88a-4e64-40f9-9b8d-e8d0dec3787e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9897f5d1-ef4b-4212-af9d-52d46d684f77",
        "cursor": {
          "ref": "0196d5ef-15cc-440a-8d0d-6d287dc04401",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "33006c79-104c-4647-9e6a-b476ef79ee67"
        },
        "item": {
          "id": "9897f5d1-ef4b-4212-af9d-52d46d684f77",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7a5c7867-c2ac-49ac-adb5-a2642dd6215f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71ae09e-eba6-466a-bd16-d8045bb082d6",
        "cursor": {
          "ref": "63db91b2-d5c6-4d91-b947-2c58eb637c73",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bc8b4a7e-af6c-4b74-8f93-b8178c19acbc"
        },
        "item": {
          "id": "c71ae09e-eba6-466a-bd16-d8045bb082d6",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2f7b9b0a-6c88-4268-9f75-7c117a1dc5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3acf7fa4-4e94-4216-93d3-c98c8aa2461a",
        "cursor": {
          "ref": "f4b96fb6-c003-456b-9d5b-15ba653c018a",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "87c9b11f-7602-42da-a054-a163ccd30426"
        },
        "item": {
          "id": "3acf7fa4-4e94-4216-93d3-c98c8aa2461a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "71a50485-59f1-4b13-8ba1-3df13c590050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7fd228-ae5a-40a8-89f4-806ac07a0075",
        "cursor": {
          "ref": "7466d669-5905-4582-b573-24dbe3341cb4",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e7424e71-27b4-4f2e-9e9b-d182c0c33d44"
        },
        "item": {
          "id": "9a7fd228-ae5a-40a8-89f4-806ac07a0075",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6780ddac-cb5f-4c96-911c-eadb296f7f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a4e45e-07c8-4acd-9d98-79a69790f24a",
        "cursor": {
          "ref": "c4beed89-e6c4-454f-98aa-54f52cbfb3b8",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5276b835-40e1-44b0-8f88-ce0a8be734fd"
        },
        "item": {
          "id": "47a4e45e-07c8-4acd-9d98-79a69790f24a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "020811c9-cd1b-46fa-8dbb-d6b10f8ffdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11e0329-0243-4ba5-a7fc-aab20a32be0b",
        "cursor": {
          "ref": "59f77b42-8faf-4d9a-8041-1f82ac1f2f58",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7776bb50-7c39-41f2-8958-dea1d6c63b93"
        },
        "item": {
          "id": "b11e0329-0243-4ba5-a7fc-aab20a32be0b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7620aa4f-f6a7-446b-8b3f-947d2094ff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb98c24-3a90-46e0-b77f-965d2c5068e2",
        "cursor": {
          "ref": "46fad5d1-044e-4570-9ae1-e157827748b6",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c263fb92-e3f7-4ddc-9c3a-e10179154f2e"
        },
        "item": {
          "id": "1eb98c24-3a90-46e0-b77f-965d2c5068e2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b9595e80-41e2-4b5e-9ffb-a126b5aef9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e01ccd-c2cd-4559-851e-6b28e1da126e",
        "cursor": {
          "ref": "b57cbf04-79dc-45a5-8308-c5018e74c048",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c862dccc-8915-448f-92fe-cdce87fc4377"
        },
        "item": {
          "id": "94e01ccd-c2cd-4559-851e-6b28e1da126e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "dc0bac57-520f-435d-9adf-226a711b620e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca62073-12c9-4ab5-8944-5c518f374918",
        "cursor": {
          "ref": "cafcdcb3-159a-403b-8258-a24a1abd8682",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "231488e3-918a-4527-ad2e-4c6c4128f04d"
        },
        "item": {
          "id": "3ca62073-12c9-4ab5-8944-5c518f374918",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f49acfea-632e-4013-8d31-048e4ab3044a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4b0614-1c96-462c-ac40-590b6f0a5839",
        "cursor": {
          "ref": "99c9741d-e337-4a04-aefd-f7852630431c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "648258e0-612f-4d79-ac5f-6fb6242d52e1"
        },
        "item": {
          "id": "ee4b0614-1c96-462c-ac40-590b6f0a5839",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "94d22ea8-fd82-445c-9dc1-e5c3b4888735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22b1c201-03b6-4e4c-9c0d-8b22d02c03ac",
        "cursor": {
          "ref": "432914bf-642e-4b54-af77-2706c221549c",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e75272c5-e88a-41d2-9133-a5fb9fa33b54"
        },
        "item": {
          "id": "22b1c201-03b6-4e4c-9c0d-8b22d02c03ac",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "56ffd20a-b0ef-470b-965c-07df2ed13d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc59b898-a4ba-4065-8e7f-5292b7076136",
        "cursor": {
          "ref": "aad21829-97bc-4cec-afff-c44900d689cf",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "55f27118-1b0e-4cc5-8377-326adf572322"
        },
        "item": {
          "id": "fc59b898-a4ba-4065-8e7f-5292b7076136",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "08772384-ca2d-4ded-94cd-a554c0d940b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c067216-b97b-4403-b4cd-dce4ff9f0611",
        "cursor": {
          "ref": "88c6f764-5ade-46f3-be6e-a03b0ea6f5cb",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "03e1cac5-ab80-4ac9-a894-d3ab4a262005"
        },
        "item": {
          "id": "9c067216-b97b-4403-b4cd-dce4ff9f0611",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b50b18db-29a0-40bc-945e-7216120aaca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6264937d-6ee3-4eac-99c8-b92a6cc5ce1a",
        "cursor": {
          "ref": "d810ff21-3862-436f-b298-88f6a7e34e44",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e3e49926-7831-4892-a742-6c48a078515f"
        },
        "item": {
          "id": "6264937d-6ee3-4eac-99c8-b92a6cc5ce1a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5f0815d7-b2f7-48bc-bc59-c3a6b39505d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b208ec5-84f2-4317-a078-1650da3c5459",
        "cursor": {
          "ref": "29349d47-3a0e-44aa-9fac-437124fcf190",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "708960d1-aa9d-4fb6-8609-44000ee078b4"
        },
        "item": {
          "id": "2b208ec5-84f2-4317-a078-1650da3c5459",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "73b556ab-5a73-4260-8edf-a167bfc04eec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e37c5d-3ce9-4351-a4f0-92adc0c6282f",
        "cursor": {
          "ref": "78671520-1f59-4ff9-8b6e-669583e07e8a",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e9df0fd8-04ab-4f3c-a614-74a5b29dfe17"
        },
        "item": {
          "id": "88e37c5d-3ce9-4351-a4f0-92adc0c6282f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f537b416-fc78-4c68-a0d7-fa05c866a5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31310b50-3206-492b-a4be-2974e9e00337",
        "cursor": {
          "ref": "189dcebd-e82c-4738-b305-aea9f5ad143f",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "46dd2896-03fd-47d1-b769-4e3d4ca472e3"
        },
        "item": {
          "id": "31310b50-3206-492b-a4be-2974e9e00337",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "089ed8c8-5544-46e5-bcd1-2e48015085fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd520b88-b323-4b10-8a1d-411b99e487a5",
        "cursor": {
          "ref": "72738ee3-e006-4622-8222-65018a7861c7",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a5524280-52cf-4a15-a1ff-9e38c6b8a69d"
        },
        "item": {
          "id": "fd520b88-b323-4b10-8a1d-411b99e487a5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7701d02d-9e2c-4218-b804-e3b3aa6d55c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8b0747-fe19-497e-aa19-2189065ffcfa",
        "cursor": {
          "ref": "3e27a7c5-1e86-4631-b9cd-e563fa8a1722",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1b1a59bd-1a51-4da7-9b84-4ce9569e52cd"
        },
        "item": {
          "id": "eb8b0747-fe19-497e-aa19-2189065ffcfa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6b9ec1ab-1dc9-4280-a0d0-de07b0537fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a9ffdc-0b27-4739-998b-3d73765b9169",
        "cursor": {
          "ref": "c08a8ad3-6bb4-44aa-be52-02d4365b96a7",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "93a6bef7-2a0a-4d77-8bbf-72388335d9e2"
        },
        "item": {
          "id": "07a9ffdc-0b27-4739-998b-3d73765b9169",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cb443fa7-e3ba-4094-9561-33014cbdebf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09680ad3-7501-4e38-9554-1ac018022010",
        "cursor": {
          "ref": "f9f4e81c-1b1e-4e32-8050-19f539384c23",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d9a26ed2-4ad9-4ab1-a451-cb8bb08a666e"
        },
        "item": {
          "id": "09680ad3-7501-4e38-9554-1ac018022010",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9c644f1b-ebcd-4b85-8c2e-210e7c810be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e6245e-0c60-49da-8596-e6e6835756a8",
        "cursor": {
          "ref": "14dd8e8a-a8b7-480b-8f92-8817d102f5d4",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "953584b5-4b45-4235-980c-02c4da8ef68d"
        },
        "item": {
          "id": "84e6245e-0c60-49da-8596-e6e6835756a8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "80b1cff6-7ced-406f-b12b-5f2833ada8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac4ec7a-a431-495a-9d08-ca902981271d",
        "cursor": {
          "ref": "083c8f29-1537-4407-986f-53b1a2864300",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8244f7f7-dc4a-44cf-8275-742f887653af"
        },
        "item": {
          "id": "2ac4ec7a-a431-495a-9d08-ca902981271d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b6a9e495-4638-40ea-89d9-f7d9b7686fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498b551f-3157-4fcf-bd8d-e9b36ff04d75",
        "cursor": {
          "ref": "17a7d69e-c5cc-472e-ba4f-7793fb1f7675",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4fdbfa5f-78e1-46bf-9b57-ce561137e6ba"
        },
        "item": {
          "id": "498b551f-3157-4fcf-bd8d-e9b36ff04d75",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0c8d9d65-8e1a-4c36-b288-7348d84b9822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ebe218-eb87-42c4-acc9-0a7631e12486",
        "cursor": {
          "ref": "6114e775-d9e2-4175-a682-cb728053fd97",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "53ff4242-f890-449d-9c7d-c4f220803476"
        },
        "item": {
          "id": "32ebe218-eb87-42c4-acc9-0a7631e12486",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7b43dcad-9936-4b48-93fb-d9b4b30dbd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c894fe-1b1a-4e57-844d-9850cb834aed",
        "cursor": {
          "ref": "c57e05dc-9718-4c17-8d6d-30bf51b5d07b",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4fc64c68-9610-43de-b3aa-f4ccf78547ad"
        },
        "item": {
          "id": "19c894fe-1b1a-4e57-844d-9850cb834aed",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4bcb76a9-44e9-4ac7-92fb-c7e85fb12a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a26585-9445-4882-875e-56e903a672a0",
        "cursor": {
          "ref": "9f771881-7e6d-4940-b471-f32cdd7a45e1",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b95c2beb-580f-4ef6-be2c-651ba4599b23"
        },
        "item": {
          "id": "b6a26585-9445-4882-875e-56e903a672a0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f22e0c04-dc60-446c-8881-c71edcafffde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c9e49c-c862-48b2-902d-701b842fafb4",
        "cursor": {
          "ref": "9fe2d87c-a2b0-464d-a350-beb6fb4cfb6b",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "064576d4-ece1-4adb-b8fd-8b8f38844f37"
        },
        "item": {
          "id": "73c9e49c-c862-48b2-902d-701b842fafb4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1132b7b7-c3d7-4fb1-8d39-6453ef103f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f42c59f-5a62-4bd6-9270-a24f84b618b8",
        "cursor": {
          "ref": "d8656011-1cb6-46bb-90d3-4aa5c31cb762",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d7761ff0-86eb-4cae-94d0-65c2a8ef7bb2"
        },
        "item": {
          "id": "9f42c59f-5a62-4bd6-9270-a24f84b618b8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "92fd5c85-d013-4cd3-902d-0af8ef25c14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af70ec96-16ec-4737-896d-95266473f336",
        "cursor": {
          "ref": "b92b621e-5a0f-4f00-b01e-3d7f52f4e069",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ede5fce5-0be0-4389-afec-a2a7c921395c"
        },
        "item": {
          "id": "af70ec96-16ec-4737-896d-95266473f336",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "23edc2e2-b179-4875-8003-aa9241225cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c064c42-2ce4-4a77-99a1-5a2ce725706b",
        "cursor": {
          "ref": "cfb97374-3b09-40e7-97d5-9dcab2e9b214",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c511c43d-e06a-4e21-ba13-75ca531b8ed7"
        },
        "item": {
          "id": "0c064c42-2ce4-4a77-99a1-5a2ce725706b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8ab894e1-c08c-406b-bb4d-f143871eac60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827151c3-78a7-4e42-b884-04a11b298b58",
        "cursor": {
          "ref": "a9820ede-c968-4c79-abf0-252c482357f0",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5c4d07ec-bf60-4e98-b2e1-b48a855ad5b4"
        },
        "item": {
          "id": "827151c3-78a7-4e42-b884-04a11b298b58",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a375e0f6-5970-42e2-9755-a88c96cad989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda565a1-0476-4fdc-ae84-91296a11cf02",
        "cursor": {
          "ref": "dc3dccf8-8222-4691-af17-bb114229b2ff",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a3646258-533a-4d64-acef-01108236fc2e"
        },
        "item": {
          "id": "bda565a1-0476-4fdc-ae84-91296a11cf02",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1faeb50b-df05-4c96-a1f3-ff125a51dcd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cb5497-1b3b-4044-9157-65753224dae6",
        "cursor": {
          "ref": "4d799b38-0baa-4803-95e7-cf1f487f8e21",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "06654bb9-18f2-4917-bc47-5c7d7908ac9a"
        },
        "item": {
          "id": "79cb5497-1b3b-4044-9157-65753224dae6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e61ad51b-4ac4-4576-ab66-315dd1b5851d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4348b78e-8450-4b00-bf1e-d6a0db3371ca",
        "cursor": {
          "ref": "89344aed-b20c-40d1-af73-f76e108032f6",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b2415a84-e538-47d6-9e0e-58718514efac"
        },
        "item": {
          "id": "4348b78e-8450-4b00-bf1e-d6a0db3371ca",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ad84643f-1f13-4665-ad7b-0bae7b5a7328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfa71f0-294c-4340-9964-b2a849552d67",
        "cursor": {
          "ref": "24c7c017-0039-4ac4-83f3-f57f527bbabb",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4b6f9466-0154-4eaf-a562-ee44068018a7"
        },
        "item": {
          "id": "ccfa71f0-294c-4340-9964-b2a849552d67",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "553d2055-1ad9-41e1-8ba8-eacb49d79cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abb52bb-28e7-472f-b021-e447d07820a4",
        "cursor": {
          "ref": "a488f886-7bf4-4701-ae0c-c6f13cc60248",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3650dff3-8bea-4959-8cf5-eae99a7a8e77"
        },
        "item": {
          "id": "1abb52bb-28e7-472f-b021-e447d07820a4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "bc0e0a86-bd04-4b4a-8de1-8aa4841661bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8cab2fd-416c-47c7-a316-5217a591bc2b",
        "cursor": {
          "ref": "9eceb13d-45a0-45ed-8a13-0cc64af0b91a",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "42d27f32-2f82-4f8f-a9fa-7dec76abd532"
        },
        "item": {
          "id": "a8cab2fd-416c-47c7-a316-5217a591bc2b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8f8c51ba-e2cd-47be-b1b6-dbcf34ccc195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9872c51-108d-41fd-b3d8-93dfd28f6c4b",
        "cursor": {
          "ref": "e05c2cca-0f9f-4676-b3fe-60fdf41d314b",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "976a7671-c945-45cd-af57-4b6b071bbca8"
        },
        "item": {
          "id": "d9872c51-108d-41fd-b3d8-93dfd28f6c4b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a422efe2-009f-4c9e-b02e-4cfb429b1958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc6d35d-e8c9-432e-9ea3-353f89d0f931",
        "cursor": {
          "ref": "23bf4d43-587c-4930-9f28-3216c4f1618e",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1861b564-ebba-4a20-98c2-fd31325b45df"
        },
        "item": {
          "id": "7bc6d35d-e8c9-432e-9ea3-353f89d0f931",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "0872788a-dea4-4a05-8813-18212aa52242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0dc8c77-51a4-4069-bff0-4299fac09616",
        "cursor": {
          "ref": "34bbbc5f-f991-4ebc-b4cc-ceaf2cad65c2",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6ea95f11-27e8-4946-8596-cf7d9fee35e3"
        },
        "item": {
          "id": "f0dc8c77-51a4-4069-bff0-4299fac09616",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "18bac9ba-2db7-46cb-973e-fba49ef4c3e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f094f05c-6130-4ac6-b757-9e10816401a0",
        "cursor": {
          "ref": "4524fc37-a741-4884-aee4-f8415ecfc2f2",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "00f07196-936d-4288-ab83-dae8f2c976c8"
        },
        "item": {
          "id": "f094f05c-6130-4ac6-b757-9e10816401a0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "72429116-4d0d-4104-85ad-c4e70d9e490f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b6a839-33ad-4cf0-9d71-caa1ab8795f9",
        "cursor": {
          "ref": "c3dc309f-16e2-42d1-83b3-bf7064ce9d94",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "625abbc8-ba26-4f16-9884-92254842dd4b"
        },
        "item": {
          "id": "40b6a839-33ad-4cf0-9d71-caa1ab8795f9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d4482f61-751e-4ea8-bd21-a8b545b2c95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162f5b06-5b61-4fc3-82e8-ced9faf3de79",
        "cursor": {
          "ref": "eeee9796-93e4-469b-9b5f-3b80c36eea8d",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "88495798-52a9-43fa-b814-7d70f9d4d1aa"
        },
        "item": {
          "id": "162f5b06-5b61-4fc3-82e8-ced9faf3de79",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3611c25d-05c5-4104-8842-1d257225d373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a81fdc75-0348-48ce-9ca8-54c500ca87a5",
        "cursor": {
          "ref": "745cc61b-1dec-4b4c-9525-8b05d8ccb3de",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "106735e1-60c4-4ac7-93a1-124126f4021d"
        },
        "item": {
          "id": "a81fdc75-0348-48ce-9ca8-54c500ca87a5",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "da0e38cc-0b3c-4e7c-9602-1a1ba85897b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "07e48d10-e15f-4d63-9996-dbae53dc5f94",
        "cursor": {
          "ref": "beb551c8-926a-453d-8a2a-4faf8589a3b0",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "772aa6f4-a631-4e41-93c3-4205f3851d3f"
        },
        "item": {
          "id": "07e48d10-e15f-4d63-9996-dbae53dc5f94",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "972f8ff5-df8c-41a0-aa1e-ee57a63268c7",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "242c860e-f2fa-4f0c-b3fc-f1eec9e8b8b0",
        "cursor": {
          "ref": "55704f6c-4365-4844-9bbd-d1ff9b600f59",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0415c39a-1668-4895-a8b1-d25a24ba754b"
        },
        "item": {
          "id": "242c860e-f2fa-4f0c-b3fc-f1eec9e8b8b0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bee5ae8f-48c9-4287-ad43-7c66b40b8978",
          "status": "OK",
          "code": 200,
          "responseTime": 1680,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "81216c24-95df-4447-b5f0-f61a4b5ab7ab",
        "cursor": {
          "ref": "c8660558-4683-42f8-9f51-c03cfb1a4a8e",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "91815c51-0ed7-4b62-a492-cdb87f164358"
        },
        "item": {
          "id": "81216c24-95df-4447-b5f0-f61a4b5ab7ab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "03ad1ced-bafc-4968-9f5c-b34fcd17e50f",
          "status": "OK",
          "code": 200,
          "responseTime": 2312,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
        "cursor": {
          "ref": "727748d8-70d3-4a36-a1a8-32291d4b0fd2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9bd21e1-d87e-42d4-ab1f-a6cb5fab5f1e"
        },
        "item": {
          "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5dfd9f60-deac-4d5a-b579-784e98754124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
        "cursor": {
          "ref": "727748d8-70d3-4a36-a1a8-32291d4b0fd2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9bd21e1-d87e-42d4-ab1f-a6cb5fab5f1e"
        },
        "item": {
          "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5dfd9f60-deac-4d5a-b579-784e98754124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
        "cursor": {
          "ref": "727748d8-70d3-4a36-a1a8-32291d4b0fd2",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c9bd21e1-d87e-42d4-ab1f-a6cb5fab5f1e"
        },
        "item": {
          "id": "5a1fdbf5-5be2-42e5-9a56-7a099c918bf0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "5dfd9f60-deac-4d5a-b579-784e98754124",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "5f866bca-a5f9-4648-ac3d-72a3bdaffa09",
        "cursor": {
          "ref": "91c3715f-ef35-4d4d-9288-fdff72661c88",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4df16970-d936-4c34-8791-b7a55b8e5815"
        },
        "item": {
          "id": "5f866bca-a5f9-4648-ac3d-72a3bdaffa09",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "fe194506-f2a1-482c-943d-e86e35bda3eb",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7f36ae44-aae9-474e-a9e4-52b7f5b7d659",
        "cursor": {
          "ref": "c1f77c0c-6728-48bb-a342-d4df9a28dc5a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4030b5ec-8c9b-4c50-8105-867c50a1cb14"
        },
        "item": {
          "id": "7f36ae44-aae9-474e-a9e4-52b7f5b7d659",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "43fd7409-a10f-41b5-b697-1d2cbba9feca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7f36ae44-aae9-474e-a9e4-52b7f5b7d659",
        "cursor": {
          "ref": "c1f77c0c-6728-48bb-a342-d4df9a28dc5a",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4030b5ec-8c9b-4c50-8105-867c50a1cb14"
        },
        "item": {
          "id": "7f36ae44-aae9-474e-a9e4-52b7f5b7d659",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "43fd7409-a10f-41b5-b697-1d2cbba9feca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "76e3a6a1-b982-4035-b5e6-ee61ca538dff",
        "cursor": {
          "ref": "dc6939fd-83f9-4fc3-bdb1-23531243e587",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e1bd3844-6a78-4eff-92a2-24170a43ccf5"
        },
        "item": {
          "id": "76e3a6a1-b982-4035-b5e6-ee61ca538dff",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6060757e-1e55-4564-876c-08fdd0211908",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 148,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8a1d2f85-edc2-4ff1-991a-0f968ba0baeb",
        "cursor": {
          "ref": "503464b3-9a88-4a44-b1d9-ccd496c9ab6a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7c5720dc-4c72-440f-9595-5c0b08d16a3e"
        },
        "item": {
          "id": "8a1d2f85-edc2-4ff1-991a-0f968ba0baeb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e0d8b9c3-2a12-4ceb-b848-4460f6e50a66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8a1d2f85-edc2-4ff1-991a-0f968ba0baeb",
        "cursor": {
          "ref": "503464b3-9a88-4a44-b1d9-ccd496c9ab6a",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7c5720dc-4c72-440f-9595-5c0b08d16a3e"
        },
        "item": {
          "id": "8a1d2f85-edc2-4ff1-991a-0f968ba0baeb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e0d8b9c3-2a12-4ceb-b848-4460f6e50a66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b16315c1-aea3-467d-8676-9d9f08fed732",
        "cursor": {
          "ref": "b99b654d-6dca-497a-96bb-47c5a4c761b5",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a39ae7c7-3c01-4c6e-87ca-3bf7188d891d"
        },
        "item": {
          "id": "b16315c1-aea3-467d-8676-9d9f08fed732",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6d4d6778-b4d5-4a7d-a093-c03d2f3bde9b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}